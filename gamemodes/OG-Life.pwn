#define CGEN_MEMORY (1024 * 32)
#define MAX_JOBS 16
#define MAX_HOUSES 100
#define MAX_BUSINESS 100
#define MAX_LOCATIONS 17
#define MAX_CLANS 50

#define YSI_NO_CACHE_MESSAGE
#define YSI_NO_OPTIMISATION_MESSAGE
#define YSI_NO_VERSION_CHECK
#define YSI_NO_HEAP_MALLOC
#define YSI_NO_MODE_CACHE

#define FOREACH_NO_LOCALS
#define FOREACH_NO_BOTS

#include <a_samp>
#undef 	MAX_PLAYERS
#define MAX_PLAYERS 100
#undef 	MAX_VEHICLES
#define MAX_VEHICLES 500
#include <a_mysql>
#include <YSI_Coding\y_timers>
#include <streamer>
#include <sscanf2>
#include <a_zones>
#include <beaZone>
#include <fly>
#include <md5>
#include <progress2>
#include <Pawn.CMD>
#include <YSI_Coding\y_stringhash>
#include <mapping.inc>
#include <crashdetect>
#include <BigInt>

#define GetDynamicObjectModel(%0) Streamer_GetIntData(STREAMER_TYPE_OBJECT, %0, E_STREAMER_MODEL_ID)
#define IsAndroidPlayer(%0) GetPVarInt(%0, "AndroidPlayer") == 1

new
	server_goal = 0, bool: JobWorking[MAX_PLAYERS], neon1[MAX_VEHICLES] = -1, neon2[MAX_VEHICLES] = -1, fastevent[64] = "None", fasteventpremiu = -1, Text:FoodTD[2],
	Text: FishTD[2], PlayerText: FishPTD[6], Text:SpinnTD[3], PlayerText:SpinnPTD[5], Text: GiftTD, PlayerText: GiftPTD[2], Text:TriviaTD, PlayerText:TriviaPTD[5],
	Text:GunTD[4], PlayerText:GunPTD[2], Text:BGTD[5], Text:GlobalGoalTD, Text:RuletaTD[12], Text:MilestoneTD[8], Text:PinTD[13], PlayerText:PinPTD, DeelayGov[9],
	Text:PhoneTD[23], Iterator: FactionMembers[9]<MAX_PLAYERS>, PlayerText:DmgPTD[2], Timer: DmgTimer[MAX_PLAYERS][2], VipTextObject[MAX_VEHICLES], Text:TuningTD[5],
	PlayerText:TuningPTD[2], Iterator: Nearby[MAX_PLAYERS]<MAX_PLAYERS>, Iterator: WithJob[MAX_JOBS + 1]<MAX_PLAYERS>, Iterator: WithFpsText<MAX_PLAYERS>,
	InJobZone[MAX_PLAYERS], InBusinessZone[MAX_PLAYERS], InHouseZone[MAX_PLAYERS], InLocationZone[MAX_PLAYERS], LocationArea[MAX_LOCATIONS], InFactionZone[MAX_PLAYERS],
	InGarageZone[MAX_PLAYERS], bool: InSpawnArea[MAX_PLAYERS], AtmArea[11], InAtmZone[MAX_PLAYERS], InTurfZone[MAX_PLAYERS], InSfvZone[MAX_PLAYERS],
	Iterator: AtEvent<MAX_PLAYERS>, ClanGarageArea[MAX_CLANS], InClanGarageZone[MAX_PLAYERS], ClanTurfsArea[11], InClanTurf[MAX_PLAYERS],
	Iterator: ClanZonesWithDeelay<11>, InsulaSkywars[4], Iterator: Leaders<MAX_PLAYERS>, Iterator: Vips<MAX_PLAYERS>, Iterator: Premiums<MAX_PLAYERS>,
	Iterator: InClan[MAX_CLANS]<MAX_PLAYERS>, Iterator: PcPlayers<MAX_PLAYERS>, Iterator: AndroidPlayers<MAX_PLAYERS>, Iterator: Reports<MAX_PLAYERS>, Iterator: WithFreq[10000]<MAX_PLAYERS>,
	RainbowStep[MAX_VEHICLES], Iterator: RainbowVehicles<MAX_VEHICLES>, LastColor1[MAX_VEHICLES], LastColor2[MAX_VEHICLES], LastHAnno, MCastigatiRuleta, CastigatiRuleta, PierdutiRuleta,
	MPierdutiRuleta, Text: SlotsTD[17], PlayerText: SlotsPTD[9], SlotsArea[6], InSlotsZone[MAX_PLAYERS], SlotsBet[MAX_PLAYERS], SlotsDate[MAX_PLAYERS], Iterator: InCasinoSlots<MAX_PLAYERS>,
	ObjectSlots[MAX_PLAYERS][3][3], TypeSlots[9] = {954, 1240, 1241, 1247, 1254, 1274, 1276, 1314, 18631}, InRuletaZone[MAX_PLAYERS], PierdutiSlots, MPierdutiSlots, CastigatiSlots,
	MCastigatiSlots, JobCheckpoint[MAX_PLAYERS], Iterator: InParkour<MAX_PLAYERS>, WeaponObjects[MAX_PLAYERS][12], bool: InWeaponExam[MAX_PLAYERS], WeaponShots[MAX_PLAYERS][12],
	Text: GiftBoxTD, PlayerText: GiftBoxPTD, GiftObject[MAX_PLAYERS], GiftHP[MAX_PLAYERS], DailyJob, InBillboardZone[MAX_PLAYERS], Text:FragmentTD[4], PlayerText:FragmentPTD[2],
	Text:LuckyTD[5], PlayerText:LuckyPTD[3], Iterator: InLucky<MAX_PLAYERS>, LuckyStep[MAX_PLAYERS], LuckyObject[MAX_PLAYERS][3], SelectedFragment[MAX_PLAYERS], InClanHQZone[MAX_PLAYERS],
	InClanHQ[MAX_PLAYERS], StuntVehicle[MAX_PLAYERS], Iterator: InStunt<MAX_PLAYERS>, StuntTime[MAX_PLAYERS], PlayerText: StuntPTD, RandomWord[MAX_PLAYERS], Float: DamageDrop[MAX_PLAYERS],
	LuckyType[MAX_PLAYERS], LuckyMoney[MAX_PLAYERS], CastigatiLucky, MCastigatiLucky, PierdutiLucky, MPierdutiLucky, Text: UpgraderTD[8], PlayerText: UpgraderPTD[4],
	UpgradeType[MAX_PLAYERS], UpgradeAmount[MAX_PLAYERS], UpgradePower[MAX_PLAYERS], CastigatiUpgrader, PierdutiUpgrader, MCastigatiUpgrader, MPierdutiUpgrader, CastigateUpgrader,
	PierduteUpgrader, Text: InventoryTD[28], PlayerText: InventoryPTD[9], InventoryPage[MAX_PLAYERS], GunShopSelected[MAX_PLAYERS], bool: RainbowOn[MAX_VEHICLES],
	StuntObjects[MAX_PLAYERS][26], Text: CrateTD, PlayerText: CratesPTD[13], StuntPickup[MAX_PLAYERS], DamageCombos[MAX_PLAYERS][MAX_PLAYERS], bool: FreezedPlayer[MAX_PLAYERS],
	LastWeapon[MAX_PLAYERS], WarOnTurf, ArmaPePickup[1000], GloantePePickup[1000], SecondsOnTurf[MAX_PLAYERS], Text: FinishWarTD[17], PlayerText: FinishWarPTD,
	bool: InFinishWarTD[MAX_PLAYERS], Timer: TimerLeaveTurf[MAX_PLAYERS], bool: CalledLeave[MAX_PLAYERS], Timer: RemoveFromWarVehicle[MAX_PLAYERS],
	bool: NeedRemoveFromWarVehicle[MAX_PLAYERS], Text: DealerShipTD[7], PlayerText: DealerShipPTD[3], DealerShipSelected[MAX_PLAYERS], DealerShipRotation[MAX_PLAYERS],
	FarmerObjects[MAX_PLAYERS][20], FarmerCheckpoint[MAX_PLAYERS], bool: FarmerApples[MAX_PLAYERS], bool: FarmerMilk[MAX_PLAYERS], HealRequest[MAX_PLAYERS], MedRequest[MAX_PLAYERS],
	DrinkRequest[MAX_PLAYERS], FoodRequest[MAX_PLAYERS], GlovoAccepted[MAX_PLAYERS], Text: BattlepassTD[10], PlayerText: BattlepassPTD[26],
	PlayerBar: BattlepassBar, BattlepassPage[MAX_PLAYERS], Text: DiceTD[3], PlayerText: DicePTD[6], DicePartner[MAX_PLAYERS], Iterator: MovingDice<MAX_PLAYERS>, MovingDiceID[MAX_PLAYERS],
	MovingDiceStep[MAX_PLAYERS], DiceNumber[MAX_PLAYERS][2], bool: DiceRolled[MAX_PLAYERS][2], AtRentBiz[MAX_PLAYERS], bool: GivedBonus, Text: ClothingStoreTD[4],
	PlayerText: ClothingStorePTD[3], bool: MoneyBar[MAX_PLAYERS], DDActualCP[MAX_PLAYERS], DDealerObjects[MAX_PLAYERS][10], bool: BarLevel[MAX_PLAYERS], MethAmouth[MAX_PLAYERS],
	StartTime, FinishTime, LoginTries[MAX_PLAYERS], Text: PerkMenuTD[22], bool: PerkActive[MAX_PLAYERS][39], TureJobToday[MAX_PLAYERS],
	TureArmsToday[MAX_PLAYERS], TureDrugToday[MAX_PLAYERS], KPaintToday[MAX_PLAYERS], bool: CursaLungaTrucker[MAX_PLAYERS], bool: VehicleWithStage[MAX_VEHICLES], 
	GiftsToday[MAX_PLAYERS], Text: CategoryPerksTD[2], PlayerText: CategoryPerksPTD[18], Text: PerkDetailsTD[7], PlayerText: PerkDetailsPTD[5], PerkDetailsID[MAX_PLAYERS],
	DailyQuests[7] = {0, ...}, TodayDailyQuest = 0, DailyQuestsName[7][20] = {"Drug Mania", "Escape Master", "Highlands Circuit", "Heated Rural Roads", "Sandy Hot Wheels", "SF Countryside Tour", "Boat Delivery"},
	Iterator: PossibleQuests<8>, RaceTime[MAX_PLAYERS], Iterator: InRaceQuest<MAX_PLAYERS>, RaceType[MAX_PLAYERS], BankSafe[MAX_PLAYERS], ShotsSafe[MAX_PLAYERS],
	HeistsObjects[MAX_PLAYERS][12], PlayerQuestionsTrivia[MAX_PLAYERS][10], CurrentQuestion[MAX_PLAYERS], Float: LastVehKM[MAX_VEHICLES], TureJobs[MAX_VEHICLES][18],
	GarageSpawn[MAX_PLAYERS][20], LastWT[MAX_PLAYERS], LastPC[MAX_PLAYERS], InHuntArea[MAX_PLAYERS], GiftHuntObject[100], AreaGiftHunt[100], bool: GiftHuntCollected[100],
	LastHealme[MAX_PLAYERS], LastRandomMsg, LastRandomMsgType, TutorialStep[MAX_PLAYERS], Float: KmTrucker[MAX_PLAYERS], Iterator: PossibleContructor[MAX_PLAYERS]<10>,
	SkinClothing[MAX_PLAYERS], Text: MySkinsTD[4], PlayerText: MySkinsPTD[3], MySkinsSlot[MAX_PLAYERS], SelectedSkin[MAX_PLAYERS], Text3D: StatusLabel[MAX_PLAYERS],
	StatusDialog[MAX_PLAYERS][MAX_JOBS + 1], Float: LastVehicleHealth[MAX_VEHICLES]
;

new BigInt:PlayerCash[MAX_PLAYERS];
new BigInt:PlayerBank[MAX_PLAYERS];
new BigInt:DealerShipPrice[100];
new BigInt:DealerShipPrice97[100];
new BigInt:DealerShipPrice95[100];
new BigInt:DealerShipSell[100];
new BigInt:DealerShip75Sell[100];
new BigInt:BidMoney;

new
	Float: RandomArms[10][3] =
	{
		{2514.3950, -1241.1006, 39.0223},
		{2770.7925, -1628.2506, 12.1775},
		{1974.9733, -1634.2800, 16.2111},
		{1761.3619, -2124.7339, 14.0566},
		{1186.5138, -1226.8899, 22.1329},
		{304.7812, -1770.9099, 4.5371},
		{648.1139, -1536.7528, 15.1061},
		{1004.4683, -1431.6031, 13.5469},
		{1111.4906, -975.6707, 42.7656},
		{1832.7833, -1125.3745, 24.6721}
	},
	Float: RandomForklift[3][3] =
	{
		{2770.5703, -2417.5144, 13.6364},
		{2770.4050, -2455.3838, 13.6432},
		{2770.1638, -2493.9668, 13.6718}
	},
	Float: RandomContructor[10][3] =
	{
		{2402.1975, 654.3676, 11.4609},
		{2010.8569, 774.2513, 11.4609},
		{2825.2729, 2140.9915, 14.6615},
		{2032.4757, 2758.6614, 10.8203},
		{1665.4653, 2569.4778, 11.2989},
		{1223.8302, 2616.7625, 10.8203},
		{886.6658, 2044.1687, 11.4609},
		{1029.1455, 1872.2668, 11.4688},
		{2620.2795, 713.3668, 14.7396},
		{2572.4697, 713.2650, 14.7396}
	},
	Float: LumberJackCps[5][3] =
	{
		{2372.9561, -666.1514, 128.9274},
		{2360.0613, -626.1315, 127.3145},
		{2352.1890, -615.1119, 127.0713},
		{2349.2917, -678.3763, 133.4339},
		{2328.6343, -724.1745, 130.9017}
	},
	Float: GiftHuntPos[100][3] =
	{
		{577.03375, 871.79022, -44.26825},
		{507.97668, 1110.83777, 14.18736},
		{187.82286, 1372.22815, 23.07801},
		{13.36429, 1381.86975, 8.50234},
		{386.03833, 2610.37598, 15.81688},
		{147.12608, 2619.61938, 15.81727},
		{-143.85204, 2688.66504, 61.64982},
		{-229.73363, 2815.93115, 61.54184},
		{-291.18976, 2672.36377, 61.92904},
		{-604.79199, 2714.79834, 71.98947},
		{-818.34430, 2770.80811, 45.33204},
		{-1452.57495, 2577.81348, 55.19294},
		{-1568.42310, 2717.16479, 55.16926},
		{-2254.78540, 2423.31104, 1.85607},
		{-2501.69653, 2280.25757, 4.30835},
		{-2636.08350, 2418.38403, 13.49671},
		{-2484.19897, 1324.59277, 12.12233},
		{-1993.86304, 1376.91931, 6.50469},
		{-2292.08643, 1101.14331, 79.43913},
		{-2648.39526, 789.76831, 49.33721},
		{-2790.08325, 774.01508, 49.81488},
		{-2648.81885, 377.12704, 5.43793},
		{-2776.74951, 212.12538, 6.49937},
		{-2662.88940, -94.49207, 3.63693},
		{-2534.14014, -41.36525, 20.53080},
		{-2454.37354, -6.60296, 27.17531},
		{-2480.32544, 101.75494, 34.49743},
		{-2227.27197, 113.34422, 34.69155},
		{-2075.64502, 391.68713, 34.47616},
		{-2101.26294, 655.52032, 51.66471},
		{-2207.23755, 648.52429, 48.71314},
		{-1671.17542, 702.50732, 29.92057},
		{-1587.32666, 872.37909, 8.47215},
		{-1662.57556, 1089.21997, 7.27025},
		{-1666.55237, -33.08876, 2.86478},
		{-2072.97339, -2247.19336, 30.98644},
		{-2192.71289, -2246.22534, 30.08101},
		{-2233.17407, -2295.83081, 29.98290},
		{-2208.62793, -2515.01416, 30.22132},
		{-1557.66516, -2724.04590, 48.05753},
		{-253.89285, -2212.11353, 28.06080},
		{-1119.41479, -1637.60376, 75.62936},
		{-1072.16980, -1206.91199, 128.49257},
		{-355.64355, -1039.93579, 58.74329},
		{-121.82274, -321.38409, 0.80049},
		{170.01013, -253.83948, 0.91487},
		{298.89554, -184.64705, 0.88749},
		{287.36353, -38.75552, 0.98822},
		{290.96249, 38.20672, 1.76443},
		{719.40338, 268.07523, 21.76143},
		{789.26599, 375.43945, 20.53603},
		{1245.38037, 213.27843, 22.44431},
		{1427.20349, 225.44084, 18.85791},
		{1424.46570, 357.44138, 18.15746},
		{623.28058, -505.75632, 15.60874},
		{736.67267, -568.75629, 16.66615},
		{792.90546, -496.19769, 16.62760},
		{2253.38379, 186.81554, 26.77663},
		{2497.53979, 65.73615, 26.17501},
		{2318.34106, -64.41447, 25.80640},
		{2483.12329, -39.79362, 27.03600},
		{2382.65698, 662.94916, 10.61220},
		{2268.02808, 751.31812, 10.73961},
		{2691.21802, 869.77020, 9.30640},
		{2801.76147, 1017.02698, 10.13083},
		{2858.70850, 1253.97107, 10.77281},
		{2610.74097, 1276.54016, 10.17237},
		{2595.56152, 1453.78540, 10.17134},
		{2561.36865, 1571.32324, 10.17689},
		{2329.81348, 1787.05017, 10.12379},
		{2215.80396, 1988.79175, 10.13088},
		{2346.79395, 2287.84473, 7.44987},
		{2379.13013, 2754.65723, 10.17526},
		{1808.83069, 2838.74902, 10.14091},
		{1352.56958, 2556.64771, 10.21082},
		{1349.17664, 2005.80640, 10.68470},
		{1605.69067, 1472.07629, 10.32442},
		{1315.39990, 1156.78015, 10.14513},
		{968.80707, 1876.51624, 10.35989},
		{1104.76392, -660.85449, 112.98188},
		{980.19360, -831.21960, 94.91516},
		{716.04742, -1051.76001, 45.20834},
		{679.39368, -1276.14746, 12.98556},
		{356.50867, -1477.19592, 35.41282},
		{299.85364, -1766.29773, 3.91167},
		{580.05798, -1767.82483, 13.78981},
		{768.54156, -1614.62500, 12.61973},
		{872.91736, -1299.95715, 13.07236},
		{1029.16321, -1254.81824, 14.43808},
		{1253.77271, -1446.75684, 12.84329},
		{1350.90942, -1773.24146, 12.76520},
		{1691.04321, -2141.62329, 12.91903},
		{2035.83826, -2350.41260, 12.85367},
		{1888.65747, -2082.02441, 14.30889},
		{2799.66284, -1537.91858, 10.34212},
		{2496.64282, -1240.61511, 36.42310},
		{2176.57251, -1442.50720, 24.92573},
		{1933.13782, -1098.00049, 25.63436},
		{1721.82983, -1092.61499, 23.47091},
		{1489.64160, -1242.39514, 13.84732}
	},
	TriviaQuestions[50][5][] =
	{
		{"Cine a descoperit America?", "Magellan", "Columb", "Vespucci", "2"},
		{"În ce an a fost descoperită America de către Cristofor Columb?", "1492", "1601", "1877", "1"},
		{"Care este capitala Australiei?", "Sydney", "Canberra", "Melbourne", "2"},
		{"Cine a pictat 'Cina cea de taina'?", "Da Vinci", "Michelangelo", "Grigorescu", "1"},
		{"In ce an a intrat Romania in WW1?", "1914", "1917", "1916", "3"},
		{"Ce tara are ca simbol pasarea kiwi?", "Australia", "China", "Noua Zeelanda", "3"},
		{"Care e singura tara din lume cu 3 capitale?", "Africa de Sud", "SUA", "Japonia", "1"},
		{"Cine a descoperit conceptul gravitatiei?", "Pascal", "Newton", "Benjamin Franklin", "2"},
		{"Care e capitala Spaniei?", "Madrid", "Barcelona", "Sevilla", "1"},
		{"Cel mai mare desert din lume?", "Sahara", "Atacama", "Antarctica", "3"},
		{"La ce granita se afla muntele Everest?", "China&Nepal", "China&India", "Nepal&India", "1"},
		{"Care este simbolul elementului chimic Argint?", "Ar", "Ag", "At", "2"},
		{"Care este resedinta judetului Salaj?", "Satu Mare", "Baia Mare", "Zalau", "3"},
		{"Care este cea mai vestica localitate din Romania?", "Beba Veche", "Timisoara", "Arad", "1"},
		{"Ce oras important a cucerit Imperiul Otoman in 1453?", "Bucuresti", "Ankara", "Constantinopol", "3"},
		{"In ce faza a Cupei Mondiale a ajuns Romania in 1994?", "Optimi", "Sferturi", "Grupe", "2"},
		{"Ce continent area cea mai rapida crestere in populatie in procente?", "Asia", "Africa", "Europa", "2"},
		{"Care este al doilea cel mai lung fluviu din lume dupa Nil?", "Amazon", "Dunarea", "Mississippi", "1"},
		{"Din ce tara este originar Stalin?", "Azerbaijan", "Armenia", "Georgia", "3"},
		{"In ce tara s-a nascut Adolf Hitler?", "Germania", "Austria", "Ungaria", "2"},
		{"Care este capitala Danemarcai?", "Copenhaga", "Stockholm", "Oslo", "1"},
		{"Ce element chimic are simbolul K?", "Fosfor", "Xenon", "Potasiu", "3"},
		{"Cine a scris Ion?", "Liviu Rebreanu", "George Calinescu", "Marin Preda", "1"},
		{"Cate laturi are un pentagon?", "6", "5", "4", "2"},
		{"Cu cate tari se invecineaza Romania?", "5", "4", "6", "1"},
		{"Cati metrii are cel mai inalt punct al Romaniei, Varful Moldoveanu?", "2506m", "2444m", "2544m", "3"},
		{"La cati ani a obtinut Nadia Comaneci primul 10 perfect din istoria gimnasticii?", "16 ani", "14 ani", "18 ani", "2"},
		{"Care este cea mai inalta constructie din lume?", "Burj Khalifa", "Parlamentul Romaniei", "Casa Alba", "1"},
		{"Cate penalty-uri a aparat Duckadam in finala UCL in 1986?", "3", "4", "5", "2"},
		{"Cum se numeste bratul nordic al Deltei Dunarii?", "Chilia", "Sulina", "Sf Gheorghe", "1"},
		{"Cate zile are un an bisect?", "364", "365", "366", "3"},
		{"Care sunt culorile echipei Bayer Leverkusen?", "rosu&negru", "rosu&alb", "negru&portocaliu", "1"},
		{"Cate titluri de Grand Slam are Simona Halep?", "1", "2", "5", "2"},
		{"In ce an s-a scufundat Titanicul?", "1912", "1918", "1888", "1"},
		{"Care este cea mai mare insula din lume?", "Madagascar", "Groenlanda", "Creta", "2"},
		{"In ce tara a fost folosita pentru prima oara bomba atomica?", "USA", "Anglia", "Japonia", "3"},
		{"In ce judet se afla vulcanii noroiosi?", "Buzau", "Prahova", "Vrancea", "1"},
		{"Langa ce oras mare se afla vulcanul Vezuviu?", "Roma", "Napoli", "Milan", "2"},
		{"Ce brand mare de masini este produs in Ingolstadt?", "Audi", "Mercedes", "BMW", "1"},
		{"Care este capitala Egiptului?", "Alexandria", "Damasc", "Cairo", "3"},
		{"In ce an a murit Michael Jackson?", "2008", "2009", "2010", "2"},
		{"Cine a scris Hansel si Gretel?", "Shakespeare", "Fratii Grimm", "John Adams", "2"},
		{"In ce an s-a nascut regele Mihai?", "1909", "1915", "1921", "3"},
		{"Prin cate tari trece Dunarea?", "10", "11", "12", "1"},
		{"In ce continent de afla Tibetul?", "Africa", "Asia", "Asia de Sud", "2"},
		{"In ce tara au fost prima data cultivate portocalele?", "China", "Portugalia", "Spania", "1"},
		{"Ce tara detine insula Sicilia?", "Franta", "Spania", "Italia", "3"},
		{"Cine este golgheterul Nationaliei Romaniei alaturi de Hagi?", "Mutu", "Alibec", "Andone", "1"},
		{"Care este cel mai inalt vulcan din Europa?", "Vezuviu", "Etna", "Herakle", "2"},
		{"Prin cate tari trece Volga?", "2", "5", "1", "3"}
	},
	Float: CpsDailyQuest1[10][3] =
	{
		{2579.6492, -1033.6952, 69.5803},
		{-68.7716, -1545.8481, 3.0043},
		{746.1065, -570.4742, 18.0133},
		{321.1755, -45.2631, 1.5695},
		{-2722.9216, 22.4357, 7.2031},
		{-2737.8386, 836.7526, 56.2527},
		{4.5054, 1344.2935, 9.2811},
		{789.7827, 1974.1802, 5.7387},
		{1802.6251, 2657.4224, 10.8126},
		{2598.1423, 1363.5901, 10.8203}
	},
	Float: CpsDailyQuest3[15][3] =
	{
		{1507.9993, -867.0806, 62.1954},
		{1339.3082, -699.9804, 91.6130},
		{1083.4198, -771.7511, 107.9666},
		{832.4019, -872.4043, 68.4953},
		{664.4513, -1075.6659, 48.1753},
		{454.2552, -1187.7611, 65.5626},
		{422.6483, -1067.0404, 75.5165},
		{562.2922, -1049.9653, 73.8198},
		{503.6925, -1011.7748, 90.1097},
		{694.2528, -836.1927, 69.9017},
		{943.8644, -660.5127, 120.1981},
		{1235.6776, -620.5164, 103.4344},
		{1376.7329, -670.6791, 93.4027},
		{1517.4618, -815.1104, 70.4196},
		{1368.7853, -917.5207, 33.8668}
	},
	Float: CpsDailyQuest4[18][3] =
	{
		{2843.1833, -470.8593, 18.1038},
		{2773.6575, -74.0960, 35.5403},
		{2551.3594, 313.4737, 28.3921},
		{1809.7640, 280.6486, 20.8151},
		{1603.9761, 383.3642, 19.5672},
		{1190.4885, 542.1431, 19.5672},
		{927.1639, 372.6122, 19.5672},
		{457.0399, 187.8161, 10.4389},
		{-18.0918, 167.1073, 1.7625},
		{-167.0733, 230.4369, 10.1925},
		{-278.8005, 49.8186, 0.7625},
		{-258.9170, -251.4024, 1.1135},
		{-466.4543, -270.7491, 44.3415},
		{-926.4975, -239.6254, 37.9820},
		{-989.7433, -418.0817, 35.9459},
		{-1218.0033, -759.2405, 62.6519},
		{-1612.1689, -793.5137, 47.0655},
		{-1761.4749, -598.0031, 15.9670}
	},
	Float: CpsDailyQuest5[15][3] =
	{
		{-575.5737, 2014.0212, 59.8927},
		{-469.6651, 2056.3657, 60.5515},
		{-379.6573, 2218.7583, 41.7781},
		{-395.3958, 2448.3567, 41.9724},
		{-274.2187, 2518.9971, 33.4256},
		{-2.2356, 2299.4382, 24.1100},
		{290.3647, 2287.0791, 24.8210},
		{563.8381, 2267.1704, 34.0472},
		{528.8590, 1695.1647, 10.8412},
		{301.0569, 1264.6462, 14.0958},
		{155.0566, 1160.3833, 14.4630},
		{-165.3603, 1246.5372, 20.6669},
		{-436.8727, 1427.0009, 32.6368},
		{-329.7717, 1352.0649, 54.8573},
		{-302.0466, 1499.9578, 75.3135}
	},
	Float: CpsDailyQuest6[20][3] =
	{
		{-1907.9313, -1197.7130, 39.1686},
		{-1544.4622, -1587.6085, 37.4149},
		{-1833.0397, -1729.3359, 28.8013},
		{-2252.2073, -2203.0376, 33.6847},
		{-2440.0154, -2338.9907, 18.9267},
		{-2232.2019, -2630.8162, 47.6659},
		{-1724.7611, -2658.7415, 46.7045},
		{-1244.8385, -2885.0088, 62.4336},
		{-693.8644, -2785.7976, 51.2821},
		{-317.8672, -2844.5266, 41.9046},
		{-120.4808, -2433.6848, 32.9910},
		{-314.4612, -2126.1819, 27.7344},
		{-300.4354, -1788.9662, 15.9435},
		{-505.2755, -1652.7866, 10.1539},
		{-656.1368, -1597.6493, 24.1277},
		{-651.6375, -1335.1768, 18.7638},
		{-482.5565, -997.1146, 24.6328},
		{-407.4307, -651.8539, 13.4977},
		{-572.4799, -390.4366, 21.2059},
		{-914.8648, -455.7421, 27.1513}
	},
	ObjectsPerks[39] =
	{
		0,
		1212,
		1212,
		1247,
		18631,
		1212,
		1550,
		19630,
		1604,
		2934,
		2935,
		2034,
		2044,
		2035,
		2036,
		1576,
		1577,
		1254,
		1254,
		1313,
		1313,
		1240,
		1242,
		1240,
		1242,
		401,
		541,
		411,
		494,
		1650,
		1650,
		1829,
		1581,
		1581,
		1829,
		1210,
		1241,
		19054,
		19056
	},
	NamesPerks[39][26] =
	{
		"",
		"Job Worker",
		"Job Grinder",
		"Job Hustler",
		"Job Expert",
		"Money Gainer",
		"Money Gainer 2",
		"Fisherman",
		"Expert Fisherman",
		"Trucker",
		"Expert Trucker",
		"Weapon Rookie",
		"Weapon Grinder",
		"Weapon Hustler",
		"Weapon Expert",
		"Skunk Smoker",
		"Ecstasy Addicted",
		"Paintball Rookie",
		"Paintball Amateur",
		"Paintball Expert",
		"Paintball Merchant",
		"Healthcare Taker",
		"Murder Precaution",
		"Healthcare Taker 2",
		"Murder Precaution 2",
		"Rookie Racer",
		"Amateur Racer",
		"Experimented Racer",
		"Racer Merchant",
		"Gasless",
		"Gasless 2",
		"Dealership Worker",
		"DS Discount Grabber",
		"DS Discount Grabber 2",
		"Dealership Worker 2",
		"Illegal Trader",
		"Illegal Trader 2",
		"It's Christmas Everyday",
		"It's Christmas Everyday 2"
	},
	DescriptionPerks[39][134] =
	{
		"",
		"Dupa ce completezi 30 de ture de job intr-o zi primesti 1.000$ in plus pe fiecare tura facuta in acea zi.",
		"Dupa ce completezi 50 de ture de job intr-o zi vei primi o ora jobboost.",
		"La fiecare tura de job ai o sansa de 5% sa primesti 1RP.",
		"Dupa 50 de ture de job intr-o zi vei primi joboost pentru tot restul zilei si o sansa de 7% de a primi un RP la fiecare tura de job.",
		"La fiecare tura de job dintr-o zi se adauga 1.000$. Progresul se reseteaza la sfarsitul zilei!",
		"La fiecare tura de job dintr-o zi se adauga 2.000$. Progresul se reseteaza la sfarsitul zilei!",
		"Primesti o sansa de 5% la fiecare tura de Fish sa primesti 1PP!",
		"Pentru fiecare peste de tip 'Somn' vandut vei primi 30.000$ aditionali si o sansa de 10% de a primi 1RP.",
		"Primesti o sansa de 5% la fiecare tura de Trucker sa primesti 1PP!",
		"Pentru fiecare tura de peste 2500m facuta vei primi 30.000$ aditionali si o sansa de 10% de a primi 1RP.",
		"Dupa ce completezi 30 de ture de Arms Dealer intr-o zi vei primi 1000 de materiale in plus la fiecare tura facuta.",
		"Dupa ce completezi 50 de ture de Arms Dealer intr-o zi vei primi 2000 de materiale in plus la fiecare tura facuta.",
		"Dupa 50 de ture de Arms Dealer intr-o zi vei primi o sansa de 10% de a primi 1RP la fiecare tura de Arms Dealer.",
		"Dupa 50 de ture de Arms Dealer intr-o zi vei primi 2000 de materiale in plus la fiecare tura facuta si o sansa de 5% de a primi 1PP",
		"Atunci cand folosesti 'Weed' primesti +75hp.",
		"Atunci cand folosesti 'Ecstasy' primesti +100hp.",
		"La fiecare 3 kill-uri intr-o runda de Paint vei primi o grenada.",
		"La fiecare kill facut intr-o runda de Paint vei primi o grenada.",
		"Dupa ce ai facut 3 kill-uri intr-o runda de Paint, fiecare kill urmator iti aduce 200 de materiale aditionale.",
		"Fiecare kill facut la Paint iti aduce 300 de materiale aditionale.",
		"Atunci cand omori pe cineva vei primi +50hp. (perk-ul nu este functionabil in timpul war-urilor)",
		"Atunci cand omori un om iti va fi setata armura la 50%. (perk-ul nu este functionabil in timpul war-urilor/paint-urilor)",
		"Atunci cand omori pe cineva vei primi +100hp. (perk-ul nu este functionabil in timpul war-urilor)",
		"Atunci cand omori un om iti va fi setata armura la 100%. (perk-ul nu este functionabil in timpul war-urilor)",
		"Primesti +3 km/h cu toate vehiculele personale pe care le folosesti",
		"Primesti +5 km/h cu toate vehiculele personale pe care le folosesti",
		"Primesti +10 km/h cu toate vehiculele personale pe care le folosesti",
		"Primesti +15 km/h cu toate vehiculele personale pe care le folosesti",
		"Atunci cand masina in care te aflii ramane fara benzina vei primi +50 gas",
		"Atunci cand masina in care te aflii ramane fara benzina vei primi +100 gas",
		"Atunci cand vinzi un vehicul la stat iti vor fi restituiti 75% din bani.",
		"Vei primi 3% reducere la orice achizitie din DealerShip.",
		"Vei primi 5% reducere la orice achizitie din DealerShip.",
		"Atunci cand vinzi un vehicul la stat iti vor fi restituiti toti banii inapoi.",
		"Dupa 20 de ture de Arms Dealer/Drug Dealer intr-o zi vei primi 30% mai multe materiale/droguri la urmatoarele ture.",
		"Dupa 20 de ture de Arms Dealer/Drug Dealer intr-o zi vei primi 50% mai multe materiale/droguri la urmatoarele ture.",
		"Vei primi 2x mai multi bani la primul Gift luat al zilei + 1.5x mai multe RP.",
		"Vei primi 3x mai multi bani la primul Gift luat al zilei + 2x mai multe RP."
	},
	CostPerks[39] =
	{
		0,
		8,
		8,
		8,
		10,
		8,
		8,
		7,
		7,
		7,
		7,
		8,
		8,
		8,
		10,
		7,
		7,
		8,
		8,
		8,
		10,
		7,
		8,
		7,
		8,
		8,
		8,
		8,
		10,
		7,
		7,
		8,
		7,
		7,
		8,
		8,
		8,
		7,
		7
	},
	MisiuniPerks[13][] =
	{
		"Fa 30 de ture la Fish",
		"Vinde 30 de pizza la Pizza Boy",
		"Fa 30 de ture de Trucker",
		"Fa 10 kill-uri intr-o runda de paint",
		"Vinde 50 de bitcoin",
		"Castiga de 10 ori la barbut pe o suma de minim 100.000$",
		"Intra intr-un clan",
		"Fa quest-ul pentru 3 zile la rand",
		"Fii activ pentru 6 payday-uri intr-o zi",
		"Castiga un meci de Sky Wars in fiecare zi pentru 3 zile",
		"Ia gift-ul pentru 3 zile la rand",
		"Fa 21 de ore in Last 7",
		"Deschide 1 OG-Crate"
	},
	MaxProgressPerks[13] =
	{
		30,
		30,
		30,
		10,
		50,
		10,
		1,
		3,
		6,
		3,
		3,
		21,
		1
	},
	RewardsPerks[13] =
	{
		5,
		5,
		5,
		5,
		5,
		5,
		5,
		10,
		10,
		10,
		10,
		15,
		15
	},
	Float: CocaTaskCPs[10][3] =
	{
		{-1405.14136, -960.86017, 198.15288},
		{-1394.45618, -960.56281, 197.16628},
		{-1383.51282, -961.27222, 196.55350},
		{-1373.58313, -962.01263, 196.29538},
		{-1363.78308, -964.37787, 195.83394},
		{-1362.72266, -954.29919, 195.83394},
		{-1371.74402, -952.12939, 196.29538},
		{-1380.95032, -950.20703, 196.55350},
		{-1391.17212, -948.56433, 197.16628},
		{-1403.65918, -946.09521, 198.15288}
	},
	Float: WeedTaskCPs[10][3] =
	{
		{-388.73596, -1623.20337, 22.50122},
		{-391.11432, -1623.23486, 22.19849},
		{-393.57669, -1623.27014, 22.27417},
		{-396.16663, -1623.77173, 21.98194},
		{-398.71521, -1623.63330, 21.77600},
		{-398.16983, -1619.53369, 21.77600},
		{-396.08701, -1619.32983, 21.98194},
		{-393.69690, -1618.96802, 22.27417},
		{-391.31570, -1619.19128, 22.20287},
		{-389.47659, -1618.95679, 22.50122}
	},
	ServerSkins[42][2] =
	{
		{1, 1},
		{7, 1},
		{22, 1},
		{60, 1},
		{250, 1},
		{291, 1},
		{292, 1},
		{160, 1},
		{179, 1},
		{210, 1},
		{236, 1},
		{13, 1},
		{47, 1},
		{65, 1},
		{19, 2},
		{20, 2},
		{45, 2},
		{137, 2},
		{241, 2},
		{293, 2},
		{197, 2},
		{209, 2},
		{233, 2},
		{249, 2},
		{62, 2},
		{52, 2},
		{46, 2},
		{29, 2},
		{82, 3},
		{84, 3},
		{269, 3},
		{311, 3},
		{127, 3},
		{155, 3},
		{205, 3},
		{31, 3},
		{10, 3},
		{33, 3},
		{0, 4},
		{271, 4},
		{167, 4},
		{264, 4}
	},
	Float: SlotsCoords[6][3] =
	{
		{1958.0371, 1049.0721, 992.4688},
		{1963.0072, 1044.0823, 992.4688},
		{1965.8433, 1037.5314, 992.4688},
		{1965.8514, 998.1335, 992.4688},
		{1963.0051, 991.3976, 992.4688},
		{1958.2649, 986.6441, 992.4688}
	},
	Float: BoatCP[5][3] =
	{
		{442.6915,-2007.4907,-0.1885},
		{405.8998,-2105.4099,-0.2340},
		{338.7595,-2062.1206,-0.1612},
		{340.7699,-1989.8228,-0.2174},
		{414.7755,-1918.6769,-0.2110}
	},
	Float: FlyCP[2][3] =
	{
		{2007.8589,-2313.2209,26.5929},
		{1958.3884,-2330.1304,13.7322}
	},
	Float: WeaponPos[12][7] =
	{
		{19545.0, -225.30241, -2228.51733, 247.89970, 0.00000, 0.00000, 0.00000},
		{19545.0, -217.89316, -2228.40967, 255.24672, 0.00000, 90.00000, 0.00000},
		{19545.0, -232.75731, -2228.55371, 255.24672, 0.00000, 90.00000, 0.00000},
		{19545.0, -225.34966, -2259.75366, 279.03430, 90.00000, 0.00000, 0.00000},
		{19545.0, -225.28618, -2197.35718, 279.03430, 90.00000, 0.00000, 0.00000},
		{11700.0, -228.37646, -2251.49805, 247.79568, 0.00000, 0.00000, -181.49959},
		{11700.0, -222.22803, -2250.12598, 247.79568, 0.00000, 0.00000, -181.49959},
		{11700.0, -230.21841, -2248.13867, 247.79568, 0.00000, 0.00000, -181.49959},
		{11700.0, -223.41727, -2255.54321, 247.79568, 0.00000, 0.00000, -181.49959},
		{11700.0, -220.40742, -2246.89575, 247.79568, 0.00000, 0.00000, -181.49959},
		{11700.0, -226.23485, -2245.66064, 247.79568, 0.00000, 0.00000, -181.49959},
		{11700.0, -231.75900, -2244.47656, 247.79568, 0.00000, 0.00000, -181.49959}
	},
	Float: ObjectsStunt[26][7] =
	{
		{18784.0, 1484.57910, -2593.34424, 14.65510, 0.00000, 0.00000, 0.00000},
		{18783.0, 1504.54492, -2593.36304, 14.59336, 0.00000, 0.00000, 0.00000},
		{18784.0, 1521.49707, -2593.40894, 19.15209, 0.00000, 0.00000, 0.00000},
		{19771.0, 1533.88989, -2592.50879, 22.73410, 0.00000, 0.00000, -178.86011},
		{19768.0, 1538.59265, -2592.27661, 23.67680, 2.40000, -6.66000, -176.04030},
		{19768.0, 1544.65906, -2591.81250, 23.97508, -0.96000, -11.70001, -355.97916},
		{19768.0, 1550.72742, -2591.36670, 24.37510, -0.96000, -11.70000, -355.97919},
		{19743.0, 1554.06689, -2595.13794, 27.19000, 0.00000, 0.00000, -173.57970},
		{19768.0, 1556.34766, -2591.01489, 29.57690, -0.96000, -11.70000, -355.97919},
		{19692.0, 1567.58533, -2590.06934, 28.21460, 0.00000, 0.00000, -84.36000},
		{18858.0, 1581.24243, -2589.44775, 29.51196, 0.00000, 0.00000, 92.21994},
		{19692.0, 1593.86853, -2588.30762, 27.22260, 0.00000, 0.00000, -84.36000},
		{18778.0, 1606.19836, -2586.70972, 29.91080, 0.00000, 0.00000, -85.14010},
		{18778.0, 1612.56848, -2586.19214, 32.17420, 0.00000, 0.00000, -85.14010},
		{18858.0, 1624.45740, -2585.32300, 35.25480, 0.00000, 0.00000, 92.21990},
		{19709.0, 1637.94165, -2591.48242, 31.37967, 0.00000, 0.00000, -164.87964},
		{19709.0, 1633.44202, -2609.56982, 31.28113, 0.00000, 0.00000, 21.36000},
		{19673.0, 1645.39429, -2614.28564, 31.77020, 0.00000, 0.00000, 9.48000},
		{19673.0, 1655.09351, -2612.72729, 30.94619, 0.00000, 0.00000, 9.48000},
		{18778.0, 1663.28369, -2611.48926, 29.90340, 0.00000, 0.00000, -85.14010},
		{18778.0, 1670.96643, -2610.74390, 32.89471, 0.00000, 0.00000, -85.14010},
		{18842.0, 1700.06128, -2611.01099, 34.38510, 0.00000, -85.00000, 0.00000},
		{19667.0, 1719.69397, -2615.99927, 61.59225, 0.00000, 0.00000, 0.00000},
		{19692.0, 1727.72485, -2620.79175, 23.90110, 0.00000, 0.00000, 95.16000},
		{19692.0, 1743.84656, -2619.30127, 26.75771, -20.00000, 0.00000, 95.16000},
		{19715.0, 1773.41577, -2616.49097, 30.65052, 0.00000, 0.00000, -170.75946}
	},
	Float: GrauFarmerObjects[20][3] =
	{
		{1914.13867, 192.48692, 37.30490},
		{1913.47876, 197.68770, 36.34488},
		{1913.13501, 201.52545, 35.62486},
		{1913.11438, 205.48540, 34.84484},
		{1913.35413, 210.28662, 34.22483},
		{1913.47461, 215.48219, 33.21204},
		{1913.82458, 221.35057, 32.23743},
		{1914.83691, 228.56395, 31.02417},
		{1916.18994, 235.52917, 31.02417},
		{1917.87842, 241.43456, 31.02417},
		{1921.81848, 240.70624, 31.02417},
		{1920.51245, 234.85986, 31.02417},
		{1919.57483, 227.85687, 31.02417},
		{1919.20740, 220.17467, 32.23743},
		{1918.64294, 214.40646, 33.21204},
		{1918.05188, 209.19061, 34.22483},
		{1917.80762, 204.68375, 34.84484},
		{1917.67957, 200.52477, 35.62486},
		{1917.69202, 196.91351, 36.34488},
		{1918.25366, 191.58499, 37.30490}
	},
	Float: MereFarmer[10][3] =
	{
		{1948.2805, 182.4732, 35.1049},
		{1949.5356, 193.5770, 33.2389},
		{1949.7130, 206.6879, 30.9183},
		{1950.8320, 221.5299, 28.9488},
		{1951.4174, 234.8846, 28.4745},
		{1961.0397, 235.6397, 28.1648},
		{1961.3853, 221.4155, 28.7162},
		{1961.8867, 206.4071, 30.1605},
		{1962.6279, 194.4108, 32.0008},
		{1961.8838, 181.6247, 34.0923}
	},
	Float: VaciFarmer[5][3] =
	{
		{1994.0675, 226.1173, 27.1814},
		{1995.5675, 228.8214, 27.2791},
		{1998.2886, 228.4229, 27.2429},
		{1997.1578, 226.1542, 27.1600},
		{2000.8689, 225.8587, 27.1206}
	},
	BattlepassMissions[16][64] =
	{
		"Taie 15 copaci la job-ul 'Padurar'",
		"Castiga la barbut de 3 ori pe o suma de minim 500.000$",
		"Pune 10 anunturi pe /ad",
		"Completeaza un rob",
		"Mergi 75km cu un vehicul personal",
		"Completeaza Quest-ul Special activ pe server",
		"Deschide gift-ul de 3 ori intr-o singura zi",
		"Reinnoieste-ti sau ia-ti toate permisele",
		"Deschide gift-ul de 15 ori intr-o saptamana",
		"Completeaza cel putin 3 ture la fiecare job",
		"Joaca 50.000.000$ la slots",
		"Participa la spargerea a 5 drop-uri",
		"Da la spin de 5 ori",
		"Revendica-ti premiul de 3 ori de la Milestone",
		"Mergi cu un vehicul personal 3.000km",
		"Fa skill 6 la toate job-urile"
	},
	BattlepassMaxProgress[16] =
	{
		15,
		3,
		10,
		1,
		75,
		1,
		3,
		4,
		15,
		1,
		50_000_000,
		5,
		5,
		3,
		3_000,
		1,
	},
	BattlepassMissionXP[16] =
	{
		5,
		5,
		5,
		5,
		7,
		7,
		7,
		7,
		10,
		10,
		10,
		12,
		15,
		20,
		30,
		70,
	},
	BattlepassTierXP[52] =
	{
		0,
		3,
		6,
		10,
		14,
		18,
		23,
		28,
		33,
		37,
		42,
		47,
		52,
		56,
		60,
		65,
		69,
		73,
		78,
		83,
		87,
		92,
		97,
		100,
		104,
		108,
		113,
		118,
		123,
		128,
		132,
		137,
		141,
		146,
		151,
		157,
		162,
		167,
		172,
		177,
		181,
		185,
		190,
		194,
		198,
		203,
		208,
		213,
		217,
		221,
		225,
		225
	},
	BattlepassFreeRewards[51][] =
	{
		"",
		"2.000.000$",
		"2rp",
		"2pp",
		"75 og points",
		"Perrenial",
		"3.000.000$",
		"350 gift points",
		"250 spin points",
		"3rp",
		"3pp",
		"125 og points",
		"5.000.000$",
		"10 rob points",
		"10 escape points",
		"3h jobboost",
		"300 spin points",
		"400 gift points",
		"10.000.000$",
		"5rp",
		"5pp",
		"200 og points",
		"15 rob points",
		"15 escape points",
		"300 spin points",
		"Sunrise",
		"7rp",
		"7pp",
		"500 gift points",
		"20.000.000$",
		"Skin Slot",
		"350 spin points",
		"Basic Crate",
		"5h jobboost",
		"Normal Crate",
		"Diamond Crate",
		"9pp",
		"Basic Crate",
		"30.000.000$",
		"Medium Crate",
		"9rp",
		"600 gift points",
		"Normal Crate",
		"20 rob points",
		"20 escape points",
		"diamond crate",
		"450 spin points",
		"10h jobboost",
		"100.000.000$",
		"15pp",
		"Jester"
	},
	BattlepassPremiumRewards[51][] =
	{
		"",
		"7.000.000$",
		"7rp",
		"7pp",
		"130 og points",
		"Quad",
		"12.000.000$",
		"500 gift points",
		"400 spin points",
		"9rp",
		"9pp",
		"200 og points",
		"15.000.000$",
		"15 rob points",
		"15 escape points",
		"5h jobboost",
		"450 spin points",
		"550 gift points",
		"22.000.000$",
		"12rp",
		"12pp",
		"300 og points",
		"20 rob points",
		"20 escape points",
		"450 spin points",
		"Stratum",
		"15rp",
		"15pp",
		"650 gift points",
		"40.000.000$",
		"Voucher Normal",
		"500 spin points",
		"Medium Crate",
		"10h jobboost",
		"Diamond Crate",
		"Skin Crate",
		"17pp",
		"Diamond Crate",
		"75.000.000$",
		"Diamond Crate",
		"17rp",
		"750 gift points",
		"Medium Crate",
		"30 rob points",
		"30 escape points",
		"vehicle crate",
		"600 spin points",
		"15h jobboost",
		"200.000.000$",
		"30pp",
		"Turismo"
	},
	BattlepassRewards[51][3] =
	{
		{0, 0, 0},
		{1, 2_000_000, 7_000_000},
		{2, 2, 7},
		{3, 2, 7},
		{4, 75, 130},
		{5, 2, 9},
		{1, 3_000_000, 12_000_000},
		{6, 350, 500},
		{7, 250, 400},
		{3, 3, 9},
		{3, 3, 9},
		{4, 125, 200},
		{1, 5_000_000, 15_000_000},
		{8, 10, 15},
		{9, 10, 15},
		{10, 3, 55},
		{7, 300, 450},
		{6, 400, 550},
		{1, 10_000_000, 22_000_000},
		{2, 5, 12},
		{3, 5, 12},
		{4, 200, 300},
		{8, 15, 20},
		{9, 15, 20},
		{7, 300, 450},
		{5, 13, 24},
		{2, 7, 15},
		{3, 7, 15},
		{6, 500, 650},
		{1, 20_000_000, 40_000_000},
		{0, 1, 1},
		{7, 350, 500},
		{12, 0, 2},
		{10, 5, 10},
		{12, 1, 3},
		{12, 3, 6},
		{3, 9, 17},
		{12, 0, 3},
		{1, 30_000_000, 75_000_000},
		{12, 2, 3},
		{2, 9, 17},
		{6, 600, 750},
		{12, 1, 2},
		{8, 20, 30},
		{9, 20, 30},
		{12, 3, 4},
		{7, 450, 600},
		{10, 10, 15},
		{1, 100_000_000, 200_000_000},
		{3, 15, 30},
		{5, 51, 57}
	}
;

#define COLOR_SERVER	0x00a326ff
#define COLOR_RED		0xFF0000FF
#define COLOR_SANCTION	0xcf514cff
#define COLOR_YELLOW	0xffff00ff

#define HOVER_COLOR 	0x15B864FF

#define MAX_PERSONAL_VEHICLES 20
#define MAX_SKINS 10
#define AdminOnly "Server >> {ffffff}Nu poti folosi aceasta comanda."
#define function%0(%1) forward%0(%1); public%0(%1)
#define GetName(%0) PlayerInfo[%0][pNormalName]

stock GetGameName(playerid)
{
	new
		name[MAX_PLAYER_NAME + 1]
	;

	GetPlayerName(playerid, name, sizeof(name));

	return name;
}

new
	DefaultSkin = 23, Float:SpawnX = 1154.1871, Float:SpawnY = -1768.9851, Float:SpawnZ = 16.5938, Iterator: Admins<MAX_PLAYERS>, Iterator: Helpers<MAX_PLAYERS>,
	Iterator: InPaint<MAX_PLAYERS>, Iterator: Contracts<MAX_PLAYERS>, Iterator: fVehicles[9]<MAX_VEHICLES>, Iterator: cVehicles[MAX_CLANS]<MAX_VEHICLES>, Iterator: UberCalls<MAX_PLAYERS>, 
	Iterator: SpawnVehs<MAX_VEHICLES>, Iterator: InRuleta<MAX_PLAYERS>, Iterator: VotRuleta[3]<MAX_PLAYERS>, Iterator:WarHP<1000>, Iterator:InLogin<MAX_PLAYERS>,
	Iterator: YouTubers<MAX_PLAYERS>, Iterator: WithState[10]<MAX_PLAYERS>, Iterator: Spectators<MAX_PLAYERS>, Iterator: Questions<MAX_PLAYERS>, Iterator: StageVehicles<MAX_VEHICLES>,
	Iterator: InSkyWars<MAX_PLAYERS>, bool: SkyWarsStarted, SkyWarsTimer, Text: SkyWarsTD, Iterator: SkyWarsPickups[4]<1000>, SkyWarsMoney, Iterator: PlayersWithRadar<MAX_PLAYERS>,
	Iterator: WarWeapons<1000>, Iterator: ParamedicCalls<MAX_PLAYERS>, Iterator: GlovoCalls<MAX_PLAYERS>, Iterator: RacePerk<MAX_PLAYERS>
;

enum
{
	DIALOG_GOL, DIALOG_LOGIN1, DIALOG_LOGIN2, DIALOG_BUY, DIALOG_REGISTER, DIALOG_HELP, DIALOG_HELP2, DIALOG_JAIL, DIALOG_BASIC, DIALOG_NORMAL, DIALOG_SELLVEHICLE, DIALOG_CHANGENAME,
	DIALOG_JOBS, DIALOG_TRANSFER, DIALOG_GO, DIALOG_GPS, DIALOG_FWARN, DIALOG_FUNWARN, DIALOG_UNINVITE, DIALOG_MEMBERS2, DIALOG_VEHSPAWN, DIALOG_REPORT, DIALOG_SEXSHOP, DIALOG_BUYGARAGE,
	DIALOG_HQS, DIALOG_MEMBERS, DIALOG_VEHINFO, DIALOG_MEDIUM, DIALOG_PET, DIALOG_REPORTALTAPROBLEMA, DIALOG_VEHSPAWNCAR, DIALOG_RAMHOUSE, DIALOG_BUYWALKIE, DIALOG_QUITGROUP,
	DIALOG_SELLHOUSETOSTATE, DIALOG_SELLBIZTOSTATE, DIALOG_CLANMEMBERS2, DIALOG_CLANSETTINGS, DIALOG_CLANMEMBERS3, DIALOG_PETNAME, DIALOG_CLAN, DIALOG_CLANMEMBERS,
	DIALOG_CLANCHECKPOINTTURF, DIALOG_QUITCLAN, DIALOG_CHOOSECLANNAME, DIALOG_RAMHQ, DIALOG_CLAN_COLOR, DIALOG_CLAN_CHANGERANK2, DIALOG_CRATES, DIALOG_SETTINGS, DIALOG_CLAN_RANK,
	DIALOG_CLAN_WARNS, DIALOG_CLAN_CHANGERANK, DIALOG_NEWPASS, DIALOG_SERVER, DIALOG_VOUCHERS, DIALOG_ADMINSHOP, DIALOG_DIAMOND, DIALOG_VEHICLE, DIALOG_BUSINESS,
	DIALOG_ARENA, DIALOG_GPS2, DIALOG_BUYCAR, DIALOG_MENU, DIALOG_NEON, DIALOG_TRADE, DIALOG_TRADE_ADAUGAT, DIALOG_TRADE_VEHICLE, DIALOG_FRAGMENTS, DIALOG_FRAGMENT, DIALOG_RADIO,
	DIALOG_SELECTROUTE, DIALOG_SHOP, DIALOG_ACTIVITYSHOP, DIALOG_ATMS, DIALOG_BOX, DIALOG_DUEL, DIALOG_UPGRADES, DIALOG_PCOLOR, DIALOG_HEISTS, DIALOG_SKIN, DIALOG_SOPS, DIALOG_SOPS1,
	DIALOG_SFV, DIALOG_BUYCGARAGE, DIALOG_SCV, DIALOG_BUYCVEHS, DIALOG_CALLS, DIALOG_RULETA1, DIALOG_RULETA2, DIALOG_CUSTOMNEON, DIALOG_REMOVENEON, DIALOG_JOBMENU, DIALOG_JOBWITHDRAW,
	DIALOG_JOBSELL, DIALOG_JOBSELLTOSTATE, DIALOG_KILLCP, DIALOG_RESETRAPORT, DIALOG_CALL, DIALOG_SMS, DIALOG_SERVICE, DIALOG_TABOPTIONS, DIALOG_SETGUNS, DIALOG_VIPMENU,
	DIALOG_VIPWHEELS, DIALOG_VIPTEXT, DIALOG_VIPTEXT2, DIALOG_VIPTEXTCOLOR, DIALOG_VIPTEXTPOS, DIALOG_CONTRACTS, DIALOG_SLOTSBET, DIALOG_SAILING, DIALOG_FLY, DIALOG_WEAPON,
	DIALOG_PANOURI, DIALOG_BILLBOARD, DIALOG_BILLBOARD1, DIALOG_BILLBOARD2, DIALOG_BILLBOARD3, DIALOG_BUYCLANHQ, DIALOG_BUYCLANHQ1, DIALOG_SPAWNCHANGE, DIALOG_ATMBLOWER, DIALOG_LUCKY,
	DIALOG_UPGRADER1, DIALOG_UPGRADER2, DIALOG_REALSHOP, DIALOG_BUYCUSTOMHOUSE, DIALOG_CREATORCODE1, DIALOG_CREATORCODE2, DIALOG_OGCRATE, DIALOG_ATEVENT, DIALOG_RAMCLANHQ, DIALOG_FARMER,
	DIALOG_DISCORD, DIALOG_CHOOSECLANTAG, DIALOG_CLANTAG, DIALOG_ACTIVATEBATTLEPASS, DIALOG_SETCLANTAG, DIALOG_CLANHQS, DIALOG_LESTER, DIALOG_PREMIUMSHOP, DIALOG_MYDRUGS,
	DIALOG_GETDRUGS, DIALOG_BUYMETH, DIALOG_BUYECS, DIALOG_POTIONS, DIALOG_POTIONS2, DIALOG_UPDATES, DIALOG_BUYVOUCHERS, DIALOG_BUYVOUCHERS2, DIALOG_TRADE_VOUCHER,
	DIALOG_STAFF, DIALOG_GARAGESPAWN, DIALOG_BUYPOTIONS, DIALOG_BIZMENU, DIALOG_BIZWITHDRAW, DIALOG_BIZFEE, DIALOG_BIZSELL, DIALOG_HOUSEMENU, DIALOG_HOUSEWITHDRAW,
	DIALOG_HOUSERENT, DIALOG_HOUSEEVICT, DIALOG_MOVEGARAGE, DIALOG_HOUSESELL, DIALOG_STATUSES, DIALOG_SELECTSTATUS, DIALOG_JOBMASTER
}

new
	MySQL: SQL, specfaction[MAX_PLAYERS], UberAccepted[MAX_PLAYERS], UberFare[MAX_PLAYERS], UberTimer[MAX_PLAYERS], UberMoneySpent[MAX_PLAYERS], UberMoneyEarned[MAX_PLAYERS],
	UberDriver[MAX_PLAYERS], BreachID[MAX_PLAYERS], SellHouseID[MAX_PLAYERS], LiveQuestion[MAX_PLAYERS][128], paintkills[MAX_PLAYERS], WantName[MAX_PLAYERS][MAX_PLAYER_NAME],
	JobVeh[MAX_PLAYERS] = -1, LastMove[MAX_PLAYERS], bool: fnc[MAX_PLAYERS], ExamVeh[MAX_PLAYERS], LastPlayer[MAX_PLAYERS], Selected[MAX_PLAYERS][55], Selected2[MAX_PLAYERS],
	CarMod[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][17], CarOwner[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][24], SelectedCar[MAX_PLAYERS], Float:old_veh_pos[MAX_VEHICLES + 1][3],
	Float:evex, Float:evey, Float:evez, IsPlayerAFK[MAX_PLAYERS], RentVeh[MAX_PLAYERS] = -1, bool: Undercover[MAX_PLAYERS], bool: eventenabled, pickup_event, virtuallevent, interiorevent,
	bool: gPlayerUsingLoopingAnim[MAX_PLAYERS], stockss = 0, factionss = 0, wantedlost[MAX_PLAYERS], LiveQuestionOn = 0, bool: VehicleEngine[MAX_VEHICLES],
	bool: tazer[MAX_PLAYERS], bool: PlayerHandsup[MAX_PLAYERS], bool: DeathPlayer[MAX_PLAYERS], Bizuri = 0, CaseJ = 0, turfss = 0, FactionOffer[MAX_PLAYERS],
	dialogID[MAX_PLAYERS], soexpire[MAX_PLAYERS], somated[MAX_PLAYERS], targetfind[MAX_PLAYERS], InHouse[MAX_PLAYERS], InBiz[MAX_PLAYERS], InHQ[MAX_PLAYERS],
	WTChannel[MAX_PLAYERS], UsingDrugs[MAX_PLAYERS], CP[MAX_PLAYERS], Float:LastVel[MAX_PLAYERS][3], Float: LastVehX[MAX_PLAYERS], Float: LastVehY[MAX_PLAYERS],
	Float: LastVehZ[MAX_PLAYERS], MatsOffer[MAX_PLAYERS], MatsPrice[MAX_PLAYERS], MatsAmmo[MAX_PLAYERS], SellgunOffer[MAX_PLAYERS], SellgunPrice[MAX_PLAYERS], escapeprogress[MAX_PLAYERS],
	escapedat[MAX_PLAYERS], SellgunMats[MAX_PLAYERS], SellgunAmmo[MAX_PLAYERS], SellgunID[MAX_PLAYERS], LiveOffer[MAX_PLAYERS], bool: TalkingLive[MAX_PLAYERS], CarID[MAX_PLAYERS],
	adtext[MAX_PLAYERS][144], TicketOffer[MAX_PLAYERS], TicketMoney[MAX_PLAYERS], Float:PlayerPosii[MAX_PLAYERS][6], ObiectLicitat = 0,
	lastplayerbid = -1, BidType = 0, bool: PlayerCuffed[MAX_PLAYERS], bool: PlayerCuffed2[MAX_PLAYERS], PlayerCuffedTime[MAX_PLAYERS], PlayerTazeTime[MAX_PLAYERS],
	FishPrice[MAX_PLAYERS], painttime = -1, TransferOffer[MAX_PLAYERS], TransferMoney[MAX_PLAYERS], DrugOffer[MAX_PLAYERS], DrugPrice[MAX_PLAYERS], DrugGram[MAX_PLAYERS],
	WantedPoints[MAX_PLAYERS], bool: OnDuty[MAX_PLAYERS], bool: Logat[MAX_PLAYERS], Spectate[MAX_PLAYERS], SpectateState[MAX_PLAYERS],
	vehRadio[MAX_VEHICLES], bool: TurfsDisp[MAX_PLAYERS], bool: VehicleLocked[MAX_VEHICLES], Gas[MAX_VEHICLES] = 100,
	bool: ClanDuty[MAX_PLAYERS], Float:Health[MAX_PLAYERS], Float:Armour[MAX_PLAYERS], bool: reportstuck[MAX_PLAYERS], bool: adatad[MAX_PLAYERS],
	DiceRequest[MAX_PLAYERS], DiceMoney[MAX_PLAYERS], bool: restrictie = false, bool: ac_onplayerdeath = true, bool: ac_trolltimer = true, bool: ac_fakedamage = true, ac_kills[MAX_PLAYERS],
	contract_get[MAX_PLAYERS], QuestVeh[MAX_PLAYERS] = -1, pfVehicle[MAX_PLAYERS] = -1, pcVehicle[MAX_PLAYERS] = -1, lastpayday, LastVeh[MAX_PLAYERS],
	ParamedicAccepted[MAX_PLAYERS]
;

function RepairVehicleEx(vehicleid)
{
	LastVehicleHealth[vehicleid] = 1000.0;

	RepairVehicle(vehicleid);

	return true;
}

stock Float: GetPlayerHP(playerid)
{
	return Health[playerid];
}

stock SetPlayerHP(playerid, Float: HP)
{
	Health[playerid] = HP;
	return SetPlayerHealth(playerid, HP);
}

stock Float: GetPlayerArm(playerid)
{
	return Armour[playerid];
}

stock SetPlayerArm(playerid, Float: Arm)
{
	Armour[playerid] = Arm;
	return SetPlayerArmour(playerid, Arm);
}

new
	gString[2048], String[144], Timer:timerptad[MAX_PLAYERS], Timer:timer_licitatie, PlayerText:FindTXD, PlayerText:SpecPTD, PlayerText:FPSText, PlayerText:PaintTD, PlayerText:WarPTD,
	PlayerText:Jailtime, PlayerText:WantedText, PlayerText:RentCarText[MAX_PLAYERS], PlayerText:LevelTD[3], PlayerBar: LevelBar, PlayerText:SpeedPTD, PlayerText:MoneyIndicator,
	PlayerText:FoodPTD[2], Float:TeleportDest[MAX_PLAYERS][3], PlayerText: AchivPTD, PlayerText: TradePTD[7], PlayerText: TradeIcon[10], PlayerText: TradeTitle[10], Text:TradeTD[21],
	TradeID[MAX_PLAYERS], TradeItems[MAX_PLAYERS], bool: TradeReady[MAX_PLAYERS], TradePlayer[MAX_PLAYERS], TradeTime[MAX_PLAYERS], Timer:DispareTextdraw[MAX_PLAYERS],
	Timer:DisparBani[MAX_PLAYERS], PlayerBar: GlobalGoalBar, Text:RentVehicleTD[4], PlayerText: RentVehiclePTD[2], InTextdrawMenu[MAX_PLAYERS], SelectedRentVehicle[MAX_PLAYERS],
	SelectedModification[MAX_PLAYERS], RotationModification[MAX_PLAYERS], Text: DateTD, Text: DateATD, PlayerText: NamePTD, Text: ServerTD
;
new
	Accese[5][25] =
	{
		"qAlexGT3",
		"MaxTuber",
		"Sorrell",
		"alin.bc",
		"Bucsa"
	}
;
function CheckAcces(name[])
{
	for(new i = 0; i < sizeof(Accese); i++)
	{
		if(strmatch(name, Accese[i]))
		{
			return true;
		}
	}
	return false;
}
new
	RainbowColors[63] =
	{
		121,
		80,
		78,
		181,
		182,
		183,
		158,
		222,
		216,
		231,
		61,
		228,
		6,
		219,
		6,
		194,
		197,
		145,
		154,
		241,
		226,
		229,
		86,
		234,
		187,
		189,
		44,
		4,
		75,
		53,
		101,
		95,
		20,
		207,
		255,
		247,
		87,
		108,
		106,
		208,
		209,
		210,
		146,
		176,
		178,
		232,
		167,
		144,
		171,
		179,
		242,
		249,
		248,
		132,
		43,
		45,
		17,
		18,
		21,
		117,
		132,
		212,
		3
	}
;
new
	RentVehicles[6][2] =
	{
		{510, 5_000},
		{579, 10_000},
		{480, 15_000},
		{451, 20_000},
		{560, 25_000},
		{522, 30_000}
	}
;
new Float: SkyWarsPos[4][3] = 
{
	{-1592.2889, 2153.6599, 285.3005},
	{-1381.2314, 2274.1650, 285.4299},
	{-1264.7463, 2090.5398, 283.5601},
	{-1451.5492, 1975.3405, 281.3900}	
};
new Float: SkyWarsWeapons[13][4] =
{
	{-1461.6089, 1984.2091, 269.0752, 356.0},
	{-1581.9225, 2162.9836, 272.9802, 356.0},
	{-1373.7775, 2261.5793, 273.1096, 356.0},
	{-1273.1084, 2081.6340, 271.2398, 356.0},
	{-1278.6256, 2101.9038, 272.4038, 348.0},
	{-1395.3010, 2256.5044, 274.2737, 348.0},
	{-1575.3392, 2142.8926, 274.1442, 348.0},
	{-1441.7100, 1990.8081, 270.2392, 348.0},
	{-1277.1671, 2138.1628, 271.2398, 349.0},
	{-1430.8948, 2259.5820, 273.1096, 349.0},
	{-1576.3053, 2107.0491, 272.9802, 349.0},
	{-1405.2742, 1991.2452, 269.0752, 349.0},
	{-1417.6565, 2132.9199, 257.0093, 359.0}
};
new Float: InterioareA[12][4] = {
	{0.0, 0.0, 0.0, 0.0},
	{2306.1580, -16.2617, 26.7496, 0.0},
	{315.7432, -143.6647, 999.6016, 7.0},
	{-100.403, -24.3921, 1000.72, 3.0},
	{2018.8, 1017.78, 996.875, 10.0},
	{-31.0246, -91.3283, 1003.55, 18.0},
	{363.134, -74.8469, 1001.51, 10.0},
	{0.0, 0.0, 0.0, 0.0},
	{161.355, -96.39, 1001.8, 18.0},
	{0.0, 0.0, 0.0, 0.0},
	{0.0, 0.0, 0.0, 0.0},
	{0.0, 0.0, 0.0, 0.0}
};
new IconitaA[12] = {0, 52, 18, 38, 25, 17, 10, 34, 45, 51, 63, 27};
new Float: HouseInteriors[37][4] = {
	{0.0, 0.0, 0.0, 0.0},
	{223.0797, 1287.7438, 1082.1406, 1.0},
	{2282.7927, -1139.3999, 1050.8984, 11.0},
	{328.0025, 1478.5465, 1084.4375, 15.0},
	{-42.5438, 1406.3199, 1084.4297, 8.0},
	{300.8615, 309.8871, 1003.3047, 4.0},
	{2308.8101, -1212.2432, 1049.0234, 6.0},
	{ 2233.6196, -1114.5808, 1050.8828, 5.0},
	{2259.8242, -1135.7554, 1050.6328, 10.0},
	{2217.8169, -1076.1425, 1050.4844, 1.0},
	{267.1584, 305.2281, 999.1484, 2.0},
	{244.1047, 304.9235, 999.1484, 1.0},
	{235.4070, 1187.3690, 1080.2578, 3.0},
	{490.8654, 1399.1970, 1080.2578, 2.0},
	{24.0680, 1340.5543, 1084.3750, 10.0},
	{-283.9743, 1471.1327, 1084.3750, 15.0},
	{-261.2778, 1456.7443, 1084.3672, 4.0},
	{83.0025, 1322.8451, 1083.8662, 9.0},
	{2317.9451, -1026.1736, 1050.2178, 9.0},
	{2496.0198, -1692.6827, 1014.7422, 3.0},
	{2196.0349, -1204.3772, 1049.0234, 6.0},
	{376.2806, 1417.5321, 1081.3281, 15.0},
	{2269.6677, -1210.3624, 1047.5625, 10.0},
	{447.3249, 1397.5758, 1084.3047, 2.0},
	{386.5427, 1471.8826, 1080.1875, 15.0},
	{22.8908, 1403.7777, 1084.4297, 5.0},
	{2365.3372, -1134.8403, 1050.8750, 8.0},
	{2237.6023, -1080.8840, 1049.0234, 2.0},
	{295.0533, 1473.0192, 1080.2578, 15.0},
	{221.9701, 1140.8445, 1082.6094, 4.0},
	{-68.7771, 1351.9674, 1080.2109, 6.0},
	{260.8823, 1237.9570, 1084.2578, 9.0},
	{2468.4509, -1698.2510, 1013.5078, 2.0},
	{140.1820, 1366.4713, 1083.8594, 5.0},
	{225.6624, 1022.0758, 1084.0159, 7.0},
	{234.2033, 1064.1516, 1084.2117, 6.0},
	{226.7048, 1114.2527, 1080.9950, 5.0}
};
new Float:RuletaPos[4][3] = {
	{1962.3430, 1009.8420, 992.4688},
	{1958.0300, 1009.9407, 992.4688},
	{1958.0306, 1025.3562, 992.4688},
	{1962.3431, 1025.3341, 992.4688}
};
new AchievementName[9][] = {
	"Intra intr-o factiune",
	"Obtine functia de Admin",
	"Obtine functia de Helper",
	"Acumuleaza 50 de ore Jucate",
	"Obtine skill 6 la un job",
	"Achizitioneaza o Casa",
	"Achizitioneaza o Afacere",
	"Achizitioneaza-ti un cont Premium",
	"Deschide un vehicle crate"
};
new TaskName[6][] =
{
	"",
	"Repara vehiculul de 3 ori intr-un PNS",
	"Vinde 10 pesti",
	"Fa 1.000.000$ de la job",
	"Joaca barbut cu un jucator si castiga",
	"Vinde 5 cutii de pizza"
};
new TaskProgress[6] =
{
	0,
	3,
	10,
	1_000_000,
	1,
	5
};
new TaskReward[6][4] =
{
	{0, 0, 0, 0},
	{250_000, 150_000, 1, 0},
	{1_000_000, 500_000, 1, 1},
	{500_000, 250_000, 2, 1},
	{450_000, 50_000, 2, 0},
	{600_000, 150_000, 1, 2}
};
new RadioName[21][] = {
	"Turn Off Radio",
	"Pro FM Romania",
	"Bandit Romania",
	"Taraf Romania",
	"Hot Romania",
	"Gangsta Dance",
	"Gangsta Manele",
	".977 Hitz",
	".977 Mix",
	".977 Alternative",
	"BBC One UK",
	"Dubstep.fm",
	"Hit Romania",
	"ClubMix Romania",
	"Kiss FM Romania [Audio Plugin]",
	"Zu Romania [Audio Plugin]",
	"Popular",
	"Trap.FM",
	"Tequila",
	"OG Trap",
	"OG Manele"
};
new Radios[21][] = {
	"",
	"http://stream.profm.ro:8012/profm.mp3",
	"http://live.radiobandit.ro:8000",
	"http://radiotaraf.com/live.m3u",
	"http://live.radiohot.ro:8000/",
	"http://dance.radiogangsta.ro:8800",
	"http://live.radiogangsta.ro:8800",
	"http://7619.live.streamtheworld.com:80/977_HITS_SC",
	"http://7639.live.streamtheworld.com:80/977_MIX_SC",
	"http://7579.live.streamtheworld.com:80/977_ALTERN_SC",
	"http://www.listenlive.eu/bbcradio1.m3u",
	"http://dubstep.fm/128.pls",
	"http://www.radio-hit.ro/asculta.m3u",
	"http://live.radioclubmix.ro:9999",
	"http://80.86.106.136/listen.pls",
	"http://www.radiozu.ro/live.m3u",
	"http://livemp3.radiopopular.ro:7777",
	"http://radio.trap.fm/listen128.pls",
	"http://radiotequila.ro/hiphop.m3u",
	"http://45.14.236.23:8010/radio.mp3",
	"http://45.14.236.23:8000/radio.mp3"
};
new Float:fvPos[9][4] = {
	{0.0, 0.0, 0.0, 0.0},
	{1559.9642, -1627.6425, 13.3828, 91.9998},
	{2497.0918, -1673.7908, 13.3359, 73.2829},
	{2228.8120, -1318.5944, 23.9844, 354.0315},
	{1628.3993, -1676.1871, 13.4189, 4.2651},
	{1064.2643, -324.6978,  73.7193,  88.8890},
	{1798.4194, -1897.0872, 13.4028, 314.6930},
	{1184.3923, -1331.7781, 13.5782, 173.3570},
	{1567.8333, -1880.2378, 13.5469, 5.3463}
};
new fvVehicles[9][5] = 
{	{0, 0, 0},
	{596, 523, 411, 497, 599},
	{409, 521, 579, 480, 560},
	{409, 521, 579, 480, 560},
	{582, 488},
	{521, 560, 487, 469},
	{559, 415, 560, 541, 411},
	{416},
	{410, 426, 411}
};
new Float:TruckerDest[7][3] = {
	{-76.1664, -1128.8229, 1.0781},
	{65.3736, -228.7961, 1.5724},
	{-164.8333, 1227.4865, 19.7422},
	{-1693.6986, 26.0635, 3.5547},
	{-1541.0037, -2749.9517, 48.5346},
	{-271.2859, -2186.5825, 28.8165},
	{2357.0854, 2743.0854, 10.8203}
}; 
new Float:gRandomAJailSpawns[4][3] = {
	{215.5260, 110.5124, 1000.0156},
	{219.3602, 109.9994, 1000.0156},
	{223.3645, 109.9972, 1000.0156},
	{227.1875, 110.2887, 1000.0156}
};
new
	Float:gAtms[10][4] =
	{
		{1929.96558, -1782.28809, 13.15977, 88.01996},
		{1454.81201, -1752.14929, 13.14474, -183.36006},
		{1123.92957, -923.57220, 42.99923, 2.88001},
		{2663.45142, -1634.27722, 10.47529, 0.00000},
		{826.75696, -1760.47925, 13.12148, -0.06000},
		{328.07132, -1340.67297, 14.05205, 30.90001},
		{799.95880, -1578.56067, 13.11972, -4.62000},
		{1099.81226, -1414.75269, 13.21982, 181.43980},
		{1672.85535, -1448.84241, 13.01308, -179.82005},
		{2139.52490, -1186.10144, 23.52678, 89.93995}
	},
	AtmObject[sizeof(gAtms)],
	Text3D: AtmText[sizeof(gAtms)],
	Float: AtmHealth[sizeof(gAtms)],
	Cuvinte[15][2][32] =
	{
		{"poacc", "copac"},
		{"simana", "masina"},
		{"mpas", "samp"},
		{"noridad", "android"},
		{"veresr", "server"},
		{"macera", "camera"},
		{"leftone", "telefon"},
		{"saca", "casa"},
		{"maptan", "pamant"},
		{"clcalauort", "calculator"},
		{"omraain", "romania"},
		{"iacne", "caine"},
		{"ispiac", "pisica"},
		{"eretep", "perete"},
		{"niba", "bani"}
	}
;
new
	Float: WeaponDamage[55] =
	{
		1.0, // 0 - Fist
		1.0, // 1 - Brass knuckles
		1.0, // 2 - Golf club
		1.0, // 3 - Nitestick
		1.0, // 4 - Knife
		1.0, // 5 - Bat
		1.0, // 6 - Shovel
		1.0, // 7 - Pool cue
		1.0, // 8 - Katana
		1.0, // 9 - Chainsaw
		1.0, // 10 - Dildo
		1.0, // 11 - Dildo 2
		1.0, // 12 - Vibrator
		1.0, // 13 - Vibrator 2
		1.0, // 14 - Flowers
		1.0, // 15 - Cane
		82.5, // 16 - Grenade
		0.0, // 17 - Teargas
		1.0, // 18 - Molotov
		9.9, // 19 - Vehicle M4 (custom)
		46.2, // 20 - Vehicle minigun (custom)
		82.5, // 21 - Vehicle rocket (custom)
		8.25, // 22 - Colt 45
		13.2, // 23 - Silenced
		46.2, // 24 - Deagle
		49.5, // 25 - Shotgun
		49.5, // 26 - Sawed-off
		39.6, // 27 - Spas
		6.6, // 28 - UZI
		8.25, // 29 - MP5
		9.9, // 30 - AK47
		9.9, // 31 - M4
		6.6, // 32 - Tec9
		24.75, // 33 - Cuntgun
		200.0, // 34 - Sniper
		82.5, // 35 - Rocket launcher
		82.5, // 36 - Heatseeker
		1.0, // 37 - Flamethrower
		46.2, // 38 - Minigun
		82.5, // 39 - Satchel
		0.0, // 40 - Detonator
		0.33, // 41 - Spraycan
		0.33, // 42 - Fire extinguisher
		0.0, // 43 - Camera
		0.0, // 44 - Night vision
		0.0, // 45 - Infrared
		0.0, // 46 - Parachute
		0.0, // 47 - Fake pistol
		2.64, // 48 - Pistol whip (custom)
		9.9, // 49 - Vehicle
		330.0, // 50 - Helicopter blades
		82.5, // 51 - Explosion
		1.0, // 52 - Car park (custom)
		1.0, // 53 - Drowning
		165.0  // 54 - Splat
	},
	WeaponToSlot[47] =
	{
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		10,
		10,
		10,
		10,
		10,
		10,
		8,
		8,
		8,
		0,
		0,
		0,
		2,
		2,
		2,
		3,
		3,
		3,
		4,
		4,
		5,
		5,
		4,
		6,
		6,
		7,
		7,
		7,
		7,
		8,
		12,
		9,
		9,
		9,
		11,
		11,
		11
	},
	WeaponToObject[47] =
	{
		0,
		331,
		333,
		334,
		335,
		336,
		337,
		338,
		339,
		341,
		321,
		322,
		323,
		324,
		325,
		326,
		342,
		343,
		344,
		0,
		0,
		0,
		346,
		347,
		348,
		349,
		350,
		351,
		352,
		353,
		355,
		356,
		372,
		357,
		358,
		359,
		360,
		361,
		362,
		363,
		364,
		365,
		366, 
		367,
		368,
		369,
		371
	}
;

new aVehicleNames[212][] ={
	{"Landstalker"}, {"Bravura"}, {"Buffalo"}, {"Linerunner"}, {"Perennial"}, {"Sentinel"}, {"Dumper"}, {"Firetruck"}, {"Trashmaster"}, {"Stretch"}, {"Manana"}, {"Infernus"}, 
	{"Voodoo"}, {"Pony"}, {"Mule"}, {"Cheetah"}, {"Ambulance"}, {"Leviathan"}, {"Moonbeam"}, {"Esperanto"}, {"Taxi"}, {"Washington"}, {"Bobcat"}, {"Mr Whoopee"}, {"BF Injection"},
	{"Hunter"}, {"Premier"}, {"Enforcer"}, {"Securicar"}, {"Banshee"}, {"Predator"}, {"Bus"}, {"Rhino"}, {"Barracks"}, {"Hotknife"}, {"Trailer"}, {"Previon"}, {"Coach"}, {"Cabbie"},
	{"Stallion"}, {"Rumpo"}, {"RC Bandit"}, {"Romero"}, {"Packer"}, {"Monster"}, {"Admiral"}, {"Squalo"}, {"Seasparrow"}, {"Pizzaboy"}, {"Tram"}, {"Trailer"}, {"Turismo"}, {"Speeder"}, 
	{"Reefer"}, {"Tropic"}, {"Flatbed"}, {"Yankee"}, {"Caddy"}, {"Solair"}, {"Berkley's RC Van"}, {"Skimmer"}, {"PCJ-600"}, {"Faggio"}, {"Freeway"}, {"RC Baron"}, {"RC Raider"},
	{"Glendale"}, {"Oceanic"}, {"Sanchez"}, {"Sparrow"}, {"Patriot"}, {"Quad"}, {"Coastguard"}, {"Dinghy"}, {"Hermes"}, {"Sabre"}, {"Rustler"}, {"ZR-350"}, {"Walton"}, {"Regina"},
	{"Comet"}, {"BMX"}, {"Burrito"}, {"Camper"}, {"Marquis"}, {"Baggage"}, {"Dozer"}, {"Maverick"}, {"News Chopper"}, {"Rancher"}, {"FBI Rancher"}, {"Virgo"}, {"Greenwood"}, {"Jetmax"}, 
	{"Hotring"}, {"Sandking"}, {"Blista Compact"}, {"Police Maverick"}, {"Boxville"}, {"Benson"}, {"Mesa"}, {"RC Goblin"}, {"Hotring Racer A"}, {"Hotring Racer B"}, {"Bloodring Banger"}, 
	{"Rancher"}, {"Super GT"}, {"Elegant"}, {"Journey"}, {"Bike"}, {"Mountain Bike"}, {"Beagle"}, {"Cropduster"}, {"Stuntplane"}, {"Tanker"}, {"Road Train"}, {"Nebula"}, {"Majestic"}, 
	{"Buccaneer"}, {"Shamal"}, {"Hydra"}, {"FCR-900"}, {"NRG-500"}, {"HPV-1000"}, {"Cement Truck"}, {"Tow Truck"}, {"Fortune"}, {"Cadrona"}, {"FBI Truck"}, {"Willard"}, {"Forklift"}, 
	{"Tractor"}, {"Combine"}, {"Feltzer"}, {"Remington"}, {"Slamvan"}, {"Blade"}, {"Freight"}, {"Streak"}, {"Vortex"}, {"Vincent"}, {"Bullet"}, {"Clover"}, {"Sadler"}, {"Firetruck"}, 
	{"Hustler"}, {"Intruder"}, {"Primo"}, {"Cargobob"}, {"Tampa"}, {"Sunrise"}, {"Merit"}, {"Utility"}, {"Nevada"}, {"Yosemite"}, {"Windsor"}, {"Monster A"}, {"Monster B"}, {"Uranus"},
	{"Jester"}, {"Sultan"}, {"Stratum"}, {"Elegy"}, {"Raindance"}, {"RC Tiger"}, {"Flash"}, {"Tahoma"}, {"Savanna"}, {"Bandito"}, {"Freight"}, {"Trailer"}, {"Kart"}, {"Mower"}, 
	{"Duneride"}, {"Sweeper"}, {"Broadway"}, {"Tornado"}, {"AT-400"}, {"DFT-30"}, {"Huntley"}, {"Stafford"}, {"BF-400"}, {"Newsvan"}, {"Tug"}, {"Trailer"}, {"Emperor"}, {"Wayfarer"}, 
	{"Euros"}, {"Hotdog"}, {"Club"}, {"Trailer"}, {"Trailer"}, {"Andromada"}, {"Dodo"}, {"RCCam"}, {"Launch"}, {"Police Car (LSPD)"}, {"Police Car (SFPD)"}, {"Police Car (LVPD)"}, 
	{"Police Ranger"}, {"Picador"}, {"S.W.A.T. Van"}, {"Alpha"}, {"Phoenix"}, {"Glendale"}, {"Sadler"}, {"Luggage Trailer A"}, {"Luggage Trailer B"}, {"Stair Trailer"}, {"Boxville"}, 
	{"Farm Plow"}, {"Utility Trailer"}
};
#define GetVehicleName(%0) aVehicleNames[%0 - 400]
stock Text3D:CreateStreamed3DTextLabel(const string[], color, Float:x, Float:y, Float:z, Float:draw_distance, vw, interior){
	return CreateDynamic3DTextLabel(string, color, x, y, z, draw_distance, INVALID_PLAYER_ID, INVALID_PLAYER_ID, 1, vw, interior, -1, 100.0);
}
stock Text3D:CreateTextPickup(const string[], color, Float:x, Float:y, Float:z, Float:draw_distance, vw, interior, modelid){
	CreateDynamicPickup(modelid, 1, x, y, z, vw, interior);
	return CreateStreamed3DTextLabel(string, color, x, y, z, draw_distance, vw, interior);
}
new
	Float: ClanHQInteriors[4][4] =
	{
		{0.0, 0.0, 0.0, 0.0},
		{3.0, 1494.3173, 1304.2611, 1093.2891},
		{12.0, 2324.4199, -1145.5683, 1050.7100},
		{18.0, 1726.8571, -1639.0854, 20.2236}
	}
;
enum ClanHQInfo
{
	cType, Float: cX, Float: cY, Float: cZ, cOwnerID, cPickup, Text3D: cText, cArea, cMapIcon
}
new
	ClanHQs[MAX_CLANS][ClanHQInfo], LoadeadClanHQs, bool: HasClanHQ[MAX_CLANS], ClanToHQ[MAX_CLANS]
;
function LoadClanHQs()
{
	LoadeadClanHQs = cache_num_rows();

	printf("%d Sedii de Clanuri Incarcate.", LoadeadClanHQs);

	for(new i = 1; i <= LoadeadClanHQs; i++)
	{
		new
			j = i - 1
		;

		cache_get_value_name_int(j, "Type", ClanHQs[i][cType]);
		cache_get_value_name_float(j, "X", ClanHQs[i][cX]);
		cache_get_value_name_float(j, "Y", ClanHQs[i][cY]);
		cache_get_value_name_float(j, "Z", ClanHQs[i][cZ]);
		cache_get_value_name_int(j, "OwnerID", ClanHQs[i][cOwnerID]);

		HasClanHQ[ClanHQs[i][cOwnerID]] = true;

		ClanToHQ[ClanHQs[i][cOwnerID]] = i;

		UpdateLabel(5, i);
	}

	return true;
}
enum BillboardInfo
{
	Float: bX, Float: bY, Float: bZ, Float: bRX, Float: bRY, Float: bRZ, bOwner[MAX_PLAYER_NAME], bText[32 + 1], bPrice, Float: bPX, Float: bPY, Float: bPZ, bPickup, Text3D: bTextLabel, bArea, bObject
}
new
	Billboards[10 + 1][BillboardInfo], LoadedBillboards
;
function LoadBillboards()
{
	LoadedBillboards = cache_num_rows();

	for(new i = 1; i <= LoadedBillboards; i++)
	{
		new
			j = i - 1
		;

		cache_get_value_name_float(j, "X", Billboards[i][bX]);
		cache_get_value_name_float(j, "Y", Billboards[i][bY]);
		cache_get_value_name_float(j, "Z", Billboards[i][bZ]);
		cache_get_value_name_float(j, "RX", Billboards[i][bRX]);
		cache_get_value_name_float(j, "RY", Billboards[i][bRY]);
		cache_get_value_name_float(j, "RZ", Billboards[i][bRZ]);
		cache_get_value_name(j, "Owner", Billboards[i][bOwner]);
		cache_get_value_name(j, "Text", Billboards[i][bText]);
		cache_get_value_name_int(j, "Price", Billboards[i][bPrice]);
		cache_get_value_name_float(j, "PX", Billboards[i][bPX]);
		cache_get_value_name_float(j, "PY", Billboards[i][bPY]);
		cache_get_value_name_float(j, "PZ", Billboards[i][bPZ]);

		UpdateLabel(4, i);
	}
	printf("%d Panouri Incarcate.", LoadedBillboards);
	return true;
}
enum jInfo {
	jName[64], Float: jX, Float: jY, Float: jZ, jOwner[25], jBalance, jPrice, Text3D: jText, jPickup, jLastProp, jLastDay, jArea, jMapIcon
};
new JobInfo[MAX_JOBS + 1][jInfo];
function LoadJobs(){
	new jobs = cache_num_rows();
	for(new i = 1; i <= jobs; i++){
		new j = i - 1;

		cache_get_value_name(j, "JobName", JobInfo[i][jName]);
		cache_get_value_name_float(j, "X", JobInfo[i][jX]);
		cache_get_value_name_float(j, "Y", JobInfo[i][jY]);
		cache_get_value_name_float(j, "Z", JobInfo[i][jZ]);
		cache_get_value_name(j, "Owner", JobInfo[i][jOwner]);
		cache_get_value_name_int(j, "Balance", JobInfo[i][jBalance]);
		cache_get_value_name_int(j, "Price", JobInfo[i][jPrice]);
		cache_get_value_name_int(j, "LastProp", JobInfo[i][jLastProp]);
		cache_get_value_name_int(j, "LastDay", JobInfo[i][jLastDay]);

		UpdateLabel(3, i);
	}
	printf("%d Joburi Incarcate.", jobs);
	ChooseDailyJob();
	return true;
}
stock ClosestJob(playerid)
{
	return InJobZone[playerid];
}

enum zInfo { zID, zOwned, Float:zMinX, Float:zMinY, Float:zMaxX, Float:zMaxY };
new TurfInfo[19][zInfo], Turfs[sizeof(TurfInfo)], TurfArea[sizeof(TurfInfo)];
enum wInfo {wFaction, wAttacker, wTime};
new 
	WarInfo[wInfo], WarScoreF[9], PlayerKills[MAX_PLAYERS], PlayerDeaths[MAX_PLAYERS], bool: ServerWars, WarRounds, WarWinRounds[9], RoundScore[9],
	bool: ActiveWars = true, TodayWar[4], TodayTurf[4], LastWar
;

enum ccInfo
{
	clanID, clanSlots, clanName[20], clanRankName1[32], clanRankName2[32], clanRankName3[32], clanRankName4[32], clanRankName5[32], clanRankName6[32], clanRankName7[32],
	clanColor[20], clanSafe, clanPoints, Float: cGarageX, Float: cGarageY, Float: cGarageZ, Text3D:cGarageLabel, cGaragePickup, cVehs[9], cMotd[128], cClanTag[5]
};
new
	ClanInfo[MAX_CLANS][ccInfo],
	serverClans = 0,
	ClanRequestName[MAX_PLAYERS][20]
;

enum clanZonesInformations
{
	clanZoneID, clanZoneClan, Text3D:clanZoneLabel, clanZoneAttacked, clanZoneProcent, Float: clanZoneObjX, Float: clanZoneObjY, Float: clanZoneObjZ, clanZoneDeelay
};
new
	ClanZoneInfo[11][clanZonesInformations],
	serverClanZones = 0
;

enum pEnum
{
	pLevel, pAdmin, pHelper, pPremiumPoints, pPetlevel, pRespect, pWantedLevel, pClan, pCRank, pCWarns, pPetPoints, pJob, pHeadValue, pJailed, pJailTime, pMats, pDrugs[4],
	pMember, pRank, pFACWarns, pFpunish, pFlyLic, pBoatLic, pModel, pHouse, pBizz, pVehLic, pRob, pEscapePoints, pWarns, pFuel, pRented, pGunLic, pPayDay, pSQLID, pFPS,
	pVehSlots, pDrunkLevelLast, pFactionJoin, pRmute, pNmute, pBasicCrate, pNormalCrate, pMediumCrate, pJobBoost, pGiftPoints, pTaxa, pDiamondCrate, pVehicleCrate, pRaport,
	pHelpedPlayers, pMancare, pApa, pBurger, pSoda, pOGPoints, pSkills[MAX_JOBS + 1], pTure[MAX_JOBS + 1], pTaskuri, pTaskActual, pTaskProgress, pSelectedVehicle[MAX_PLAYERS],
	pSpin, pFragments[9], pFragmentCrate, pWeapons[7], pMiliarde, pActivity, pStaffWarns, pZiua, pSkinCrate, pSkins[MAX_SKINS], pSkinSlots, pMilestone, pPin, pOwnedJob, pManager,
	pSession, pVehLicSuspend, pMuteTime, pArea, pGiftBoxSeconds, pGiftToCollect, pBillboard, pSpawnChange, pPC, pRealMoney, pOGCrate, pKills, pDeaths, pClanTag, pBattlepassProgress[18],
	pBattlepassTier, pBattlepassXP, pBattlepassType, pBattlepassPremiums, pPotions[4], pActivePotions[4], pPerkProgress[13], pPerkPoints, pTodayTasks[3], pVouchers[5], pPayDaysToday,
	pHuntCollected, pPrizeToCollect, pSupreme, pSupremeCrate, pLastFeedme, pHiddens, pActiveStatus[2],

	Float: pConnectTime, Float: pLast7, Float: pLastMonth,

	bool: pPet, bool: pPetStatus, bool: pParkour, bool: pTutorial, bool: pSettings[13], bool: pTrivia, bool: pBonus, bool: pYouTuber, bool: pGasCan, bool: pZiuaColectat,
	bool: pWTalkie, bool: pPhoneBlocked[MAX_PLAYERS], bool: pSetGuns[5], bool: pAchievement[9], bool: pDailyStunt, bool: pMedKit, bool: pSkyWarsWinToday,
	bool: pGiftBoxOpenedToday, bool: pDailyQuestToday, bool: pHeists[3], bool: pPremium, bool: pVIP, bool: pLoggedToday,

	pKey[32 + 1], pColor[7], pNormalName[MAX_PLAYER_NAME], pPetName[25], pVictim[64], pAccused[64], pCrime1[64], pCrime2[64], pCrime3[64], pCreatorCode[32], pDiscord[64],

	pVeh[MAX_PERSONAL_VEHICLES], pVehID[MAX_PERSONAL_VEHICLES], pVehPaintJ[MAX_PERSONAL_VEHICLES], pVehModel[MAX_PERSONAL_VEHICLES], pVehColor1[MAX_PERSONAL_VEHICLES],
	pVehColor2[MAX_PERSONAL_VEHICLES], pVehBuyTime[MAX_PERSONAL_VEHICLES], pVehGas[MAX_PERSONAL_VEHICLES], pVehNeon[MAX_PERSONAL_VEHICLES], pBoughtMethod[MAX_PERSONAL_VEHICLES],

	Float: pVehLocX[MAX_PERSONAL_VEHICLES], Float: pVehLocY[MAX_PERSONAL_VEHICLES], Float: pVehLocZ[MAX_PERSONAL_VEHICLES], Float: pVehAngle[MAX_PERSONAL_VEHICLES],
	Float: pVehKM[MAX_PERSONAL_VEHICLES],

	bool: pVehStage[MAX_PERSONAL_VEHICLES], bool: pVehWorking[MAX_PERSONAL_VEHICLES], bool: pVehNeonCustom[MAX_PERSONAL_VEHICLES], bool: pVehVip[MAX_PERSONAL_VEHICLES],
	bool: pVehRainbow[MAX_PERSONAL_VEHICLES], bool: pVehRainbowOn[MAX_PERSONAL_VEHICLES], bool: pVehInGarage[MAX_PERSONAL_VEHICLES]

}

new
	PlayerInfo[MAX_PLAYERS][pEnum]
;

function ResetSetGuns(playerid)
{
	for(new i = 0; i < 5; i++)
	{
		PlayerInfo[playerid][pSetGuns][i] = false;
	}
	
	Query_Mysql("update users set SetGuns = '%d|%d|%d|%d|%d' where id = %d",
		PlayerInfo[playerid][pSetGuns][0], PlayerInfo[playerid][pSetGuns][1], PlayerInfo[playerid][pSetGuns][2],
		PlayerInfo[playerid][pSetGuns][3], PlayerInfo[playerid][pSetGuns][4], PlayerInfo[playerid][pSQLID]);

	PlayerInfo[playerid][pKills] = 0;
	pUpdateInt(playerid, "Kills", PlayerInfo[playerid][pKills]);

	PlayerInfo[playerid][pDeaths] = 0;
	pUpdateInt(playerid, "Deaths", PlayerInfo[playerid][pDeaths]);

	PlayerTextDrawHide(playerid, WarPTD);
	return true;
}

function bool: HavePremium(playerid)
{
	if(PlayerInfo[playerid][pPremium])
	{
		return true;
	}

	return false;
}

function bool: HaveVIP(playerid)
{
	if(PlayerInfo[playerid][pVIP])
	{
		return true;
	}

	return false;
}

function bool: HaveSupreme(playerid)
{
	if(PlayerInfo[playerid][pSupreme] - gettime() > 0)
	{
		return true;
	}

	return false;
}

new
	VipText[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][64],
	Float: VipTextPos[6][MAX_PLAYERS][MAX_PERSONAL_VEHICLES],
	VipTextColor[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][7]
;
new
	PinText[MAX_PLAYERS][4]
;

enum RadarEnum
{
	rOwner, rSpeed, rArea
};

new
	RadarInfo[1000][RadarEnum]
;

enum sEnum
{
	sSpectate,
	Float: sPosX,
	Float: sPosY,
	Float: sPosZ,
	sState,
	sWorld,
	sInterior,
	sVehicle,
	sSeat,
	sHouse,
	sHQ,
	sBizz
};
new SpecInfo[MAX_PLAYERS + 1][sEnum];

stock SendSplitMessage(playerid, color, const message[]){
	if(!IsPlayerConnected(playerid)) return false;

	new lin = strlen(message) / 128, line[128 + 5], index;

	if((strlen(message) % 128)) lin++;

	while(index < lin){
		if(index == 0) strmid(line, message, (index * 128), (index * 128) + 128);
		else strmid(line, message, (index * 128), (index * 128) + 128);
		if(lin > 1){
			if(index == 0) format(line, sizeof line, "%s ...", line);
			else if(index > 0 && (index + 1) < lin) format(line, sizeof line, "%s ...", line);
			else format(line, sizeof line, "... %s", line);
		}
		SendClientMessage(playerid, color, line);
		index++;
	}
	return true;
}

stock SendMsg(playerid, color, const message[], va_args<>)
{
	if(!IsPlayerConnected(playerid))
		return false;

	new
		out[256]
	;

	va_format(out, sizeof out, message, va_start<3>);

	return SendSplitMessage(playerid, color, out);
}

enum HouseEnum {
	hID, Float:hEntranceX, Float:hEntranceY, Float:hEntranceZ, Float:hExitX, Float:hExitY, Float:hExitZ, hOwner[25], hPrice, hInterior,
	hRent, hTakings, Float: hGarageX, Float: hGarageY, Float: hGarageZ, hGarage, bool: hGarageLocked, hArea, hGarageArea
};
new HouseInfo[MAX_HOUSES + 1][HouseEnum], Text3D:HouseLabel[sizeof(HouseInfo)], Text3D:GarageLabel[sizeof(HouseInfo)], HousePickup[sizeof(HouseInfo)], GaragePickup[sizeof(HouseInfo)], HouseIcon[sizeof(HouseInfo)];
enum BizzEnum {
	bID, bOwner[25], Float:bEntranceX, Float:bEntranceY, Float:bEntranceZ, bPrice, bEntranceCost, bTill, bType, bArea
};
new BizzInfo[MAX_BUSINESS + 1][BizzEnum], Text3D:BizzLabel[sizeof(BizzInfo)], BizzIcon[sizeof(BizzInfo)], BizzPickup[sizeof(BizzInfo)];
new nitro[3][0] = {{1008}, {1009}, {1010}};
new hydraulics[1][0] = { {1087}};
new wheels[17][0] = {
	{1025}, {1073}, {1074}, {1075}, {1076}, {1077}, {1078}, {1079}, {1080}, {1081}, {1082}, {1083}, {1084}, {1085}, {1096}, {1097}, {1098}};
new spoiler[20][0] = {
	{1000}, {1001}, {1002}, {1003}, {1014}, {1015}, {1016}, {1023}, {1058}, {1060}, {1049}, {1050}, {1138}, {1139}, {1146}, {1147}, {1158}, {1162}, {1163}, {1164}};
new fbumper[23][0] = {
	{1117}, {1152}, {1153}, {1155}, {1157}, {1160}, {1165}, {1167}, {1169}, {1170}, {1171}, {1172}, {1173}, {1174}, {1175}, {1179}, {1181}, {1182}, {1185}, {1188}, {1189}, {1192}, {1193}};
new rbumper[22][0] = {
	{1140}, {1141}, {1148}, {1149}, {1150}, {1151}, {1154}, {1156}, {1159}, {1161}, {1166}, {1168}, {1176}, {1177}, {1178}, {1180}, {1183}, {1184}, {1186}, {1187}, {1190}, {1191}};
new exhaust[28][0] = {
	{1018}, {1019}, {1020}, {1021}, {1022}, {1028}, {1029}, {1037}, {1043}, {1044}, {1045}, {1046}, {1059}, {1064}, {1065}, {1066}, {1089}, {1092}, {1104}, {1105}, {1113}, {1114},
	{1126}, {1127}, {1129}, {1132}, {1135}, {1136}};
new bventr[2][0] = {{1142}, {1144}};
new bventl[2][0] = {{1143}, {1145}};
new bscoop[4][0] = {{1004}, {1005}, {1011}, {1012}};
new rscoop[17][0] = {{1006}, {1032}, {1033}, {1035}, {1038}, {1053}, {1054}, {1055}, {1061}, {1067}, {1068}, {1088}, {1091}, {1103}, {1128}, {1130}, {1131}};
new lskirt[21][0] = {{1007}, {1026}, {1031}, {1036}, {1039}, {1042}, {1047}, {1048}, {1056}, {1057}, {1069}, {1070}, {1090}, {1093}, {1106}, {1108}, {1118}, {1119}, {1133}, {1122}, {1134}};
new rskirt[21][0] = {{1017}, {1027}, {1030}, {1040}, {1041}, {1051}, {1052}, {1062}, {1063}, {1071}, {1072}, {1094}, {1095}, {1099}, {1101}, {1102}, {1107}, {1120}, {1121}, {1124}, {1137}};
new vbase[1][0] = {{1086}};
new rbbars[4][0] = {{1109}, {1110}, {1123}, {1125}};
new fbbars[2][0] = {{1115}, {1116}};
new vlights[2][0] = {{1013}, {1024}};
enum vStockInfo {
	vID, vStock, vModel
};
new StockInfo[75][vStockInfo];
enum Factions {
	fID, fName[64], Float:fcX, Float:fcY, Float:fcZ, Float:fceX, Float:fceY, Float:fceZ, fMats, fDrugs, fMembers, fInterior, fMotd[128], fArea, fSfvArea
};
new FacInfo[9][Factions];
new GunNames[55][] = {
	"Punch","Brass Knuckles","Golf Club","Nitestick","Knife","Baseball Bat","Showel","Pool Cue","Katana","Chainsaw","Purple Dildo","Small White Dildo","Long White Dildo","Vibrator",
	"Flowers","Cane","Grenade","Tear Gas Grenade","Molotov","Vehicle Missile","Hydra Flare","Jetpack","Colt .45","Silenced Colt .45","Desert Eagle","Shotgun","Sawn-off",
	"Combat Shotgun","Micro UZI","MP5","AK-47","M4A1","Tec-9","Rifle","Sniper Rifle","Rocket Launcher","HS Rocket Launcher","Flamethrower","Minigun","Satchel Charge","Detonator",
	"Spraycan","Fire Extinguisher","Camera","Nightvision Goggles","Thermal Goggles","Parachute","Fake Pistol","","Vehicle","Helicopter","Explosion","","Drowned","Splat"};
main(){}

stock Float: BEnX(bid) return BizzInfo[bid][bEntranceX];
stock Float: BEnY(bid) return BizzInfo[bid][bEntranceY];
stock Float: BEnZ(bid) return BizzInfo[bid][bEntranceZ];

stock Float: BExX(bid) return InterioareA[BizzInfo[bid][bType]][0];
stock Float: BExY(bid) return InterioareA[BizzInfo[bid][bType]][1];
stock Float: BExZ(bid) return InterioareA[BizzInfo[bid][bType]][2];

stock BInt(bid) return floatround(InterioareA[BizzInfo[bid][bType]][3]);
function InsertClanHQ(playerid, session, xType, Float: xX, Float: xY, Float: xZ, xOwnerID)
{
	if(PlayerInfo[playerid][pSession] != session) return true;

	new
		id = cache_insert_id(),
		chType[8],
		Cost[4] = {0, 100, 300, 500}
	;

	ClanHQs[id][cType] = xType;
	ClanHQs[id][cX] = xX;
	ClanHQs[id][cY] = xY;
	ClanHQs[id][cZ] = xZ;
	ClanHQs[id][cOwnerID] = xOwnerID;

	HasClanHQ[xOwnerID] = true;

	ClanToHQ[ClanHQs[id][cOwnerID]] = id;

	LoadeadClanHQs ++;

	UpdateLabel(5, id);

	switch(xType)
	{
		case 1:
		{
			format(chType, sizeof(chType), "Mic");
		}
		case 2:
		{
			format(chType, sizeof(chType), "Mediu");
		}
		case 3:
		{
			format(chType, sizeof(chType), "Mare");
		}
	}

	SendToClan(xOwnerID, GetClanColor(xOwnerID), "Clan >> {ffffff}%s a cumparat un Clan HQ %s pentru %dPP.", GetName(playerid), chType, Cost[xType]);
	return true;
}
timer KickEx[200](playerid, session)
{	
	if(PlayerInfo[playerid][pSession] != session) return true;
	Kick(playerid);
	return true;
}
function AKick(playerid, const reason[]){
	if(!Logat[playerid]) return true;
	if(PlayerInfo[playerid][pAdmin]) return Info(playerid, "Ai fost detectat folosind %s.", reason);
	va_SendClientMessageToAll(COLOR_SANCTION, "Kick >> %s a fost dat afara, motiv: %s.", GetName(playerid), reason);
	defer KickEx(playerid, PlayerInfo[playerid][pSession]);
	return true;
}
function Float:GetDistanceBetweenPlayers(playerid, id)
{
	new
		Float: x,
		Float: y,
		Float: z,
		Float: xx,
		Float: yy,
		Float: zz
	;

	if(!IsPlayerConnected(playerid) && !IsPlayerConnected(id))
		return -1.00;

	if(Spectate[id] != -1)
		return 9999.9;

	GetPlayerPos(playerid, x, y, z);

	GetPlayerPos(id, xx, yy, zz);

	return floatsqroot(floatpower(floatabs(floatsub(x, xx)), 2) + floatpower(floatabs(floatsub(y, yy)), 2) + floatpower(floatabs(floatsub(z, zz)), 2));
}
stock Float:GetDistanceBetweenPoints(Float: x, Float: y, Float: z, Float: xx, Float: yy, Float: zz)
	return floatsqroot(floatpower(floatabs(floatsub(x, xx)), 2) + floatpower(floatabs(floatsub(y, yy)), 2) + floatpower(floatabs(floatsub(z, zz)), 2));
stock sendNearbyMessage(playerid, Float: range, color, const string[], va_args<>)
{
	new
		Float: x,
		Float: y,
		Float: z
	;
	GetPlayerPos(playerid, x, y, z);
	va_format(String, 144, string, va_start<4>);
	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPoint(i, range, x, y, z) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && GetPlayerInterior(playerid) == GetPlayerInterior(i))
		{
			SendMsg(i, color, String);
		}
	}
	return true;
}
function LeaderChat(color,const string[])
{
	new
		bool: Vazut[MAX_PLAYERS]
	;
	foreach(new i : Leaders)
	{
		if(PlayerInfo[i][pSettings][3] == false)
		{
			SendMsg(i, color, string);
			Vazut[i] = true;
		}
	}
	foreach(new i : Admins)
	{
		if(PlayerInfo[i][pSettings][3] == false && Vazut[i] == false)
		{
			SendMsg(i, color, string);
		}
	}
	return true;
}
function SendVip(color, const string[])
{
	new
		bool: Vazut[MAX_PLAYERS]
	;
	foreach(new i : Vips)
	{
		if(PlayerInfo[i][pSettings][5] == false)
		{
			SendMsg(i, color, string);
			Vazut[i] = true;
		}
	}
	foreach(new i : Admins)
	{
		if(PlayerInfo[i][pSettings][5] == false && Vazut[i] == false)
		{
			SendMsg(i, color, string);
		}
	}
	return true;
}	
stock SendAdmins(color, const string[], level, va_args<>)
{
	va_format(String, 144, string, va_start<3>);
	foreach(new i : Admins)
	{
		if(PlayerInfo[i][pAdmin] >= level)
		{
			SendMsg(i, color, String);
		}
	}
	return true;
} 
stock SendHelpers(color, const string[], level, va_args<>)
{
	va_format(String, 144, string, va_start<3>);
	foreach(new i : Helpers)
	{
		if(PlayerInfo[i][pHelper] >= level)
		{
			SendMsg(i, color, String);
		}
	}
	return true;
}
stock SendFamilyMessage(family, color, const text[], va_args<>)
{
	va_format(String, 144, text, va_start<3>);
	foreach(new x : FactionMembers[family])
	{
		if(PlayerInfo[x][pSettings][1] == false)
		{
			SendMsg(x, color, String);
		}
	}
	foreach(new x : Admins)
	{
		if(specfaction[x] == family)
		{
			SendMsg(x, color, String);
		}
	}
	return true;
}
function Query_Mysql(const text[], va_args<>){
	gString[0] = (EOS);
	va_format(gString, sizeof(gString), text, va_start<1>);
	mysql_tquery(SQL, gString);
	return true;	
}
function pUpdateInt(playerid, const varname[], varnameingame){
	Query_Mysql("UPDATE `users` SET `%s` = '%d' WHERE `id` = '%d'", varname, varnameingame, PlayerInfo[playerid][pSQLID]);
	return true;
}
function pUpdateStr(playerid, const varname[], const varnameingame[]){
	new Query[1024];
	mysql_format(SQL, Query, 1024, "UPDATE `users` SET `%s` = '%e' WHERE `id` = '%d'", varname, varnameingame, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, Query);
	return true;
}
function pUpdateFloat(playerid, const varname[], Float: varnameingame){
	Query_Mysql("UPDATE `users` SET `%s` = '%f' WHERE `id` = '%d'", varname, varnameingame, PlayerInfo[playerid][pSQLID]);
	return true;
}
function SaveComponent(playerid, vehicleid, componentid){
	new vid;
	for(new i; i < MAX_PERSONAL_VEHICLES; i++){
		if(PlayerInfo[playerid][pVehID][i] == vehicleid){
			vid = i;
		}
	}
	for(new i; i < 20; i++) if(componentid == spoiler[i][0]) CarMod[playerid][vid][0] = componentid;
	for(new i; i < 3; i++) if(componentid == nitro[i][0]) CarMod[playerid][vid][1] = componentid;
	for(new i; i < 23; i++) if(componentid == fbumper[i][0]) CarMod[playerid][vid][2] = componentid;
	for(new i; i < 22; i++) if(componentid == rbumper[i][0]) CarMod[playerid][vid][3] = componentid;
	for(new i; i < 28; i++) if(componentid == exhaust[i][0]) CarMod[playerid][vid][4] = componentid;
	for(new i; i < 2; i++) if(componentid == bventr[i][0]) CarMod[playerid][vid][5] = componentid;
	for(new i; i < 2; i++) if(componentid == bventl[i][0]) CarMod[playerid][vid][6] = componentid;
	for(new i; i < 4; i++) if(componentid == bscoop[i][0]) CarMod[playerid][vid][7] = componentid;
	for(new i; i < 17; i++) if(componentid == rscoop[i][0]) CarMod[playerid][vid][8] = componentid;
	for(new i; i < 21; i++) if(componentid == lskirt[i][0]) CarMod[playerid][vid][9] = componentid;
	for(new i; i < 21; i++) if(componentid == rskirt[i][0]) CarMod[playerid][vid][10] = componentid;
	for(new i; i < 1; i++) if(componentid == hydraulics[i][0]) CarMod[playerid][vid][11] = componentid;
	for(new i; i < 1; i++) if(componentid == vbase[i][0]) CarMod[playerid][vid][12] = componentid;
	for(new i; i < 4; i++) if(componentid == rbbars[i][0]) CarMod[playerid][vid][13] = componentid;
	for(new i; i < 2; i++) if(componentid == fbbars[i][0]) CarMod[playerid][vid][14] = componentid;
	for(new i; i < 17; i++) if(componentid == wheels[i][0]) CarMod[playerid][vid][15] = componentid;
	for(new i; i < 2; i++) if(componentid == vlights[i][0]) CarMod[playerid][vid][16] = componentid;
	for(new mod; mod < 17; mod++){
		Query_Mysql("UPDATE cars SET mod%d='%d' WHERE ID = '%d'", mod + 1, CarMod[playerid][vid][mod], PlayerInfo[playerid][pVeh][vid]);
	}
	for(new i; i < 3; i++)
	{
		if(componentid >= 0 && componentid <= 2)
		{
			PlayerInfo[playerid][pVehPaintJ][vid] = componentid;
			Query_Mysql("UPDATE cars SET PaintJ='%d' WHERE ID = '%d'", PlayerInfo[playerid][pVehPaintJ][vid], PlayerInfo[playerid][pVeh][vid]);
		}
	}
	return true;
}
function AddToStageVehicles(playerid, v)
{	
	new
		VehID = PlayerInfo[playerid][pVehID][v]
	;

	if(!Iter_Contains(StageVehicles, VehID))
	{
		Iter_Add(StageVehicles, VehID);
	}

	VehicleWithStage[VehID] = true;
	return true;
}
function RemoveFromStageVehicles(vehicleid)
{
	if(Iter_Contains(StageVehicles, vehicleid))
	{
		Iter_Remove(StageVehicles, vehicleid);
	}

	VehicleWithStage[vehicleid] = false;
	return true;
}
timer DrugEffectGone[1](playerid, session, type)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(UsingDrugs[playerid] == -1) return true;
	UsingDrugs[playerid] = -1;
	SetPlayerDrunkLevel(playerid, 0);
	FreezePlayer(playerid, false);

	new
		DrugHP[4] = {25, 75, 100, 50}
	;

	if(PerkActive[playerid][15])
	{
		DrugHP[0] = 75;
	}

	if(PerkActive[playerid][16])
	{
		DrugHP[3] = 100;
	}

	SetPlayerHP(playerid, GetPlayerHP(playerid) + DrugHP[type]);
	if(GetPlayerHP(playerid) > 100)
	{
		SetPlayerHP(playerid, 100);
	}
	SendMsg(playerid, COLOR_SERVER, "Use Drugs >> {ffffff}Ai primit +%dHP.", DrugHP[type]);
	return true;
}
timer DisparBani2[5000](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	PlayerTextDrawHide(playerid, MoneyIndicator);
	MoneyBar[playerid] = false;
	return true;
}
function GivePlayerCash(playerid, money)
{
	addBytes32(PlayerCash[playerid], money);
	if(OPByte(PlayerCash[playerid], <=, #999_999_999))
	{
		GivePlayerMoney(playerid, money);
	}
	if(Logat[playerid])
	{
		if(MoneyBar[playerid])
		{
			PlayerTextDrawHide(playerid, MoneyIndicator);
			MoneyBar[playerid] = false;
			stop DisparBani[playerid];
		}
		if(money > 0)
		{
			va_PlayerTextDrawSetString(playerid, MoneyIndicator, "~g~~h~+$%s", FormatNumber(money));
		}
		else
		{
			va_PlayerTextDrawSetString(playerid, MoneyIndicator, "~r~~h~-$%s", FormatNumber(money * -1));
		}
		PlayerTextDrawShow(playerid, MoneyIndicator);
		MoneyBar[playerid] = true;
		DisparBani[playerid] = defer DisparBani2(playerid, PlayerInfo[playerid][pSession]);
	}
	return true;
}
stock GetPlayerCash(playerid) return bytes32(PlayerCash[playerid]);
stock GetPlayerCashNormal(playerid)
{
	new
		NormalMoney
	;
	if(OPByte(PlayerCash[playerid], >, #999999999))
	{
		NormalMoney = 999999999;
	}
	else
	{
		NormalMoney = GetPlayerCash(playerid);
	}
	return NormalMoney;
}
stock ResetPlayerCash(playerid) return resetBigInt(PlayerCash[playerid]);
function GivePlayerBank(playerid, money)
{
	addBytes32(PlayerBank[playerid], money);
	return true;
}
stock GetPlayerBank(playerid) return bytes32(PlayerBank[playerid]);
stock ResetPlayerBank(playerid) return resetBigInt(PlayerBank[playerid]);
stock FactionName(id){
	new string[50]; 
	format(string, 50, "%s", FacInfo[id][fName]);
	if(id == 0) format(string, 3, "-");
	return string;
}
stock CalculeazaTimp(seconds){
	new time = seconds, minute, secunde, string[8];
	time = time % 3600;
	minute = time / 60;
	time = time % 60;
	secunde = time;
	format(string, sizeof string, "%02d:%02d", minute, secunde);
	return string;
}
stock PlayAudioStreamForPlayersInCar(vehicleid, const url[]){
	for(new m = 2; m < 4; m++)
	{
		foreach(new x : WithState[m])
		{
			if(GetPlayerVehicleID(x) == vehicleid)
			{
				PlayAudioStreamForPlayer(x, url);
			}
		}
	}
	return true;
}
stock StopAudioStreamForPlayersInCar(vehicleid){
	for(new m = 2; m < 4; m++)
	{		
		foreach(new x : WithState[m])
		{
			if(GetPlayerVehicleID(x) == vehicleid)
			{
				StopAudioStreamForPlayer(x);
			}
		}
	}
	return true;
}
FormatNumber(iNum, const szChar[] = ","){
	new szStr[25];
	format(szStr, sizeof(szStr), "%d", iNum);
	for(new iLen = strlen(szStr) - 3; iLen > 0; iLen -= 3) strins(szStr, szChar, iLen);
	return szStr;
}
FormatMiliarde(miliarde, bani){
	new string[32];
	switch(strlen(FormatNumber(bani))){
		case 1: format(string, sizeof(string), "000,000,00%s", FormatNumber(bani));
		case 2: format(string, sizeof(string), "000,000,0%s", FormatNumber(bani));
		case 3: format(string, sizeof(string), "000,000,%s", FormatNumber(bani));
		case 5: format(string, sizeof(string), "000,00%s", FormatNumber(bani));
		case 6: format(string, sizeof(string), "000,0%s", FormatNumber(bani));
		case 7: format(string, sizeof(string), "000,%s", FormatNumber(bani));
		case 9: format(string, sizeof(string), "00%s", FormatNumber(bani));
		case 10: format(string, sizeof(string), "0%s", FormatNumber(bani));
		case 11: format(string, sizeof(string), "%s", FormatNumber(bani));
	}
	if(miliarde < 1)
	{
		format(string, sizeof(string), FormatNumber(bani));
	}
	else
	{
		format(string, sizeof(string), "%s,%s", FormatNumber(miliarde), string);
	}
	return string;
}
stock GetWeekDay(day=0, month=0, year=0){
	if(!day) getdate(year, month, day);
	new weekday_str[10], j, e;
	if(month <= 2){
		month += 12;
		--year;
	}
	j = year % 100;
	e = year / 100;
	switch ((day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7){
		case 0: weekday_str = "Sambata";
		case 1: weekday_str = "Duminica";
		case 2: weekday_str = "Luni";
		case 3: weekday_str = "Marti";
		case 4: weekday_str = "Miercuri";
		case 5: weekday_str = "Joi";
		case 6: weekday_str = "Vineri";
	}
	return weekday_str;
}
stock GetWeekDayNumber(day=0, month=0, year=0)
{
	if(!day) getdate(year, month, day);

	new
		weekday = -1,
		j,
		e
	;

	if(month <= 2)
	{
		month += 12;
		--year;
	}

	j = year % 100;
	e = year / 100;

	weekday = (day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7;

	return weekday;
}
stock IsVehicleOccupied(vehicleid)
{
	for(new i = 2; i < 3; i++)
	{
		foreach(new x : WithState[i])
		{
			if(IsPlayerInVehicle(x, vehicleid))
			{
				return true;
			}
		}
	}
	return false;
} 
function IsAGangMember(playerid){
	new member = PlayerInfo[playerid][pMember];
	if(member == 2 || member == 3) return true;
	return false;
}
function IsACop(playerid){
	new member = PlayerInfo[playerid][pMember];
	if(member == 1) return true;
	return false;
}
function GetDaysFromTimestamp(time){
	new timee = gettime() - time, days;
	while(timee > 86399){
		timee -= 86400;
		days ++;
	} 
	return days;
}
function NearbyGasStation(playerid){
	if(InBusinessZone[playerid] != 0 && BizzInfo[InBusinessZone[playerid]][bType] == 9) return InBusinessZone[playerid];
	return false; 
}
function NearbyPNS(playerid){
	if(InBusinessZone[playerid] != 0 && BizzInfo[InBusinessZone[playerid]][bType] == 10) return InBusinessZone[playerid];
	return false;
}
function NearbyRent(playerid){
	if(InBusinessZone[playerid] != 0 && BizzInfo[InBusinessZone[playerid]][bType] == 7) return InBusinessZone[playerid];
	return false;
}
function NearbyTuning(playerid)
{
	if(InBusinessZone[playerid] != 0 && BizzInfo[InBusinessZone[playerid]][bType] == 11) return InBusinessZone[playerid];	
	return false;
}
new
	VehicleType[sizeof(aVehicleNames)]
;
function LoadVehiclesType()
{
	new
		bikeVehicles[3] =
		{
			481, 509, 510
		},
		planeVehicles[23] =
		{
			417, 425, 447, 460, 464, 465, 469, 476, 487, 488, 497, 501, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593
		},
		boatVehicles[10] =
		{
			430, 446, 452, 453, 454, 472, 473, 484, 493, 595
		}
	;
	for(new i = 0; i < sizeof(bikeVehicles); i++)
	{
		VehicleType[bikeVehicles[i] - 400] = 1;
	}
	for(new i = 0; i < sizeof(planeVehicles); i++)
	{
		VehicleType[planeVehicles[i] - 400] = 2;
	}
	for(new i = 0; i < sizeof(boatVehicles); i++)
	{
		VehicleType[boatVehicles[i] - 400] = 3;
	}
	return true;
}

function bool: IsABike(vehicleid)
{
	if(vehicleid == INVALID_VEHICLE_ID || !IsValidVehicle(vehicleid))
	{
		return false;
	}
	if(VehicleType[GetVehicleModel(vehicleid) - 400] == 1)
	{
		return true;
	}
	return false;
}

function bool: IsAPlane(vehicleid)
{
	if(vehicleid == INVALID_VEHICLE_ID || !IsValidVehicle(vehicleid))
	{
		return false;
	}
	if(VehicleType[GetVehicleModel(vehicleid) - 400] == 2)
	{
		return true;
	}
	return false;
}

function bool: IsABoat(vehicleid)
{
	if(vehicleid == INVALID_VEHICLE_ID || !IsValidVehicle(vehicleid))
	{
		return false;
	}
	if(VehicleType[GetVehicleModel(vehicleid) - 400] == 3)
	{
		return true;
	}
	return false;
}
function IsACopVeh(carid){
	if(Iter_Contains(fVehicles[1], carid)) return true;
	return false;
}
function IsAReportersCar(carid){
	if(Iter_Contains(fVehicles[4], carid)) return true;
	return false;
}
function IsAnUber(carid){
	if(Iter_Contains(fVehicles[6], carid)) return true;
	return false;
}	
public OnPlayerClickMap(playerid, Float: fX, Float: fY, Float: fZ){
	if(PlayerInfo[playerid][pAdmin]){
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
			SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ + 5);
			GetVehiclePos(GetPlayerVehicleID(playerid), old_veh_pos[GetPlayerVehicleID(playerid)][0], old_veh_pos[GetPlayerVehicleID(playerid)][1], old_veh_pos[GetPlayerVehicleID(playerid)][2]);
		}
		else SetPlayerPosFindZ(playerid, fX, fY, fZ + 5);
	} 
	else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER){
		for(new i; i < MAX_PLAYERS; i++){
			if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid) && GetPlayerState(i) == PLAYER_STATE_DRIVER && !HaveCheckpoint(i)){
				SetPlayerCheckpointEx(i, fX, fY, fZ, 5);
				CP[i] = 43;
				SendMsg(i, COLOR_SERVER, "Server >> {ffffff}Ti-a fost setat un checkpoint la marker-ul lui %s", GetName(playerid));
			}
			else if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid) && GetPlayerState(i) == PLAYER_STATE_DRIVER && HaveCheckpoint(i)) SendMsg(i, COLOR_SERVER, "Server >> {ffffff}%s ti-a pus un marker, dar ai un checkpoint activ.", GetName(playerid));
		}
	}
	return true;
}
function ResetSpec(playerid){
	memcpy(SpecInfo[playerid], SpecInfo[MAX_PLAYERS], 0, sizeof(SpecInfo[]) * 4, sizeof(SpecInfo[]));
 	Spectate[playerid] = -1;
 	PlayerTextDrawHide(playerid, SpecPTD);
 	if(Iter_Contains(Spectators, playerid))
 	{
 		Iter_Remove(Spectators, playerid);
 	}
	return true;
}
function ResetVariables(playerid)
{
	if(StatusLabel[playerid] != INVALID_3DTEXT_ID)
	{
		Delete3DTextLabel(StatusLabel[playerid]);
		StatusLabel[playerid] = INVALID_3DTEXT_ID;
	}

	for(new i = 0; i < 10; i++)
	{
		PlayerQuestionsTrivia[playerid][i] = 0;
	}

	if(BankSafe[playerid] != 0)
	{
		DestroyPlayerObject(playerid, BankSafe[playerid]);
		BankSafe[playerid] = 0;
	}

	for(new i = 0; i < 39; i ++)
	{
		PerkActive[playerid][i] = false;
	}

	for(new i = 0; i < sizeof(GrauFarmerObjects); i++)
	{
		if(FarmerObjects[playerid][i] != 0)
		{
			DestroyPlayerObject(playerid, FarmerObjects[playerid][i]);
			FarmerObjects[playerid][i] = 0;
		}
	}

	if(GiftObject[playerid] != 0)
	{
		DestroyPlayerObject(playerid, GiftObject[playerid]);
		GiftObject[playerid] = 0;
	}

	Iter_Clear(Nearby[playerid]);

	if(Iter_Count(PossibleContructor[playerid]))
	{
		Iter_Clear(PossibleContructor[playerid]);
	}
	
	TogglePlayerSpectating(playerid, 1);

	IsPlayerAFK[playerid] = specfaction[playerid] = WTChannel[playerid] = CP[playerid] = FishPrice[playerid] = PlayerCuffedTime[playerid] = DrugPrice[playerid] = paintkills[playerid] =
	DrugGram[playerid] = escapeprogress[playerid] = UberMoneyEarned[playerid] = TicketMoney[playerid] = UberMoneySpent[playerid] = escapedat[playerid] = UberTimer[playerid] =
	TransferMoney[playerid] = MatsPrice[playerid] = MatsAmmo[playerid] = BreachID[playerid] = SellgunMats[playerid] = SellgunAmmo[playerid] = SellgunPrice[playerid] = SellgunID[playerid] =
	UberFare[playerid] = InBiz[playerid] = InHQ[playerid] = InHouse[playerid] = DiceMoney[playerid] = PlayerTazeTime[playerid] = WantedPoints[playerid] = ac_kills[playerid] =
	TradeTime[playerid] = LastVeh[playerid] = InTextdrawMenu[playerid] = InJobZone[playerid] = InBusinessZone[playerid] =
	InHouseZone[playerid] = InFactionZone[playerid] = InGarageZone[playerid] = InTurfZone[playerid] = InBillboardZone[playerid] = InClanHQZone[playerid] =
	InClanHQ[playerid] = GunShopSelected[playerid] = LuckyType[playerid] = MovingDiceID[playerid] = MovingDiceStep[playerid] = AtRentBiz[playerid] = LoginTries[playerid] =
	RaceTime[playerid] = ShotsSafe[playerid] = CurrentQuestion[playerid] = LastWT[playerid] = LastPC[playerid] = LastHealme[playerid] = TutorialStep[playerid] =
	SkinClothing[playerid] = MySkinsSlot[playerid] = SelectedSkin[playerid] = 0;

	DamageDrop[playerid] = KmTrucker[playerid] = 0;

	gPlayerUsingLoopingAnim[playerid] = fnc[playerid] = JobWorking[playerid] = InSpawnArea[playerid] = Undercover[playerid] = TalkingLive[playerid] = PlayerCuffed2[playerid] =
	PlayerHandsup[playerid] = ClanDuty[playerid] = adatad[playerid] = TurfsDisp[playerid] = Logat[playerid] = reportstuck[playerid] = tazer[playerid] =
	DeathPlayer[playerid] = OnDuty[playerid] = InWeaponExam[playerid] = PlayerCuffed[playerid] = InFinishWarTD[playerid] = CalledLeave[playerid] = NeedRemoveFromWarVehicle[playerid] =
	FarmerApples[playerid] = FarmerMilk[playerid] = MoneyBar[playerid] = BarLevel[playerid] = false;

	new
		gol[pEnum]
	;

	PlayerInfo[playerid] = gol;

	ResetSpec(playerid);

	PlayerInfo[playerid][pSession] = gettime();
	GetPlayerName(playerid, PlayerInfo[playerid][pNormalName]);

	DeletePVar(playerid, "bitcoin"); DeletePVar(playerid, "jobdilei"); DeletePVar(playerid, "Scripter"); DeletePVar(playerid, "CrateType"); DeletePVar(playerid, "randomu");
	DeletePVar(playerid, "AreWorking"); DeletePVar(playerid, "animuri"); DeletePVar(playerid, "Step"); DeletePVar(playerid, "atype"); DeletePVar(playerid, "tps");
	DeletePVar(playerid, "flys"); DeletePVar(playerid, "ftps"); DeletePVar(playerid, "sflys"); DeletePVar(playerid, "InSpin"); DeletePVar(playerid, "TimpTrivia");
	DeletePVar(playerid, "GresiteTrivia"); DeletePVar(playerid, "InTrivia"); DeletePVar(playerid, "IntrebareTrivia"); DeletePVar(playerid, "InClothing");
	DeletePVar(playerid, "InBurger"); DeletePVar(playerid, "InBonus");
	DeletePVar(playerid, "InMilestone"); DeletePVar(playerid, "InPin"); DeletePVar(playerid, "ClickedPlayer"); DeletePVar(playerid, "deelayn");
	DeletePVar(playerid, "InTelefon"); DeletePVar(playerid, "TimerLogin"); DeletePVar(playerid, "Question");
	DeletePVar(playerid, "DispareDmg"); DeletePVar(playerid, "EditVipText"); DeletePVar(playerid, "TrebuieTeleportat"); DeletePVar(playerid, "NewClanName");
	DeletePVar(playerid, "DeelayTicket"); DeletePVar(playerid, "magie");

 	SetPVarInt(playerid, "InCall", -1); SetPVarInt(playerid, "Call", -1); SetPVarInt(playerid, "Called", -1); SetPVarInt(playerid, "aoponent", -1);
 	SetPVarInt(playerid, "cinvitePlayer", -1); SetPVarInt(playerid, "ainvite", -1);

 	SetPVarInt(playerid, "PoateNos", 1); SetPVarInt(playerid, "PoateFV", 1); SetPVarInt(playerid, "PoateFlip", 1); SetPVarInt(playerid, "NeedSpawn", 1);

 	SetPVarInt(playerid, "DeelayAd", gettime());

	SellHouseID[playerid] = TradeID[playerid] = CarID[playerid] = UberAccepted[playerid] = LastPlayer[playerid] = dialogID[playerid] = targetfind[playerid] = MatsOffer[playerid] =
	SellgunOffer[playerid] = contract_get[playerid] = somated[playerid] = UberDriver[playerid] = TradePlayer[playerid] = JobVeh[playerid] = QuestVeh[playerid] = ExamVeh[playerid] =
	RentVeh[playerid] = pfVehicle[playerid] = pcVehicle[playerid] = DrugOffer[playerid] = FactionOffer[playerid] = LiveOffer[playerid] =
	TicketOffer[playerid] = DiceRequest[playerid] = InLocationZone[playerid] = InAtmZone[playerid] = InSlotsZone[playerid] = InRuletaZone[playerid] = StuntVehicle[playerid] =
	HealRequest[playerid] = ParamedicAccepted[playerid] = DrinkRequest[playerid] = FoodRequest[playerid] = GlovoAccepted[playerid] = DicePartner[playerid] =
	UsingDrugs[playerid] = InHuntArea[playerid] = -1;

	wantedlost[playerid] = 15;

	format(WantName[playerid], MAX_PLAYER_NAME, "NULL");
	format(adtext[playerid], 30, "NULL");
	format(LiveQuestion[playerid], 128, "NULL");

 	resetTradeVariables(playerid);
 	DisablePlayerCheckpoint(playerid);
 	SetPlayerColor(playerid, 0xBFC0C2FF);

	for(new i; i < MAX_PERSONAL_VEHICLES; i++)
	{
		resetVehicle(playerid, i);
	}

	InitFly(playerid);

	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);

	PlayerKills[playerid] = 0;
	PlayerDeaths[playerid] = 0;

	for(new i = 0; i < 10; i++)
	{
		if(DDealerObjects[playerid][i] != 0)
		{
			DestroyPlayerObject(playerid, DDealerObjects[playerid][i]);
			DDealerObjects[playerid][i] = 0;
		}
	}

	return true;
}
stock resetVehicle(playerid, i, test = 0)
{
	if(Iter_Contains(StageVehicles, PlayerInfo[playerid][pVehID][i]))
	{
		RemoveFromStageVehicles(PlayerInfo[playerid][pVehID][i]);
	}
	DestroyNeon(PlayerInfo[playerid][pVehID][i]);
	if(!test)
	{
		PlayerInfo[playerid][pVeh][i] = -1;
		PlayerInfo[playerid][pVehID][i] = 0;
	}
	PlayerInfo[playerid][pVehPaintJ][i] = 6;
	PlayerInfo[playerid][pVehGas][i] = 100;
	CarOwner[playerid][i] = "";

	PlayerInfo[playerid][pVehLocX][i] =
	PlayerInfo[playerid][pVehLocY][i] =
	PlayerInfo[playerid][pVehLocZ][i] =
	PlayerInfo[playerid][pVehAngle][i] =
	PlayerInfo[playerid][pVehKM][i] =
	PlayerInfo[playerid][pVehModel][i] =
	PlayerInfo[playerid][pVehBuyTime][i] =
	PlayerInfo[playerid][pVehColor1][i] =
	PlayerInfo[playerid][pVehColor2][i] =
	PlayerInfo[playerid][pVehNeon][i] = 0;

	PlayerInfo[playerid][pVehVip][i] =
	PlayerInfo[playerid][pVehStage][i] =
	PlayerInfo[playerid][pVehWorking][i] =
	PlayerInfo[playerid][pVehNeonCustom][i] =
	PlayerInfo[playerid][pVehRainbow][i] =
	PlayerInfo[playerid][pVehRainbowOn][i] =
	PlayerInfo[playerid][pVehInGarage][i] = false;

	PlayerInfo[playerid][pBoughtMethod][i] = 0;

	for(new ix; ix < 17; ix ++)
	{
		CarMod[playerid][i][ix] = 0;
	}
	return true;
}
stock GetIp(playerid)
{
	gString[0] = (EOS);

	GetPlayerIp(playerid, gString, 16);

	return gString;
}
function CheckOnline(playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	if(cache_num_rows())
	{
		SendMsg(playerid, COLOR_SERVER, "Info >> {ffffff}Acest cont este deja conectat.");
		defer KickEx(playerid, session);
	}
	else
	{	
		gString[0] = (EOS);
		mysql_format(SQL, gString, 128, "select * from bans where Name = '%s' and Active = '1'", GetName(playerid));
		mysql_tquery(SQL, gString, "CheckBan", "id", playerid, PlayerInfo[playerid][pSession]);

		pTextdraws(playerid);
	}
	return true;
}
function CheckLoginQueue(playerid)
{
	if(Iter_Count(InLogin) >= 10)
		return Info(playerid, "Sunt prea multi jucatori care incearca sa se logheze, asteapta...");

	Iter_Add(InLogin, playerid);
	SetPVarInt(playerid, "TimerLogin", gettime() + 60);

	gString[0] = (EOS);
	mysql_format(SQL, gString, 128, "select * from users where name = '%s' and Status = 1", GetName(playerid));
	mysql_tquery(SQL, gString, "CheckOnline", "id", playerid, PlayerInfo[playerid][pSession]);
	return true;
}
public OnPlayerConnect(playerid)
{
	if(restrictie == true)
	{
		new
			Name[MAX_PLAYER_NAME]
		;
		GetPlayerName(playerid, Name, MAX_PLAYER_NAME);
		if(!CheckAcces(Name))
		{
			ClearChat(playerid);
			Info(playerid, "Serverul se afla in mentenanta, cititi informatiile date pe serverul de discord.");
			Info(playerid, "Discord: https://og-life.ro/discord");
			defer KickEx(playerid, PlayerInfo[playerid][pSession]); 
			return true; 
		}
	}
	ClearChat(playerid);
	ResetVariables(playerid);
	CheckLoginQueue(playerid);
	RemoveBuildings(playerid);
	return true;
} 
function ClearCrime(playerid){
	format(PlayerInfo[playerid][pVictim], 64, "********");
	pUpdateStr(playerid, "Victim", PlayerInfo[playerid][pVictim]);

	format(PlayerInfo[playerid][pAccused], 64, "********");
	pUpdateStr(playerid, "Accused", PlayerInfo[playerid][pAccused]);

	format(PlayerInfo[playerid][pCrime1], 64, "Fara Crima");
	pUpdateStr(playerid, "Crime1", PlayerInfo[playerid][pCrime1]);

	format(PlayerInfo[playerid][pCrime2], 64, "Fara Crima");
	pUpdateStr(playerid, "Crime2", PlayerInfo[playerid][pCrime2]);

	format(PlayerInfo[playerid][pCrime3], 64, "Fara Crima");
	pUpdateStr(playerid, "Crime3", PlayerInfo[playerid][pCrime3]);
	return true;
}
function pTextdraws(playerid)
{
	MySkinsPTD[0] = CreatePlayerTextDraw(playerid, 204.000000, 164.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, MySkinsPTD[0], 5);
	PlayerTextDrawLetterSize(playerid, MySkinsPTD[0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, MySkinsPTD[0], 75.000000, 100.000000);
	PlayerTextDrawSetOutline(playerid, MySkinsPTD[0], 0);
	PlayerTextDrawSetShadow(playerid, MySkinsPTD[0], 0);
	PlayerTextDrawAlignment(playerid, MySkinsPTD[0], 1);
	PlayerTextDrawColor(playerid, MySkinsPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, MySkinsPTD[0], 35709);
	PlayerTextDrawBoxColor(playerid, MySkinsPTD[0], 35839);
	PlayerTextDrawUseBox(playerid, MySkinsPTD[0], 0);
	PlayerTextDrawSetProportional(playerid, MySkinsPTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, MySkinsPTD[0], 1);
	PlayerTextDrawSetPreviewModel(playerid, MySkinsPTD[0], 0);
	PlayerTextDrawSetPreviewRot(playerid, MySkinsPTD[0], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, MySkinsPTD[0], 1, 1);

	MySkinsPTD[1] = CreatePlayerTextDraw(playerid, 282.000000, 164.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, MySkinsPTD[1], 5);
	PlayerTextDrawLetterSize(playerid, MySkinsPTD[1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, MySkinsPTD[1], 75.000000, 100.000000);
	PlayerTextDrawSetOutline(playerid, MySkinsPTD[1], 0);
	PlayerTextDrawSetShadow(playerid, MySkinsPTD[1], 0);
	PlayerTextDrawAlignment(playerid, MySkinsPTD[1], 1);
	PlayerTextDrawColor(playerid, MySkinsPTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, MySkinsPTD[1], 35709);
	PlayerTextDrawBoxColor(playerid, MySkinsPTD[1], 35839);
	PlayerTextDrawUseBox(playerid, MySkinsPTD[1], 0);
	PlayerTextDrawSetProportional(playerid, MySkinsPTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, MySkinsPTD[1], 1);
	PlayerTextDrawSetPreviewModel(playerid, MySkinsPTD[1], 0);
	PlayerTextDrawSetPreviewRot(playerid, MySkinsPTD[1], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, MySkinsPTD[1], 1, 1);

	MySkinsPTD[2] = CreatePlayerTextDraw(playerid, 360.000000, 164.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, MySkinsPTD[2], 5);
	PlayerTextDrawLetterSize(playerid, MySkinsPTD[2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, MySkinsPTD[2], 75.000000, 100.000000);
	PlayerTextDrawSetOutline(playerid, MySkinsPTD[2], 0);
	PlayerTextDrawSetShadow(playerid, MySkinsPTD[2], 0);
	PlayerTextDrawAlignment(playerid, MySkinsPTD[2], 1);
	PlayerTextDrawColor(playerid, MySkinsPTD[2], -1);
	PlayerTextDrawBackgroundColor(playerid, MySkinsPTD[2], 35709);
	PlayerTextDrawBoxColor(playerid, MySkinsPTD[2], 35839);
	PlayerTextDrawUseBox(playerid, MySkinsPTD[2], 0);
	PlayerTextDrawSetProportional(playerid, MySkinsPTD[2], 1);
	PlayerTextDrawSetSelectable(playerid, MySkinsPTD[2], 1);
	PlayerTextDrawSetPreviewModel(playerid, MySkinsPTD[2], 0);
	PlayerTextDrawSetPreviewRot(playerid, MySkinsPTD[2], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, MySkinsPTD[2], 1, 1);

	PerkDetailsPTD[0] = CreatePlayerTextDraw(playerid, 315.000000, 155.000000, "It's Christmas Everyday 2");
	PlayerTextDrawFont(playerid, PerkDetailsPTD[0], 1);
	PlayerTextDrawLetterSize(playerid, PerkDetailsPTD[0], 0.216666, 1.600000);
	PlayerTextDrawTextSize(playerid, PerkDetailsPTD[0], 400.000000, 280.500000);
	PlayerTextDrawSetOutline(playerid, PerkDetailsPTD[0], 1);
	PlayerTextDrawSetShadow(playerid, PerkDetailsPTD[0], 0);
	PlayerTextDrawAlignment(playerid, PerkDetailsPTD[0], 2);
	PlayerTextDrawColor(playerid, PerkDetailsPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, PerkDetailsPTD[0], 255);
	PlayerTextDrawBoxColor(playerid, PerkDetailsPTD[0], 50);
	PlayerTextDrawUseBox(playerid, PerkDetailsPTD[0], 0);
	PlayerTextDrawSetProportional(playerid, PerkDetailsPTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, PerkDetailsPTD[0], 0);

	PerkDetailsPTD[1] = CreatePlayerTextDraw(playerid, 278.000000, 186.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, PerkDetailsPTD[1], 5);
	PlayerTextDrawLetterSize(playerid, PerkDetailsPTD[1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, PerkDetailsPTD[1], 75.000000, 75.000000);
	PlayerTextDrawSetOutline(playerid, PerkDetailsPTD[1], 0);
	PlayerTextDrawSetShadow(playerid, PerkDetailsPTD[1], 0);
	PlayerTextDrawAlignment(playerid, PerkDetailsPTD[1], 1);
	PlayerTextDrawColor(playerid, PerkDetailsPTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, PerkDetailsPTD[1], 125);
	PlayerTextDrawBoxColor(playerid, PerkDetailsPTD[1], 255);
	PlayerTextDrawUseBox(playerid, PerkDetailsPTD[1], 0);
	PlayerTextDrawSetProportional(playerid, PerkDetailsPTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, PerkDetailsPTD[1], 0);
	PlayerTextDrawSetPreviewModel(playerid, PerkDetailsPTD[1], 1212);
	PlayerTextDrawSetPreviewRot(playerid, PerkDetailsPTD[1], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, PerkDetailsPTD[1], 1, 1);

	PerkDetailsPTD[2] = CreatePlayerTextDraw(playerid, 315.000000, 269.000000, "Dupa 50 de ture de job intr-o zi vei primi joboost pentru tot restul zilei si o sansa de 7 de a primi un RP la fiecare tura de ");
	PlayerTextDrawFont(playerid, PerkDetailsPTD[2], 1);
	PlayerTextDrawLetterSize(playerid, PerkDetailsPTD[2], 0.279166, 1.400000);
	PlayerTextDrawTextSize(playerid, PerkDetailsPTD[2], 400.000000, 148.000000);
	PlayerTextDrawSetOutline(playerid, PerkDetailsPTD[2], 1);
	PlayerTextDrawSetShadow(playerid, PerkDetailsPTD[2], 0);
	PlayerTextDrawAlignment(playerid, PerkDetailsPTD[2], 2);
	PlayerTextDrawColor(playerid, PerkDetailsPTD[2], -1);
	PlayerTextDrawBackgroundColor(playerid, PerkDetailsPTD[2], 255);
	PlayerTextDrawBoxColor(playerid, PerkDetailsPTD[2], -1061109710);
	PlayerTextDrawUseBox(playerid, PerkDetailsPTD[2], 0);
	PlayerTextDrawSetProportional(playerid, PerkDetailsPTD[2], 1);
	PlayerTextDrawSetSelectable(playerid, PerkDetailsPTD[2], 0);

	PerkDetailsPTD[3] = CreatePlayerTextDraw(playerid, 265.000000, 352.000000, "Cost: 10 points");
	PlayerTextDrawFont(playerid, PerkDetailsPTD[3], 1);
	PlayerTextDrawLetterSize(playerid, PerkDetailsPTD[3], 0.175000, 1.150000);
	PlayerTextDrawTextSize(playerid, PerkDetailsPTD[3], 400.000000, 114.500000);
	PlayerTextDrawSetOutline(playerid, PerkDetailsPTD[3], 1);
	PlayerTextDrawSetShadow(playerid, PerkDetailsPTD[3], 0);
	PlayerTextDrawAlignment(playerid, PerkDetailsPTD[3], 2);
	PlayerTextDrawColor(playerid, PerkDetailsPTD[3], -1);
	PlayerTextDrawBackgroundColor(playerid, PerkDetailsPTD[3], 255);
	PlayerTextDrawBoxColor(playerid, PerkDetailsPTD[3], 50);
	PlayerTextDrawUseBox(playerid, PerkDetailsPTD[3], 0);
	PlayerTextDrawSetProportional(playerid, PerkDetailsPTD[3], 1);
	PlayerTextDrawSetSelectable(playerid, PerkDetailsPTD[3], 0);

	PerkDetailsPTD[4] = CreatePlayerTextDraw(playerid, 351.000000, 352.000000, "Your points: 105 points");
	PlayerTextDrawFont(playerid, PerkDetailsPTD[4], 1);
	PlayerTextDrawLetterSize(playerid, PerkDetailsPTD[4], 0.175000, 1.150000);
	PlayerTextDrawTextSize(playerid, PerkDetailsPTD[4], 400.000000, 114.500000);
	PlayerTextDrawSetOutline(playerid, PerkDetailsPTD[4], 1);
	PlayerTextDrawSetShadow(playerid, PerkDetailsPTD[4], 0);
	PlayerTextDrawAlignment(playerid, PerkDetailsPTD[4], 2);
	PlayerTextDrawColor(playerid, PerkDetailsPTD[4], -1);
	PlayerTextDrawBackgroundColor(playerid, PerkDetailsPTD[4], 255);
	PlayerTextDrawBoxColor(playerid, PerkDetailsPTD[4], 50);
	PlayerTextDrawUseBox(playerid, PerkDetailsPTD[4], 0);
	PlayerTextDrawSetProportional(playerid, PerkDetailsPTD[4], 1);
	PlayerTextDrawSetSelectable(playerid, PerkDetailsPTD[4], 0);

	CategoryPerksPTD[0] = CreatePlayerTextDraw(playerid, 315.000000, 145.000000, "Job Perks");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[0], 1);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[0], 400.000000, 250.500000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[0], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[0], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[0], 2);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[0], 255);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[0], 50);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[0], 0);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[0], 0);

	CategoryPerksPTD[1] = CreatePlayerTextDraw(playerid, 172.000000, 211.000000, "ld_beat:chit");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[1], 4);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[1], 50.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[1], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[1], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[1], 1);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[1], 1296911871);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[1], -1);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[1], -16777166);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[1], 1);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[1], 0);

	CategoryPerksPTD[2] = CreatePlayerTextDraw(playerid, 237.000000, 236.000000, "_");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[2], 1);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[2], 0.600000, -0.199999);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[2], 298.500000, 44.500000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[2], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[2], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[2], 2);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[2], -1);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[2], 255);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[2], 1296911751);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[2], 1);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[2], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[2], 0);

	CategoryPerksPTD[3] = CreatePlayerTextDraw(playerid, 252.000000, 211.000000, "ld_beat:chit");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[3], 4);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[3], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[3], 50.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[3], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[3], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[3], 1);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[3], 1296911871);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[3], 1097458175);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[3], -16777166);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[3], 1);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[3], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[3], 0);

	CategoryPerksPTD[4] = CreatePlayerTextDraw(playerid, 317.000000, 236.000000, "_");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[4], 1);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[4], 0.600000, -0.199999);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[4], 298.500000, 44.500000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[4], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[4], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[4], 2);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[4], -1);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[4], 255);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[4], 1296911751);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[4], 1);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[4], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[4], 0);

	CategoryPerksPTD[5] = CreatePlayerTextDraw(playerid, 332.000000, 211.000000, "ld_beat:chit");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[5], 4);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[5], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[5], 50.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[5], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[5], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[5], 1);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[5], 1296911871);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[5], 1097458175);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[5], -16777166);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[5], 1);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[5], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[5], 0);

	CategoryPerksPTD[6] = CreatePlayerTextDraw(playerid, 397.000000, 236.000000, "_");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[6], 1);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[6], 0.600000, -0.199999);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[6], 298.500000, 44.500000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[6], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[6], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[6], 2);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[6], -1);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[6], 255);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[6], 1296911751);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[6], 1);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[6], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[6], 0);

	CategoryPerksPTD[7] = CreatePlayerTextDraw(playerid, 412.000000, 211.000000, "ld_beat:chit");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[7], 4);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[7], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[7], 50.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[7], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[7], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[7], 1);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[7], 1296911871);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[7], 1097458175);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[7], -16777166);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[7], 1);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[7], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[7], 0);

	CategoryPerksPTD[8] = CreatePlayerTextDraw(playerid, 437.000000, 203.000000, "_");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[8], 1);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[8], 0.600000, 1.600000);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[8], 298.500000, -1.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[8], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[8], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[8], 2);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[8], -1);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[8], 255);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[8], 1296911751);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[8], 1);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[8], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[8], 0);

	CategoryPerksPTD[9] = CreatePlayerTextDraw(playerid, 412.000000, 159.000000, "ld_beat:chit");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[9], 4);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[9], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[9], 50.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[9], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[9], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[9], 1);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[9], 1296911871);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[9], 1097458175);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[9], -16777166);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[9], 1);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[9], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[9], 0);

	CategoryPerksPTD[10] = CreatePlayerTextDraw(playerid, 437.000000, 255.000000, "_");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[10], 1);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[10], 0.600000, 1.600000);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[10], 298.500000, -1.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[10], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[10], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[10], 2);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[10], -1);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[10], 255);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[10], 1296911751);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[10], 1);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[10], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[10], 0);

	CategoryPerksPTD[11] = CreatePlayerTextDraw(playerid, 412.000000, 263.000000, "ld_beat:chit");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[11], 4);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[11], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[11], 50.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[11], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[11], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[11], 1);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[11], 1296911871);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[11], 1097458175);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[11], -16777166);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[11], 1);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[11], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[11], 0);

	CategoryPerksPTD[12] = CreatePlayerTextDraw(playerid, 196.000000, 225.000000, "1");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[12], 1);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[12], 0.454165, 2.049998);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[12], 15.000000, 20.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[12], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[12], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[12], 2);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[12], -1);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[12], 255);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[12], 50);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[12], 0);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[12], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[12], 1);

	CategoryPerksPTD[13] = CreatePlayerTextDraw(playerid, 277.000000, 225.000000, "2");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[13], 1);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[13], 0.454165, 2.049998);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[13], 15.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[13], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[13], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[13], 2);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[13], -1);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[13], 255);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[13], 50);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[13], 0);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[13], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[13], 1);

	CategoryPerksPTD[14] = CreatePlayerTextDraw(playerid, 357.000000, 225.000000, "3");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[14], 1);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[14], 0.454165, 2.049998);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[14], 15.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[14], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[14], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[14], 2);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[14], -1);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[14], 255);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[14], 50);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[14], 0);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[14], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[14], 1);

	CategoryPerksPTD[15] = CreatePlayerTextDraw(playerid, 437.000000, 225.000000, "4");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[15], 1);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[15], 0.454165, 2.049998);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[15], 15.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[15], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[15], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[15], 2);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[15], -1);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[15], 255);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[15], 50);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[15], 0);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[15], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[15], 1);

	CategoryPerksPTD[16] = CreatePlayerTextDraw(playerid, 437.000000, 173.000000, "5");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[16], 1);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[16], 0.454165, 2.049998);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[16], 15.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[16], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[16], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[16], 2);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[16], -1);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[16], 255);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[16], 50);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[16], 0);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[16], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[16], 1);

	CategoryPerksPTD[17] = CreatePlayerTextDraw(playerid, 437.000000, 277.000000, "6");
	PlayerTextDrawFont(playerid, CategoryPerksPTD[17], 1);
	PlayerTextDrawLetterSize(playerid, CategoryPerksPTD[17], 0.454165, 2.049998);
	PlayerTextDrawTextSize(playerid, CategoryPerksPTD[17], 15.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, CategoryPerksPTD[17], 1);
	PlayerTextDrawSetShadow(playerid, CategoryPerksPTD[17], 0);
	PlayerTextDrawAlignment(playerid, CategoryPerksPTD[17], 2);
	PlayerTextDrawColor(playerid, CategoryPerksPTD[17], -1);
	PlayerTextDrawBackgroundColor(playerid, CategoryPerksPTD[17], 255);
	PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[17], 50);
	PlayerTextDrawUseBox(playerid, CategoryPerksPTD[17], 0);
	PlayerTextDrawSetProportional(playerid, CategoryPerksPTD[17], 1);
	PlayerTextDrawSetSelectable(playerid, CategoryPerksPTD[17], 1);

	ClothingStorePTD[0] = CreatePlayerTextDraw(playerid, 90.000000, 250.000000, "Skin 225~n~~n~Comun");
	PlayerTextDrawFont(playerid, ClothingStorePTD[0], 1);
	PlayerTextDrawLetterSize(playerid, ClothingStorePTD[0], 0.400000, 1.399999);
	PlayerTextDrawTextSize(playerid, ClothingStorePTD[0], 400.000000, 100.000000);
	PlayerTextDrawSetOutline(playerid, ClothingStorePTD[0], 1);
	PlayerTextDrawSetShadow(playerid, ClothingStorePTD[0], 0);
	PlayerTextDrawAlignment(playerid, ClothingStorePTD[0], 2);
	PlayerTextDrawColor(playerid, ClothingStorePTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, ClothingStorePTD[0], 255);
	PlayerTextDrawBoxColor(playerid, ClothingStorePTD[0], 50);
	PlayerTextDrawUseBox(playerid, ClothingStorePTD[0], 0);
	PlayerTextDrawSetProportional(playerid, ClothingStorePTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, ClothingStorePTD[0], 0);

	ClothingStorePTD[1] = CreatePlayerTextDraw(playerid, 50.000000, 305.000000, "10PP");
	PlayerTextDrawFont(playerid, ClothingStorePTD[1], 1);
	PlayerTextDrawLetterSize(playerid, ClothingStorePTD[1], 0.400000, 1.399999);
	PlayerTextDrawTextSize(playerid, ClothingStorePTD[1], 10.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, ClothingStorePTD[1], 1);
	PlayerTextDrawSetShadow(playerid, ClothingStorePTD[1], 0);
	PlayerTextDrawAlignment(playerid, ClothingStorePTD[1], 2);
	PlayerTextDrawColor(playerid, ClothingStorePTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, ClothingStorePTD[1], 255);
	PlayerTextDrawBoxColor(playerid, ClothingStorePTD[1], 16777010);
	PlayerTextDrawUseBox(playerid, ClothingStorePTD[1], 1);
	PlayerTextDrawSetProportional(playerid, ClothingStorePTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, ClothingStorePTD[1], 1);

	ClothingStorePTD[2] = CreatePlayerTextDraw(playerid, 128.000000, 305.000000, "10KK");
	PlayerTextDrawFont(playerid, ClothingStorePTD[2], 1);
	PlayerTextDrawLetterSize(playerid, ClothingStorePTD[2], 0.400000, 1.399999);
	PlayerTextDrawTextSize(playerid, ClothingStorePTD[2], 10.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, ClothingStorePTD[2], 1);
	PlayerTextDrawSetShadow(playerid, ClothingStorePTD[2], 0);
	PlayerTextDrawAlignment(playerid, ClothingStorePTD[2], 2);
	PlayerTextDrawColor(playerid, ClothingStorePTD[2], -1);
	PlayerTextDrawBackgroundColor(playerid, ClothingStorePTD[2], 255);
	PlayerTextDrawBoxColor(playerid, ClothingStorePTD[2], -16777166);
	PlayerTextDrawUseBox(playerid, ClothingStorePTD[2], 1);
	PlayerTextDrawSetProportional(playerid, ClothingStorePTD[2], 1);
	PlayerTextDrawSetSelectable(playerid, ClothingStorePTD[2], 1);

	DicePTD[0] = CreatePlayerTextDraw(playerid, 190.000000, 205.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, DicePTD[0], 5);
	PlayerTextDrawLetterSize(playerid, DicePTD[0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, DicePTD[0], 50.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, DicePTD[0], 0);
	PlayerTextDrawSetShadow(playerid, DicePTD[0], 0);
	PlayerTextDrawAlignment(playerid, DicePTD[0], 1);
	PlayerTextDrawColor(playerid, DicePTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, DicePTD[0], 175);
	PlayerTextDrawBoxColor(playerid, DicePTD[0], 255);
	PlayerTextDrawUseBox(playerid, DicePTD[0], 0);
	PlayerTextDrawSetProportional(playerid, DicePTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, DicePTD[0], 1);
	PlayerTextDrawSetPreviewModel(playerid, DicePTD[0], 1852);
	PlayerTextDrawSetPreviewRot(playerid, DicePTD[0], 270.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, DicePTD[0], 1, 1);

	DicePTD[1] = CreatePlayerTextDraw(playerid, 245.000000, 205.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, DicePTD[1], 5);
	PlayerTextDrawLetterSize(playerid, DicePTD[1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, DicePTD[1], 50.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, DicePTD[1], 0);
	PlayerTextDrawSetShadow(playerid, DicePTD[1], 0);
	PlayerTextDrawAlignment(playerid, DicePTD[1], 1);
	PlayerTextDrawColor(playerid, DicePTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, DicePTD[1], 175);
	PlayerTextDrawBoxColor(playerid, DicePTD[1], 255);
	PlayerTextDrawUseBox(playerid, DicePTD[1], 0);
	PlayerTextDrawSetProportional(playerid, DicePTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, DicePTD[1], 1);
	PlayerTextDrawSetPreviewModel(playerid, DicePTD[1], 1852);
	PlayerTextDrawSetPreviewRot(playerid, DicePTD[1], 270.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, DicePTD[1], 1, 1);

	DicePTD[2] = CreatePlayerTextDraw(playerid, 335.000000, 205.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, DicePTD[2], 5);
	PlayerTextDrawLetterSize(playerid, DicePTD[2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, DicePTD[2], 50.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, DicePTD[2], 0);
	PlayerTextDrawSetShadow(playerid, DicePTD[2], 0);
	PlayerTextDrawAlignment(playerid, DicePTD[2], 1);
	PlayerTextDrawColor(playerid, DicePTD[2], -1);
	PlayerTextDrawBackgroundColor(playerid, DicePTD[2], 175);
	PlayerTextDrawBoxColor(playerid, DicePTD[2], 255);
	PlayerTextDrawUseBox(playerid, DicePTD[2], 0);
	PlayerTextDrawSetProportional(playerid, DicePTD[2], 0);
	PlayerTextDrawSetSelectable(playerid, DicePTD[2], 0);
	PlayerTextDrawSetPreviewModel(playerid, DicePTD[2], 1852);
	PlayerTextDrawSetPreviewRot(playerid, DicePTD[2], 270.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, DicePTD[2], 1, 1);

	DicePTD[3] = CreatePlayerTextDraw(playerid, 390.000000, 205.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, DicePTD[3], 5);
	PlayerTextDrawLetterSize(playerid, DicePTD[3], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, DicePTD[3], 50.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, DicePTD[3], 0);
	PlayerTextDrawSetShadow(playerid, DicePTD[3], 0);
	PlayerTextDrawAlignment(playerid, DicePTD[3], 1);
	PlayerTextDrawColor(playerid, DicePTD[3], -1);
	PlayerTextDrawBackgroundColor(playerid, DicePTD[3], 175);
	PlayerTextDrawBoxColor(playerid, DicePTD[3], 255);
	PlayerTextDrawUseBox(playerid, DicePTD[3], 0);
	PlayerTextDrawSetProportional(playerid, DicePTD[3], 1);
	PlayerTextDrawSetSelectable(playerid, DicePTD[3], 0);
	PlayerTextDrawSetPreviewModel(playerid, DicePTD[3], 1852);
	PlayerTextDrawSetPreviewRot(playerid, DicePTD[3], 270.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, DicePTD[3], 1, 1);

	DicePTD[4] = CreatePlayerTextDraw(playerid, 243.000000, 175.000000, "qAlexGT3");
	PlayerTextDrawFont(playerid, DicePTD[4], 1);
	PlayerTextDrawLetterSize(playerid, DicePTD[4], 0.349999, 1.350000);
	PlayerTextDrawTextSize(playerid, DicePTD[4], 400.000000, 3.000000);
	PlayerTextDrawSetOutline(playerid, DicePTD[4], 1);
	PlayerTextDrawSetShadow(playerid, DicePTD[4], 0);
	PlayerTextDrawAlignment(playerid, DicePTD[4], 2);
	PlayerTextDrawColor(playerid, DicePTD[4], -1);
	PlayerTextDrawBackgroundColor(playerid, DicePTD[4], 255);
	PlayerTextDrawBoxColor(playerid, DicePTD[4], 175);
	PlayerTextDrawUseBox(playerid, DicePTD[4], 0);
	PlayerTextDrawSetProportional(playerid, DicePTD[4], 1);
	PlayerTextDrawSetSelectable(playerid, DicePTD[4], 0);

	DicePTD[5] = CreatePlayerTextDraw(playerid, 388.000000, 175.000000, "qAlexGT3");
	PlayerTextDrawFont(playerid, DicePTD[5], 1);
	PlayerTextDrawLetterSize(playerid, DicePTD[5], 0.349999, 1.350000);
	PlayerTextDrawTextSize(playerid, DicePTD[5], 400.000000, 3.000000);
	PlayerTextDrawSetOutline(playerid, DicePTD[5], 1);
	PlayerTextDrawSetShadow(playerid, DicePTD[5], 0);
	PlayerTextDrawAlignment(playerid, DicePTD[5], 2);
	PlayerTextDrawColor(playerid, DicePTD[5], -1);
	PlayerTextDrawBackgroundColor(playerid, DicePTD[5], 255);
	PlayerTextDrawBoxColor(playerid, DicePTD[5], 175);
	PlayerTextDrawUseBox(playerid, DicePTD[5], 0);
	PlayerTextDrawSetProportional(playerid, DicePTD[5], 1);
	PlayerTextDrawSetSelectable(playerid, DicePTD[5], 0);

	BattlepassPTD[0] = CreatePlayerTextDraw(playerid, 225.000000, 155.000000, "1");
	PlayerTextDrawFont(playerid, BattlepassPTD[0], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[0], 0.349999, 0.949998);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[0], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[0], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[0], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[0], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[0], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[0], 9109679);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[0], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[0], 0);

	BattlepassPTD[1] = CreatePlayerTextDraw(playerid, 285.000000, 155.000000, "2");
	PlayerTextDrawFont(playerid, BattlepassPTD[1], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[1], 0.349999, 0.949998);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[1], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[1], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[1], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[1], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[1], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[1], 9109679);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[1], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[1], 0);

	BattlepassPTD[2] = CreatePlayerTextDraw(playerid, 345.000000, 155.000000, "3");
	PlayerTextDrawFont(playerid, BattlepassPTD[2], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[2], 0.349999, 0.949998);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[2], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[2], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[2], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[2], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[2], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[2], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[2], 9109679);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[2], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[2], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[2], 0);

	BattlepassPTD[3] = CreatePlayerTextDraw(playerid, 405.000000, 155.000000, "4");
	PlayerTextDrawFont(playerid, BattlepassPTD[3], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[3], 0.349999, 0.949998);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[3], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[3], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[3], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[3], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[3], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[3], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[3], 9109679);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[3], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[3], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[3], 0);

	BattlepassPTD[4] = CreatePlayerTextDraw(playerid, 465.000000, 155.000000, "5");
	PlayerTextDrawFont(playerid, BattlepassPTD[4], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[4], 0.349999, 0.949998);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[4], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[4], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[4], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[4], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[4], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[4], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[4], 9109679);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[4], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[4], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[4], 0);

	BattlepassPTD[5] = CreatePlayerTextDraw(playerid, 225.000000, 171.000000, "_");
	PlayerTextDrawFont(playerid, BattlepassPTD[5], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[5], 0.600000, 6.000000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[5], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[5], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[5], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[5], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[5], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[5], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[5], 1296911791);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[5], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[5], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[5], 0);

	BattlepassPTD[6] = CreatePlayerTextDraw(playerid, 285.000000, 171.000000, "_");
	PlayerTextDrawFont(playerid, BattlepassPTD[6], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[6], 0.600000, 6.000000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[6], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[6], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[6], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[6], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[6], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[6], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[6], 1296911791);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[6], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[6], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[6], 0);

	BattlepassPTD[7] = CreatePlayerTextDraw(playerid, 345.000000, 171.000000, "_");
	PlayerTextDrawFont(playerid, BattlepassPTD[7], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[7], 0.600000, 6.000000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[7], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[7], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[7], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[7], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[7], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[7], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[7], 1296911791);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[7], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[7], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[7], 0);

	BattlepassPTD[8] = CreatePlayerTextDraw(playerid, 405.000000, 171.000000, "_");
	PlayerTextDrawFont(playerid, BattlepassPTD[8], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[8], 0.600000, 6.000000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[8], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[8], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[8], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[8], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[8], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[8], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[8], 1296911791);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[8], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[8], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[8], 0);

	BattlepassPTD[9] = CreatePlayerTextDraw(playerid, 465.000000, 171.000000, "_");
	PlayerTextDrawFont(playerid, BattlepassPTD[9], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[9], 0.600000, 6.000000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[9], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[9], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[9], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[9], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[9], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[9], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[9], 1296911791);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[9], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[9], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[9], 0);

	BattlepassPTD[10] = CreatePlayerTextDraw(playerid, 225.000000, 235.000000, "_");
	PlayerTextDrawFont(playerid, BattlepassPTD[10], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[10], 0.600000, 6.000000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[10], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[10], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[10], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[10], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[10], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[10], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[10], -2686801);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[10], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[10], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[10], 0);

	BattlepassPTD[11] = CreatePlayerTextDraw(playerid, 285.000000, 235.000000, "_");
	PlayerTextDrawFont(playerid, BattlepassPTD[11], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[11], 0.600000, 6.000000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[11], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[11], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[11], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[11], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[11], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[11], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[11], -2686801);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[11], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[11], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[11], 0);

	BattlepassPTD[12] = CreatePlayerTextDraw(playerid, 345.000000, 235.000000, "_");
	PlayerTextDrawFont(playerid, BattlepassPTD[12], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[12], 0.600000, 6.000000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[12], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[12], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[12], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[12], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[12], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[12], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[12], -2686801);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[12], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[12], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[12], 0);

	BattlepassPTD[13] = CreatePlayerTextDraw(playerid, 405.000000, 235.000000, "_");
	PlayerTextDrawFont(playerid, BattlepassPTD[13], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[13], 0.600000, 6.000000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[13], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[13], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[13], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[13], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[13], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[13], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[13], -2686801);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[13], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[13], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[13], 0);

	BattlepassPTD[14] = CreatePlayerTextDraw(playerid, 465.000000, 235.000000, "_");
	PlayerTextDrawFont(playerid, BattlepassPTD[14], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[14], 0.600000, 6.000000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[14], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[14], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[14], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[14], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[14], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[14], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[14], -2686801);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[14], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[14], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[14], 0);

	BattlepassPTD[15] = CreatePlayerTextDraw(playerid, 225.000000, 191.000000, "1.000.000$");
	PlayerTextDrawFont(playerid, BattlepassPTD[15], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[15], 0.166666, 1.600000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[15], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[15], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[15], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[15], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[15], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[15], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[15], 50);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[15], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[15], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[15], 0);

	BattlepassPTD[16] = CreatePlayerTextDraw(playerid, 285.000000, 191.000000, "1RP");
	PlayerTextDrawFont(playerid, BattlepassPTD[16], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[16], 0.166666, 1.600000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[16], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[16], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[16], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[16], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[16], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[16], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[16], 50);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[16], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[16], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[16], 0);

	BattlepassPTD[17] = CreatePlayerTextDraw(playerid, 345.000000, 191.000000, "1PP");
	PlayerTextDrawFont(playerid, BattlepassPTD[17], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[17], 0.166666, 1.600000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[17], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[17], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[17], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[17], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[17], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[17], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[17], 50);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[17], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[17], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[17], 0);

	BattlepassPTD[18] = CreatePlayerTextDraw(playerid, 405.000000, 191.000000, "50OG-Points");
	PlayerTextDrawFont(playerid, BattlepassPTD[18], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[18], 0.166666, 1.600000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[18], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[18], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[18], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[18], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[18], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[18], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[18], 50);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[18], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[18], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[18], 0);

	BattlepassPTD[19] = CreatePlayerTextDraw(playerid, 465.000000, 191.000000, "Mountain Bike");
	PlayerTextDrawFont(playerid, BattlepassPTD[19], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[19], 0.166666, 1.600000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[19], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[19], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[19], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[19], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[19], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[19], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[19], 50);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[19], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[19], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[19], 0);

	BattlepassPTD[20] = CreatePlayerTextDraw(playerid, 225.000000, 255.000000, "5.000.000$");
	PlayerTextDrawFont(playerid, BattlepassPTD[20], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[20], 0.166666, 1.600000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[20], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[20], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[20], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[20], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[20], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[20], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[20], 50);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[20], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[20], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[20], 0);

	BattlepassPTD[21] = CreatePlayerTextDraw(playerid, 285.000000, 255.000000, "5RP");
	PlayerTextDrawFont(playerid, BattlepassPTD[21], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[21], 0.166666, 1.600000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[21], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[21], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[21], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[21], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[21], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[21], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[21], 50);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[21], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[21], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[21], 0);

	BattlepassPTD[22] = CreatePlayerTextDraw(playerid, 345.000000, 255.000000, "5PP");
	PlayerTextDrawFont(playerid, BattlepassPTD[22], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[22], 0.166666, 1.600000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[22], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[22], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[22], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[22], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[22], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[22], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[22], 50);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[22], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[22], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[22], 0);

	BattlepassPTD[23] = CreatePlayerTextDraw(playerid, 405.000000, 255.000000, "100OG-Points");
	PlayerTextDrawFont(playerid, BattlepassPTD[23], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[23], 0.166666, 1.600000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[23], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[23], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[23], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[23], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[23], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[23], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[23], 50);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[23], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[23], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[23], 0);

	BattlepassPTD[24] = CreatePlayerTextDraw(playerid, 465.000000, 255.000000, "Manana");
	PlayerTextDrawFont(playerid, BattlepassPTD[24], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[24], 0.166666, 1.600000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[24], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[24], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[24], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[24], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[24], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[24], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[24], 50);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[24], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[24], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[24], 0);

	BattlepassPTD[25] = CreatePlayerTextDraw(playerid, 165.000000, 297.000000, "225 / 225XP");
	PlayerTextDrawFont(playerid, BattlepassPTD[25], 1);
	PlayerTextDrawLetterSize(playerid, BattlepassPTD[25], 0.166666, 0.750000);
	PlayerTextDrawTextSize(playerid, BattlepassPTD[25], 400.000000, 50.500000);
	PlayerTextDrawSetOutline(playerid, BattlepassPTD[25], 1);
	PlayerTextDrawSetShadow(playerid, BattlepassPTD[25], 0);
	PlayerTextDrawAlignment(playerid, BattlepassPTD[25], 2);
	PlayerTextDrawColor(playerid, BattlepassPTD[25], -1);
	PlayerTextDrawBackgroundColor(playerid, BattlepassPTD[25], 255);
	PlayerTextDrawBoxColor(playerid, BattlepassPTD[25], -1962934097);
	PlayerTextDrawUseBox(playerid, BattlepassPTD[25], 1);
	PlayerTextDrawSetProportional(playerid, BattlepassPTD[25], 1);
	PlayerTextDrawSetSelectable(playerid, BattlepassPTD[25], 0);

	DealerShipPTD[0] = CreatePlayerTextDraw(playerid, 527.000000, 144.000000, "Hotring Racer A");
	PlayerTextDrawFont(playerid, DealerShipPTD[0], 1);
	PlayerTextDrawLetterSize(playerid, DealerShipPTD[0], 0.400000, 1.399999);
	PlayerTextDrawTextSize(playerid, DealerShipPTD[0], 400.000000, 125.000000);
	PlayerTextDrawSetOutline(playerid, DealerShipPTD[0], 1);
	PlayerTextDrawSetShadow(playerid, DealerShipPTD[0], 0);
	PlayerTextDrawAlignment(playerid, DealerShipPTD[0], 2);
	PlayerTextDrawColor(playerid, DealerShipPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, DealerShipPTD[0], 255);
	PlayerTextDrawBoxColor(playerid, DealerShipPTD[0], -1962934097);
	PlayerTextDrawUseBox(playerid, DealerShipPTD[0], 1);
	PlayerTextDrawSetProportional(playerid, DealerShipPTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, DealerShipPTD[0], 0);

	DealerShipPTD[1] = CreatePlayerTextDraw(playerid, 527.000000, 180.000000, "Top speed: 200km/h~n~~n~~n~Price: $20,000,000,000~n~~n~~n~Stock: 1000");
	PlayerTextDrawFont(playerid, DealerShipPTD[1], 1);
	PlayerTextDrawLetterSize(playerid, DealerShipPTD[1], 0.262499, 1.549998);
	PlayerTextDrawTextSize(playerid, DealerShipPTD[1], 400.000000, 115.000000);
	PlayerTextDrawSetOutline(playerid, DealerShipPTD[1], 1);
	PlayerTextDrawSetShadow(playerid, DealerShipPTD[1], 0);
	PlayerTextDrawAlignment(playerid, DealerShipPTD[1], 2);
	PlayerTextDrawColor(playerid, DealerShipPTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, DealerShipPTD[1], 255);
	PlayerTextDrawBoxColor(playerid, DealerShipPTD[1], -256);
	PlayerTextDrawUseBox(playerid, DealerShipPTD[1], 1);
	PlayerTextDrawSetProportional(playerid, DealerShipPTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, DealerShipPTD[1], 0);

	DealerShipPTD[2] = CreatePlayerTextDraw(playerid, 255.000000, 175.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, DealerShipPTD[2], 5);
	PlayerTextDrawLetterSize(playerid, DealerShipPTD[2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, DealerShipPTD[2], 125.000000, 100.000000);
	PlayerTextDrawSetOutline(playerid, DealerShipPTD[2], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipPTD[2], 0);
	PlayerTextDrawAlignment(playerid, DealerShipPTD[2], 1);
	PlayerTextDrawColor(playerid, DealerShipPTD[2], -1);
	PlayerTextDrawBackgroundColor(playerid, DealerShipPTD[2], 175);
	PlayerTextDrawBoxColor(playerid, DealerShipPTD[2], 255);
	PlayerTextDrawUseBox(playerid, DealerShipPTD[2], 0);
	PlayerTextDrawSetProportional(playerid, DealerShipPTD[2], 1);
	PlayerTextDrawSetSelectable(playerid, DealerShipPTD[2], 0);
	PlayerTextDrawSetPreviewModel(playerid, DealerShipPTD[2], 411);
	PlayerTextDrawSetPreviewRot(playerid, DealerShipPTD[2], -10.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, DealerShipPTD[2], 1, 1);

	FinishWarPTD = CreatePlayerTextDraw(playerid, 315.000000, 311.000000, "Scorul tau: 32 (37 Ucideri - 5 Decese)");
	PlayerTextDrawFont(playerid, FinishWarPTD, 1);
	PlayerTextDrawLetterSize(playerid, FinishWarPTD, 0.250000, 1.100000);
	PlayerTextDrawTextSize(playerid, FinishWarPTD, 400.000000, 200.000000);
	PlayerTextDrawSetOutline(playerid, FinishWarPTD, 1);
	PlayerTextDrawSetShadow(playerid, FinishWarPTD, 0);
	PlayerTextDrawAlignment(playerid, FinishWarPTD, 2);
	PlayerTextDrawColor(playerid, FinishWarPTD, -1);
	PlayerTextDrawBackgroundColor(playerid, FinishWarPTD, 255);
	PlayerTextDrawBoxColor(playerid, FinishWarPTD, 50);
	PlayerTextDrawUseBox(playerid, FinishWarPTD, 1);
	PlayerTextDrawSetProportional(playerid, FinishWarPTD, 1);
	PlayerTextDrawSetSelectable(playerid, FinishWarPTD, 0);

	CratesPTD[0] = CreatePlayerTextDraw(playerid, 318.000000, 147.000000, "Vehicle Crate");
	PlayerTextDrawFont(playerid, CratesPTD[0], 1);
	PlayerTextDrawLetterSize(playerid, CratesPTD[0], 0.400000, 2.000000);
	PlayerTextDrawTextSize(playerid, CratesPTD[0], 400.000000, 175.000000);
	PlayerTextDrawSetOutline(playerid, CratesPTD[0], 1);
	PlayerTextDrawSetShadow(playerid, CratesPTD[0], 0);
	PlayerTextDrawAlignment(playerid, CratesPTD[0], 2);
	PlayerTextDrawColor(playerid, CratesPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, CratesPTD[0], 255);
	PlayerTextDrawBoxColor(playerid, CratesPTD[0], 50);
	PlayerTextDrawUseBox(playerid, CratesPTD[0], 0);
	PlayerTextDrawSetProportional(playerid, CratesPTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, CratesPTD[0], 0);

	CratesPTD[1] = CreatePlayerTextDraw(playerid, 345.000000, 260.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CratesPTD[1], 5);
	PlayerTextDrawLetterSize(playerid, CratesPTD[1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CratesPTD[1], 35.000000, 35.000000);
	PlayerTextDrawSetOutline(playerid, CratesPTD[1], 0);
	PlayerTextDrawSetShadow(playerid, CratesPTD[1], 0);
	PlayerTextDrawAlignment(playerid, CratesPTD[1], 1);
	PlayerTextDrawColor(playerid, CratesPTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, CratesPTD[1], -1962934147);
	PlayerTextDrawBoxColor(playerid, CratesPTD[1], 255);
	PlayerTextDrawUseBox(playerid, CratesPTD[1], 0);
	PlayerTextDrawSetProportional(playerid, CratesPTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, CratesPTD[1], 0);
	PlayerTextDrawSetPreviewModel(playerid, CratesPTD[1], 18631);
	PlayerTextDrawSetPreviewRot(playerid, CratesPTD[1], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CratesPTD[1], 1, 1);

	CratesPTD[2] = CreatePlayerTextDraw(playerid, 390.000000, 260.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CratesPTD[2], 5);
	PlayerTextDrawLetterSize(playerid, CratesPTD[2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CratesPTD[2], 35.000000, 35.000000);
	PlayerTextDrawSetOutline(playerid, CratesPTD[2], 0);
	PlayerTextDrawSetShadow(playerid, CratesPTD[2], 0);
	PlayerTextDrawAlignment(playerid, CratesPTD[2], 1);
	PlayerTextDrawColor(playerid, CratesPTD[2], -1);
	PlayerTextDrawBackgroundColor(playerid, CratesPTD[2], -1962934147);
	PlayerTextDrawBoxColor(playerid, CratesPTD[2], 255);
	PlayerTextDrawUseBox(playerid, CratesPTD[2], 0);
	PlayerTextDrawSetProportional(playerid, CratesPTD[2], 1);
	PlayerTextDrawSetSelectable(playerid, CratesPTD[2], 0);
	PlayerTextDrawSetPreviewModel(playerid, CratesPTD[2], 18631);
	PlayerTextDrawSetPreviewRot(playerid, CratesPTD[2], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CratesPTD[2], 1, 1);

	CratesPTD[3] = CreatePlayerTextDraw(playerid, 390.000000, 215.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CratesPTD[3], 5);
	PlayerTextDrawLetterSize(playerid, CratesPTD[3], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CratesPTD[3], 35.000000, 35.000000);
	PlayerTextDrawSetOutline(playerid, CratesPTD[3], 0);
	PlayerTextDrawSetShadow(playerid, CratesPTD[3], 0);
	PlayerTextDrawAlignment(playerid, CratesPTD[3], 1);
	PlayerTextDrawColor(playerid, CratesPTD[3], -1);
	PlayerTextDrawBackgroundColor(playerid, CratesPTD[3], -1962934147);
	PlayerTextDrawBoxColor(playerid, CratesPTD[3], 255);
	PlayerTextDrawUseBox(playerid, CratesPTD[3], 0);
	PlayerTextDrawSetProportional(playerid, CratesPTD[3], 1);
	PlayerTextDrawSetSelectable(playerid, CratesPTD[3], 0);
	PlayerTextDrawSetPreviewModel(playerid, CratesPTD[3], 18631);
	PlayerTextDrawSetPreviewRot(playerid, CratesPTD[3], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CratesPTD[3], 1, 1);

	CratesPTD[4] = CreatePlayerTextDraw(playerid, 390.000000, 170.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CratesPTD[4], 5);
	PlayerTextDrawLetterSize(playerid, CratesPTD[4], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CratesPTD[4], 35.000000, 35.000000);
	PlayerTextDrawSetOutline(playerid, CratesPTD[4], 0);
	PlayerTextDrawSetShadow(playerid, CratesPTD[4], 0);
	PlayerTextDrawAlignment(playerid, CratesPTD[4], 1);
	PlayerTextDrawColor(playerid, CratesPTD[4], -1);
	PlayerTextDrawBackgroundColor(playerid, CratesPTD[4], -1962934147);
	PlayerTextDrawBoxColor(playerid, CratesPTD[4], 255);
	PlayerTextDrawUseBox(playerid, CratesPTD[4], 0);
	PlayerTextDrawSetProportional(playerid, CratesPTD[4], 1);
	PlayerTextDrawSetSelectable(playerid, CratesPTD[4], 0);
	PlayerTextDrawSetPreviewModel(playerid, CratesPTD[4], 18631);
	PlayerTextDrawSetPreviewRot(playerid, CratesPTD[4], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CratesPTD[4], 1, 1);

	CratesPTD[5] = CreatePlayerTextDraw(playerid, 345.000000, 170.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CratesPTD[5], 5);
	PlayerTextDrawLetterSize(playerid, CratesPTD[5], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CratesPTD[5], 35.000000, 35.000000);
	PlayerTextDrawSetOutline(playerid, CratesPTD[5], 0);
	PlayerTextDrawSetShadow(playerid, CratesPTD[5], 0);
	PlayerTextDrawAlignment(playerid, CratesPTD[5], 1);
	PlayerTextDrawColor(playerid, CratesPTD[5], -1);
	PlayerTextDrawBackgroundColor(playerid, CratesPTD[5], -1962934147);
	PlayerTextDrawBoxColor(playerid, CratesPTD[5], 255);
	PlayerTextDrawUseBox(playerid, CratesPTD[5], 0);
	PlayerTextDrawSetProportional(playerid, CratesPTD[5], 1);
	PlayerTextDrawSetSelectable(playerid, CratesPTD[5], 0);
	PlayerTextDrawSetPreviewModel(playerid, CratesPTD[5], 18631);
	PlayerTextDrawSetPreviewRot(playerid, CratesPTD[5], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CratesPTD[5], 1, 1);

	CratesPTD[6] = CreatePlayerTextDraw(playerid, 300.000000, 170.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CratesPTD[6], 5);
	PlayerTextDrawLetterSize(playerid, CratesPTD[6], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CratesPTD[6], 35.000000, 35.000000);
	PlayerTextDrawSetOutline(playerid, CratesPTD[6], 0);
	PlayerTextDrawSetShadow(playerid, CratesPTD[6], 0);
	PlayerTextDrawAlignment(playerid, CratesPTD[6], 1);
	PlayerTextDrawColor(playerid, CratesPTD[6], -1);
	PlayerTextDrawBackgroundColor(playerid, CratesPTD[6], -1962934147);
	PlayerTextDrawBoxColor(playerid, CratesPTD[6], 255);
	PlayerTextDrawUseBox(playerid, CratesPTD[6], 0);
	PlayerTextDrawSetProportional(playerid, CratesPTD[6], 1);
	PlayerTextDrawSetSelectable(playerid, CratesPTD[6], 0);
	PlayerTextDrawSetPreviewModel(playerid, CratesPTD[6], 18631);
	PlayerTextDrawSetPreviewRot(playerid, CratesPTD[6], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CratesPTD[6], 1, 1);

	CratesPTD[7] = CreatePlayerTextDraw(playerid, 255.000000, 170.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CratesPTD[7], 5);
	PlayerTextDrawLetterSize(playerid, CratesPTD[7], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CratesPTD[7], 35.000000, 35.000000);
	PlayerTextDrawSetOutline(playerid, CratesPTD[7], 0);
	PlayerTextDrawSetShadow(playerid, CratesPTD[7], 0);
	PlayerTextDrawAlignment(playerid, CratesPTD[7], 1);
	PlayerTextDrawColor(playerid, CratesPTD[7], -1);
	PlayerTextDrawBackgroundColor(playerid, CratesPTD[7], -1962934147);
	PlayerTextDrawBoxColor(playerid, CratesPTD[7], 255);
	PlayerTextDrawUseBox(playerid, CratesPTD[7], 0);
	PlayerTextDrawSetProportional(playerid, CratesPTD[7], 1);
	PlayerTextDrawSetSelectable(playerid, CratesPTD[7], 0);
	PlayerTextDrawSetPreviewModel(playerid, CratesPTD[7], 18631);
	PlayerTextDrawSetPreviewRot(playerid, CratesPTD[7], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CratesPTD[7], 1, 1);

	CratesPTD[8] = CreatePlayerTextDraw(playerid, 210.000000, 170.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CratesPTD[8], 5);
	PlayerTextDrawLetterSize(playerid, CratesPTD[8], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CratesPTD[8], 35.000000, 35.000000);
	PlayerTextDrawSetOutline(playerid, CratesPTD[8], 0);
	PlayerTextDrawSetShadow(playerid, CratesPTD[8], 0);
	PlayerTextDrawAlignment(playerid, CratesPTD[8], 1);
	PlayerTextDrawColor(playerid, CratesPTD[8], -1);
	PlayerTextDrawBackgroundColor(playerid, CratesPTD[8], -1962934147);
	PlayerTextDrawBoxColor(playerid, CratesPTD[8], 255);
	PlayerTextDrawUseBox(playerid, CratesPTD[8], 0);
	PlayerTextDrawSetProportional(playerid, CratesPTD[8], 1);
	PlayerTextDrawSetSelectable(playerid, CratesPTD[8], 0);
	PlayerTextDrawSetPreviewModel(playerid, CratesPTD[8], 18631);
	PlayerTextDrawSetPreviewRot(playerid, CratesPTD[8], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CratesPTD[8], 1, 1);

	CratesPTD[9] = CreatePlayerTextDraw(playerid, 210.000000, 215.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CratesPTD[9], 5);
	PlayerTextDrawLetterSize(playerid, CratesPTD[9], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CratesPTD[9], 35.000000, 35.000000);
	PlayerTextDrawSetOutline(playerid, CratesPTD[9], 0);
	PlayerTextDrawSetShadow(playerid, CratesPTD[9], 0);
	PlayerTextDrawAlignment(playerid, CratesPTD[9], 1);
	PlayerTextDrawColor(playerid, CratesPTD[9], -1);
	PlayerTextDrawBackgroundColor(playerid, CratesPTD[9], -1962934147);
	PlayerTextDrawBoxColor(playerid, CratesPTD[9], 255);
	PlayerTextDrawUseBox(playerid, CratesPTD[9], 0);
	PlayerTextDrawSetProportional(playerid, CratesPTD[9], 1);
	PlayerTextDrawSetSelectable(playerid, CratesPTD[9], 0);
	PlayerTextDrawSetPreviewModel(playerid, CratesPTD[9], 18631);
	PlayerTextDrawSetPreviewRot(playerid, CratesPTD[9], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CratesPTD[9], 1, 1);

	CratesPTD[10] = CreatePlayerTextDraw(playerid, 210.000000, 260.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CratesPTD[10], 5);
	PlayerTextDrawLetterSize(playerid, CratesPTD[10], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CratesPTD[10], 35.000000, 35.000000);
	PlayerTextDrawSetOutline(playerid, CratesPTD[10], 0);
	PlayerTextDrawSetShadow(playerid, CratesPTD[10], 0);
	PlayerTextDrawAlignment(playerid, CratesPTD[10], 1);
	PlayerTextDrawColor(playerid, CratesPTD[10], -1);
	PlayerTextDrawBackgroundColor(playerid, CratesPTD[10], -1962934147);
	PlayerTextDrawBoxColor(playerid, CratesPTD[10], 255);
	PlayerTextDrawUseBox(playerid, CratesPTD[10], 0);
	PlayerTextDrawSetProportional(playerid, CratesPTD[10], 1);
	PlayerTextDrawSetSelectable(playerid, CratesPTD[10], 0);
	PlayerTextDrawSetPreviewModel(playerid, CratesPTD[10], 18631);
	PlayerTextDrawSetPreviewRot(playerid, CratesPTD[10], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CratesPTD[10], 1, 1);

	CratesPTD[11] = CreatePlayerTextDraw(playerid, 255.000000, 260.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CratesPTD[11], 5);
	PlayerTextDrawLetterSize(playerid, CratesPTD[11], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CratesPTD[11], 35.000000, 35.000000);
	PlayerTextDrawSetOutline(playerid, CratesPTD[11], 0);
	PlayerTextDrawSetShadow(playerid, CratesPTD[11], 0);
	PlayerTextDrawAlignment(playerid, CratesPTD[11], 1);
	PlayerTextDrawColor(playerid, CratesPTD[11], -1);
	PlayerTextDrawBackgroundColor(playerid, CratesPTD[11], -1962934147);
	PlayerTextDrawBoxColor(playerid, CratesPTD[11], 255);
	PlayerTextDrawUseBox(playerid, CratesPTD[11], 0);
	PlayerTextDrawSetProportional(playerid, CratesPTD[11], 1);
	PlayerTextDrawSetSelectable(playerid, CratesPTD[11], 0);
	PlayerTextDrawSetPreviewModel(playerid, CratesPTD[11], 18631);
	PlayerTextDrawSetPreviewRot(playerid, CratesPTD[11], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CratesPTD[11], 1, 1);

	CratesPTD[12] = CreatePlayerTextDraw(playerid, 300.000000, 260.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CratesPTD[12], 5);
	PlayerTextDrawLetterSize(playerid, CratesPTD[12], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CratesPTD[12], 35.000000, 35.000000);
	PlayerTextDrawSetOutline(playerid, CratesPTD[12], 0);
	PlayerTextDrawSetShadow(playerid, CratesPTD[12], 0);
	PlayerTextDrawAlignment(playerid, CratesPTD[12], 1);
	PlayerTextDrawColor(playerid, CratesPTD[12], -1);
	PlayerTextDrawBackgroundColor(playerid, CratesPTD[12], 9109629);
	PlayerTextDrawBoxColor(playerid, CratesPTD[12], 255);
	PlayerTextDrawUseBox(playerid, CratesPTD[12], 0);
	PlayerTextDrawSetProportional(playerid, CratesPTD[12], 1);
	PlayerTextDrawSetSelectable(playerid, CratesPTD[12], 0);
	PlayerTextDrawSetPreviewModel(playerid, CratesPTD[12], 18631);
	PlayerTextDrawSetPreviewRot(playerid, CratesPTD[12], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CratesPTD[12], 1, 1);

	InventoryPTD[0] = CreatePlayerTextDraw(playerid, 146.000000, 150.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, InventoryPTD[0], 5);
	PlayerTextDrawLetterSize(playerid, InventoryPTD[0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, InventoryPTD[0], 125.000000, 125.000000);
	PlayerTextDrawSetOutline(playerid, InventoryPTD[0], 0);
	PlayerTextDrawSetShadow(playerid, InventoryPTD[0], 0);
	PlayerTextDrawAlignment(playerid, InventoryPTD[0], 1);
	PlayerTextDrawColor(playerid, InventoryPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryPTD[0], 0);
	PlayerTextDrawBoxColor(playerid, InventoryPTD[0], 255);
	PlayerTextDrawUseBox(playerid, InventoryPTD[0], 0);
	PlayerTextDrawSetProportional(playerid, InventoryPTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryPTD[0], 0);
	PlayerTextDrawSetPreviewModel(playerid, InventoryPTD[0], 271);
	PlayerTextDrawSetPreviewRot(playerid, InventoryPTD[0], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, InventoryPTD[0], 1, 1);

	InventoryPTD[1] = CreatePlayerTextDraw(playerid, 344.000000, 183.000000, "x900");
	PlayerTextDrawFont(playerid, InventoryPTD[1], 1);
	PlayerTextDrawLetterSize(playerid, InventoryPTD[1], 0.212500, 0.850000);
	PlayerTextDrawTextSize(playerid, InventoryPTD[1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, InventoryPTD[1], 1);
	PlayerTextDrawSetShadow(playerid, InventoryPTD[1], 0);
	PlayerTextDrawAlignment(playerid, InventoryPTD[1], 3);
	PlayerTextDrawColor(playerid, InventoryPTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryPTD[1], 255);
	PlayerTextDrawBoxColor(playerid, InventoryPTD[1], 50);
	PlayerTextDrawUseBox(playerid, InventoryPTD[1], 0);
	PlayerTextDrawSetProportional(playerid, InventoryPTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryPTD[1], 0);

	InventoryPTD[2] = CreatePlayerTextDraw(playerid, 420.000000, 183.000000, "x900");
	PlayerTextDrawFont(playerid, InventoryPTD[2], 1);
	PlayerTextDrawLetterSize(playerid, InventoryPTD[2], 0.212500, 0.850000);
	PlayerTextDrawTextSize(playerid, InventoryPTD[2], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, InventoryPTD[2], 1);
	PlayerTextDrawSetShadow(playerid, InventoryPTD[2], 0);
	PlayerTextDrawAlignment(playerid, InventoryPTD[2], 3);
	PlayerTextDrawColor(playerid, InventoryPTD[2], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryPTD[2], 255);
	PlayerTextDrawBoxColor(playerid, InventoryPTD[2], 50);
	PlayerTextDrawUseBox(playerid, InventoryPTD[2], 0);
	PlayerTextDrawSetProportional(playerid, InventoryPTD[2], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryPTD[2], 0);

	InventoryPTD[3] = CreatePlayerTextDraw(playerid, 344.000000, 217.000000, "x800");
	PlayerTextDrawFont(playerid, InventoryPTD[3], 1);
	PlayerTextDrawLetterSize(playerid, InventoryPTD[3], 0.212500, 0.850000);
	PlayerTextDrawTextSize(playerid, InventoryPTD[3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, InventoryPTD[3], 1);
	PlayerTextDrawSetShadow(playerid, InventoryPTD[3], 0);
	PlayerTextDrawAlignment(playerid, InventoryPTD[3], 3);
	PlayerTextDrawColor(playerid, InventoryPTD[3], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryPTD[3], 255);
	PlayerTextDrawBoxColor(playerid, InventoryPTD[3], 50);
	PlayerTextDrawUseBox(playerid, InventoryPTD[3], 0);
	PlayerTextDrawSetProportional(playerid, InventoryPTD[3], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryPTD[3], 0);

	InventoryPTD[4] = CreatePlayerTextDraw(playerid, 420.000000, 217.000000, "x900");
	PlayerTextDrawFont(playerid, InventoryPTD[4], 1);
	PlayerTextDrawLetterSize(playerid, InventoryPTD[4], 0.212500, 0.850000);
	PlayerTextDrawTextSize(playerid, InventoryPTD[4], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, InventoryPTD[4], 1);
	PlayerTextDrawSetShadow(playerid, InventoryPTD[4], 0);
	PlayerTextDrawAlignment(playerid, InventoryPTD[4], 3);
	PlayerTextDrawColor(playerid, InventoryPTD[4], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryPTD[4], 255);
	PlayerTextDrawBoxColor(playerid, InventoryPTD[4], 50);
	PlayerTextDrawUseBox(playerid, InventoryPTD[4], 0);
	PlayerTextDrawSetProportional(playerid, InventoryPTD[4], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryPTD[4], 0);

	InventoryPTD[5] = CreatePlayerTextDraw(playerid, 344.000000, 251.000000, "x800");
	PlayerTextDrawFont(playerid, InventoryPTD[5], 1);
	PlayerTextDrawLetterSize(playerid, InventoryPTD[5], 0.212500, 0.850000);
	PlayerTextDrawTextSize(playerid, InventoryPTD[5], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, InventoryPTD[5], 1);
	PlayerTextDrawSetShadow(playerid, InventoryPTD[5], 0);
	PlayerTextDrawAlignment(playerid, InventoryPTD[5], 3);
	PlayerTextDrawColor(playerid, InventoryPTD[5], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryPTD[5], 255);
	PlayerTextDrawBoxColor(playerid, InventoryPTD[5], 50);
	PlayerTextDrawUseBox(playerid, InventoryPTD[5], 0);
	PlayerTextDrawSetProportional(playerid, InventoryPTD[5], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryPTD[5], 0);

	InventoryPTD[6] = CreatePlayerTextDraw(playerid, 420.000000, 251.000000, "x800");
	PlayerTextDrawFont(playerid, InventoryPTD[6], 1);
	PlayerTextDrawLetterSize(playerid, InventoryPTD[6], 0.212500, 0.850000);
	PlayerTextDrawTextSize(playerid, InventoryPTD[6], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, InventoryPTD[6], 1);
	PlayerTextDrawSetShadow(playerid, InventoryPTD[6], 0);
	PlayerTextDrawAlignment(playerid, InventoryPTD[6], 3);
	PlayerTextDrawColor(playerid, InventoryPTD[6], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryPTD[6], 255);
	PlayerTextDrawBoxColor(playerid, InventoryPTD[6], 50);
	PlayerTextDrawUseBox(playerid, InventoryPTD[6], 0);
	PlayerTextDrawSetProportional(playerid, InventoryPTD[6], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryPTD[6], 0);

	InventoryPTD[7] = CreatePlayerTextDraw(playerid, 319.000000, 179.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, InventoryPTD[7], 5);
	PlayerTextDrawLetterSize(playerid, InventoryPTD[7], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, InventoryPTD[7], 50.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, InventoryPTD[7], 0);
	PlayerTextDrawSetShadow(playerid, InventoryPTD[7], 0);
	PlayerTextDrawAlignment(playerid, InventoryPTD[7], 1);
	PlayerTextDrawColor(playerid, InventoryPTD[7], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryPTD[7], 0);
	PlayerTextDrawBoxColor(playerid, InventoryPTD[7], 255);
	PlayerTextDrawUseBox(playerid, InventoryPTD[7], 0);
	PlayerTextDrawSetProportional(playerid, InventoryPTD[7], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryPTD[7], 1);
	PlayerTextDrawSetPreviewModel(playerid, InventoryPTD[7], 2703);
	PlayerTextDrawSetPreviewRot(playerid, InventoryPTD[7], -90.000000, 0.000000, -10.000000, 0.680000);
	PlayerTextDrawSetPreviewVehCol(playerid, InventoryPTD[7], 1, 1);

	InventoryPTD[8] = CreatePlayerTextDraw(playerid, 345.000000, 180.000000, "x10");
	PlayerTextDrawFont(playerid, InventoryPTD[8], 1);
	PlayerTextDrawLetterSize(playerid, InventoryPTD[8], 0.400000, 1.399999);
	PlayerTextDrawTextSize(playerid, InventoryPTD[8], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, InventoryPTD[8], 1);
	PlayerTextDrawSetShadow(playerid, InventoryPTD[8], 0);
	PlayerTextDrawAlignment(playerid, InventoryPTD[8], 2);
	PlayerTextDrawColor(playerid, InventoryPTD[8], -1);
	PlayerTextDrawBackgroundColor(playerid, InventoryPTD[8], 255);
	PlayerTextDrawBoxColor(playerid, InventoryPTD[8], 50);
	PlayerTextDrawUseBox(playerid, InventoryPTD[8], 0);
	PlayerTextDrawSetProportional(playerid, InventoryPTD[8], 1);
	PlayerTextDrawSetSelectable(playerid, InventoryPTD[8], 0);

	UpgraderPTD[0] = CreatePlayerTextDraw(playerid, 225.000000, 235.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, UpgraderPTD[0], 5);
	PlayerTextDrawLetterSize(playerid, UpgraderPTD[0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, UpgraderPTD[0], 50.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, UpgraderPTD[0], 0);
	PlayerTextDrawSetShadow(playerid, UpgraderPTD[0], 0);
	PlayerTextDrawAlignment(playerid, UpgraderPTD[0], 1);
	PlayerTextDrawColor(playerid, UpgraderPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, UpgraderPTD[0], 0);
	PlayerTextDrawBoxColor(playerid, UpgraderPTD[0], 0);
	PlayerTextDrawUseBox(playerid, UpgraderPTD[0], 0);
	PlayerTextDrawSetProportional(playerid, UpgraderPTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, UpgraderPTD[0], 1);
	PlayerTextDrawSetPreviewModel(playerid, UpgraderPTD[0], 1274);
	PlayerTextDrawSetPreviewRot(playerid, UpgraderPTD[0], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, UpgraderPTD[0], 1, 1);

	UpgraderPTD[1] = CreatePlayerTextDraw(playerid, 356.000000, 235.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, UpgraderPTD[1], 5);
	PlayerTextDrawLetterSize(playerid, UpgraderPTD[1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, UpgraderPTD[1], 50.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, UpgraderPTD[1], 0);
	PlayerTextDrawSetShadow(playerid, UpgraderPTD[1], 0);
	PlayerTextDrawAlignment(playerid, UpgraderPTD[1], 1);
	PlayerTextDrawColor(playerid, UpgraderPTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, UpgraderPTD[1], 0);
	PlayerTextDrawBoxColor(playerid, UpgraderPTD[1], 0);
	PlayerTextDrawUseBox(playerid, UpgraderPTD[1], 0);
	PlayerTextDrawSetProportional(playerid, UpgraderPTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, UpgraderPTD[1], 0);
	PlayerTextDrawSetPreviewModel(playerid, UpgraderPTD[1], 1274);
	PlayerTextDrawSetPreviewRot(playerid, UpgraderPTD[1], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, UpgraderPTD[1], 1, 1);

	UpgraderPTD[2] = CreatePlayerTextDraw(playerid, 250.000000, 295.000000, "$100,000,000");
	PlayerTextDrawFont(playerid, UpgraderPTD[2], 1);
	PlayerTextDrawLetterSize(playerid, UpgraderPTD[2], 0.200000, 1.200000);
	PlayerTextDrawTextSize(playerid, UpgraderPTD[2], 10.000000, 39.000000);
	PlayerTextDrawSetOutline(playerid, UpgraderPTD[2], 1);
	PlayerTextDrawSetShadow(playerid, UpgraderPTD[2], 0);
	PlayerTextDrawAlignment(playerid, UpgraderPTD[2], 2);
	PlayerTextDrawColor(playerid, UpgraderPTD[2], -1);
	PlayerTextDrawBackgroundColor(playerid, UpgraderPTD[2], 255);
	PlayerTextDrawBoxColor(playerid, UpgraderPTD[2], 9109554);
	PlayerTextDrawUseBox(playerid, UpgraderPTD[2], 0);
	PlayerTextDrawSetProportional(playerid, UpgraderPTD[2], 1);
	PlayerTextDrawSetSelectable(playerid, UpgraderPTD[2], 1);

	UpgraderPTD[3] = CreatePlayerTextDraw(playerid, 381.000000, 295.000000, "$1,000,000,000");
	PlayerTextDrawFont(playerid, UpgraderPTD[3], 1);
	PlayerTextDrawLetterSize(playerid, UpgraderPTD[3], 0.200000, 1.200000);
	PlayerTextDrawTextSize(playerid, UpgraderPTD[3], 10.000000, 39.000000);
	PlayerTextDrawSetOutline(playerid, UpgraderPTD[3], 1);
	PlayerTextDrawSetShadow(playerid, UpgraderPTD[3], 0);
	PlayerTextDrawAlignment(playerid, UpgraderPTD[3], 2);
	PlayerTextDrawColor(playerid, UpgraderPTD[3], -1);
	PlayerTextDrawBackgroundColor(playerid, UpgraderPTD[3], 255);
	PlayerTextDrawBoxColor(playerid, UpgraderPTD[3], 9109554);
	PlayerTextDrawUseBox(playerid, UpgraderPTD[3], 0);
	PlayerTextDrawSetProportional(playerid, UpgraderPTD[3], 1);
	PlayerTextDrawSetSelectable(playerid, UpgraderPTD[3], 0);

	StuntPTD = CreatePlayerTextDraw(playerid, 581.000000, 170.000000, "Stunt System~n~~w~Mai ai 90 de secunde.");
	PlayerTextDrawFont(playerid, StuntPTD, 1);
	PlayerTextDrawLetterSize(playerid, StuntPTD, 0.287500, 1.450000);
	PlayerTextDrawTextSize(playerid, StuntPTD, 0.000000, 115.000000);
	PlayerTextDrawSetOutline(playerid, StuntPTD, 1);
	PlayerTextDrawSetShadow(playerid, StuntPTD, 0);
	PlayerTextDrawAlignment(playerid, StuntPTD, 2);
	PlayerTextDrawColor(playerid, StuntPTD, -1);
	PlayerTextDrawBackgroundColor(playerid, StuntPTD, 255);
	PlayerTextDrawBoxColor(playerid, StuntPTD, 175);
	PlayerTextDrawUseBox(playerid, StuntPTD, 1);
	PlayerTextDrawSetProportional(playerid, StuntPTD, 1);
	PlayerTextDrawSetSelectable(playerid, StuntPTD, 0);

	LuckyPTD[0] = CreatePlayerTextDraw(playerid, 292.500000, 157.500000, "Preview_Model");
	PlayerTextDrawFont(playerid, LuckyPTD[0], 5);
	PlayerTextDrawLetterSize(playerid, LuckyPTD[0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, LuckyPTD[0], 45.000000, 45.000000);
	PlayerTextDrawSetOutline(playerid, LuckyPTD[0], 0);
	PlayerTextDrawSetShadow(playerid, LuckyPTD[0], 0);
	PlayerTextDrawAlignment(playerid, LuckyPTD[0], 1);
	PlayerTextDrawColor(playerid, LuckyPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, LuckyPTD[0], 125);
	PlayerTextDrawBoxColor(playerid, LuckyPTD[0], 65535);
	PlayerTextDrawUseBox(playerid, LuckyPTD[0], 0);
	PlayerTextDrawSetProportional(playerid, LuckyPTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, LuckyPTD[0], 0);
	PlayerTextDrawSetPreviewModel(playerid, LuckyPTD[0], 1654);
	PlayerTextDrawSetPreviewRot(playerid, LuckyPTD[0], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, LuckyPTD[0], 1, 1);

	LuckyPTD[1] = CreatePlayerTextDraw(playerid, 292.500000, 217.500000, "Preview_Model");
	PlayerTextDrawFont(playerid, LuckyPTD[1], 5);
	PlayerTextDrawLetterSize(playerid, LuckyPTD[1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, LuckyPTD[1], 45.000000, 45.000000);
	PlayerTextDrawSetOutline(playerid, LuckyPTD[1], 0);
	PlayerTextDrawSetShadow(playerid, LuckyPTD[1], 0);
	PlayerTextDrawAlignment(playerid, LuckyPTD[1], 1);
	PlayerTextDrawColor(playerid, LuckyPTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, LuckyPTD[1], 125);
	PlayerTextDrawBoxColor(playerid, LuckyPTD[1], 255);
	PlayerTextDrawUseBox(playerid, LuckyPTD[1], 0);
	PlayerTextDrawSetProportional(playerid, LuckyPTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, LuckyPTD[1], 0);
	PlayerTextDrawSetPreviewModel(playerid, LuckyPTD[1], 541);
	PlayerTextDrawSetPreviewRot(playerid, LuckyPTD[1], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, LuckyPTD[1], 1, 1);

	LuckyPTD[2] = CreatePlayerTextDraw(playerid, 292.500000, 277.500000, "Preview_Model");
	PlayerTextDrawFont(playerid, LuckyPTD[2], 5);
	PlayerTextDrawLetterSize(playerid, LuckyPTD[2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, LuckyPTD[2], 45.000000, 45.000000);
	PlayerTextDrawSetOutline(playerid, LuckyPTD[2], 0);
	PlayerTextDrawSetShadow(playerid, LuckyPTD[2], 0);
	PlayerTextDrawAlignment(playerid, LuckyPTD[2], 1);
	PlayerTextDrawColor(playerid, LuckyPTD[2], -1);
	PlayerTextDrawBackgroundColor(playerid, LuckyPTD[2], 125);
	PlayerTextDrawBoxColor(playerid, LuckyPTD[2], 255);
	PlayerTextDrawUseBox(playerid, LuckyPTD[2], 0);
	PlayerTextDrawSetProportional(playerid, LuckyPTD[2], 1);
	PlayerTextDrawSetSelectable(playerid, LuckyPTD[2], 0);
	PlayerTextDrawSetPreviewModel(playerid, LuckyPTD[2], 1654);
	PlayerTextDrawSetPreviewRot(playerid, LuckyPTD[2], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, LuckyPTD[2], 1, 1);

	FragmentPTD[0] = CreatePlayerTextDraw(playerid, 272.000000, 200.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, FragmentPTD[0], 5);
	PlayerTextDrawLetterSize(playerid, FragmentPTD[0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, FragmentPTD[0], 75.000000, 75.000000);
	PlayerTextDrawSetOutline(playerid, FragmentPTD[0], 0);
	PlayerTextDrawSetShadow(playerid, FragmentPTD[0], 0);
	PlayerTextDrawAlignment(playerid, FragmentPTD[0], 1);
	PlayerTextDrawColor(playerid, FragmentPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, FragmentPTD[0], 0);
	PlayerTextDrawBoxColor(playerid, FragmentPTD[0], 255);
	PlayerTextDrawUseBox(playerid, FragmentPTD[0], 0);
	PlayerTextDrawSetProportional(playerid, FragmentPTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, FragmentPTD[0], 0);
	PlayerTextDrawSetPreviewModel(playerid, FragmentPTD[0], 541);
	PlayerTextDrawSetPreviewRot(playerid, FragmentPTD[0], -10.000000, 0.000000, 0.000000, 0.750000);
	PlayerTextDrawSetPreviewVehCol(playerid, FragmentPTD[0], 1, 1);

	FragmentPTD[1] = CreatePlayerTextDraw(playerid, 310.000000, 276.000000, "Bullet");
	PlayerTextDrawFont(playerid, FragmentPTD[1], 1);
	PlayerTextDrawLetterSize(playerid, FragmentPTD[1], 0.300000, 1.300000);
	PlayerTextDrawTextSize(playerid, FragmentPTD[1], 399.500000, 19.500000);
	PlayerTextDrawSetOutline(playerid, FragmentPTD[1], 1);
	PlayerTextDrawSetShadow(playerid, FragmentPTD[1], 0);
	PlayerTextDrawAlignment(playerid, FragmentPTD[1], 2);
	PlayerTextDrawColor(playerid, FragmentPTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, FragmentPTD[1], 255);
	PlayerTextDrawBoxColor(playerid, FragmentPTD[1], 50);
	PlayerTextDrawUseBox(playerid, FragmentPTD[1], 0);
	PlayerTextDrawSetProportional(playerid, FragmentPTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, FragmentPTD[1], 0);

	GiftBoxPTD = CreatePlayerTextDraw(playerid, 618.000000, 230.000000, "~g~~h~~g~~h~12:34");
	PlayerTextDrawFont(playerid, GiftBoxPTD, 1);
	PlayerTextDrawLetterSize(playerid, GiftBoxPTD, 0.200000, 1.000000);
	PlayerTextDrawTextSize(playerid, GiftBoxPTD, 400.000000, 40.000000);
	PlayerTextDrawSetOutline(playerid, GiftBoxPTD, 1);
	PlayerTextDrawSetShadow(playerid, GiftBoxPTD, 0);
	PlayerTextDrawAlignment(playerid, GiftBoxPTD, 2);
	PlayerTextDrawColor(playerid, GiftBoxPTD, -1);
	PlayerTextDrawBackgroundColor(playerid, GiftBoxPTD, 255);
	PlayerTextDrawBoxColor(playerid, GiftBoxPTD, 50);
	PlayerTextDrawUseBox(playerid, GiftBoxPTD, 0);
	PlayerTextDrawSetProportional(playerid, GiftBoxPTD, 1);
	PlayerTextDrawSetSelectable(playerid, GiftBoxPTD, 0);

	NamePTD = CreatePlayerTextDraw(playerid, 638.000000, 412.000000, "qAlexGT3(~g~~h~1000~w~~h~)");
	PlayerTextDrawFont(playerid, NamePTD, 1);
	PlayerTextDrawLetterSize(playerid, NamePTD, 0.250000, 1.500000);
	PlayerTextDrawTextSize(playerid, NamePTD, 400.000000, 85.000000);
	PlayerTextDrawSetOutline(playerid, NamePTD, 1);
	PlayerTextDrawSetShadow(playerid, NamePTD, 0);
	PlayerTextDrawAlignment(playerid, NamePTD, 3);
	PlayerTextDrawColor(playerid, NamePTD, -1);
	PlayerTextDrawBackgroundColor(playerid, NamePTD, 255);
	PlayerTextDrawBoxColor(playerid, NamePTD, 50);
	PlayerTextDrawUseBox(playerid, NamePTD, 0);
	PlayerTextDrawSetProportional(playerid, NamePTD, 1);
	PlayerTextDrawSetSelectable(playerid, NamePTD, 0);

	SlotsPTD[0] = CreatePlayerTextDraw(playerid, 225.000000, 155.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SlotsPTD[0], 5);
	PlayerTextDrawLetterSize(playerid, SlotsPTD[0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SlotsPTD[0], 50.000000, 45.000000);
	PlayerTextDrawSetOutline(playerid, SlotsPTD[0], 0);
	PlayerTextDrawSetShadow(playerid, SlotsPTD[0], 0);
	PlayerTextDrawAlignment(playerid, SlotsPTD[0], 1);
	PlayerTextDrawColor(playerid, SlotsPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, SlotsPTD[0], 125);
	PlayerTextDrawBoxColor(playerid, SlotsPTD[0], 255);
	PlayerTextDrawUseBox(playerid, SlotsPTD[0], 0);
	PlayerTextDrawSetProportional(playerid, SlotsPTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, SlotsPTD[0], 0);
	PlayerTextDrawSetPreviewModel(playerid, SlotsPTD[0], 1240);
	PlayerTextDrawSetPreviewRot(playerid, SlotsPTD[0], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, SlotsPTD[0], 1, 1);

	SlotsPTD[1] = CreatePlayerTextDraw(playerid, 225.000000, 210.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SlotsPTD[1], 5);
	PlayerTextDrawLetterSize(playerid, SlotsPTD[1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SlotsPTD[1], 50.000000, 45.000000);
	PlayerTextDrawSetOutline(playerid, SlotsPTD[1], 0);
	PlayerTextDrawSetShadow(playerid, SlotsPTD[1], 0);
	PlayerTextDrawAlignment(playerid, SlotsPTD[1], 1);
	PlayerTextDrawColor(playerid, SlotsPTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, SlotsPTD[1], 125);
	PlayerTextDrawBoxColor(playerid, SlotsPTD[1], 255);
	PlayerTextDrawUseBox(playerid, SlotsPTD[1], 0);
	PlayerTextDrawSetProportional(playerid, SlotsPTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, SlotsPTD[1], 0);
	PlayerTextDrawSetPreviewModel(playerid, SlotsPTD[1], 1274);
	PlayerTextDrawSetPreviewRot(playerid, SlotsPTD[1], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, SlotsPTD[1], 1, 1);

	SlotsPTD[2] = CreatePlayerTextDraw(playerid, 225.000000, 265.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SlotsPTD[2], 5);
	PlayerTextDrawLetterSize(playerid, SlotsPTD[2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SlotsPTD[2], 50.000000, 45.000000);
	PlayerTextDrawSetOutline(playerid, SlotsPTD[2], 0);
	PlayerTextDrawSetShadow(playerid, SlotsPTD[2], 0);
	PlayerTextDrawAlignment(playerid, SlotsPTD[2], 1);
	PlayerTextDrawColor(playerid, SlotsPTD[2], -1);
	PlayerTextDrawBackgroundColor(playerid, SlotsPTD[2], 125);
	PlayerTextDrawBoxColor(playerid, SlotsPTD[2], 255);
	PlayerTextDrawUseBox(playerid, SlotsPTD[2], 0);
	PlayerTextDrawSetProportional(playerid, SlotsPTD[2], 1);
	PlayerTextDrawSetSelectable(playerid, SlotsPTD[2], 0);
	PlayerTextDrawSetPreviewModel(playerid, SlotsPTD[2], 1247);
	PlayerTextDrawSetPreviewRot(playerid, SlotsPTD[2], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, SlotsPTD[2], 1, 1);

	SlotsPTD[3] = CreatePlayerTextDraw(playerid, 295.000000, 155.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SlotsPTD[3], 5);
	PlayerTextDrawLetterSize(playerid, SlotsPTD[3], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SlotsPTD[3], 50.000000, 45.000000);
	PlayerTextDrawSetOutline(playerid, SlotsPTD[3], 0);
	PlayerTextDrawSetShadow(playerid, SlotsPTD[3], 0);
	PlayerTextDrawAlignment(playerid, SlotsPTD[3], 1);
	PlayerTextDrawColor(playerid, SlotsPTD[3], -1);
	PlayerTextDrawBackgroundColor(playerid, SlotsPTD[3], 125);
	PlayerTextDrawBoxColor(playerid, SlotsPTD[3], 255);
	PlayerTextDrawUseBox(playerid, SlotsPTD[3], 0);
	PlayerTextDrawSetProportional(playerid, SlotsPTD[3], 1);
	PlayerTextDrawSetSelectable(playerid, SlotsPTD[3], 0);
	PlayerTextDrawSetPreviewModel(playerid, SlotsPTD[3], 954);
	PlayerTextDrawSetPreviewRot(playerid, SlotsPTD[3], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, SlotsPTD[3], 1, 1);

	SlotsPTD[4] = CreatePlayerTextDraw(playerid, 295.000000, 210.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SlotsPTD[4], 5);
	PlayerTextDrawLetterSize(playerid, SlotsPTD[4], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SlotsPTD[4], 50.000000, 45.000000);
	PlayerTextDrawSetOutline(playerid, SlotsPTD[4], 0);
	PlayerTextDrawSetShadow(playerid, SlotsPTD[4], 0);
	PlayerTextDrawAlignment(playerid, SlotsPTD[4], 1);
	PlayerTextDrawColor(playerid, SlotsPTD[4], -1);
	PlayerTextDrawBackgroundColor(playerid, SlotsPTD[4], 125);
	PlayerTextDrawBoxColor(playerid, SlotsPTD[4], 255);
	PlayerTextDrawUseBox(playerid, SlotsPTD[4], 0);
	PlayerTextDrawSetProportional(playerid, SlotsPTD[4], 1);
	PlayerTextDrawSetSelectable(playerid, SlotsPTD[4], 0);
	PlayerTextDrawSetPreviewModel(playerid, SlotsPTD[4], 1276);
	PlayerTextDrawSetPreviewRot(playerid, SlotsPTD[4], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, SlotsPTD[4], 1, 1);

	SlotsPTD[5] = CreatePlayerTextDraw(playerid, 295.000000, 265.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SlotsPTD[5], 5);
	PlayerTextDrawLetterSize(playerid, SlotsPTD[5], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SlotsPTD[5], 50.000000, 45.000000);
	PlayerTextDrawSetOutline(playerid, SlotsPTD[5], 0);
	PlayerTextDrawSetShadow(playerid, SlotsPTD[5], 0);
	PlayerTextDrawAlignment(playerid, SlotsPTD[5], 1);
	PlayerTextDrawColor(playerid, SlotsPTD[5], -1);
	PlayerTextDrawBackgroundColor(playerid, SlotsPTD[5], 125);
	PlayerTextDrawBoxColor(playerid, SlotsPTD[5], 255);
	PlayerTextDrawUseBox(playerid, SlotsPTD[5], 0);
	PlayerTextDrawSetProportional(playerid, SlotsPTD[5], 1);
	PlayerTextDrawSetSelectable(playerid, SlotsPTD[5], 0);
	PlayerTextDrawSetPreviewModel(playerid, SlotsPTD[5], 18631);
	PlayerTextDrawSetPreviewRot(playerid, SlotsPTD[5], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, SlotsPTD[5], 1, 1);

	SlotsPTD[6] = CreatePlayerTextDraw(playerid, 365.000000, 155.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SlotsPTD[6], 5);
	PlayerTextDrawLetterSize(playerid, SlotsPTD[6], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SlotsPTD[6], 50.000000, 45.000000);
	PlayerTextDrawSetOutline(playerid, SlotsPTD[6], 0);
	PlayerTextDrawSetShadow(playerid, SlotsPTD[6], 0);
	PlayerTextDrawAlignment(playerid, SlotsPTD[6], 1);
	PlayerTextDrawColor(playerid, SlotsPTD[6], -1);
	PlayerTextDrawBackgroundColor(playerid, SlotsPTD[6], 125);
	PlayerTextDrawBoxColor(playerid, SlotsPTD[6], 255);
	PlayerTextDrawUseBox(playerid, SlotsPTD[6], 0);
	PlayerTextDrawSetProportional(playerid, SlotsPTD[6], 1);
	PlayerTextDrawSetSelectable(playerid, SlotsPTD[6], 0);
	PlayerTextDrawSetPreviewModel(playerid, SlotsPTD[6], 1240);
	PlayerTextDrawSetPreviewRot(playerid, SlotsPTD[6], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, SlotsPTD[6], 1, 1);

	SlotsPTD[7] = CreatePlayerTextDraw(playerid, 365.000000, 210.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SlotsPTD[7], 5);
	PlayerTextDrawLetterSize(playerid, SlotsPTD[7], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SlotsPTD[7], 50.000000, 45.000000);
	PlayerTextDrawSetOutline(playerid, SlotsPTD[7], 0);
	PlayerTextDrawSetShadow(playerid, SlotsPTD[7], 0);
	PlayerTextDrawAlignment(playerid, SlotsPTD[7], 1);
	PlayerTextDrawColor(playerid, SlotsPTD[7], -1);
	PlayerTextDrawBackgroundColor(playerid, SlotsPTD[7], 125);
	PlayerTextDrawBoxColor(playerid, SlotsPTD[7], 255);
	PlayerTextDrawUseBox(playerid, SlotsPTD[7], 0);
	PlayerTextDrawSetProportional(playerid, SlotsPTD[7], 1);
	PlayerTextDrawSetSelectable(playerid, SlotsPTD[7], 0);
	PlayerTextDrawSetPreviewModel(playerid, SlotsPTD[7], 1274);
	PlayerTextDrawSetPreviewRot(playerid, SlotsPTD[7], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, SlotsPTD[7], 1, 1);

	SlotsPTD[8] = CreatePlayerTextDraw(playerid, 365.000000, 265.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SlotsPTD[8], 5);
	PlayerTextDrawLetterSize(playerid, SlotsPTD[8], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SlotsPTD[8], 50.000000, 45.000000);
	PlayerTextDrawSetOutline(playerid, SlotsPTD[8], 0);
	PlayerTextDrawSetShadow(playerid, SlotsPTD[8], 0);
	PlayerTextDrawAlignment(playerid, SlotsPTD[8], 1);
	PlayerTextDrawColor(playerid, SlotsPTD[8], -1);
	PlayerTextDrawBackgroundColor(playerid, SlotsPTD[8], 125);
	PlayerTextDrawBoxColor(playerid, SlotsPTD[8], 255);
	PlayerTextDrawUseBox(playerid, SlotsPTD[8], 0);
	PlayerTextDrawSetProportional(playerid, SlotsPTD[8], 1);
	PlayerTextDrawSetSelectable(playerid, SlotsPTD[8], 0);
	PlayerTextDrawSetPreviewModel(playerid, SlotsPTD[8], 1247);
	PlayerTextDrawSetPreviewRot(playerid, SlotsPTD[8], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, SlotsPTD[8], 1, 1);

	TuningPTD[0] = CreatePlayerTextDraw(playerid, 310.333312, 304.388885, "Curved Twin Cylinder Generic Exhaust");
	PlayerTextDrawLetterSize(playerid, TuningPTD[0], 0.371000, 1.600000);
	PlayerTextDrawAlignment(playerid, TuningPTD[0], 2);
	PlayerTextDrawColor(playerid, TuningPTD[0], -1);
	PlayerTextDrawSetShadow(playerid, TuningPTD[0], 0);
	PlayerTextDrawSetOutline(playerid, TuningPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, TuningPTD[0], 255);
	PlayerTextDrawFont(playerid, TuningPTD[0], 1);
	PlayerTextDrawSetProportional(playerid, TuningPTD[0], 1);
	PlayerTextDrawSetShadow(playerid, TuningPTD[0], 0);

	TuningPTD[1] = CreatePlayerTextDraw(playerid, 268.999969, 320.711151, "");
	PlayerTextDrawLetterSize(playerid, TuningPTD[1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuningPTD[1], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, TuningPTD[1], 1);
	PlayerTextDrawColor(playerid, TuningPTD[1], -1);
	PlayerTextDrawSetShadow(playerid, TuningPTD[1], 0);
	PlayerTextDrawSetOutline(playerid, TuningPTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningPTD[1], 0);
	PlayerTextDrawFont(playerid, TuningPTD[1], 5);
	PlayerTextDrawSetProportional(playerid, TuningPTD[1], 0);
	PlayerTextDrawSetShadow(playerid, TuningPTD[1], 0);
	PlayerTextDrawSetSelectable(playerid, TuningPTD[1], true);
	PlayerTextDrawSetPreviewModel(playerid, TuningPTD[1], 1077);
	PlayerTextDrawSetPreviewRot(playerid, TuningPTD[1], 0.000000, 0.000000, 0.000000, 1.000000);

	RentVehiclePTD[0] = CreatePlayerTextDraw(playerid, 265.766540, 330.466552, "");
	PlayerTextDrawLetterSize(playerid, RentVehiclePTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, RentVehiclePTD[0], 115.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, RentVehiclePTD[0], 1);
	PlayerTextDrawColor(playerid, RentVehiclePTD[0], -1);
	PlayerTextDrawSetShadow(playerid, RentVehiclePTD[0], 0);
	PlayerTextDrawSetOutline(playerid, RentVehiclePTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, RentVehiclePTD[0], 0);
	PlayerTextDrawFont(playerid, RentVehiclePTD[0], 5);
	PlayerTextDrawSetProportional(playerid, RentVehiclePTD[0], 0);
	PlayerTextDrawSetShadow(playerid, RentVehiclePTD[0], 0);
	PlayerTextDrawSetSelectable(playerid, RentVehiclePTD[0], true);
	PlayerTextDrawSetPreviewModel(playerid, RentVehiclePTD[0], 400);
	PlayerTextDrawSetPreviewRot(playerid, RentVehiclePTD[0], 0.000000, 0.000000, 90.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, RentVehiclePTD[0], 1, 1);

	RentVehiclePTD[1] = CreatePlayerTextDraw(playerid, 321.666656, 316.170776, "Landstalker~n~~n~~n~~n~~n~~n~$50, 000");
	PlayerTextDrawLetterSize(playerid, RentVehiclePTD[1], 0.389999, 1.446516);
	PlayerTextDrawAlignment(playerid, RentVehiclePTD[1], 2);
	PlayerTextDrawColor(playerid, RentVehiclePTD[1], -1);
	PlayerTextDrawSetShadow(playerid, RentVehiclePTD[1], 0);
	PlayerTextDrawSetOutline(playerid, RentVehiclePTD[1], 1);
	PlayerTextDrawBackgroundColor(playerid, RentVehiclePTD[1], 255);
	PlayerTextDrawFont(playerid, RentVehiclePTD[1], 1);
	PlayerTextDrawSetProportional(playerid, RentVehiclePTD[1], 1);
	PlayerTextDrawSetShadow(playerid, RentVehiclePTD[1], 0);

	DmgPTD[0] = CreatePlayerTextDraw(playerid, 202.666809, 331.033721, "qAlexGT3 / DMG: 9.8 Deagle");
	PlayerTextDrawLetterSize(playerid, DmgPTD[0], 0.220999, 1.409185);
	PlayerTextDrawAlignment(playerid, DmgPTD[0], 2);
	PlayerTextDrawColor(playerid, DmgPTD[0], -1);
	PlayerTextDrawSetShadow(playerid, DmgPTD[0], 0);
	PlayerTextDrawSetOutline(playerid, DmgPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, DmgPTD[0], 255);
	PlayerTextDrawFont(playerid, DmgPTD[0], 1);
	PlayerTextDrawSetProportional(playerid, DmgPTD[0], 1);
	PlayerTextDrawSetShadow(playerid, DmgPTD[0], 0);

	DmgPTD[1] = CreatePlayerTextDraw(playerid, 476.333435, 332.692932, "qAlexGT3 / DMG: 9.8 Deagle");
	PlayerTextDrawLetterSize(playerid, DmgPTD[1], 0.220999, 1.409185);
	PlayerTextDrawAlignment(playerid, DmgPTD[1], 2);
	PlayerTextDrawColor(playerid, DmgPTD[1], -1);
	PlayerTextDrawSetShadow(playerid, DmgPTD[1], 0);
	PlayerTextDrawSetOutline(playerid, DmgPTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, DmgPTD[1], 255);
	PlayerTextDrawFont(playerid, DmgPTD[1], 1);
	PlayerTextDrawSetProportional(playerid, DmgPTD[1], 1);
	PlayerTextDrawSetShadow(playerid, DmgPTD[1], 0);

	PinPTD = CreatePlayerTextDraw(playerid, 325.000000, 155.000000, "----");
	PlayerTextDrawLetterSize(playerid, PinPTD, 1.000000, 3.000000);
	PlayerTextDrawTextSize(playerid, PinPTD, 0.000000, 81.000000);
	PlayerTextDrawAlignment(playerid, PinPTD, 2);
	PlayerTextDrawColor(playerid, PinPTD, -1);
	PlayerTextDrawSetShadow(playerid, PinPTD, 0);
	PlayerTextDrawSetOutline(playerid, PinPTD, 1);
	PlayerTextDrawBackgroundColor(playerid, PinPTD, 255);
	PlayerTextDrawFont(playerid, PinPTD, 3);
	PlayerTextDrawSetProportional(playerid, PinPTD, 0);

	SpeedPTD = CreatePlayerTextDraw(playerid, 325.000000, 410.000000, "Viteza: ~g~~h~197~w~~h~ km/h Combustibil: ~g~~h~100~w~~h~%% Usi: ~g~~h~Incuiate");
	PlayerTextDrawFont(playerid, SpeedPTD, 1);
	PlayerTextDrawLetterSize(playerid, SpeedPTD, 0.250000, 1.250000);
	PlayerTextDrawTextSize(playerid, SpeedPTD, 402.500000, 250.500000);
	PlayerTextDrawSetOutline(playerid, SpeedPTD, 1);
	PlayerTextDrawSetShadow(playerid, SpeedPTD, 0);
	PlayerTextDrawAlignment(playerid, SpeedPTD, 2);
	PlayerTextDrawColor(playerid, SpeedPTD, -1);
	PlayerTextDrawBackgroundColor(playerid, SpeedPTD, 255);
	PlayerTextDrawBoxColor(playerid, SpeedPTD, 50);
	PlayerTextDrawUseBox(playerid, SpeedPTD, 0);
	PlayerTextDrawSetProportional(playerid, SpeedPTD, 1);
	PlayerTextDrawSetSelectable(playerid, SpeedPTD, 0);

	GunPTD[0] = CreatePlayerTextDraw(playerid, 252.349868, 269.333190, "");
	PlayerTextDrawLetterSize(playerid, GunPTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, GunPTD[0], 192.000000, 205.000000);
	PlayerTextDrawAlignment(playerid, GunPTD[0], 1);
	PlayerTextDrawColor(playerid, GunPTD[0], -1);
	PlayerTextDrawSetShadow(playerid, GunPTD[0], 0);
	PlayerTextDrawSetOutline(playerid, GunPTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, GunPTD[0], 0);
	PlayerTextDrawFont(playerid, GunPTD[0], 5);
	PlayerTextDrawSetProportional(playerid, GunPTD[0], 0);
	PlayerTextDrawSetShadow(playerid, GunPTD[0], 0);
	PlayerTextDrawSetPreviewModel(playerid, GunPTD[0], 356);
	PlayerTextDrawSetPreviewRot(playerid, GunPTD[0], 0.000000, 0.000000, 0.000000, 2.000000);

	GunPTD[1] = CreatePlayerTextDraw(playerid, 319.985534, 390.283569, "Buy SD Pistol - $10, 000");
	PlayerTextDrawLetterSize(playerid, GunPTD[1], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, GunPTD[1], 30.000000, 237.000000);
	PlayerTextDrawAlignment(playerid, GunPTD[1], 2);
	PlayerTextDrawColor(playerid, GunPTD[1], -1);
	PlayerTextDrawSetShadow(playerid, GunPTD[1], 0);
	PlayerTextDrawSetOutline(playerid, GunPTD[1], 1);
	PlayerTextDrawBackgroundColor(playerid, GunPTD[1], 255);
	PlayerTextDrawFont(playerid, GunPTD[1], 3);
	PlayerTextDrawSetProportional(playerid, GunPTD[1], 1);
	PlayerTextDrawSetShadow(playerid, GunPTD[1], 0);
	PlayerTextDrawSetSelectable(playerid, GunPTD[1], true);

	TriviaPTD[0] = CreatePlayerTextDraw(playerid, 100.000000, 160.000000, "In ce an a devenit Klaus Iohannis presedintele Romaniei?");
	PlayerTextDrawLetterSize(playerid, TriviaPTD[0], 0.432999, 1.600000);
	PlayerTextDrawAlignment(playerid, TriviaPTD[0], 1);
	PlayerTextDrawColor(playerid, TriviaPTD[0], -1);
	PlayerTextDrawSetShadow(playerid, TriviaPTD[0], 0);
	PlayerTextDrawSetOutline(playerid, TriviaPTD[0], 1);
	PlayerTextDrawBackgroundColor(playerid, TriviaPTD[0], 255);
	PlayerTextDrawFont(playerid, TriviaPTD[0], 1);
	PlayerTextDrawSetProportional(playerid, TriviaPTD[0], 1);
	PlayerTextDrawSetShadow(playerid, TriviaPTD[0], 0);

	TriviaPTD[1] = CreatePlayerTextDraw(playerid, 100.000000, 250.000000, "2012");
	PlayerTextDrawLetterSize(playerid, TriviaPTD[1], 0.411713, 1.932499);
	PlayerTextDrawTextSize(playerid, TriviaPTD[1], 238.282577, 10.000000);
	PlayerTextDrawAlignment(playerid, TriviaPTD[1], 1);
	PlayerTextDrawColor(playerid, TriviaPTD[1], -1);
	PlayerTextDrawSetShadow(playerid, TriviaPTD[1], 0);
	PlayerTextDrawSetOutline(playerid, TriviaPTD[1], 1);
	PlayerTextDrawBackgroundColor(playerid, TriviaPTD[1], 255);
	PlayerTextDrawFont(playerid, TriviaPTD[1], 1);
	PlayerTextDrawSetProportional(playerid, TriviaPTD[1], 1);
	PlayerTextDrawSetShadow(playerid, TriviaPTD[1], 0);
	PlayerTextDrawSetSelectable(playerid, TriviaPTD[1], true);

	TriviaPTD[2] = CreatePlayerTextDraw(playerid, 250.000000, 250.000000, "2013");
	PlayerTextDrawLetterSize(playerid, TriviaPTD[2], 0.411713, 1.932499);
	PlayerTextDrawTextSize(playerid, TriviaPTD[2], 386.076171, 10.000000);
	PlayerTextDrawAlignment(playerid, TriviaPTD[2], 1);
	PlayerTextDrawColor(playerid, TriviaPTD[2], -1);
	PlayerTextDrawSetShadow(playerid, TriviaPTD[2], 0);
	PlayerTextDrawSetOutline(playerid, TriviaPTD[2], 1);
	PlayerTextDrawBackgroundColor(playerid, TriviaPTD[2], 255);
	PlayerTextDrawFont(playerid, TriviaPTD[2], 1);
	PlayerTextDrawSetProportional(playerid, TriviaPTD[2], 1);
	PlayerTextDrawSetShadow(playerid, TriviaPTD[2], 0);
	PlayerTextDrawSetSelectable(playerid, TriviaPTD[2], true);

	TriviaPTD[3] = CreatePlayerTextDraw(playerid, 400.000000, 250.000000, "2014");
	PlayerTextDrawLetterSize(playerid, TriviaPTD[3], 0.411713, 1.932499);
	PlayerTextDrawTextSize(playerid, TriviaPTD[3], 539.677856, 10.000000);
	PlayerTextDrawAlignment(playerid, TriviaPTD[3], 1);
	PlayerTextDrawColor(playerid, TriviaPTD[3], -1);
	PlayerTextDrawSetShadow(playerid, TriviaPTD[3], 0);
	PlayerTextDrawSetOutline(playerid, TriviaPTD[3], 1);
	PlayerTextDrawBackgroundColor(playerid, TriviaPTD[3], 255);
	PlayerTextDrawFont(playerid, TriviaPTD[3], 1);
	PlayerTextDrawSetProportional(playerid, TriviaPTD[3], 1);
	PlayerTextDrawSetShadow(playerid, TriviaPTD[3], 0);
	PlayerTextDrawSetSelectable(playerid, TriviaPTD[3], true);

	TriviaPTD[4] = CreatePlayerTextDraw(playerid, 100.000000, 200.000000, "Mai ai 10 secunde, si ai gresit 2 / 3 intrebari.");
	PlayerTextDrawLetterSize(playerid, TriviaPTD[4], 0.297392, 1.553333);
	PlayerTextDrawAlignment(playerid, TriviaPTD[4], 1);
	PlayerTextDrawColor(playerid, TriviaPTD[4], -1);
	PlayerTextDrawSetShadow(playerid, TriviaPTD[4], 0);
	PlayerTextDrawSetOutline(playerid, TriviaPTD[4], 1);
	PlayerTextDrawBackgroundColor(playerid, TriviaPTD[4], 255);
	PlayerTextDrawFont(playerid, TriviaPTD[4], 1);
	PlayerTextDrawSetProportional(playerid, TriviaPTD[4], 1);
	PlayerTextDrawSetShadow(playerid, TriviaPTD[4], 0);

	GiftPTD[0] = CreatePlayerTextDraw(playerid, 250.000000, 145.000000, "");
	PlayerTextDrawLetterSize(playerid, GiftPTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, GiftPTD[0], 135.000000, 130.000000);
	PlayerTextDrawAlignment(playerid, GiftPTD[0], 1);
	PlayerTextDrawColor(playerid, GiftPTD[0], -1);
	PlayerTextDrawSetShadow(playerid, GiftPTD[0], 0);
	PlayerTextDrawSetOutline(playerid, GiftPTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, GiftPTD[0], 0);
	PlayerTextDrawFont(playerid, GiftPTD[0], 5);
	PlayerTextDrawSetProportional(playerid, GiftPTD[0], 0);
	PlayerTextDrawSetShadow(playerid, GiftPTD[0], 0);
	PlayerTextDrawSetPreviewModel(playerid, GiftPTD[0], 411);
	PlayerTextDrawSetPreviewRot(playerid, GiftPTD[0], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, GiftPTD[0], 1, 1);

	GiftPTD[1] = CreatePlayerTextDraw(playerid, 315.768798, 268.750091, "Infernus");
	PlayerTextDrawLetterSize(playerid, GiftPTD[1], 0.697978, 3.081665);
	PlayerTextDrawAlignment(playerid, GiftPTD[1], 2);
	PlayerTextDrawColor(playerid, GiftPTD[1], -1);
	PlayerTextDrawSetShadow(playerid, GiftPTD[1], 0);
	PlayerTextDrawSetOutline(playerid, GiftPTD[1], 2);
	PlayerTextDrawBackgroundColor(playerid, GiftPTD[1], 255);
	PlayerTextDrawFont(playerid, GiftPTD[1], 1);
	PlayerTextDrawSetProportional(playerid, GiftPTD[1], 1);
	PlayerTextDrawSetShadow(playerid, GiftPTD[1], 0);

	SpinnPTD[0] = CreatePlayerTextDraw(playerid, 140.635025, 170.166641, "");
	PlayerTextDrawLetterSize(playerid, SpinnPTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpinnPTD[0], 65.000000, 73.000000);
	PlayerTextDrawAlignment(playerid, SpinnPTD[0], 1);
	PlayerTextDrawColor(playerid, SpinnPTD[0], -1);
	PlayerTextDrawSetShadow(playerid, SpinnPTD[0], 0);
	PlayerTextDrawSetOutline(playerid, SpinnPTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, SpinnPTD[0], 8388637);
	PlayerTextDrawFont(playerid, SpinnPTD[0], 5);
	PlayerTextDrawSetProportional(playerid, SpinnPTD[0], 0);
	PlayerTextDrawSetShadow(playerid, SpinnPTD[0], 0);
	PlayerTextDrawSetPreviewModel(playerid, SpinnPTD[0], 1274);
	PlayerTextDrawSetPreviewRot(playerid, SpinnPTD[0], 0.000000, 0.000000, 0.000000, 1.000000);

	SpinnPTD[1] = CreatePlayerTextDraw(playerid, 210.000000, 170.166641, "");
	PlayerTextDrawLetterSize(playerid, SpinnPTD[1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpinnPTD[1], 65.000000, 73.000000);
	PlayerTextDrawAlignment(playerid, SpinnPTD[1], 1);
	PlayerTextDrawColor(playerid, SpinnPTD[1], -1);
	PlayerTextDrawSetShadow(playerid, SpinnPTD[1], 0);
	PlayerTextDrawSetOutline(playerid, SpinnPTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, SpinnPTD[1], 8388637);
	PlayerTextDrawFont(playerid, SpinnPTD[1], 5);
	PlayerTextDrawSetProportional(playerid, SpinnPTD[1], 0);
	PlayerTextDrawSetShadow(playerid, SpinnPTD[1], 0);
	PlayerTextDrawSetPreviewModel(playerid, SpinnPTD[1], 1274);
	PlayerTextDrawSetPreviewRot(playerid, SpinnPTD[1], 0.000000, 0.000000, 0.000000, 1.000000);

	SpinnPTD[2] = CreatePlayerTextDraw(playerid, 280.000000, 170.166641, "");
	PlayerTextDrawLetterSize(playerid, SpinnPTD[2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpinnPTD[2], 65.000000, 73.000000);
	PlayerTextDrawAlignment(playerid, SpinnPTD[2], 1);
	PlayerTextDrawColor(playerid, SpinnPTD[2], -1);
	PlayerTextDrawSetShadow(playerid, SpinnPTD[2], 0);
	PlayerTextDrawSetOutline(playerid, SpinnPTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, SpinnPTD[2], 8388637);
	PlayerTextDrawFont(playerid, SpinnPTD[2], 5);
	PlayerTextDrawSetProportional(playerid, SpinnPTD[2], 0);
	PlayerTextDrawSetShadow(playerid, SpinnPTD[2], 0);
	PlayerTextDrawSetPreviewModel(playerid, SpinnPTD[2], 1274);
	PlayerTextDrawSetPreviewRot(playerid, SpinnPTD[2], 0.000000, 0.000000, 0.000000, 1.000000);

	SpinnPTD[3] = CreatePlayerTextDraw(playerid, 350.000000, 170.166641, "");
	PlayerTextDrawLetterSize(playerid, SpinnPTD[3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpinnPTD[3], 65.000000, 73.000000);
	PlayerTextDrawAlignment(playerid, SpinnPTD[3], 1);
	PlayerTextDrawColor(playerid, SpinnPTD[3], -1);
	PlayerTextDrawSetShadow(playerid, SpinnPTD[3], 0);
	PlayerTextDrawSetOutline(playerid, SpinnPTD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, SpinnPTD[3], 8388637);
	PlayerTextDrawFont(playerid, SpinnPTD[3], 5);
	PlayerTextDrawSetProportional(playerid, SpinnPTD[3], 0);
	PlayerTextDrawSetShadow(playerid, SpinnPTD[3], 0);
	PlayerTextDrawSetPreviewModel(playerid, SpinnPTD[3], 1274);
	PlayerTextDrawSetPreviewRot(playerid, SpinnPTD[3], 0.000000, 0.000000, 0.000000, 1.000000);

	SpinnPTD[4] = CreatePlayerTextDraw(playerid, 420.000000, 170.166641, "");
	PlayerTextDrawLetterSize(playerid, SpinnPTD[4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpinnPTD[4], 65.000000, 73.000000);
	PlayerTextDrawAlignment(playerid, SpinnPTD[4], 1);
	PlayerTextDrawColor(playerid, SpinnPTD[4], -1);
	PlayerTextDrawSetShadow(playerid, SpinnPTD[4], 0);
	PlayerTextDrawSetOutline(playerid, SpinnPTD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, SpinnPTD[4], 8388637);
	PlayerTextDrawFont(playerid, SpinnPTD[4], 5);
	PlayerTextDrawSetProportional(playerid, SpinnPTD[4], 0);
	PlayerTextDrawSetShadow(playerid, SpinnPTD[4], 0);
	PlayerTextDrawSetPreviewModel(playerid, SpinnPTD[4], 1274);
	PlayerTextDrawSetPreviewRot(playerid, SpinnPTD[4], 0.000000, 0.000000, 0.000000, 1.000000);

	FishPTD[0] = CreatePlayerTextDraw(playerid, 291.400085, 270.699981, "50");
	PlayerTextDrawLetterSize(playerid, FishPTD[0], 0.146998, 1.378332);
	PlayerTextDrawAlignment(playerid, FishPTD[0], 1);
	PlayerTextDrawColor(playerid, FishPTD[0], -1);
	PlayerTextDrawSetShadow(playerid, FishPTD[0], 0);
	PlayerTextDrawSetOutline(playerid, FishPTD[0], 1);
	PlayerTextDrawBackgroundColor(playerid, FishPTD[0], 255);
	PlayerTextDrawFont(playerid, FishPTD[0], 2);
	PlayerTextDrawSetProportional(playerid, FishPTD[0], 1);
	PlayerTextDrawSetShadow(playerid, FishPTD[0], 0);

	FishPTD[1] = CreatePlayerTextDraw(playerid, 270.000000, 148.000000, "");
	PlayerTextDrawLetterSize(playerid, FishPTD[1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, FishPTD[1], 38.000000, 57.000000);
	PlayerTextDrawAlignment(playerid, FishPTD[1], 1);
	PlayerTextDrawColor(playerid, FishPTD[1], -1);
	PlayerTextDrawSetShadow(playerid, FishPTD[1], 0);
	PlayerTextDrawSetOutline(playerid, FishPTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, FishPTD[1], 0);
	PlayerTextDrawFont(playerid, FishPTD[1], 5);
	PlayerTextDrawSetProportional(playerid, FishPTD[1], 0);
	PlayerTextDrawSetShadow(playerid, FishPTD[1], 0);
	PlayerTextDrawSetSelectable(playerid, FishPTD[1], true);
	PlayerTextDrawSetPreviewModel(playerid, FishPTD[1], 19630);
	PlayerTextDrawSetPreviewRot(playerid, FishPTD[1], 0.000000, 0.000000, 0.000000, 1.000000);

	FishPTD[2] = CreatePlayerTextDraw(playerid, 320.000000, 179.000000, "");
	PlayerTextDrawLetterSize(playerid, FishPTD[2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, FishPTD[2], 38.000000, 57.000000);
	PlayerTextDrawAlignment(playerid, FishPTD[2], 1);
	PlayerTextDrawColor(playerid, FishPTD[2], -1);
	PlayerTextDrawSetShadow(playerid, FishPTD[2], 0);
	PlayerTextDrawSetOutline(playerid, FishPTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, FishPTD[2], 0);
	PlayerTextDrawFont(playerid, FishPTD[2], 5);
	PlayerTextDrawSetProportional(playerid, FishPTD[2], 0);
	PlayerTextDrawSetShadow(playerid, FishPTD[2], 0);
	PlayerTextDrawSetSelectable(playerid, FishPTD[2], true);
	PlayerTextDrawSetPreviewModel(playerid, FishPTD[2], 19630);
	PlayerTextDrawSetPreviewRot(playerid, FishPTD[2], 0.000000, 0.000000, 0.000000, 1.000000);

	FishPTD[3] = CreatePlayerTextDraw(playerid, 265.000000, 200.000000, "");
	PlayerTextDrawLetterSize(playerid, FishPTD[3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, FishPTD[3], 38.000000, 57.000000);
	PlayerTextDrawAlignment(playerid, FishPTD[3], 1);
	PlayerTextDrawColor(playerid, FishPTD[3], -1);
	PlayerTextDrawSetShadow(playerid, FishPTD[3], 0);
	PlayerTextDrawSetOutline(playerid, FishPTD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, FishPTD[3], 0);
	PlayerTextDrawFont(playerid, FishPTD[3], 5);
	PlayerTextDrawSetProportional(playerid, FishPTD[3], 0);
	PlayerTextDrawSetShadow(playerid, FishPTD[3], 0);
	PlayerTextDrawSetSelectable(playerid, FishPTD[3], true);
	PlayerTextDrawSetPreviewModel(playerid, FishPTD[3], 19630);
	PlayerTextDrawSetPreviewRot(playerid, FishPTD[3], 0.000000, 0.000000, 0.000000, 1.000000);

	FishPTD[4] = CreatePlayerTextDraw(playerid, 311.000000, 145.000000, "");
	PlayerTextDrawLetterSize(playerid, FishPTD[4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, FishPTD[4], 38.000000, 57.000000);
	PlayerTextDrawAlignment(playerid, FishPTD[4], 1);
	PlayerTextDrawColor(playerid, FishPTD[4], -1);
	PlayerTextDrawSetShadow(playerid, FishPTD[4], 0);
	PlayerTextDrawSetOutline(playerid, FishPTD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, FishPTD[4], 0);
	PlayerTextDrawFont(playerid, FishPTD[4], 5);
	PlayerTextDrawSetProportional(playerid, FishPTD[4], 0);
	PlayerTextDrawSetShadow(playerid, FishPTD[4], 0);
	PlayerTextDrawSetSelectable(playerid, FishPTD[4], true);
	PlayerTextDrawSetPreviewModel(playerid, FishPTD[4], 19630);
	PlayerTextDrawSetPreviewRot(playerid, FishPTD[4], 0.000000, 0.000000, 0.000000, 1.000000);

	FishPTD[5] = CreatePlayerTextDraw(playerid, 305.000000, 208.000000, "");
	PlayerTextDrawLetterSize(playerid, FishPTD[5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, FishPTD[5], 38.000000, 57.000000);
	PlayerTextDrawAlignment(playerid, FishPTD[5], 1);
	PlayerTextDrawColor(playerid, FishPTD[5], -1);
	PlayerTextDrawSetShadow(playerid, FishPTD[5], 0);
	PlayerTextDrawSetOutline(playerid, FishPTD[5], 0);
	PlayerTextDrawBackgroundColor(playerid, FishPTD[5], 0);
	PlayerTextDrawFont(playerid, FishPTD[5], 5);
	PlayerTextDrawSetProportional(playerid, FishPTD[5], 0);
	PlayerTextDrawSetShadow(playerid, FishPTD[5], 0);
	PlayerTextDrawSetSelectable(playerid, FishPTD[5], true);
	PlayerTextDrawSetPreviewModel(playerid, FishPTD[5], 19630);
	PlayerTextDrawSetPreviewRot(playerid, FishPTD[5], 0.000000, 0.000000, 0.000000, 1.000000);

	TradePTD[0] = CreatePlayerTextDraw(playerid, 225.666641, 116.992660, "Bunurile tale");
	PlayerTextDrawLetterSize(playerid, TradePTD[0], 0.176999, 1.077332);
	PlayerTextDrawAlignment(playerid, TradePTD[0], 2);
	PlayerTextDrawColor(playerid, TradePTD[0], -166);
	PlayerTextDrawSetShadow(playerid, TradePTD[0], 0);
	PlayerTextDrawSetOutline(playerid, TradePTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, TradePTD[0], -231);
	PlayerTextDrawFont(playerid, TradePTD[0], 2);
	PlayerTextDrawSetProportional(playerid, TradePTD[0], 1);
	PlayerTextDrawSetShadow(playerid, TradePTD[0], 0);

	TradePTD[1] = CreatePlayerTextDraw(playerid, 418.333099, 116.992668, "Bunurile lui");
	PlayerTextDrawLetterSize(playerid, TradePTD[1], 0.176999, 1.077332);
	PlayerTextDrawAlignment(playerid, TradePTD[1], 2);
	PlayerTextDrawColor(playerid, TradePTD[1], -166);
	PlayerTextDrawSetShadow(playerid, TradePTD[1], 0);
	PlayerTextDrawSetOutline(playerid, TradePTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, TradePTD[1], -231);
	PlayerTextDrawFont(playerid, TradePTD[1], 2);
	PlayerTextDrawSetProportional(playerid, TradePTD[1], 1);
	PlayerTextDrawSetShadow(playerid, TradePTD[1], 0);

	TradePTD[2] = CreatePlayerTextDraw(playerid, 188.666763, 355.511138, "Adauga");
	PlayerTextDrawLetterSize(playerid, TradePTD[2], 0.246665, 1.122962);
	PlayerTextDrawTextSize(playerid, TradePTD[2], 10.000000, 35.000000);
	PlayerTextDrawAlignment(playerid, TradePTD[2], 2);
	PlayerTextDrawColor(playerid, TradePTD[2], -65281);
	PlayerTextDrawBoxColor(playerid, TradePTD[2], 255);
	PlayerTextDrawSetShadow(playerid, TradePTD[2], 0);
	PlayerTextDrawSetOutline(playerid, TradePTD[2], 1);
	PlayerTextDrawBackgroundColor(playerid, TradePTD[2], 47);
	PlayerTextDrawFont(playerid, TradePTD[2], 1);
	PlayerTextDrawSetProportional(playerid, TradePTD[2], 1);
	PlayerTextDrawSetShadow(playerid, TradePTD[2], 0);
	PlayerTextDrawSetSelectable(playerid, TradePTD[2], true);

	TradePTD[3] = CreatePlayerTextDraw(playerid, 262.999816, 355.511138, "Sterge");
	PlayerTextDrawLetterSize(playerid, TradePTD[3], 0.246665, 1.122962);
	PlayerTextDrawTextSize(playerid, TradePTD[3], 10.000000, 28.000000);
	PlayerTextDrawAlignment(playerid, TradePTD[3], 2);
	PlayerTextDrawColor(playerid, TradePTD[3], -16776961);
	PlayerTextDrawBoxColor(playerid, TradePTD[3], 255);
	PlayerTextDrawSetShadow(playerid, TradePTD[3], 0);
	PlayerTextDrawSetOutline(playerid, TradePTD[3], 1);
	PlayerTextDrawBackgroundColor(playerid, TradePTD[3], 47);
	PlayerTextDrawFont(playerid, TradePTD[3], 1);
	PlayerTextDrawSetProportional(playerid, TradePTD[3], 1);
	PlayerTextDrawSetShadow(playerid, TradePTD[3], 0);
	PlayerTextDrawSetSelectable(playerid, TradePTD[3], true);

	TradePTD[4] = CreatePlayerTextDraw(playerid, 199.666656, 139.392700, "nepregatitt");
	PlayerTextDrawLetterSize(playerid, TradePTD[4], 0.246665, 1.122962);
	PlayerTextDrawTextSize(playerid, TradePTD[4], 253.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, TradePTD[4], 1);
	PlayerTextDrawColor(playerid, TradePTD[4], -1);
	PlayerTextDrawBoxColor(playerid, TradePTD[4], 255);
	PlayerTextDrawSetShadow(playerid, TradePTD[4], 0);
	PlayerTextDrawSetOutline(playerid, TradePTD[4], 1);
	PlayerTextDrawBackgroundColor(playerid, TradePTD[4], 47);
	PlayerTextDrawFont(playerid, TradePTD[4], 3);
	PlayerTextDrawSetProportional(playerid, TradePTD[4], 1);
	PlayerTextDrawSetShadow(playerid, TradePTD[4], 0);
	PlayerTextDrawSetSelectable(playerid, TradePTD[4], true);

	TradePTD[5] = CreatePlayerTextDraw(playerid, 390.333312, 139.807510, "nepregatitt");
	PlayerTextDrawLetterSize(playerid, TradePTD[5], 0.246665, 1.122962);
	PlayerTextDrawTextSize(playerid, TradePTD[5], 447.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, TradePTD[5], 1);
	PlayerTextDrawColor(playerid, TradePTD[5], -1);
	PlayerTextDrawBoxColor(playerid, TradePTD[5], 255);
	PlayerTextDrawSetShadow(playerid, TradePTD[5], 0);
	PlayerTextDrawSetOutline(playerid, TradePTD[5], 1);
	PlayerTextDrawBackgroundColor(playerid, TradePTD[5], 47);
	PlayerTextDrawFont(playerid, TradePTD[5], 3);
	PlayerTextDrawSetProportional(playerid, TradePTD[5], 1);
	PlayerTextDrawSetShadow(playerid, TradePTD[5], 0);
	PlayerTextDrawSetSelectable(playerid, TradePTD[5], true);

	TradePTD[6] = CreatePlayerTextDraw(playerid, 305.333404, 114.918479, "01:00");
	PlayerTextDrawLetterSize(playerid, TradePTD[6], 0.298999, 1.405037);
	PlayerTextDrawAlignment(playerid, TradePTD[6], 1);
	PlayerTextDrawColor(playerid, TradePTD[6], -65281);
	PlayerTextDrawSetShadow(playerid, TradePTD[6], 1);
	PlayerTextDrawSetOutline(playerid, TradePTD[6], 0);
	PlayerTextDrawBackgroundColor(playerid, TradePTD[6], -234);
	PlayerTextDrawFont(playerid, TradePTD[6], 2);
	PlayerTextDrawSetProportional(playerid, TradePTD[6], 1);
	PlayerTextDrawSetShadow(playerid, TradePTD[6], 1);	
	
	TradeTitle[0] = CreatePlayerTextDraw(playerid, 182.333343, 171.333297, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[0], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[0], 1);
	PlayerTextDrawColor(playerid, TradeTitle[0], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[0], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[0], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[0], 54);
	PlayerTextDrawFont(playerid, TradeTitle[0], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[0], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[0], 0);
	
	TradeTitle[1] = CreatePlayerTextDraw(playerid, 183.000015, 201.614837, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[1], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[1], 1);
	PlayerTextDrawColor(playerid, TradeTitle[1], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[1], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[1], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[1], 54);
	PlayerTextDrawFont(playerid, TradeTitle[1], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[1], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[1], 0);

	TradeTitle[2] = CreatePlayerTextDraw(playerid, 183.666671, 234.800003, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[2], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[2], 1);
	PlayerTextDrawColor(playerid, TradeTitle[2], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[2], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[2], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[2], 54);
	PlayerTextDrawFont(playerid, TradeTitle[2], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[2], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[2], 0);

	TradeTitle[3] = CreatePlayerTextDraw(playerid, 184.666641, 268.400115, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[3], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[3], 1);
	PlayerTextDrawColor(playerid, TradeTitle[3], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[3], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[3], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[3], 54);
	PlayerTextDrawFont(playerid, TradeTitle[3], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[3], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[3], 0);

	TradeTitle[4] = CreatePlayerTextDraw(playerid, 184.999984, 305.733520, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[4], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[4], 1);
	PlayerTextDrawColor(playerid, TradeTitle[4], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[4], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[4], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[4], 54);
	PlayerTextDrawFont(playerid, TradeTitle[4], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[4], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[4], 0);

	TradeTitle[5] = CreatePlayerTextDraw(playerid, 369.000030, 169.259399, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[5], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[5], 1);
	PlayerTextDrawColor(playerid, TradeTitle[5], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[5], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[5], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[5], 54);
	PlayerTextDrawFont(playerid, TradeTitle[5], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[5], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[5], 0);

	TradeTitle[6] = CreatePlayerTextDraw(playerid, 369.666778, 198.711242, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[6], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[6], 1);
	PlayerTextDrawColor(playerid, TradeTitle[6], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[6], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[6], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[6], 54);
	PlayerTextDrawFont(playerid, TradeTitle[6], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[6], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[6], 0);

	TradeTitle[7] = CreatePlayerTextDraw(playerid, 370.666717, 233.970474, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[7], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[7], 1);
	PlayerTextDrawColor(playerid, TradeTitle[7], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[7], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[7], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[7], 54);
	PlayerTextDrawFont(playerid, TradeTitle[7], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[7], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[7], 0);

	TradeTitle[8] = CreatePlayerTextDraw(playerid, 372.666809, 269.229766, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[8], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[8], 1);
	PlayerTextDrawColor(playerid, TradeTitle[8], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[8], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[8], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[8], 54);
	PlayerTextDrawFont(playerid, TradeTitle[8], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[8], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[8], 0);

	TradeTitle[9] = CreatePlayerTextDraw(playerid, 372.666809, 304.074249, "House: #5");
	PlayerTextDrawLetterSize(playerid, TradeTitle[9], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[9], 1);
	PlayerTextDrawColor(playerid, TradeTitle[9], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[9], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[9], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[9], 54);
	PlayerTextDrawFont(playerid, TradeTitle[9], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[9], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[9], 0);	
	
	TradeIcon[0] = CreatePlayerTextDraw(playerid, 141.333419, 164.955612, "");
	PlayerTextDrawLetterSize(playerid, TradeIcon[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeIcon[0], 29.000000, 31.000000);
	PlayerTextDrawAlignment(playerid, TradeIcon[0], 1);
	PlayerTextDrawColor(playerid, TradeIcon[0], -1);
	PlayerTextDrawSetShadow(playerid, TradeIcon[0], 0);
	PlayerTextDrawSetOutline(playerid, TradeIcon[0], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeIcon[0], -235);
	PlayerTextDrawFont(playerid, TradeIcon[0], 5);
	PlayerTextDrawSetProportional(playerid, TradeIcon[0], 0);
	PlayerTextDrawSetShadow(playerid, TradeIcon[0], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeIcon[0], 19523);
	PlayerTextDrawSetPreviewRot(playerid, TradeIcon[0], 0.000000, 0.000000, 348.000000, 0.849843);

	TradeIcon[1] = CreatePlayerTextDraw(playerid, 141.333419, 198.555618, "");
	PlayerTextDrawLetterSize(playerid, TradeIcon[1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeIcon[1], 29.000000, 31.000000);
	PlayerTextDrawAlignment(playerid, TradeIcon[1], 1);
	PlayerTextDrawColor(playerid, TradeIcon[1], -1);
	PlayerTextDrawSetShadow(playerid, TradeIcon[1], 0);
	PlayerTextDrawSetOutline(playerid, TradeIcon[1], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeIcon[1], -235);
	PlayerTextDrawFont(playerid, TradeIcon[1], 5);
	PlayerTextDrawSetProportional(playerid, TradeIcon[1], 0);
	PlayerTextDrawSetShadow(playerid, TradeIcon[1], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeIcon[1], 19523);
	PlayerTextDrawSetPreviewRot(playerid, TradeIcon[1], 0.000000, 0.000000, 348.000000, 0.849843);

	TradeIcon[2] = CreatePlayerTextDraw(playerid, 141.333419, 231.740814, "");
	PlayerTextDrawLetterSize(playerid, TradeIcon[2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeIcon[2], 29.000000, 31.000000);
	PlayerTextDrawAlignment(playerid, TradeIcon[2], 1);
	PlayerTextDrawColor(playerid, TradeIcon[2], -1);
	PlayerTextDrawSetShadow(playerid, TradeIcon[2], 0);
	PlayerTextDrawSetOutline(playerid, TradeIcon[2], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeIcon[2], -235);
	PlayerTextDrawFont(playerid, TradeIcon[2], 5);
	PlayerTextDrawSetProportional(playerid, TradeIcon[2], 0);
	PlayerTextDrawSetShadow(playerid, TradeIcon[2], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeIcon[2], 19523);
	PlayerTextDrawSetPreviewRot(playerid, TradeIcon[2], 0.000000, 0.000000, 348.000000, 0.849843);

	TradeIcon[3] = CreatePlayerTextDraw(playerid, 141.000091, 264.926025, "");
	PlayerTextDrawLetterSize(playerid, TradeIcon[3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeIcon[3], 29.000000, 31.000000);
	PlayerTextDrawAlignment(playerid, TradeIcon[3], 1);
	PlayerTextDrawColor(playerid, TradeIcon[3], -1);
	PlayerTextDrawSetShadow(playerid, TradeIcon[3], 0);
	PlayerTextDrawSetOutline(playerid, TradeIcon[3], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeIcon[3], -235);
	PlayerTextDrawFont(playerid, TradeIcon[3], 5);
	PlayerTextDrawSetProportional(playerid, TradeIcon[3], 0);
	PlayerTextDrawSetShadow(playerid, TradeIcon[3], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeIcon[3], 19523);
	PlayerTextDrawSetPreviewRot(playerid, TradeIcon[3], 0.000000, 0.000000, 348.000000, 0.849843);

	TradeIcon[4] = CreatePlayerTextDraw(playerid, 141.000091, 298.940673, "");
	PlayerTextDrawLetterSize(playerid, TradeIcon[4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeIcon[4], 29.000000, 31.000000);
	PlayerTextDrawAlignment(playerid, TradeIcon[4], 1);
	PlayerTextDrawColor(playerid, TradeIcon[4], -1);
	PlayerTextDrawSetShadow(playerid, TradeIcon[4], 0);
	PlayerTextDrawSetOutline(playerid, TradeIcon[4], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeIcon[4], -235);
	PlayerTextDrawFont(playerid, TradeIcon[4], 5);
	PlayerTextDrawSetProportional(playerid, TradeIcon[4], 0);
	PlayerTextDrawSetShadow(playerid, TradeIcon[4], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeIcon[4], 19523);
	PlayerTextDrawSetPreviewRot(playerid, TradeIcon[4], 0.000000, 0.000000, 348.000000, 0.849843);

	TradeIcon[5] = CreatePlayerTextDraw(playerid, 331.666748, 165.370376, "");
	PlayerTextDrawLetterSize(playerid, TradeIcon[5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeIcon[5], 29.000000, 31.000000);
	PlayerTextDrawAlignment(playerid, TradeIcon[5], 1);
	PlayerTextDrawColor(playerid, TradeIcon[5], -1);
	PlayerTextDrawSetShadow(playerid, TradeIcon[5], 0);
	PlayerTextDrawSetOutline(playerid, TradeIcon[5], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeIcon[5], -235);
	PlayerTextDrawFont(playerid, TradeIcon[5], 5);
	PlayerTextDrawSetProportional(playerid, TradeIcon[5], 0);
	PlayerTextDrawSetShadow(playerid, TradeIcon[5], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeIcon[5], 19523);
	PlayerTextDrawSetPreviewRot(playerid, TradeIcon[5], 0.000000, 0.000000, 348.000000, 0.849843);

	TradeIcon[6] = CreatePlayerTextDraw(playerid, 331.666778, 198.140762, "");
	PlayerTextDrawLetterSize(playerid, TradeIcon[6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeIcon[6], 29.000000, 31.000000);
	PlayerTextDrawAlignment(playerid, TradeIcon[6], 1);
	PlayerTextDrawColor(playerid, TradeIcon[6], -1);
	PlayerTextDrawSetShadow(playerid, TradeIcon[6], 0);
	PlayerTextDrawSetOutline(playerid, TradeIcon[6], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeIcon[6], -235);
	PlayerTextDrawFont(playerid, TradeIcon[6], 5);
	PlayerTextDrawSetProportional(playerid, TradeIcon[6], 0);
	PlayerTextDrawSetShadow(playerid, TradeIcon[6], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeIcon[6], 19523);
	PlayerTextDrawSetPreviewRot(playerid, TradeIcon[6], 0.000000, 0.000000, 348.000000, 0.849843);

	TradeIcon[7] = CreatePlayerTextDraw(playerid, 332.000061, 231.325973, "");
	PlayerTextDrawLetterSize(playerid, TradeIcon[7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeIcon[7], 29.000000, 31.000000);
	PlayerTextDrawAlignment(playerid, TradeIcon[7], 1);
	PlayerTextDrawColor(playerid, TradeIcon[7], -1);
	PlayerTextDrawSetShadow(playerid, TradeIcon[7], 0);
	PlayerTextDrawSetOutline(playerid, TradeIcon[7], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeIcon[7], -235);
	PlayerTextDrawFont(playerid, TradeIcon[7], 5);
	PlayerTextDrawSetProportional(playerid, TradeIcon[7], 0);
	PlayerTextDrawSetShadow(playerid, TradeIcon[7], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeIcon[7], 19523);
	PlayerTextDrawSetPreviewRot(playerid, TradeIcon[7], 0.000000, 0.000000, 348.000000, 0.849843);

	TradeIcon[8] = CreatePlayerTextDraw(playerid, 332.000091, 264.926025, "");
	PlayerTextDrawLetterSize(playerid, TradeIcon[8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeIcon[8], 29.000000, 31.000000);
	PlayerTextDrawAlignment(playerid, TradeIcon[8], 1);
	PlayerTextDrawColor(playerid, TradeIcon[8], -1);
	PlayerTextDrawSetShadow(playerid, TradeIcon[8], 0);
	PlayerTextDrawSetOutline(playerid, TradeIcon[8], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeIcon[8], -235);
	PlayerTextDrawFont(playerid, TradeIcon[8], 5);
	PlayerTextDrawSetProportional(playerid, TradeIcon[8], 0);
	PlayerTextDrawSetShadow(playerid, TradeIcon[8], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeIcon[8], 19523);
	PlayerTextDrawSetPreviewRot(playerid, TradeIcon[8], 0.000000, 0.000000, 348.000000, 0.849843);

	TradeIcon[9] = CreatePlayerTextDraw(playerid, 332.000122, 298.526245, "");
	PlayerTextDrawLetterSize(playerid, TradeIcon[9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeIcon[9], 29.000000, 31.000000);
	PlayerTextDrawAlignment(playerid, TradeIcon[9], 1);
	PlayerTextDrawColor(playerid, TradeIcon[9], -1);
	PlayerTextDrawSetShadow(playerid, TradeIcon[9], 0);
	PlayerTextDrawSetOutline(playerid, TradeIcon[9], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeIcon[9], -235);
	PlayerTextDrawFont(playerid, TradeIcon[9], 5);
	PlayerTextDrawSetProportional(playerid, TradeIcon[9], 0);
	PlayerTextDrawSetShadow(playerid, TradeIcon[9], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeIcon[9], 19523);
	PlayerTextDrawSetPreviewRot(playerid, TradeIcon[9], 0.000000, 0.000000, 348.000000, 0.849843);
	
	TradeTitle[0] = CreatePlayerTextDraw(playerid, 182.333343, 171.333297, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[0], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[0], 1);
	PlayerTextDrawColor(playerid, TradeTitle[0], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[0], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[0], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[0], 54);
	PlayerTextDrawFont(playerid, TradeTitle[0], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[0], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[0], 0);
	
	TradeTitle[1] = CreatePlayerTextDraw(playerid, 183.000015, 201.614837, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[1], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[1], 1);
	PlayerTextDrawColor(playerid, TradeTitle[1], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[1], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[1], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[1], 54);
	PlayerTextDrawFont(playerid, TradeTitle[1], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[1], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[1], 0);

	TradeTitle[2] = CreatePlayerTextDraw(playerid, 183.666671, 234.800003, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[2], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[2], 1);
	PlayerTextDrawColor(playerid, TradeTitle[2], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[2], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[2], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[2], 54);
	PlayerTextDrawFont(playerid, TradeTitle[2], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[2], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[2], 0);

	TradeTitle[3] = CreatePlayerTextDraw(playerid, 184.666641, 268.400115, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[3], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[3], 1);
	PlayerTextDrawColor(playerid, TradeTitle[3], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[3], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[3], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[3], 54);
	PlayerTextDrawFont(playerid, TradeTitle[3], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[3], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[3], 0);

	TradeTitle[4] = CreatePlayerTextDraw(playerid, 184.999984, 305.733520, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[4], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[4], 1);
	PlayerTextDrawColor(playerid, TradeTitle[4], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[4], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[4], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[4], 54);
	PlayerTextDrawFont(playerid, TradeTitle[4], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[4], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[4], 0);

	TradeTitle[5] = CreatePlayerTextDraw(playerid, 369.000030, 169.259399, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[5], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[5], 1);
	PlayerTextDrawColor(playerid, TradeTitle[5], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[5], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[5], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[5], 54);
	PlayerTextDrawFont(playerid, TradeTitle[5], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[5], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[5], 0);

	TradeTitle[6] = CreatePlayerTextDraw(playerid, 369.666778, 198.711242, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[6], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[6], 1);
	PlayerTextDrawColor(playerid, TradeTitle[6], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[6], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[6], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[6], 54);
	PlayerTextDrawFont(playerid, TradeTitle[6], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[6], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[6], 0);

	TradeTitle[7] = CreatePlayerTextDraw(playerid, 370.666717, 233.970474, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[7], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[7], 1);
	PlayerTextDrawColor(playerid, TradeTitle[7], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[7], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[7], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[7], 54);
	PlayerTextDrawFont(playerid, TradeTitle[7], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[7], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[7], 0);

	TradeTitle[8] = CreatePlayerTextDraw(playerid, 372.666809, 269.229766, "House #69");
	PlayerTextDrawLetterSize(playerid, TradeTitle[8], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[8], 1);
	PlayerTextDrawColor(playerid, TradeTitle[8], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[8], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[8], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[8], 54);
	PlayerTextDrawFont(playerid, TradeTitle[8], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[8], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[8], 0);

	TradeTitle[9] = CreatePlayerTextDraw(playerid, 372.666809, 304.074249, "House: #5");
	PlayerTextDrawLetterSize(playerid, TradeTitle[9], 0.225666, 0.965332);
	PlayerTextDrawAlignment(playerid, TradeTitle[9], 1);
	PlayerTextDrawColor(playerid, TradeTitle[9], -1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[9], 0);
	PlayerTextDrawSetOutline(playerid, TradeTitle[9], 1);
	PlayerTextDrawBackgroundColor(playerid, TradeTitle[9], 54);
	PlayerTextDrawFont(playerid, TradeTitle[9], 1);
	PlayerTextDrawSetProportional(playerid, TradeTitle[9], 1);
	PlayerTextDrawSetShadow(playerid, TradeTitle[9], 0);	

	AchivPTD = CreatePlayerTextDraw(playerid, 344.331695, 366.281494, "Angajaza-te la unu din joburile de pe server.~n~~n~Bani primiti: ~r~1.000.000$~n~~w~~h~RP primite: ~r~20");
	PlayerTextDrawLetterSize(playerid, AchivPTD, 0.200000, 0.923850);
	PlayerTextDrawTextSize(playerid, AchivPTD, 0.000000, 139.449203);
	PlayerTextDrawAlignment(playerid, AchivPTD, 2);
	PlayerTextDrawColor(playerid, AchivPTD, -1);
	PlayerTextDrawUseBox(playerid, AchivPTD, 1);
	PlayerTextDrawBoxColor(playerid, AchivPTD, 218);
	PlayerTextDrawSetShadow(playerid, AchivPTD, 0);
	PlayerTextDrawSetOutline(playerid, AchivPTD, 0);
	PlayerTextDrawBackgroundColor(playerid, AchivPTD, 255);
	PlayerTextDrawFont(playerid, AchivPTD, 3);
	PlayerTextDrawSetProportional(playerid, AchivPTD, 1);
	PlayerTextDrawSetShadow(playerid, AchivPTD, 0);

	FoodPTD[0] = CreatePlayerTextDraw(playerid, 208.000000, 433.000000, "100%%");
	PlayerTextDrawFont(playerid, FoodPTD[0], 1);
	PlayerTextDrawLetterSize(playerid, FoodPTD[0], 0.200000, 1.000000);
	PlayerTextDrawTextSize(playerid, FoodPTD[0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, FoodPTD[0], 1);
	PlayerTextDrawSetShadow(playerid, FoodPTD[0], 0);
	PlayerTextDrawAlignment(playerid, FoodPTD[0], 1);
	PlayerTextDrawColor(playerid, FoodPTD[0], -1);
	PlayerTextDrawBackgroundColor(playerid, FoodPTD[0], 255);
	PlayerTextDrawBoxColor(playerid, FoodPTD[0], 50);
	PlayerTextDrawUseBox(playerid, FoodPTD[0], 0);
	PlayerTextDrawSetProportional(playerid, FoodPTD[0], 1);
	PlayerTextDrawSetSelectable(playerid, FoodPTD[0], 0);

	FoodPTD[1] = CreatePlayerTextDraw(playerid, 437.000000, 433.000000, "100%%");
	PlayerTextDrawFont(playerid, FoodPTD[1], 1);
	PlayerTextDrawLetterSize(playerid, FoodPTD[1], 0.200000, 1.000000);
	PlayerTextDrawTextSize(playerid, FoodPTD[1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, FoodPTD[1], 1);
	PlayerTextDrawSetShadow(playerid, FoodPTD[1], 0);
	PlayerTextDrawAlignment(playerid, FoodPTD[1], 3);
	PlayerTextDrawColor(playerid, FoodPTD[1], -1);
	PlayerTextDrawBackgroundColor(playerid, FoodPTD[1], 255);
	PlayerTextDrawBoxColor(playerid, FoodPTD[1], 50);
	PlayerTextDrawUseBox(playerid, FoodPTD[1], 0);
	PlayerTextDrawSetProportional(playerid, FoodPTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, FoodPTD[1], 0);

	MoneyIndicator = CreatePlayerTextDraw(playerid, 607.672058, 97.999984, "");
	PlayerTextDrawLetterSize(playerid, MoneyIndicator, 0.549323, 2.049166);
	PlayerTextDrawAlignment(playerid, MoneyIndicator, 3);
	PlayerTextDrawColor(playerid, MoneyIndicator, -1);
	PlayerTextDrawSetShadow(playerid, MoneyIndicator, 0);
	PlayerTextDrawSetOutline(playerid, MoneyIndicator, 2);
	PlayerTextDrawBackgroundColor(playerid, MoneyIndicator, 255);
	PlayerTextDrawFont(playerid, MoneyIndicator, 3);
	PlayerTextDrawSetProportional(playerid, MoneyIndicator, 1);

	LevelTD[0] = CreatePlayerTextDraw(playerid, 207.540222, 13.833314, "69");
	PlayerTextDrawLetterSize(playerid, LevelTD[0], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, LevelTD[0], 1);
	PlayerTextDrawColor(playerid, LevelTD[0], -1);
	PlayerTextDrawSetShadow(playerid, LevelTD[0], 0);
	PlayerTextDrawSetOutline(playerid, LevelTD[0], 2);
	PlayerTextDrawBackgroundColor(playerid, LevelTD[0], 255);
	PlayerTextDrawFont(playerid, LevelTD[0], 1);
	PlayerTextDrawSetProportional(playerid, LevelTD[0], 1);
	PlayerTextDrawSetShadow(playerid, LevelTD[0], 0);

	LevelTD[1] = CreatePlayerTextDraw(playerid, 427.745361, 12.666661, "70");
	PlayerTextDrawLetterSize(playerid, LevelTD[1], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, LevelTD[1], 1);
	PlayerTextDrawColor(playerid, LevelTD[1], -1);
	PlayerTextDrawSetShadow(playerid, LevelTD[1], 0);
	PlayerTextDrawSetOutline(playerid, LevelTD[1], 2);
	PlayerTextDrawBackgroundColor(playerid, LevelTD[1], 255);
	PlayerTextDrawFont(playerid, LevelTD[1], 1);
	PlayerTextDrawSetProportional(playerid, LevelTD[1], 1);
	PlayerTextDrawSetShadow(playerid, LevelTD[1], 0);

	LevelTD[2] = CreatePlayerTextDraw(playerid, 302.650390, 29.583353, "20/30");
	PlayerTextDrawLetterSize(playerid, LevelTD[2], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, LevelTD[2], 1);
	PlayerTextDrawColor(playerid, LevelTD[2], -1);
	PlayerTextDrawSetShadow(playerid, LevelTD[2], 0);
	PlayerTextDrawSetOutline(playerid, LevelTD[2], -1);
	PlayerTextDrawBackgroundColor(playerid, LevelTD[2], 255);
	PlayerTextDrawFont(playerid, LevelTD[2], 1);
	PlayerTextDrawSetProportional(playerid, LevelTD[2], 1);
	PlayerTextDrawSetShadow(playerid, LevelTD[2], 0);

	Jailtime = CreatePlayerTextDraw(playerid, 552.501281, 102.792854, "Released in: ~g~~h~~h~~h~30 minutes");
	PlayerTextDrawLetterSize(playerid, Jailtime, 0.238333, 1.151481);
	PlayerTextDrawTextSize(playerid, Jailtime, -0.119999, 107.170013);
	PlayerTextDrawAlignment(playerid, Jailtime, 2);
	PlayerTextDrawColor(playerid, Jailtime, -1);
	PlayerTextDrawUseBox(playerid, Jailtime, 1);
	PlayerTextDrawBoxColor(playerid, Jailtime, 255);
	PlayerTextDrawSetShadow(playerid, Jailtime, 0);
	PlayerTextDrawSetOutline(playerid, Jailtime, 1);
	PlayerTextDrawBackgroundColor(playerid, Jailtime, 255);
	PlayerTextDrawFont(playerid, Jailtime, 1);
	PlayerTextDrawSetProportional(playerid, Jailtime, 1);
	PlayerTextDrawSetShadow(playerid, Jailtime, 0);

	SpecPTD = CreatePlayerTextDraw(playerid, 224.799926, 317.333343, "Spec PlayerTextdraw");
	PlayerTextDrawLetterSize(playerid, SpecPTD, 0.392397, 2.219732);
	PlayerTextDrawAlignment(playerid, SpecPTD, 1);
	PlayerTextDrawColor(playerid, SpecPTD, -1);
	PlayerTextDrawSetShadow(playerid, SpecPTD, 0);
	PlayerTextDrawSetOutline(playerid, SpecPTD, 1);
	PlayerTextDrawBackgroundColor(playerid, SpecPTD, 255);
	PlayerTextDrawFont(playerid, SpecPTD, 1);
	PlayerTextDrawSetProportional(playerid, SpecPTD, 1);

	FPSText = CreatePlayerTextDraw(playerid, 2.666624, 432.236938, " ");
	PlayerTextDrawLetterSize(playerid, FPSText, 0.351333, 1.454814);
	PlayerTextDrawAlignment(playerid, FPSText, 1);
	PlayerTextDrawColor(playerid, FPSText, COLOR_SERVER);
	PlayerTextDrawSetShadow(playerid, FPSText, 0);
	PlayerTextDrawSetOutline(playerid, FPSText, 1);
	PlayerTextDrawBackgroundColor(playerid, FPSText, 51);
	PlayerTextDrawFont(playerid, FPSText, 3);
	PlayerTextDrawSetProportional(playerid, FPSText, 1);

	RentCarText[playerid] = CreatePlayerTextDraw(playerid, 89.299835, 310.602722, "Money earned: ~g~$6999");
	PlayerTextDrawLetterSize(playerid, RentCarText[playerid], 0.283666, 1.309629);
	PlayerTextDrawAlignment(playerid, RentCarText[playerid], 2);
	PlayerTextDrawColor(playerid, RentCarText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, RentCarText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, RentCarText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, RentCarText[playerid], 255);
	PlayerTextDrawFont(playerid, RentCarText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, RentCarText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, RentCarText[playerid], 0);

	WantedText = CreatePlayerTextDraw(playerid, 499.666900, 122.370384, " ");
	PlayerTextDrawBackgroundColor(playerid, WantedText, 51);
	PlayerTextDrawFont(playerid, WantedText, 2);
	PlayerTextDrawLetterSize(playerid, WantedText, 0.191331, 1.960886);
	PlayerTextDrawColor(playerid, WantedText, -1);
	PlayerTextDrawSetOutline(playerid, WantedText, 1);
	PlayerTextDrawSetProportional(playerid, WantedText, 1);

	FindTXD = CreatePlayerTextDraw(playerid, 269.333374, 357.570251, " ");
	PlayerTextDrawLetterSize(playerid, FindTXD, 0.193999, 1.653925);
	PlayerTextDrawAlignment(playerid, FindTXD, 1);
	PlayerTextDrawColor(playerid, FindTXD, -1);
	PlayerTextDrawSetShadow(playerid, FindTXD, 0);
	PlayerTextDrawSetOutline(playerid, FindTXD, 1);
	PlayerTextDrawBackgroundColor(playerid, FindTXD, 51);
	PlayerTextDrawFont(playerid, FindTXD, 2);
	PlayerTextDrawSetProportional(playerid, FindTXD, 1);

	PaintTD = CreatePlayerTextDraw(playerid, 581.433471, 240.189300, " ");
	PlayerTextDrawLetterSize(playerid, PaintTD, 0.281666, 1.313777);
	PlayerTextDrawTextSize(playerid, PaintTD, 0.000000, 123.000000);
	PlayerTextDrawAlignment(playerid, PaintTD, 2);
	PlayerTextDrawColor(playerid, PaintTD, -1);
	PlayerTextDrawUseBox(playerid, PaintTD, 1);
	PlayerTextDrawBoxColor(playerid, PaintTD, 255);
	PlayerTextDrawSetShadow(playerid, PaintTD, 0);
	PlayerTextDrawSetOutline(playerid, PaintTD, 1);
	PlayerTextDrawBackgroundColor(playerid, PaintTD, 255);
	PlayerTextDrawFont(playerid, PaintTD, 1);
	PlayerTextDrawSetProportional(playerid, PaintTD, 1);
	PlayerTextDrawSetShadow(playerid, PaintTD, 0);		

	WarPTD = CreatePlayerTextDraw(playerid, 581.588806, 268.749938, "");
	PlayerTextDrawFont(playerid, WarPTD, 1);
	PlayerTextDrawLetterSize(playerid, WarPTD, 0.174666, 0.832592);
	PlayerTextDrawTextSize(playerid, WarPTD, 0.000000, 115.000000);
	PlayerTextDrawSetOutline(playerid, WarPTD, 1);
	PlayerTextDrawSetShadow(playerid, WarPTD, 0);
	PlayerTextDrawAlignment(playerid, WarPTD, 2);
	PlayerTextDrawColor(playerid, WarPTD, -1);
	PlayerTextDrawBackgroundColor(playerid, WarPTD, 124);
	PlayerTextDrawBoxColor(playerid, WarPTD, 255);
	PlayerTextDrawUseBox(playerid, WarPTD, 1);
	PlayerTextDrawSetProportional(playerid, WarPTD, 1);
	PlayerTextDrawSetSelectable(playerid, WarPTD, 0);
	
	return true;
}		
stock GetDistancePlayerVeh(playerid, vehicleid){
	new Float: pos1, Float: pos2, Float: pos3, Float: pos4, Float: pos5, Float: pos6, Float: pos7;
	GetPlayerPos(playerid, pos1, pos2, pos3); GetVehiclePos(vehicleid, pos4, pos5, pos6);
	pos7 = floatsqroot((pos4 - pos1) * (pos4 - pos1) + (pos5 - pos2) * (pos5 - pos2) + (pos6 - pos3) * (pos6 - pos3));
	return floatround(pos7);
}
stock doesVehicleExist(vehicleid){
	if(GetVehicleModel(vehicleid) >= 400) return true;
	return false;
}
stock GetClosestVehicle(playerid, exception = INVALID_VEHICLE_ID)
{
	new
		Float: distance,
		target = -1
	;

	if(IsPlayerInAnyVehicle(playerid))
	{
		return GetPlayerVehicleID(playerid);
	}

	for(new i; i < MAX_VEHICLES; i++)
	{
		if(doesVehicleExist(i) && i != exception && (target < 0 || distance > GetDistancePlayerVeh(playerid, i)) && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(i)){
			target = i;
			distance = GetDistancePlayerVeh(playerid, i);
		}
	}
	return target;
}
function DestroyVehicleEx(vehicleid)
{
	if(vehicleid == INVALID_VEHICLE_ID || !IsValidVehicle(vehicleid))
		return false;

	if(RainbowOn[vehicleid])
	{
		RainbowOn[vehicleid] = false;

		if(Iter_Contains(RainbowVehicles, vehicleid))
		{
			Iter_Remove(RainbowVehicles, vehicleid);
			RainbowStep[vehicleid] = 0;
		}
	}

	foreach(new i : Player)
	{
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
			if(PlayerInfo[i][pVehID][v] == vehicleid)
			{
				cUpdate(i, v, pVehKM);
				cUpdate(i, v, pVehGas);
				PlayerInfo[i][pVehID][v] = 0;
				break;
			}
		}
		if(LastVeh[i] == vehicleid)
		{
			LastVeh[i] = 0;
		}
	}

	DestroyVehicle(vehicleid);

	return true;
}
new
	LocationName[MAX_LOCATIONS][32] =
	{
		"Scoala de soferi", //1
		"Dealership", //2
		"Crates", //3
		"PC Dealer", //4
		"Bitcoin House", //5
		"CNN", //6
		"Arena", //7
		"Task-uri", //8
		"Spin", //9
		"Trivia", //10
		"Heists", //11
		"Milestone", //12
		"Scoala de navigatie", //13
		"Scoala de aviatie", //14
		"Scoala de arme", //15
		"Upgrader", //16
		"Bonus" //17
	},
	Float: LocationPos[MAX_LOCATIONS][3] =
	{
		{323.2904, -1517.8090, 36.0325}, //1
		{538.8539, -1293.4534, 17.2422}, //2
		{533.0075, -1813.0349, 6.5781}, //3
		{1419.4320, -1547.7394, 13.5527}, //4
		{2068.9771, -1779.8381, 13.5594}, //5
		{1699.2664, -1667.9840, 20.1966}, //6
		{2695.5908, -1704.7258, 11.8438}, //7
		{2131.8550, -1150.5463, 24.1459}, //8
		{1833.3881, -1125.5516, 24.6721}, //9
		{832.4099, -1053.1956, 25.2756}, //10
		{1040.0385, 1304.2471, 10.8203}, //11
		{627.4770, -1776.0825, 14.1655}, //12
		{386.8476, -1870.5420, 7.8359}, //13
		{1952.9696, -2179.3926, 13.5469}, //14
		{1370.3047, -1361.3916, 13.5469}, //15
		{1129.0817, -1489.4868, 22.7690}, //16
		{1726.7593, -1635.9001, 20.2168} //17
	}
;
enum AreaEnum
{
	aID, aType
}
new
	AreaInfo[1000][AreaEnum],
	Areas = 0
;
function ScadeBaniBid(playerid, value[])
{
	new BigInt:TempMoney;
	converBytes(TempMoney, value);
	if(OPByte(TempMoney, >, #999999999))
    {
        new money[32];
        format(money, sizeof(money), "-%s", valueBigInt(TempMoney));
    	if(OPByte(PlayerCash[playerid], >=, valueBigInt(TempMoney)))
    	{    		
	        addBytes64(PlayerCash[playerid], money);
    	}
    	else
    	{
    		addBytes64(PlayerBank[playerid], money);
    	}
    }
    else
    {
    	if(GetPlayerCash(playerid) >= bytes32(TempMoney))
    	{
	        GivePlayerCash(playerid, -bytes32(TempMoney));
    	}
    	else
    	{
    		GivePlayerBank(playerid, -bytes32(TempMoney));
    	}
    }
	return true;
}
timer timer_bid[30000]()
{
	if(BidType < 1)
		return true;

	if(lastplayerbid == -1)
	{
		resetBigInt(BidMoney);
		ObiectLicitat = BidType = 0;
		SendClientMessageToAll(COLOR_SERVER, "Licitatii >> {ffffff}Licitatia s-a anulat deoarece nimeni nu a licitat.");
		return true;
	}

	if(!HaveCashForDs(lastplayerbid, valueBigInt(BidMoney)) && !HaveCashForDs(lastplayerbid, valueBigInt(BidMoney), 2))
	{
		va_SendClientMessageToAll(COLOR_SERVER, "Licitatii >> {ffffff}Licitatia s-a anulat deoarece %s nu mai are destui bani.", GetName(lastplayerbid));
		resetBigInt(BidMoney);
		ObiectLicitat = BidType = 0;
		lastplayerbid = -1;
		return true;
	}

	new
		LastName[MAX_PLAYER_NAME],
		MoneyText[32]
	;

	format(LastName, MAX_PLAYER_NAME, GetName(lastplayerbid));
	format(MoneyText, sizeof(MoneyText), "%s", formatBytes(BidMoney));

	switch(BidType)
	{
		case 1:
		{
			PlayerInfo[lastplayerbid][pHouse] = ObiectLicitat;
			format(HouseInfo[ObiectLicitat][hOwner], 25, LastName);
			Query_Mysql("UPDATE `houses` SET `Owner` = '%s' WHERE `ID` = '%d'", LastName, ObiectLicitat);
			pUpdateInt(lastplayerbid, "House", ObiectLicitat);
			va_SendClientMessageToAll(COLOR_SERVER, "Licitatii >> {ffffff}%s a licitat $%s si a castigat Casa %d.", LastName, MoneyText, ObiectLicitat);
			FinishAchievement(lastplayerbid, 5);
		}
		case 2:
		{
			PlayerInfo[lastplayerbid][pBizz] = ObiectLicitat;
			format(BizzInfo[ObiectLicitat][bOwner], 25, LastName);
			Query_Mysql("UPDATE `bizz` SET `Owner`='%s' WHERE `ID`='%d'", LastName, ObiectLicitat);
			pUpdateInt(lastplayerbid, "Bizz", ObiectLicitat);
			va_SendClientMessageToAll(COLOR_SERVER, "Licitatii >> {ffffff}%s a licitat $%s si a castigat Afacerea %d.", LastName, MoneyText, ObiectLicitat);
			FinishAchievement(lastplayerbid, 6);
		}
		case 3:
		{
			PlayerInfo[lastplayerbid][pOwnedJob] = ObiectLicitat;
			format(JobInfo[ObiectLicitat][jOwner], 25, LastName);
			Query_Mysql("UPDATE `jobs` SET `Owner` = '%s' WHERE `ID` = '%d'", JobInfo[ObiectLicitat][jOwner], ObiectLicitat);
			pUpdateInt(lastplayerbid, "OwnedJob", ObiectLicitat);
			va_SendClientMessageToAll(COLOR_SERVER, "Licitatii >> {ffffff}%s a licitat $%s si a castigat Jobul %d.", LastName, MoneyText, ObiectLicitat);
		}
		case 4:
		{
			PlayerInfo[lastplayerbid][pBillboard] = ObiectLicitat;
			pUpdateInt(lastplayerbid, "Billboard", ObiectLicitat);
			format(Billboards[ObiectLicitat][bOwner], strlen(LastName) + 1, LastName);
			Query_Mysql("update billboards set Owner = '%s' where id = %d", LastName, ObiectLicitat);
			va_SendClientMessageToAll(COLOR_SERVER, "Licitatii >> {ffffff}%s a licitat $%s si a castigat Panoul %d.", LastName, MoneyText, ObiectLicitat);
		}
	}

	UpdateLabel(BidType, ObiectLicitat);

	ScadeBaniBid(lastplayerbid, valueBigInt(BidMoney));

	resetBigInt(BidMoney);
	ObiectLicitat = BidType = 0;
	lastplayerbid = -1;
	return true;
}
enum NedeconectatiInfo
{
	nID, nName[MAX_PLAYER_NAME + 1]
}

new
	Nedeconectati[MAX_PLAYERS][NedeconectatiInfo], LastNedeconectat = 0
;

public OnPlayerDisconnect(playerid, reason)
{
	if(Iter_Contains(InLogin, playerid))
	{
		Iter_Remove(InLogin, playerid);
	}

	if(!Logat[playerid]) return true;

	new
		CurrentNedeconectat = LastNedeconectat
	;

	printf("A inceput deconectarea pentru %s[%d].", GetName(playerid), playerid);
	Nedeconectati[CurrentNedeconectat][nID] = playerid;
	format(Nedeconectati[CurrentNedeconectat][nName], MAX_PLAYER_NAME + 1, GetName(playerid));
	LastNedeconectat ++;

	if(PlayerInfo[playerid][pArea])
	{
		DestroyDynamicArea2(PlayerInfo[playerid][pArea]);
	}
	if(Iter_Contains(InRaceQuest, playerid))
	{
		Iter_Remove(InRaceQuest, playerid);

		ExitRace(playerid);
	}
	if(Iter_Contains(RacePerk, playerid))
	{
		Iter_Remove(RacePerk, playerid);
	}
	if(InTextdrawMenu[playerid] == 9)
	{
		HideDice(playerid);
	}
	if(!strmatch(GetName(playerid), GetGameName(playerid)))
	{
		SetPlayerName(playerid, GetName(playerid));
	}
	if(NeedRemoveFromWarVehicle[playerid] != false)
	{
		NeedRemoveFromWarVehicle[playerid] = false;
		stop RemoveFromWarVehicle[playerid];
	}
	if(ServerWars && IsAGangMember(playerid))
	{
		pUpdateInt(playerid, "WarKills", PlayerKills[playerid]);
		pUpdateInt(playerid, "WarDeaths", PlayerDeaths[playerid]);
	}
	if(Iter_Contains(InStunt, playerid))
	{
		LeaveStunt(playerid);
	}
	for(new i = 0; i < sizeof(WeaponPos); i++)
	{
		if(WeaponObjects[playerid][i] != 0)
		{
			DestroyPlayerObject(playerid, WeaponObjects[playerid][i]);
			WeaponObjects[playerid][i] = 0;
		}
	}
	if(Iter_Contains(InParkour, playerid))
	{
		Iter_Remove(InParkour, playerid);
	}
	if(Iter_Contains(Reports, playerid))
	{
		Iter_Remove(Reports, playerid);
		DeletePVar(playerid, "Report");
	}
	if(WTChannel[playerid] != 0)
	{
		if(Iter_Contains(WithFreq[WTChannel[playerid]], playerid))
		{
			Iter_Remove(WithFreq[WTChannel[playerid]], playerid);
		}
	}
	gString[0] = (EOS);
	format(gString, 32, "SQLID%d", PlayerInfo[playerid][pSQLID]);
	DeleteSVar(gString);
	if(Iter_Contains(InCasinoSlots, playerid))
	{
		Iter_Remove(InCasinoSlots, playerid);
	}
	if(Iter_Contains(AndroidPlayers, playerid))
	{
		Iter_Remove(AndroidPlayers, playerid);
	}
	if(Iter_Contains(PcPlayers, playerid))
	{
		Iter_Remove(PcPlayers, playerid);
	}
	if(Iter_Contains(InClan[PlayerInfo[playerid][pClan]], playerid))
	{
		Iter_Remove(InClan[PlayerInfo[playerid][pClan]], playerid);
	}
	if(Iter_Contains(Leaders, playerid))
	{
		Iter_Remove(Leaders, playerid);
	}
	if(Iter_Contains(Vips, playerid))
	{
		Iter_Remove(Vips, playerid);
	}
	if(Iter_Contains(Premiums, playerid))
	{
		Iter_Remove(Premiums, playerid);
	}
	if(Iter_Contains(AtEvent, playerid))
	{
		Iter_Remove(AtEvent, playerid);
	}
	foreach(new x : Nearby[playerid])
	{	
		SendMsg(x, COLOR_SERVER, "Nearby >> {ffffff}%s s-a deconectat de pe server.", GetName(playerid));
		if(Iter_Contains(Nearby[x], playerid))
		{
			Iter_Remove(Nearby[x], playerid);
		}
	}
	if(Iter_Contains(WithFpsText, playerid))
	{
		Iter_Remove(WithFpsText, playerid);
	}
	if(PlayerInfo[playerid][pJob] != 0)
	{
		new
			Job = PlayerInfo[playerid][pJob]
		;
		Iter_Remove(WithJob[Job], playerid);
	}
	if(Iter_Contains(PlayersWithRadar, playerid))
	{
		PC_EmulateCommand(playerid, "/stopradar");
	}
	if(Iter_Contains(InSkyWars, playerid))
	{
		LeaveSkyWars(playerid);
	}
	for(new i; i < 9; i++)
	{
		if(Iter_Contains(FactionMembers[i], playerid))
		{
			Iter_Remove(FactionMembers[i], playerid);
			break;
		}
	}
	if(Iter_Contains(Questions, playerid))
	{
		Iter_Remove(Questions, playerid);
		DeletePVar(playerid, "Question");
	}
	if(Iter_Contains(Spectators, playerid))
	{
		Iter_Remove(Spectators, playerid);
	}
	for(new i; i < 10; i++)
	{
		if(Iter_Contains(WithState[i], playerid))
		{
			Iter_Remove(WithState[i], playerid);
			break;
		}
	}
	if(BidType && lastplayerbid == playerid){
		lastplayerbid = -1;
		resetBigInt(BidMoney);
		va_SendClientMessageToAll(COLOR_SERVER, "Server >> {ffffff}%s s-a deconectat in timpul licitatiei, licitiatia se va relua.", GetName(playerid));
		new
			option[32]
		;
		switch(BidType)
		{
			case 1:
			{
				option = "casa";
			}
			case 2:
			{
				option = "afacerea";
			}
			case 3:
			{
				option = "jobul";
			}
		}
		va_SendClientMessageToAll(COLOR_SERVER, "Licitatii >> {ffffff}O licitatie a inceput (%s: %d).", option, ObiectLicitat);
		SendClientMessageToAll(COLOR_SERVER, "Licitatii >> {ffffff}Pentru a licita folositi comanda /bid, trebuie sa aveti banii in banca.");
		stop timer_licitatie;
		timer_licitatie = defer timer_bid();
	}
	if(Iter_Contains(InPaint, playerid)) Iter_Remove(InPaint, playerid);
	if(Iter_Contains(Contracts, playerid)) Iter_Remove(Contracts, playerid);
	if(Iter_Contains(Admins, playerid))
	{
		SendAdmins(COLOR_SERVER, "Staff >> {ffffff}Admin-ul %s a parasit serverul.", 1, GetName(playerid));
		SendHelpers(COLOR_SERVER, "Staff >> {ffffff}Admin-ul %s a parasit serverul.", 1, GetName(playerid));
		Iter_Remove(Admins, playerid);
	}
	if(Iter_Contains(Helpers, playerid))
	{
		SendAdmins(COLOR_SERVER, "Staff >> {ffffff}Helper-ul %s a parasit serverul.", 1, GetName(playerid));
		SendHelpers(COLOR_SERVER, "Staff >> {ffffff}Helper-ul %s a parasit serverul.", 1, GetName(playerid));
		Iter_Remove(Helpers, playerid);
	}
	if(Iter_Contains(YouTubers, playerid)) Iter_Remove(YouTubers, playerid);
	if(adatad[playerid]) DeleteAd(playerid);
	pUpdateInt(playerid, "PayDay", PlayerInfo[playerid][pPayDay]);
	pUpdateInt(playerid, "MuteTime", PlayerInfo[playerid][pMuteTime]);
	pUpdateInt(playerid, "WantedLevel", PlayerInfo[playerid][pWantedLevel]);
	pUpdateInt(playerid, "Rmute", PlayerInfo[playerid][pRmute]);
	pUpdateInt(playerid, "Nmute", PlayerInfo[playerid][pNmute]);
	if(PlayerInfo[playerid][pWantedLevel] > 0){
		foreach(new x : FactionMembers[1]){
			if(GetDistanceBetweenPlayers(playerid, x) < 100 && OnDuty[x]){
				WantedPoints[playerid] = 0;
				PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pWantedLevel] * 5;
				PlayerInfo[playerid][pJailed] = 1;
				pUpdateInt(playerid, "Jailed", PlayerInfo[playerid][pJailed]);
				PlayerInfo[playerid][pWantedLevel] = 0;
				pUpdateInt(playerid, "WantedLevel", PlayerInfo[playerid][pWantedLevel]);
				ClearCrime(playerid);
				format(PlayerInfo[playerid][pCrime1], 25, "Fara Crima");
				pUpdateStr(playerid, "Crime1", PlayerInfo[playerid][pCrime1]);
				format(PlayerInfo[playerid][pCrime2], 25, "Fara Crima");
				pUpdateStr(playerid, "Crime2", PlayerInfo[playerid][pCrime2]);
				format(PlayerInfo[playerid][pCrime3], 25, "Fara Crima");
				pUpdateStr(playerid, "Crime3", PlayerInfo[playerid][pCrime3]);
				format(PlayerInfo[playerid][pVictim], 25, "********");
				pUpdateStr(playerid, "Victim", PlayerInfo[playerid][pVictim]);
				format(PlayerInfo[playerid][pAccused], 25, "********");
				pUpdateStr(playerid, "Accused", PlayerInfo[playerid][pAccused]);
				SendFamilyMessage(1, COLOR_SERVER, "Dispecerat >> %s a fost arestat pentru %d secunde.", GetName(playerid), PlayerInfo[playerid][pJailTime]);
				PlayerInfo[x][pRaport] ++;
				pUpdateInt(x, "Raport", PlayerInfo[x][pRaport]);
				break;
			}
		}
	}
	pUpdateInt(playerid, "JailTime", PlayerInfo[playerid][pJailTime]);
	if(!PlayerInfo[playerid][pWantedLevel] && somated[playerid] != -1){
		format(PlayerInfo[playerid][pVictim], 25, "Unknown");
		pUpdateStr(playerid, "Victim", PlayerInfo[playerid][pVictim]);
		if(strmatch(PlayerInfo[playerid][pCrime1], "Fara Crima"))
			format(PlayerInfo[playerid][pCrime1], 25, "disconnect during a chase"),
			pUpdateStr(playerid, "Crime1", PlayerInfo[playerid][pCrime1])
		;
		else if(strmatch(PlayerInfo[playerid][pCrime2], "Fara Crima"))
			format(PlayerInfo[playerid][pCrime2], 25, "disconnect during a chase"),
			pUpdateStr(playerid, "Crime2", PlayerInfo[playerid][pCrime2])
		;
		else if(strmatch(PlayerInfo[playerid][pCrime3], "Fara Crima"))
			format(PlayerInfo[playerid][pCrime3], 25, "disconnect during a chase"),
			pUpdateStr(playerid, "Crime3", PlayerInfo[playerid][pCrime3])
		;
		else if(strmatch(PlayerInfo[playerid][pCrime1], "Fara Crima") && strmatch(PlayerInfo[playerid][pCrime2], "Fara Crima") && strmatch(PlayerInfo[playerid][pCrime3], "Fara Crima")){ }
		else {
			PlayerInfo[playerid][pWantedLevel] = PlayerInfo[playerid][pWantedLevel] + 2;
			pUpdateInt(playerid, "WantedLevel", PlayerInfo[playerid][pWantedLevel]);
			format(PlayerInfo[playerid][pCrime1], 25, "disconnect during a chase"); pUpdateStr(playerid, "Crime1", PlayerInfo[playerid][pCrime1]);
			format(PlayerInfo[playerid][pCrime2], 25, "Fara Crima"); pUpdateStr(playerid, "Crime2", PlayerInfo[playerid][pCrime2]);
			format(PlayerInfo[playerid][pCrime3], 25, "Fara Crima"); pUpdateStr(playerid, "Crime3", PlayerInfo[playerid][pCrime3]);
			SendFamilyMessage(1, 0x2641FEAA, "Dispecerat >> {ffffff}%s s-a deconectat in timpul unei urmariri.", GetName(playerid));
		}
	}
	new year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	Query_Mysql("UPDATE `users` SET `lastOn` = '%d-%02d-%02d %02d:%02d:%02d', `Status` = '0', `UserID` = '%d' WHERE `id` = '%d'", year, month, day, hour, minute, second, INVALID_PLAYER_ID, PlayerInfo[playerid][pSQLID]);
	if(UberAccepted[playerid] != -1) SendMsg(UberAccepted[playerid], COLOR_SERVER, "Server >> {ffffff}Uber-ul %s a parasit serverul.", GetName(playerid));
	if(ParamedicAccepted[playerid] != -1) SendMsg(ParamedicAccepted[playerid], COLOR_SERVER, "Server >> {ffffff}Paramedicul %s a parasit serverul.", GetName(playerid));
	if(GlovoAccepted[playerid] != -1) SendMsg(GlovoAccepted[playerid], COLOR_SERVER, "Server >> {ffffff}Glovo-ul %s a parasit serverul.", GetName(playerid));
	if(UberFare[playerid]){
		UberFare[playerid] = 0;
		UberMoneyEarned[playerid] = 0;
		PlayerTextDrawHide(playerid, RentCarText[playerid]);
		foreach(new x : FactionMembers[6]){
			if(UberDriver[x] == playerid){
				UberDriver[x] = -1;
				UberTimer[x] = 0;
				UberMoneySpent[x] = 0;
				PlayerTextDrawHide(x, RentCarText[x]);
				break;
			}
		}
	}
	foreach(new i : Player){
		if(targetfind[i] == playerid){ 
			targetfind[i] = -1;
			DisablePlayerCheckpoint(i);
			GameTextForPlayer(i, "~g~Your target left the game", 5000, 1);
			PlayerTextDrawHide(i, FindTXD);
		}
		if(PlayerInfo[i][pPhoneBlocked][playerid]) PlayerInfo[i][pPhoneBlocked][playerid] = false;
		if(PlayerInfo[playerid][pPhoneBlocked][i]) PlayerInfo[playerid][pPhoneBlocked][i] = false;
		if(Logat[i] && TradePlayer[i] == playerid) TradePlayer[i] = -1;
	}
	DestroyPlayerProgressBar(playerid, LevelBar);
	DestroyPlayerProgressBar(playerid, GlobalGoalBar);
	DestroyPlayerProgressBar(playerid, BattlepassBar);
	SaveAccount(playerid);
	if(TradeID[playerid] != -1 && Logat[TradeID[playerid]]){ 
		SendMsg(TradeID[playerid], COLOR_SERVER, "Server >> {ffffff}%s s-a deconectat. Afacere anulata!", GetName(playerid));
		CancelSelectTextDraw(playerid), CancelSelectTextDraw(TradeID[playerid]); HideTradeItems(playerid), HideTradeTDs(TradeID[playerid]);
	} 
	if(JobVeh[playerid] != -1) DestroyVehicleEx(JobVeh[playerid]);
	if(QuestVeh[playerid] != -1) DestroyVehicleEx(QuestVeh[playerid]);
	if(ExamVeh[playerid] != -1) DestroyVehicleEx(ExamVeh[playerid]);
	if(RentVeh[playerid] != -1) DestroyVehicleEx(RentVeh[playerid]);
	if(pfVehicle[playerid] != -1) DestroyVehicleEx(pfVehicle[playerid]), Iter_Remove(fVehicles[PlayerInfo[playerid][pMember]], pfVehicle[playerid]);
	if(pcVehicle[playerid] != -1) DestroyVehicleEx(pcVehicle[playerid]), Iter_Remove(cVehicles[PlayerInfo[playerid][pClan]], pcVehicle[playerid]);
	DespawnVehicles(playerid);
	if(Iter_Contains(UberCalls, playerid)) Iter_Remove(UberCalls, playerid);
	if(Iter_Contains(ParamedicCalls, playerid)) Iter_Remove(ParamedicCalls, playerid);
	if(Iter_Contains(GlovoCalls, playerid)) Iter_Remove(GlovoCalls, playerid);
	if(Iter_Contains(InRuleta, playerid)) Iter_Remove(InRuleta, playerid);
	for(new i; i < 3; i++){
		if(Iter_Contains(VotRuleta[i], playerid)) Iter_Remove(VotRuleta[i], playerid);
	}
	printf("%s[%d] s-a deconectat.", GetName(playerid), playerid);
	ResetVariables(playerid);
	Nedeconectati[CurrentNedeconectat][nID] = 0;
	format(Nedeconectati[CurrentNedeconectat][nName], MAX_PLAYER_NAME + 1, "");
	LastNedeconectat --;
	return true;
}
timer UnfreezeTimer[1000](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	FreezePlayer(playerid, false);
	return true;
}
function SetPlayerSpawn(playerid){
	if(Iter_Contains(InPaint, playerid))
	{
		new
			Float: Positions[10][3] =
			{
				{-405.4511, 2251.3962, 42.4297},
				{-365.3706, 2263.3020, 42.4844},
				{-367.9435, 2246.2239, 42.4844},
				{-351.9147, 2218.4521, 42.4912},
				{-389.4631, 2199.5339, 42.4236},
				{-399.0499, 2226.1194, 42.4297},
				{-443.9061, 2223.1660, 42.4297},
				{-431.4088, 2240.1143, 42.9834},
				{-433.1822, 2252.3867, 42.4297},
				{-392.6932, 2232.7715, 42.4297}
			},
			rand = random(sizeof(Positions))
		;
		SetPlayerPosEx(playerid, Positions[rand][0], Positions[rand][1], Positions[rand][2]);
		SetPlayerSkin(playerid, DefaultSkin);
		SetPlayerHP(playerid, 100);
		SetPlayerArm(playerid, 0);
		SetPlayerVirtualWorld(playerid, 225200);
		if(painttime <= 180 && painttime != -1)
		{
			GivePlayerWeapon(playerid, 31, 1000);
			GivePlayerWeapon(playerid, 24, 100);
		}
		SetPlayerWorldBounds(playerid, -320.9174, -466.3249, 2277.4089, 2190.5371);
		return true;
	}
	InHQ[playerid] = InHouse[playerid] = InBiz[playerid] = 0; 
	SetPlayerVirtualWorld(playerid, 0); 
	SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	if(GetPVarInt(playerid, "TrebuieTeleportat") == 1)
	{
		SetPlayerPosEx(playerid, LocationPos[6][0], LocationPos[6][1], LocationPos[6][2]);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
		DeletePVar(playerid, "TrebuieTeleportat");
		return true;
	}
	if(Logat[playerid] && SpecInfo[playerid][sSpectate] != -1)
	{
		new
			veh = SpecInfo[playerid][sVehicle],
			seat = SpecInfo[playerid][sSeat]
		;
		if(IsValidVehicle(veh))
		{
			for(new m = 2; m < 4; m++)
			{
				foreach(new i : WithState[m])
				{
					if(GetPlayerVehicleID(i) == veh && GetPlayerVehicleSeat(i) == seat)
					{
						veh = -1;
					}
				}
			}
			if(veh != -1)
			{
				PutPlayerInVehicleEx(playerid, veh, seat);
			}
			else
			{
				SetPlayerPosEx(playerid, SpecInfo[playerid][sPosX], SpecInfo[playerid][sPosY], SpecInfo[playerid][sPosZ]);
			}
		}
		else
		{
			SetPlayerPosEx(playerid, SpecInfo[playerid][sPosX], SpecInfo[playerid][sPosY], SpecInfo[playerid][sPosZ]);
		}
		SetPlayerInterior(playerid, SpecInfo[playerid][sInterior]);
		SetPlayerVirtualWorld(playerid, SpecInfo[playerid][sWorld]);
		InBiz[playerid] = SpecInfo[playerid][sBizz];
		InHouse[playerid] = SpecInfo[playerid][sHouse];
		InHQ[playerid] = SpecInfo[playerid][sHQ];
		ResetSpec(playerid);
		return true;
	}
	if(PlayerInfo[playerid][pJailed]){
		PlayerTextDrawShow(playerid, Jailtime);
		va_PlayerTextDrawSetString(playerid, Jailtime, "ELIBERAT IN: ~r~%d MINUTE", PlayerInfo[playerid][pJailTime]);
		PlayerTextDrawHide(playerid, WantedText);
		FreezePlayer(playerid, true);
		defer UnfreezeTimer(playerid, PlayerInfo[playerid][pSession]);
		switch(PlayerInfo[playerid][pJailed]){
			case 1: {
				SetPlayerInterior(playerid, 6);
				SetPlayerWantedLevel(playerid, 0);
				SetPlayerVirtualWorld(playerid, 1);
				SetPlayerPosEx(playerid, 263.8704, 77.0021, 1001.0391);
			}
			case 2: {
				new rand = random(sizeof gRandomAJailSpawns);
				SetPlayerInterior(playerid, 10);
				SetPlayerPosEx(playerid, gRandomAJailSpawns[rand][0], gRandomAJailSpawns[rand][1], gRandomAJailSpawns[rand][2]);
			}
		}
		return true;
	}
	switch(PlayerInfo[playerid][pSpawnChange])
	{
		case 0:
		{
			if(PlayerInfo[playerid][pMember] < 1){
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerFacingAngle(playerid, 0);
				SetPlayerPosEx(playerid, SpawnX,SpawnY,SpawnZ);
			}
			else
			{
				new
					gid = PlayerInfo[playerid][pMember]
				;
				InHQ[playerid] = gid;
				SetPlayerInterior(playerid, FacInfo[gid][fInterior]);
				SetPlayerVirtualWorld(playerid, FacInfo[gid][fID]);
				SetPlayerPosEx(playerid, FacInfo[gid][fcX], FacInfo[gid][fcY], FacInfo[gid][fcZ]);
			}
		}
		case 1:
		{
			new
				house
			;
			if(PlayerInfo[playerid][pHouse] != 0)
			{
				house = PlayerInfo[playerid][pHouse];
			}
			else if(PlayerInfo[playerid][pRented] != -1)
			{
				house = PlayerInfo[playerid][pRented];
			}
			SetPlayerInterior(playerid, HouseInfo[house][hInterior]);
			SetPlayerVirtualWorld(playerid, HouseInfo[house][hID]);
			SetPlayerPosEx(playerid, HouseInfo[house][hExitX], HouseInfo[house][hExitY], HouseInfo[house][hExitZ]);
			InHouse[playerid] = house;
		}
		case 2:
		{
			new
				clan = PlayerInfo[playerid][pClan],
				clanhqid = ClanToHQ[clan],
				type = ClanHQs[clanhqid][cType]
			;
			SetPlayerPosEx(playerid, ClanHQInteriors[type][1], ClanHQInteriors[type][2], ClanHQInteriors[type][3]);
			SetPlayerInterior(playerid, floatround(ClanHQInteriors[type][0]));
			SetPlayerVirtualWorld(playerid, clan);
			InClanHQ[playerid] = clanhqid;
		}
	}
	return true;
}
function GetDestroyedWeaponObjects(playerid)
{
	new
		objects = 0
	;

	for(new i = 0; i < sizeof(WeaponPos); i++)
	{
		if(WeaponObjects[playerid][i] == 0 && WeaponPos[i][0] == 11700)
		{
			objects ++;
		}
	}
	return objects;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float: fX, Float: fY, Float:fZ)
{
	if(PlayerInfo[playerid][pGunLic] < 1 && weaponid && InWeaponExam[playerid] != true)
	{
		AKick(playerid, "weapon hack #1");
		return false;
	}
	if(hittype != BULLET_HIT_TYPE_NONE)
	{
		if(!(-1000.0 <= fX <= 1000.0) || !(-1000.0 <= fY <= 1000.0) || !(-1000.0 <= fZ <= 1000.0))
		{ 
			AKick(playerid, "weapon hack #2"); 
			return false; 
		}
	} 
	if(!((22 <= weaponid <= 34) || weaponid == 38))
	{ 
		AKick(playerid, "weapon hack #3"); 
		return false; 
	}
	if((fX == floatstr("-0.009999")) && (fY == floatstr("-0.019999")) && (fZ == floatstr("0.039999")))
	{
		AKick(playerid, "weapon hack #4");
		return false;
	}
	LastWeapon[playerid] = weaponid;
	switch(hittype)
	{
		case 2:
		{ 
			foreach(new x : Spectators)
			{
				if(Spectate[x] == playerid)
				{
					SendMsg(x, COLOR_SERVER, "DMG >> %s a tras in vehiculul %d folosind %s.", GetName(playerid), hitid, weapName(weaponid)); 
				}
			}
		}
		case 4:
		{
			switch(GetPlayerObjectModel(playerid, hitid))
			{
				case 2332:
				{
					if(BankSafe[playerid] == hitid)
					{
						ShotsSafe[playerid] ++;

						if(ShotsSafe[playerid] == 50)
						{
							DestroyPlayerObject(playerid, BankSafe[playerid]);

							BankSafe[playerid] = CreatePlayerObject(playerid, 1829, 2310.67090, -6.02892, 26.13791, 0.00000, 0.00000, -148.67999);

							switch(CP[playerid])
							{
								case 474:
								{
									SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Intoarce-te la vehicul pentru a sparge a doua banca.");
								}
								case 476:
								{
									WantedPoints[playerid] = 12;
									SetPlayerCriminal(playerid, -1, "robbery");

									SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Intoarce-te la vehicul pentru a duce banii.");
								}
							}
						}
					}
				}
				case 11700:
				{
					for(new i = 0; i < sizeof(WeaponPos); i++)
					{
						if(hitid == WeaponObjects[playerid][i])
						{
							WeaponShots[playerid][i] ++;
							if(WeaponShots[playerid][i] >= 3)
							{
								DestroyPlayerObject(playerid, WeaponObjects[playerid][i]);
								WeaponObjects[playerid][i] = 0;
								if(GetDestroyedWeaponObjects(playerid) >= 7)
								{
									SetPlayerPosEx(playerid, LocationPos[14][0], LocationPos[14][1], LocationPos[14][2]);
									SetPlayerVirtualWorld(playerid, 0);
									ResetPlayerWeapons(playerid);
									InWeaponExam[playerid] = false;
									for(new j = 0; j < sizeof(WeaponPos); j++)
									{
										if(WeaponObjects[playerid][j] != 0)
										{
											DestroyPlayerObject(playerid, WeaponObjects[playerid][j]);
											WeaponObjects[playerid][j] = 0;
										}
									}
									SendMsg(playerid, COLOR_SERVER, "Licenta de arme >> {ffffff}Felicitari, ai obtinut licenta de arme.");
									PlayerInfo[playerid][pGunLic] = 25;
									pUpdateInt(playerid, "GunLic", PlayerInfo[playerid][pGunLic]);
									ProgressToBattlepass(playerid, 7, 1);
								}
							}
						}
					}
				}
				case 19054:
				{
					if(hitid == GiftObject[playerid])
					{
						if(GiftHP[playerid] > 0)
						{
							GiftHP[playerid] --;
						}
						else
						{
							new
								rMoney = 6_000_000 + random(4_000_00),
								rPP = 3 + random(2),
								rRP = 3 + random(2),
								rOG = 100 + random(50)
							;

							if(HaveVIP(playerid))
							{
								rMoney += floatround(0.5 * rMoney);
								rPP += floatround(0.5 * rPP);
								rRP += floatround(0.5 * rRP);
								rOG += floatround(0.5 * rOG);

								SendMsg(playerid, COLOR_SERVER, "Vip >> {ffffff}Ai primit 50% in plus deoarece ai cont vip.");
							}

							SendMsg(playerid, COLOR_SERVER, "Giftbox >> {ffffff}Ai colectat cadoul si ai primit $%s, %dPP, %dRP, %d OGPoints.", FormatNumber(rMoney), rPP, rRP, rOG);
							if(PlayerInfo[playerid][pActivePotions][2] > gettime())
							{
								GivePlayerCash(playerid, rMoney);
								SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Ai primit $%s deoarece folosesti legendary potion.", FormatNumber(rMoney));
							}
							if(GiftsToday[playerid] == 0)
							{
								if(PerkActive[playerid][38])
								{
									new
										BonusMoney = 3 * rMoney,
										BonusRP = 2 * rRP
									;

									GivePlayerCash(playerid, BonusMoney);
									GivePlayerRP(playerid, BonusRP);

									SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit $%s si %dRP in plus. #38", FormatNumber(BonusMoney), BonusRP);
								}
								else if(PerkActive[playerid][37])
								{
									new
										BonusMoney = 2 * rMoney,
										BonusRP = floatround(1.5 * rRP)
									;

									GivePlayerCash(playerid, BonusMoney);
									GivePlayerRP(playerid, BonusRP);

									SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit $%s si %dRP in plus. #37", FormatNumber(BonusMoney), BonusRP);
								}
							}
							GivePlayerCash(playerid, rMoney);
							GivePlayerPP(playerid, rPP);
							GivePlayerRP(playerid, rRP);
							GivePlayerOG(playerid, rOG);
							GivePlayerGift(playerid, -500);
							va_SendClientMessageToAll(COLOR_SERVER, "Giftbox >> {ffffff}%s si-a colectat cadoul si a fost recompensat.", GetName(playerid));
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pGiftBoxSeconds] = 3600;
							PlayerInfo[playerid][pGiftToCollect] = 0;
							pUpdateInt(playerid, "GiftToCollect", PlayerInfo[playerid][pGiftToCollect]);
							DestroyPlayerObject(playerid, GiftObject[playerid]);
							GiftObject[playerid] = 0;
							ProgressToPerkMissions(playerid, 10, 1);
							GiftsToday[playerid] ++;
							PlayerInfo[playerid][pGiftBoxOpenedToday] = true;
							pUpdateInt(playerid, "GiftBoxOpenedToday", PlayerInfo[playerid][pGiftBoxOpenedToday]);
							ProgressToBattlepass(playerid, 6, 1);
							ProgressToBattlepass(playerid, 8, 1);
						}
					}
				}
			}
		}
	}
	return true;
}
public OnPlayerUpdate(playerid)
{
	if(FreezedPlayer[playerid])
	{
		TogglePlayerControllable(playerid, 0);
	}
	return true;
}
timer DispareDmg[2000](playerid, id, type, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	PlayerTextDrawHide(playerid, DmgPTD[type]);
	new Marian[32];
	format(Marian, 32, "DispareDmg%d", type);
	DeletePVar(playerid, Marian);
	DamageCombos[id][playerid] = 0;
	return true;
}
function ShowDMG(playerid, id, Float: dmg, weapon, type)
{	
	new
		Marian[32]
	;

	format(Marian, 32, "DispareDmg%d", type);

	if(GetPVarInt(playerid, Marian) != 0)
	{
		stop DmgTimer[playerid][type];
		PlayerTextDrawHide(playerid, DmgPTD[type]);
	}

	switch(type)
	{
		case 0:
		{
			if(DamageCombos[id][playerid] < 2)
			{
				va_PlayerTextDrawSetString(playerid, DmgPTD[type], "%s / DMG: %0.2f %s", GetName(id), dmg, weapName(weapon));
				PlayerTextDrawShow(playerid, DmgPTD[type]);
			}
			else
			{
				va_PlayerTextDrawSetString(playerid, DmgPTD[type], "%s / DMG: %0.2f %s x%d", GetName(id), dmg, weapName(weapon), DamageCombos[id][playerid]);
				PlayerTextDrawShow(playerid, DmgPTD[type]);
			}
		}
		case 1:
		{
			if(DamageCombos[playerid][id] < 2)
			{
				va_PlayerTextDrawSetString(playerid, DmgPTD[type], "%s / DMG: %0.2f %s (%0.2f)", GetName(id), dmg, weapName(weapon), GetPlayerHP(id));
				PlayerTextDrawShow(playerid, DmgPTD[type]);
			}
			else
			{
				va_PlayerTextDrawSetString(playerid, DmgPTD[type], "%s / DMG: %0.2f %s x%d (%0.2f)", GetName(id), dmg, weapName(weapon), DamageCombos[playerid][id], GetPlayerHP(id));
				PlayerTextDrawShow(playerid, DmgPTD[type]);
			}
		}
	}


	DmgTimer[playerid][type] = defer DispareDmg(playerid, id, type, PlayerInfo[playerid][pSession]);

	SetPVarInt(playerid, Marian, 1);
	return true;
}
timer Spawn[50](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;
	
	if(IsPlayerInAnyVehicle(playerid))
	{
		new Float: Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		SetPlayerPosEx(playerid, Pos[0], Pos[1], Pos[2] + 1);
	}
	SpawnPlayer(playerid);
	return true;
}
function KillPlayer(playerid, killerid, reason)
{
	ac_kills[killerid] ++;
	ac_kills[playerid] ++;
	if(ac_kills[playerid] >= 10 && ac_onplayerdeath) AKick(playerid, "troll kill #1");
	else if(ac_kills[killerid] >= 10 && ac_onplayerdeath) AKick(killerid, "troll kill #2");
	if(PerkActive[killerid][24])
	{
		if((!ServerWars || !IsAGangMember(killerid)) && !Iter_Contains(InPaint, playerid))
		{
			SetPlayerArm(killerid, GetPlayerArm(killerid) + 100);

			if(GetPlayerArm(killerid) > 100)
			{
				SetPlayerArm(killerid, 100);
			}

			SendMsg(killerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit +100 armour. #24");
		}
	}

	else if(PerkActive[killerid][22])
	{
		if((!ServerWars || !IsAGangMember(killerid)) && !Iter_Contains(InPaint, playerid))
		{
			SetPlayerArm(killerid, GetPlayerArm(killerid) + 50);

			if(GetPlayerArm(killerid) > 100)
			{
				SetPlayerArm(killerid, 100);
			}

			SendMsg(killerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit +50 armour. #22");
		}
	}
	if(PerkActive[killerid][22])
	{
		if(!ServerWars || !IsAGangMember(killerid))
		{
			SetPlayerHP(killerid, GetPlayerHP(killerid) + 100);

			if(GetPlayerHP(killerid) > 100)
			{
				SetPlayerHP(killerid, 100);
			}

			SendMsg(killerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit +100HP. #22");
		}
	}
	else if(PerkActive[killerid][21])
	{
		if(!ServerWars || !IsAGangMember(killerid))
		{
			SetPlayerHP(killerid, GetPlayerHP(killerid) + 50);

			if(GetPlayerHP(killerid) > 100)
			{
				SetPlayerHP(killerid, 100);
			}

			SendMsg(killerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit +50HP. #21");
		}
	}
	if(Iter_Contains(InPaint, killerid) && Iter_Contains(InPaint, playerid))
	{
		new
			mats = randEx(100, 200)
		;
		paintkills[killerid] ++; 
		SendMsg(playerid, COLOR_SERVER, "Paintball >> Ai fost omorat de %s.", GetName(killerid));
		SendMsg(killerid, COLOR_SERVER, "Paintball >> L-ai omorat pe %s, ai primit %d materiale si acum ai %d ucideri.", GetName(playerid), mats, paintkills[killerid]);
		PlayerInfo[killerid][pMats] += mats; 
		pUpdateInt(killerid, "Materials", PlayerInfo[killerid][pMats]);
		ProgressToPerkMissions(killerid, 3, 1);
		KPaintToday[killerid] ++;
		if(PerkActive[killerid][20] != false)
		{
			PlayerInfo[killerid][pMats] += 300;
			pUpdateInt(killerid, "Materials", PlayerInfo[killerid][pMats]);
		}
		else if(PerkActive[killerid][19] != false)
		{
			if(paintkills[killerid] > 3)
			{
				PlayerInfo[killerid][pMats] += 200;
				pUpdateInt(killerid, "Materials", PlayerInfo[killerid][pMats]);
			}
		}
		if(PerkActive[killerid][18] != false)
		{
			GivePlayerWeapon(killerid, 16, 1);
			SendMsg(killerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit o grenada. #18");
		}
		else if(PerkActive[killerid][16] != false)
		{
			if(KPaintToday[killerid] % 3 == 0)
			{
				GivePlayerWeapon(killerid, 16, 1);
				SendMsg(killerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit o grenada. #16");
			}
		}
		foreach(new i : InPaint) SendDeathMessageToPlayer(i, killerid,playerid, reason); 
	}
	if(GetPVarInt(playerid, "aoponent") == killerid && GetPVarInt(killerid, "aoponent") == playerid)
	{

		defer Spawn(killerid, PlayerInfo[killerid][pSession]);
		SetPVarInt(killerid, "TrebuieTeleportat", 1);

		SetPVarInt(playerid, "TrebuieTeleportat", 1);

		Info(playerid, "Ai pierdut contra lui %s.", GetName(killerid));
		SendMsg(killerid, COLOR_SERVER, "Server >> {ffffff}Ai castigat contra lui %s, si ai primit $%s.", GetName(playerid), FormatNumber(GetPVarInt(killerid, "amoney") * 2));
		GivePlayerCash(killerid, GetPVarInt(killerid, "amoney") * 2);
		SetPVarInt(playerid, "ainvite", -1);
		SetPVarInt(killerid, "ainvite", -1);
		SetPVarInt(playerid, "aoponent", -1);
		SetPVarInt(killerid, "aoponent", -1);

	}
	if(InTurfZone[killerid] != 0)
	{
		new
			i = InTurfZone[killerid],
			faction1 = PlayerInfo[playerid][pMember],
			faction2 = PlayerInfo[killerid][pMember]
		;

		if(IsPlayerInTurf(killerid, i) && IsAGangMember(playerid) && IsAGangMember(killerid))
		{
			if((WarInfo[wFaction] == faction1 && WarInfo[wAttacker] == faction2) || (WarInfo[wFaction] == faction2 && WarInfo[wAttacker] == faction1))
			{
				if(faction2 == WarInfo[wAttacker] || faction2 == WarInfo[wFaction])
					WarScoreF[faction2] ++;

				PlayerKills[killerid] ++;
				PlayerDeaths[playerid] ++;
				SendMsg(playerid, COLOR_SERVER, "War >> Ai fost omorat de %s (%d) cu un %s de la distanta de %0.2fm.", GetName(killerid), killerid, weapName(reason), GetDistanceBetweenPlayers(playerid, killerid));
				SendMsg(killerid, COLOR_SERVER, "War >> L-ai omorat pe %s (%d) cu un %s de la distanta de %0.2fm.", GetName(playerid),playerid, weapName(reason), GetDistanceBetweenPlayers(playerid, killerid));
				for(new m = 2; m < 4; m ++)
				{				
					foreach(new x : FactionMembers[m])
					{
						if(OnDuty[x])
						{
							SendDeathMessageToPlayer(x, killerid,playerid, reason);
						}
					}
				}

				if(Iter_Count(WarHP) < 100){
					new
						Float: X,
						Float: Y,
						Float: Z
					;
					GetPlayerPos(playerid, X, Y, Z);
					new
						Pickup = CreateDynamicPickup(1241, 1, X, Y, Z, GetPlayerVirtualWorld(playerid))
					;
					Iter_Add(WarHP, Pickup);
				}

				if(Iter_Count(WarWeapons) < 100)
				{
					new
						Float: X,
						Float: Y,
						Float: Z,
						Weapon = LastWeapon[playerid],
						Slot = WeaponToSlot[Weapon],
						Gloante[2],
						Object = WeaponToObject[Weapon]
					;
					if(LastWeapon[playerid] != 0)
					{
						GetPlayerPos(playerid, X, Y, Z);
						new
							Pickup = CreateDynamicPickup(Object, 1, X + 2, Y, Z, GetPlayerVirtualWorld(playerid))
						;
						Iter_Add(WarWeapons, Pickup);
						ArmaPePickup[Pickup] = Weapon;
						GetPlayerWeaponData(playerid, Slot, Gloante[0], Gloante[1]);
						GloantePePickup[Pickup] = Gloante[1];
					}
				}
			}
		}
	}
	if(PlayerInfo[playerid][pHeadValue] && PlayerInfo[killerid][pMember] == 5 && contract_get[killerid] == playerid)
	{
		if(!Undercover[killerid])
		{
			SendFamilyMessage(5, 0x211CDEC8, "%s a esuat contractul de pe %s, motiv: undercover.", GetName(killerid), GetName(playerid));
		}
		else if(PlayerInfo[killerid][pSettings][11] == false)
		{
			SendFamilyMessage(5, 0x211CDEC8, "%s a esuat contractul de pe %s, motiv: telefon.", GetName(killerid), GetName(playerid));
		}
		else if(GetDistanceBetweenPlayers(playerid, killerid) < 100 && reason != WEAPON_KNIFE)
		{
			SendFamilyMessage(5, 0x211CDEC8, "%s a esuat contractul de pe %s, motiv: distanta.", GetName(killerid), GetName(playerid));
		}
		else
		{
			GivePlayerCash(killerid, PlayerInfo[playerid][pHeadValue]);
			SendFamilyMessage(5, 0x211CDEC8, "%s l-a omorat pe %s pentru $%s, distanta: %0.2fm.", 
				GetName(killerid), GetName(playerid), FormatNumber(PlayerInfo[playerid][pHeadValue]), GetDistanceBetweenPlayers(playerid, killerid));
			PlayerInfo[killerid][pRaport] ++; 
			pUpdateInt(killerid, "Raport", PlayerInfo[killerid][pRaport]);
		}
		Iter_Remove(Contracts, playerid);
		contract_get[killerid] = -1; 
		PlayerInfo[playerid][pHeadValue] = 0;
		pUpdateInt(playerid, "HeadValue", 0);
		Undercover[killerid] = false;
		foreach(new i : Player) ShowPlayerNameTagForPlayer(i, killerid, 1);
		PlayerTextDrawHide(killerid, Jailtime);
		Info(killerid, "Nu mai esti sub acoperire.");
	}
	return true;
}
function GivePlayerDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
	if(DeathPlayer[playerid] != false)
		return true;

	if(GetPlayerArm(playerid) < 1)
	{
		new
			Float: HP = GetPlayerHP(playerid),
			Float: NewHP = HP - amount
		;

		SetPlayerHP(playerid, NewHP);

		if(NewHP < 1)
		{
			Health[playerid] = 0;
			DeathPlayer[playerid] = true;
			if(issuerid != INVALID_PLAYER_ID)
			{
				KillPlayer(playerid, issuerid, weaponid);
			}
			defer Spawn(playerid, PlayerInfo[playerid][pSession]);
		}
	}
	else
	{
		new
			Float: Arm = GetPlayerArm(playerid),
			Float: NewArm = Arm - amount
		;

		SetPlayerArm(playerid, NewArm);

		if(GetPlayerArm(playerid) < 0)
		{
			new
				Float: OldArm = GetPlayerArm(playerid),
				Float: NewHP = GetPlayerHP(playerid) + OldArm
			;

			SetPlayerArm(playerid, 0);

			SetPlayerHP(playerid, NewHP);

			if(NewHP < 1)
			{
				Health[playerid] = 0;
				DeathPlayer[playerid] = true;
				if(issuerid != INVALID_PLAYER_ID)
				{
					KillPlayer(playerid, issuerid, weaponid);
				}
				defer Spawn(playerid, PlayerInfo[playerid][pSession]);
			}
		}
	}
	return true;
}
public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
	if(weaponid > 54)
		return true;

	if(DeathPlayer[playerid])
		return true;

	if(issuerid != INVALID_PLAYER_ID)
	{
		if(weaponid == 49 || weaponid == 50 || weaponid == 51)
			OnPlayerGiveDamage(issuerid, playerid, amount, weaponid, bodypart);

		return true;
	}

	GivePlayerDamage(playerid, issuerid, amount, weaponid, bodypart);

	return true;
}
public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
	if(weaponid > 54)
		return true;

	if(DeathPlayer[playerid])
		return true;

	if(DeathPlayer[damagedid])
		return true;

	if(IsPlayerInAnyVehicle(damagedid) && ServerWars && IsAGangMember(damagedid) && IsAGangMember(playerid) && InTurfZone[damagedid] != 0 && InTurfZone[damagedid] == InTurfZone[playerid] && OnDuty[playerid] && OnDuty[damagedid])
		return true;

	if(ServerWars && IsAGangMember(damagedid) && IsAGangMember(playerid) && OnDuty[damagedid] && OnDuty[playerid])
	{
		if(InTurfZone[damagedid] != WarOnTurf && CalledLeave[damagedid] == false)
			return true;

		if(InTurfZone[playerid] != WarOnTurf && CalledLeave[playerid] == false)
			return true;
	}

	if(PlayerCuffed[damagedid])
		return true;

	if(Iter_Contains(InPaint, damagedid) && painttime > 180)
		return true;

	if(weaponid == 34)
		amount = 200;

	if(InSpawnArea[damagedid])
	{
		new
			bool: PoateTrage = false
		;
		if(PlayerInfo[damagedid][pWantedLevel] != 0 && IsACop(playerid))
		{
			PoateTrage = true;
		}
		if(InTurfZone[damagedid] != 0 && InTurfZone[playerid] == InTurfZone[damagedid] && IsAGangMember(playerid) && IsAGangMember(damagedid) && OnDuty[playerid] && OnDuty[damagedid] && ServerWars)
		{
			PoateTrage = true;
		}
		if(PlayerInfo[damagedid][pHeadValue] != 0 && PlayerInfo[playerid][pMember] == 5 && contract_get[playerid] == damagedid)
		{
			PoateTrage = true;
		}
		if(PoateTrage == false)
		{
			SendMsg(playerid, COLOR_SERVER, "Spawn >> {ffffff}Nu poti cauza damage la spawn.");
			FreezePlayer(playerid, true);
			defer UnfreezeTimer(playerid, PlayerInfo[playerid][pSession]);
			return true;
		}
	}
	if(InTurfZone[damagedid] == WarOnTurf || CalledLeave[damagedid])
	{
		if(IsAGangMember(playerid) && IsAGangMember(damagedid) && OnDuty[playerid] && OnDuty[damagedid] && ServerWars)
		{
			new
				faction1 = PlayerInfo[playerid][pMember],
				faction2 = PlayerInfo[damagedid][pMember]
			;
			if(faction1 != faction2)
			{
				PlayerPlaySound(playerid, 17802, 0.0, 0.0, 0.0);
			}
			else
			{
				return true;
			}
		}
	}
	if(weaponid == WEAPON_SILENCED && tazer[playerid] && IsACop(playerid))
	{
		if(IsACop(damagedid))
		{
			return true;
		}
		if(PlayerCuffed[damagedid])
		{
			return true;
		}
		if(GetDistanceBetweenPlayers(playerid, damagedid) > 15)
		{
			return true;
		}
		PlayerCuffed[damagedid] = true;
		PlayerCuffedTime[damagedid] = 8;
		FreezePlayer(damagedid, true);
	}
	foreach(new x : Spectators)
	{
		if(Spectate[x] == playerid)
		{
			SendMsg(x, COLOR_SERVER, "DMG >> %s a dat %f dauna in %s folosind %s.", GetName(playerid), amount, GetName(damagedid), weapName(weaponid));
		}
	}

	GivePlayerDamage(damagedid, playerid, amount, weaponid, bodypart);

	DamageCombos[playerid][damagedid] ++;
	if(Undercover[playerid] != true)
	{
		ShowDMG(damagedid, playerid, amount, weaponid, 0);
	}
	if(Undercover[damagedid] != true)
	{
		ShowDMG(playerid, damagedid, amount, weaponid, 1);
	}

	return true;
}
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(IsAGangMember(playerid) && Iter_Contains(WarHP, pickupid))
	{
		if(Health[playerid] >= 100) return SendMsg(playerid, COLOR_SERVER, "War >> {ffffff}Nu poti lua pastila deoarece ai viata plina.");
		SetPlayerHP(playerid, Health[playerid] + 25);
		if(Health[playerid] > 100)
		{
			SetPlayerHP(playerid, 100);
		}
		SendMsg(playerid, COLOR_SERVER, "War >> {ffffff}Ai primit +25 HP.");
		DestroyDynamicPickup(pickupid);
		Iter_Remove(WarHP, pickupid);
	}
	else if(IsAGangMember(playerid) && Iter_Contains(WarWeapons, pickupid))
	{
		new
			Arma = ArmaPePickup[pickupid],
			Gloante = GloantePePickup[pickupid]
		;
		GivePlayerWeapon(playerid, Arma, Gloante);
		SendMsg(playerid, COLOR_SERVER, "War >> {ffffff}Ai primit un %s cu %d gloante.", weapName(Arma), Gloante);
		DestroyDynamicPickup(pickupid);
		Iter_Remove(WarWeapons, pickupid);
	}
	else if(Iter_Contains(InSkyWars, playerid))
	{
		for(new i; i < 4; i++)
		{
			if(Iter_Contains(SkyWarsPickups[i], pickupid))
			{
				new Weapon;
				switch(i)
				{
					case 0:
					{
						Weapon = 31;
					}
					case 1:
					{
						Weapon = 24;
					}
					case 2:
					{
						Weapon = 25;
					}
					case 3:
					{
						Weapon = 35;
					}
				}
				GivePlayerWeapon(playerid, Weapon, 999);
				SendMsg(playerid, COLOR_SERVER, "Sky Wars >> {ffffff}Ai luat un %s.", weapName(Weapon));
				DestroyDynamicPickup(pickupid);
				Iter_Remove(SkyWarsPickups[i], pickupid);
				break;
			}
		}
	}
	else if(StuntPickup[playerid] != 0 && StuntPickup[playerid] == pickupid)
	{
		new
			Float: vx,
			Float: vy,
			Float: vz,
			vehicleid = GetPlayerVehicleID(playerid)
		;
		GetVehicleVelocity(vehicleid, vx, vy, vz);
		SetVehicleVelocity(vehicleid, vx * 2, vy * 2, vz * 2);
	}
	return true;
}
function LeaveSkyWars(playerid)
{
	if(!Iter_Contains(InSkyWars, playerid))
		return false;

	new
		bool: milsugi[MAX_PLAYERS],
		bool: milsugi2 = SkyWarsStarted
	;
	foreach(new x : InSkyWars)
	{
		SendMsg(x, COLOR_SERVER, "Sky Wars >> {ffffff}%s a parasit runda.", GetName(playerid));
	}
	if(milsugi2 == false)
	{
		GivePlayerCash(playerid, 1_000_000);
		SkyWarsMoney --;
		if(Iter_Count(InSkyWars) < 3)
		{
			foreach(new x : InSkyWars)
			{
				if(x != playerid)
				{
					TextDrawHideForPlayer(x, SkyWarsTD);
					milsugi[x] = true;
					defer Spawn(x, PlayerInfo[x][pSession]);
					SetPVarInt(x, "TrebuieTeleportat", 1);
					Iter_Remove(InSkyWars, x);
					break;
				}
			}
			ResetSkyWars();
		}
	}
	else
	{
		if(Iter_Count(InSkyWars) < 3)
		{
			foreach(new x : InSkyWars)
			{
				if(x != playerid)
				{
					PlayerInfo[x][pSkyWarsWinToday] = true;
					pUpdateInt(x, "SkyWarsWinToday", PlayerInfo[x][pSkyWarsWinToday]);
					ProgressToPerkMissions(x, 9, 1);
					new Money = SkyWarsMoney * 1_000_000;
					SendMsg(x, COLOR_SERVER, "Sky Wars >> {ffffff}Ai castigat runda si ai primit $%s, 1RP.", FormatNumber(Money));
					GivePlayerCash(x, Money);
					GivePlayerRP(x, 1);
					TextDrawHideForPlayer(x, SkyWarsTD);
					milsugi[x] = true;
					defer Spawn(x, PlayerInfo[x][pSession]);
					SetPVarInt(x, "TrebuieTeleportat", 1);
					Iter_Remove(InSkyWars, x);
					break;
				}
			}
			ResetSkyWars();
		}
	}
	if(!DeathPlayer[playerid] && milsugi[playerid] == false)
	{
		defer Spawn(playerid, PlayerInfo[playerid][pSession]);
	}
	SetPVarInt(playerid, "TrebuieTeleportat", 1);
	Iter_Remove(InSkyWars, playerid);
	milsugi[playerid] = false;
	TextDrawHideForPlayer(playerid, SkyWarsTD);
	return true;
}
public OnPlayerDeath(playerid, killerid, reason)
{
	if(DeathPlayer[playerid])
		return false;

	DisablePlayerCheckpoint(playerid);
	CP[playerid] = 0;
	DeathPlayer[playerid] = true;
	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	gPlayerUsingLoopingAnim[playerid] = false;
	if(GiftObject[playerid] != 0)
	{
		DestroyPlayerObject(playerid, GiftObject[playerid]);
		GiftObject[playerid] = 0;
	}
	if(Iter_Contains(InSkyWars, playerid))
	{
		LeaveSkyWars(playerid);
	}
	if(PlayerInfo[playerid][pWantedLevel])
	{
		foreach(new x : FactionMembers[1])
		{
			if(GetDistanceBetweenPlayers(playerid, x) < 100 && OnDuty[x])
			{
				PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pWantedLevel] * 5;
				pUpdateInt(playerid, "JailTime", PlayerInfo[playerid][pJailTime]);
				SendFamilyMessage(1, COLOR_SERVER, "Dispecerat >> %s a fost omorat de %s.", GetName(playerid), GetName(x));
				ClearCrime(playerid);
				FreezePlayer(playerid, true);
				defer UnfreezeTimer(playerid, PlayerInfo[playerid][pSession]);
				WantedPoints[playerid] = 0;
				PlayerInfo[playerid][pJailed] = 1;
				pUpdateInt(playerid, "Jailed", 1);
				PlayerInfo[playerid][pWantedLevel] = 0;
				pUpdateInt(playerid, "WantedLevel", 0);
				PlayerInfo[x][pRaport] ++;
				pUpdateInt(x, "Raport", PlayerInfo[x][pRaport]);
				PlayerPlaySound(x, 1058, 0.0, 0.0, 0.0);
				break;
			}
		}
	}
	if(PlayerCuffed2[playerid])
	{
		PlayerCuffed2[playerid] = false;
		RemovePlayerAttachedObject(playerid, 1);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(targetfind[playerid] != -1)
	{
		targetfind[playerid] = -1;
		PlayerTextDrawHide(playerid, FindTXD);
		DisablePlayerCheckpoint(playerid);
	}
	if(killerid != INVALID_PLAYER_ID)
	{
		foreach(new x : Spectators)
		{
			if(Spectate[x] == killerid)
			{
				SendMsg(x, COLOR_SERVER, "Spec >> %s a fost omorat de %s, motiv: %s, distanta: %0.2fm.", GetName(playerid), GetName(killerid), weapName(reason), GetDistanceBetweenPlayers(playerid, killerid));
			}
			if(GetDistanceBetweenPlayers(playerid, Spectate[x]) <= 100.0)
			{
				if(Spectate[x] != killerid) SendMsg(x, COLOR_SERVER, "Spec >> %s a fost omorat de %s, motiv: %s.", GetName(playerid), GetName(killerid), weapName(reason));
				SendDeathMessageToPlayer(x, killerid,playerid, reason);
			}
		}	
	}
	return true;
}
new
	ValidModifications[212][48] = 
	{
		{400, 1008, 1009, 1010, 1013, 1018, 1019, 1020, 1021, 1024, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{401, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1017, 1019, 1020, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1142, 1143, 1144, 1145},
		{402, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{403, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{404, 1000, 1002, 1007, 1008, 1009, 1010, 1013, 1016, 1017, 1019, 1020, 1021, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{405, 1000, 1001, 1008, 1009, 1010, 1014, 1018, 1019, 1020, 1021, 1023, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{406, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{407, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{408, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{409, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{410, 1001, 1003, 1007, 1008, 1009, 1010, 1013, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{411, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{412, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{413, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{414, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{415, 1001, 1003, 1007, 1008, 1009, 1010, 1017, 1018, 1019, 1023, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{416, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{417, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{418, 1002, 1006, 1008, 1009, 1010, 1016, 1020, 1021, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{419, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{420, 1001, 1003, 1004, 1005, 1008, 1009, 1010, 1019, 1021, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{421, 1000, 1008, 1009, 1010, 1014, 1016, 1018, 1019, 1020, 1021, 1023, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{422, 1007, 1008, 1009, 1010, 1013, 1017, 1019, 1020, 1021, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{423, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{424, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{425, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{426, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1019, 1021, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{427, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{428, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{429, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{430, 0000},
		{431, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{432, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{433, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{434, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{435, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{436, 1001, 1003, 1006, 1007, 1008, 1009, 1010, 1013, 1017, 1019, 1020, 1021, 1022, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{437, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{438, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{439, 1001, 1003, 1007, 1008, 1009, 1010, 1013, 1017, 1023, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1142, 1143, 1144, 1145},
		{440, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{441, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{442, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{443, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{444, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{445, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{446, 0000},
		{447, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{448, 0000},
		{449, 0000},
		{450, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{451, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{452, 0000},
		{453, 0000},
		{454, 0000},
		{455, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{456, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{457, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{458, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{459, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{460, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{461, 0000},
		{462, 0000},
		{463, 0000},
		{464, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{465, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{466, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{467, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{468, 0000},
		{469, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{470, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{471, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{472, 0000},
		{473, 0000},
		{474, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{475, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{476, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{477, 1006, 1007, 1008, 1009, 1010, 1017, 1018, 1019, 1020, 1021, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{478, 1004, 1005, 1008, 1009, 1010, 1012, 1013, 1020, 1021, 1022, 1024, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{479, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{480, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{481, 0000},
		{482, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{483, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1194},
		{484, 0000},
		{485, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{486, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{487, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{488, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{489, 1000, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1013, 1016, 1018, 1019, 1020, 1024, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{490, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{491, 1003, 1007, 1008, 1009, 1010, 1014, 1017, 1018, 1019, 1020, 1021, 1023, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1142, 1143, 1144, 1145},
		{492, 1000, 1004, 1005, 1006, 1008, 1009, 1010, 1016, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{493, 0000},
		{494, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{495, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{496, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1017, 1019, 1020, 1023, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1142, 1143},
		{497, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{498, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{499, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{500, 1008, 1009, 1010, 1013, 1019, 1020, 1021, 1024, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{501, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{502, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{503, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{504, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{505, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{506, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{507, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{508, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{509, 0000},
		{510, 0000},
		{511, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{512, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{513, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{514, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{515, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{516, 1000, 1002, 1004, 1007, 1008, 1009, 1010, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{517, 1002, 1003, 1007, 1008, 1009, 1010, 1016, 1017, 1018, 1019, 1020, 1023, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1142, 1143, 1144, 1145},
		{518, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1017, 1018, 1020, 1023, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1142, 1143, 1144, 1145},
		{519, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{520, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{521, 0000},
		{522, 0000},
		{523, 0000},
		{524, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{525, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{526, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{527, 1001, 1007, 1008, 1009, 1010, 1014, 1015, 1017, 1018, 1020, 1021, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{528, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{529, 1001, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1017, 1018, 1019, 1020, 1023, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{530, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{531, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{532, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{533, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{534, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1100, 1101, 1106, 1122, 1123, 1124, 1125, 1126, 1127, 1178, 1179, 1180, 1185, 1194, 1195, 1196},
		{535, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1109, 1110, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1194, 1195, 1196},
		{536, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1103, 1104, 1105, 1107, 1108, 1128, 1181, 1182, 1183, 1184, 1194, 1195, 1196},
		{537, 0000},
		{538, 0000},
		{539, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{540, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1142, 1143, 1144, 1145},
		{541, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{542, 1008, 1009, 1010, 1014, 1015, 1018, 1019, 1020, 1021, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1144, 1145},
		{543, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{544, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{545, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{546, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1017, 1018, 1019, 1023, 1024, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1142, 1143, 1144, 1145},
		{547, 1000, 1003, 1008, 1009, 1010, 1016, 1018, 1019, 1020, 1021, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1142, 1143},
		{548, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{549, 1001, 1003, 1007, 1008, 1009, 1010, 1011, 1012, 1017, 1018, 1019, 1020, 1023, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1142, 1143, 1144, 1145},
		{550, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1018, 1019, 1020, 1023, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1142, 1143, 1144, 1145},
		{551, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1016, 1018, 1019, 1020, 1021, 1023, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{552, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{553, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{554, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{555, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{556, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{557, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{558, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1163, 1164, 1165, 1166, 1167, 1168, 1194, 1195, 1196},
		{559, 1008, 1009, 1010, 1025, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1158, 1159, 1160, 1161, 1162, 1173, 1194, 1195, 1196},
		{560, 1008, 1009, 1010, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1138, 1139, 1140, 1141, 1169, 1170, 1194, 1195, 1196},
		{561, 1008, 1009, 1010, 1025, 1026, 1027, 1030, 1031, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1154, 1155, 1156, 1157, 1194, 1195, 1196},
		{562, 1008, 1009, 1010, 1025, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1146, 1147, 1148, 1149, 1171, 1172, 1194, 1195, 1196},
		{563, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{564, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{565, 1008, 1009, 1010, 1025, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1150, 1151, 1152, 1153, 1194, 1195, 1196},
		{566, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{567, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1102, 1129, 1130, 1131, 1132, 1133, 1186, 1187, 1188, 1189, 1194, 1195, 1196},
		{568, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{569, 0000},
		{570, 0000},
		{571, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{572, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{573, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{574, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{575, 1008, 1009, 1010, 1025, 1042, 1043, 1044, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1099, 1174, 1175, 1176, 1177, 1194, 1195},
		{576, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1134, 1135, 1136, 1137, 1190, 1191, 1192, 1193, 1194, 1195, 1196},
		{577, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{578, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{579, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{580, 1001, 1006, 1007, 1008, 1009, 1010, 1017, 1018, 1020, 1023, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{581, 0000},
		{582, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{583, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{584, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{585, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1142, 1143, 1144, 1145},
		{586, 0000},
		{587, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{588, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{589, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1016, 1017, 1018, 1020, 1024, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1144, 1145},
		{590, 0000},
		{591, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{592, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{593, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{594, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{595, 0000},
		{596, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{597, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{598, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{599, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{600, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1017, 1018, 1020, 1022, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{601, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{602, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{603, 1001, 1006, 1007, 1008, 1009, 1010, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1142, 1143, 1144, 1145},
		{604, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{605, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{606, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{607, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{608, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{609, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{610, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098},
		{611, 1008, 1009, 1010, 1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098}
	},
	ModificationsName[197][2][48] = {
		{"1000", "Generic Spoiler"},
		{"1001", "Generic Spoiler"},
		{"1002", "Generic Spoiler"},
		{"1003", "Generic Spoiler"},
		{"1004", "Bonnet Scoop"},
		{"1005", "Bonnet Scoop"},
		{"1006", "Generic Vehicle Roof-Scoop"},
		{"1007", "Generic Vehicle Side Skirt (L)"},
		{"1008", "Nitrous - 5 Shots"},
		{"1009", "Nitrous - 2 Shots"},
		{"1010", "Nitrous - 10 Shots"},
		{"1011", "Bonnet Scoop"},
		{"1012", "Bonnet Scoop"},
		{"1013", "Round Fog Lamps"},
		{"1014", "Generic Spoiler"},
		{"1015", "Generic Spoiler"},
		{"1016", "Generic Spoiler"},
		{"1017", "Generic Vehicle Side Skirt (R)"},
		{"1018", "Curved Twin Cylinder Generic Exhaust"},
		{"1019", "Twin Cylinder Generic Exhaust"},
		{"1020", "Large Generic Exhaust"},
		{"1021", "Medium Generic Exhaust"},
		{"1022", "Small Generic Exhaust"},
		{"1023", "Generic Spoiler"},
		{"1024", "Square Fog Lamps"},
		{"1025", "Off Road Wheel."},
		{"1026", "Sultan Side Skirt Type 1 (L)"},
		{"1027", "Sultan Side Skirt Type 1 (R)"},
		{"1028", "Sultan Exhaust Type 1"},
		{"1029", "Sultan Exhaust Type 2"},
		{"1030", "Sultan Side Skirt Type 2 (R)"},
		{"1031", "Sultan Side Skirt Type 1 (L)"},
		{"1032", "Sultan Roof Scoop type 1"},
		{"1033", "Sultan Roof Scoop type 2"},
		{"1034", "Elegy Exhaust type 1"},
		{"1035", "Elegy Roof Scoop Type 1"},
		{"1036", "Elegy Side Skirt type 1 (L)"},
		{"1037", "Elegy Exhaust Type 2"},
		{"1038", "Elegy Roof Scoop type 2"},
		{"1039", "Elegy Side Skirt type 2 (L)"},
		{"1040", "Elegy Side Skirt type 1 (R)"},
		{"1041", "Elegy Side Skirt type 2 (R)"},
		{"1042", "Broadway Side Skirt (L)"},
		{"1043", "Broadway Exhaust type 2"},
		{"1044", "Broadway Exhaust type 1"},
		{"1045", "Flash Exhaust type 2"},
		{"1046", "Flash Exhaust type 1"},
		{"1047", "Flash Side Skirt type 1 (L)"},
		{"1048", "Flash Side Skirt type 2 (L)"},
		{"1049", "Flash Spoiler type 1"},
		{"1050", "Flash Spoiler type 2"},
		{"1051", "Flash Side Skirt type 1 (R)"},
		{"1052", "Flash Side Skirt type 2 (R)"},
		{"1053", "Flash Roof Scoop type 2"},
		{"1054", "Flash Roof Scoop type 1"},
		{"1055", "Stratum Roof Scoop type 1"},
		{"1056", "Stratum Side Skirt type 1 (L)"},
		{"1057", "Stratum Side Skirt type 2 (L)"},
		{"1058", "Stratum Spoiler type 1"},
		{"1059", "Stratum Exhaust type 2"},
		{"1060", "Stratum Spoiler type 2"},
		{"1061", "Stratum Roof Scoop type 2"},
		{"1062", "Stratum Side Skirt type 1 (R)"},
		{"1063", "Stratum Side Skirt type 2 (R)"},
		{"1064", "Stratum Exhaust type 1"},
		{"1065", "Jester Exhaust type 1"},
		{"1066", "Jester Exhaust type 2"},
		{"1067", "Jester Roof Scoop type 1"},
		{"1068", "Jester Roof Scoop type 2"},
		{"1069", "Jester Side Skirt type 1 (L)"},
		{"1070", "Jester Side Skirt type 2 (L)"},
		{"1071", "Jester Side Skirt type 1 (R)"},
		{"1072", "Jester Side Skirt type 2 (R)"},
		{"1073", "Wheel Arch Angels Wheel type 6"},
		{"1074", "Wheel Arch Angels Wheel type 3"},
		{"1075", "Wheel Arch Angels Wheel type 2"},
		{"1076", "Loco' Low Co. Wheel type 4"},
		{"1077", "Loco' Low Co. Wheel type 1"},
		{"1078", "Loco' Low Co. Wheel type 3"},
		{"1079", "Wheel Arch Angels Wheel type 1"},
		{"1080", "Wheel Arch Angels Wheel type 5"},
		{"1081", "Wheel Arch Angels Wheel type 4"},
		{"1082", "Transfender Wheel type 1"},
		{"1083", "Loco' Low Co. Wheel type 2"},
		{"1084", "Loco' Low Co. Wheel type 5"},
		{"1085", "Transfender Wheel type 2"},
		{"1086", "Stereo Bass Boost"},
		{"1087", "Hydraulics"},
		{"1088", "Uranus Roof Scoop 1"},
		{"1089", "Uranus Exhaust Type 1"},
		{"1090", "Uranus Side Skirt type 1 (L)"},
		{"1091", "Uranus Roof Scoop 2"},
		{"1092", "Uranus Exhaust Type 2"},
		{"1093", "Uranus Side Skirt type 2 (L)"},
		{"1094", "Uranus Side Skirt type 1 (R)"},
		{"1095", "Uranus Side Skirt type 2 (R)"},
		{"1096", "Transfender Wheel type 3"},
		{"1097", "Transfender Wheel type 4"},
		{"1098", "Transfender Wheel type 5"},
		{"1099", "Broadway Side Skirt (R)"},
		{"1100", "Remington Misc. Part 1"},
		{"1101", "Remington Side Skirt type 1 (R)"},
		{"1102", "Savanna Side Skirt (R)"},
		{"1103", "Blade Roof type 2"},
		{"1104", "Blade Exhaust type 1"},
		{"1105", "Blade Exhaust type 2"},
		{"1106", "Remington Side Skirt type 2 (L)"},
		{"1107", "Blade Side Skirt (R)"},
		{"1108", "Blade Side Skirt (L)"},
		{"1109", "Slamvan Rear Bullbars type 1"},
		{"1110", "Slamvan Rear Bullbars type 2"},
		{"1111", "Slamvan hood ornament 1 (not used)"},
		{"1112", "Slamvan hood ornament 2 (not used)"},
		{"1113", "Slamvan Exhaust type 1"},
		{"1114", "Slamvan Exhaust type 2"},
		{"1115", "Slamvan Front Bullbars type 1"},
		{"1116", "Slamvan Front Bullbars type 2"},
		{"1117", "Slamvan Front Bumper"},
		{"1118", "Slamvan Side Skirt type 1 (L)"},
		{"1119", "Slamvan Side Skirt type 2 (L)"},
		{"1120", "Slamvan Side Skirt type 1 (R)"},
		{"1121", "Slamvan Side Skirt type 2 (R)"},
		{"1122", "Remington Side Skirt type 1 (L)"},
		{"1123", "Remington Misc. Part 2"},
		{"1124", "Remington Side Skirt type 2 (R)"},
		{"1125", "Remington Misc. Part 3"},
		{"1126", "Remington Exhaust type 1"},
		{"1127", "Remington Exhaust type 2"},
		{"1128", "Blade Roof Type 1"},
		{"1129", "Savanna Exhaust type 1"},
		{"1130", "Savanna Roof type 1"},
		{"1131", "Savanna Roof type 2"},
		{"1132", "Savanna Exhaust type 2"},
		{"1133", "Savanna Side Skirt (L)"},
		{"1134", "Tornado Side Skirt (L)"},
		{"1135", "Tornado Exhaust type 2"},
		{"1136", "Tornado Exhaust type 1"},
		{"1137", "Tornado Side Skirt (R)"},
		{"1138", "Sultan Spoiler type 1"},
		{"1139", "Sultan Spoiler type 2"},
		{"1140", "Sultan Rear Bumper type 2"},
		{"1141", "Sultan Rear Bumper type 1"},
		{"1142", "Oval Bonnet Vents (R)"},
		{"1143", "Oval Bonnet Vents (L)"},
		{"1144", "Square Bonnet Vents (R)"},
		{"1145", "Square Bonnet Vents (L)"},
		{"1146", "Elegy Spoiler type 2"},
		{"1147", "Elegy Spoiler type 1"},
		{"1148", "Elegy Rear Bumper type 2"},
		{"1149", "Elegy Rear Bumper type 1"},
		{"1150", "Flash Rear Bumper type 1"},
		{"1151", "Flash Rear Bumper type 2"},
		{"1152", "Flash Front Bumper type 2"},
		{"1153", "Flash Front Bumper type 1"},
		{"1154", "Stratum Rear Bumper type 1"},
		{"1155", "Stratum Front Bumper type 1"},
		{"1156", "Stratum Rear Bumper type 2"},
		{"1157", "Stratum Front Bumper type 2"},
		{"1158", "Jester Spoiler type 2"},
		{"1159", "Jester Rear Bumper type 1"},
		{"1160", "Jester Front bumper type 1"},
		{"1161", "Jester Rear bumper type 2"},
		{"1162", "Jester Spoiler type 1"},
		{"1163", "Uranus Spoiler type 2"},
		{"1164", "Uranus Spoiler type 1"},
		{"1165", "Uranus Front Bumper type 2"},
		{"1166", "Uranus Rear Bumper type 2"},
		{"1167", "Uranus Front Bumper type 1"},
		{"1168", "Uranus Rear Bumper type 1"},
		{"1169", "Sultan Front Bumper type 1"},
		{"1170", "Sultan Front Bumper type 2"},
		{"1171", "Elegy Front Bumper type 1"},
		{"1172", "Elegy Front Bumper type 2"},
		{"1173", "Jester Front Bumper type 2"},
		{"1174", "Broadway Front Bumper type 1"},
		{"1175", "Broadway Front Bumper type 2"},
		{"1176", "Broadway Rear Bumper type 1"},
		{"1177", "Broadway Rear Bumper type 2"},
		{"1178", "Remington Rear Bumper type 2"},
		{"1179", "Remington Front Bumper type 1"},
		{"1180", "Remington Rear Bumper type 2"},
		{"1181", "Blade Front Bumper type 2"},
		{"1182", "Blade Front Bumper type 1"},
		{"1183", "Blade Rear Bumper type 2"},
		{"1184", "Blade Rear Bumper type 1"},
		{"1185", "Remington Front Bumper type 2"},
		{"1186", "Savanna Rear Bumper type 2"},
		{"1187", "Savanna Rear Bumper type 1"},
		{"1188", "Savanna Front Bumper type 2"},
		{"1189", "Savanna Front Bumper type 1"},
		{"1190", "Tornado Rear Bumper type 1"},
		{"1191", "Tornado Rear Bumper type 2"},
		{"1192", "Tornado Front Bumper type 1"},
		{"1193", "Tornado Front Bumper type 2"},
		{"1194", "Paintjob 0"},
		{"1195", "Paintjob 1"},
		{"1196", "Paintjob 2"}
	}
;
public OnVehicleMod(playerid, vehicleid, componentid){
	AKick(playerid, "Vehicle Tuning #1");
	return false;
}
public OnVehiclePaintjob(playerid, vehicleid, paintjobid){
	AKick(playerid, "Vehicle Tuning #2");
	return true;
}
function ExitClothing(playerid)
{
	for(new i; i < sizeof(ClothingStoreTD); i++)
	{
		TextDrawHideForPlayer(playerid, ClothingStoreTD[i]);
	}
	for(new i; i < sizeof(ClothingStorePTD); i++)
	{
		PlayerTextDrawHide(playerid, ClothingStorePTD[i]);
	}
	CancelSelectTextDraw(playerid);
	DeletePVar(playerid, "InClothing");
	SkinClothing[playerid] = 0;
	SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	FreezePlayer(playerid, false);
	SetPlayerPosEx(playerid, 161.5606, -83.2514, 1001.8047);
	SetPlayerVirtualWorld(playerid, InBiz[playerid]);
	return true;
}
function StartParkour(playerid)
{
	SetPlayerPosEx(playerid, 1442.4578, -1083.1255, 213.3828);
	SetPlayerFacingAngle(playerid, 180);
	FreezePlayer(playerid, true);
	defer UnfreezeTimer(playerid, PlayerInfo[playerid][pSession]);
	SetPlayerInterior(playerid, 0);
	return true;
}
timer StopCinematicTutorial[10000](playerid, session, type)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	if(PlayerInfo[playerid][pTutorial] != true)
		return true;

	switch(type)
	{
		case 1:
		{
			TutorialStep[playerid] ++;

			defer Spawn(playerid, PlayerInfo[playerid][pSession]);
		}
		case 2:
		{
			FreezePlayer(playerid, false);

			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Pentru moment, fa o tura din acest job.");
			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Apasa Y langa acesta pentru a lua job-ul.");
			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Dupa ce ai luat job-ul, apasa tasta Y pentru a munci.");
		}
		case 3:
		{
			FreezePlayer(playerid, false);

			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Apasa tasta Y pentru a incepe examenul de condus.");
		}
		case 4:
		{
			TutorialStep[playerid] = 0;

			FinishTutorial(playerid);
		}
	}

	return true;
}
public OnPlayerSpawn(playerid)
{
	if(!Logat[playerid])
	{
		defer KickEx(playerid, PlayerInfo[playerid][pSession]);
		return true;
	}

	SetPlayerDrunkLevel(playerid, 0);
	FreezePlayer(playerid, false);
	DisablePlayerCheckpoint(playerid);
	CP[playerid] = 0;
	targetfind[playerid] = -1;
	PlayerTextDrawHide(playerid, FindTXD);
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	tazer[playerid] = false;
	DeathPlayer[playerid] = false;
	SetPlayerHP(playerid, 100.0);
	SetPlayerArm(playerid, 0);
	SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
	for(new i; i < 11; i ++)
	{
		SetPlayerSkillLevel(playerid, i, 999);
	}
	SetPlayerTeam(playerid, NO_TEAM);
	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	if(InTextdrawMenu[playerid] == 9)
	{
		HideDice(playerid);
	}
	if(Iter_Contains(InStunt, playerid))
	{
		LeaveStunt(playerid);
	}
	if(InTextdrawMenu[playerid] == 3)
	{
		if(Iter_Contains(InCasinoSlots, playerid))
		{
			Iter_Remove(InCasinoSlots, playerid);
		}
		ExitSlots(playerid);
	}
	if(Iter_Contains(AtEvent, playerid))
	{
		Iter_Remove(AtEvent, playerid);
	}
	if(Iter_Contains(InSkyWars, playerid))
	{
		LeaveSkyWars(playerid);
		return true;
	}
	if(ExamVeh[playerid] != -1)
	{
		DestroyVehicleEx(ExamVeh[playerid]);
		ExamVeh[playerid] = -1;
	}
	if(InTextdrawMenu[playerid] == 7) HideDS(playerid);
	if(GetPVarInt(playerid, "InClothing")) ExitClothing(playerid);
	if(GetPVarInt(playerid, "InTelefon")) ClosePhone(playerid);
	if(JobVeh[playerid] != -1 || JobWorking[playerid] != false){
		DisablePlayerCheckpoint(playerid);
		CP[playerid] = 0;
		DestroyVehicleEx(JobVeh[playerid]);
		JobVeh[playerid] = -1;
		JobWorking[playerid] = false;
	}
	if(QuestVeh[playerid] != -1)
	{
		DestroyVehicleEx(QuestVeh[playerid]);
		QuestVeh[playerid] = -1;
	}
	if(pfVehicle[playerid] != -1) DestroyVehicleEx(pfVehicle[playerid]), Iter_Remove(fVehicles[PlayerInfo[playerid][pMember]], pfVehicle[playerid]), pfVehicle[playerid] = -1;
	if(pcVehicle[playerid] != -1) DestroyVehicleEx(pcVehicle[playerid]), Iter_Remove(cVehicles[PlayerInfo[playerid][pClan]], pcVehicle[playerid]), pcVehicle[playerid] = -1;
	if(escapedat[playerid] == 2) Info(playerid, "Escape failed."), escapedat[playerid] = 0;	
	if(PlayerInfo[playerid][pWantedLevel] >= 1)
	{
		PlayerTextDrawShow(playerid, WantedText);
		va_PlayerTextDrawSetString(playerid, WantedText, "WANTED SCADE IN: ~r~%d MINUTE",wantedlost[playerid]);
	}
	if(GetPVarInt(playerid, "animuri") < 1)
	{
		PreloadAnimLib(playerid,"BOMBER"); PreloadAnimLib(playerid,"RAPPING"); PreloadAnimLib(playerid,"SHOP");
		PreloadAnimLib(playerid,"BEACH"); PreloadAnimLib(playerid,"SMOKING"); PreloadAnimLib(playerid,"FOOD");
		PreloadAnimLib(playerid,"ON_LOOKERS"); PreloadAnimLib(playerid,"DEALER"); PreloadAnimLib(playerid,"MISC");
		PreloadAnimLib(playerid,"SWEET"); PreloadAnimLib(playerid,"RIOT"); PreloadAnimLib(playerid,"PED");
		PreloadAnimLib(playerid,"POLICE"); PreloadAnimLib(playerid,"CRACK"); PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT"); PreloadAnimLib(playerid,"PARK"); PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD"); PreloadAnimLib(playerid,"CHAINSAW"); PreloadAnimLib(playerid,"SPRAYCAN"); SetPVarInt(playerid, "animuri", 1);
	}
 	SetPlayerSpawn(playerid);
	if(!IsACop(playerid)) SetPlayerFactionColor(playerid);
	if(OnDuty[playerid] && PlayerInfo[playerid][pMember]){
		switch(PlayerInfo[playerid][pMember])
		{
			case 1:
			{
				new
					Skins[8] = {0, 71, 284, 281, 266, 283, 267, 267},
					Skin = Skins[PlayerInfo[playerid][pRank]]
				;
				SetPlayerSkin(playerid, Skin);
				GivePlayerWeapon(playerid, 24, 500);
				GivePlayerWeapon(playerid, 3, 1);
				GivePlayerWeapon(playerid, 41, 500);
				GivePlayerWeapon(playerid, 29, 1000);
				GivePlayerWeapon(playerid, 31, 1000);
				SetPlayerArm(playerid, 100);
			}
			case 2:
			{
				if(ServerWars)
				{
					PlayerTextDrawShow(playerid, WarPTD);
				}
				new
					Skins[8] = {0, 114, 114, 115, 115, 116, 292, 292},
					Skin = Skins[PlayerInfo[playerid][pRank]]
				;
				SetPlayerSkin(playerid, Skin);
			}
			case 3:
			{
				new
					Skins[8] = {0, 108, 109, 110, 110, 100, 292, 292},
					Skin = Skins[PlayerInfo[playerid][pRank]]
				;
				SetPlayerSkin(playerid, Skin);
			}
			case 4:
			{
				new
					Skins[8] = {0, 188, 188, 17, 187, 187, 147, 147},
					Skin = Skins[PlayerInfo[playerid][pRank]]
				;
				SetPlayerSkin(playerid, Skin);
			}
			case 5:
			{
				new
					Skins[8] = {0, 208, 186, 186, 294, 294, 294, 294},
					Skin = Skins[PlayerInfo[playerid][pRank]]
				;
				SetPlayerSkin(playerid, Skin);
			}
			case 6:
			{
				new
					Skins[8] = {0, 253, 253, 255, 255, 61, 228, 228},
					Skin = Skins[PlayerInfo[playerid][pRank]]
				;
				SetPlayerSkin(playerid, Skin);
			}
			case 7:
			{
				new
					Skins[8] = {0, 274, 274, 275, 275, 275, 276, 276},
					Skin = Skins[PlayerInfo[playerid][pRank]]
				;
				SetPlayerSkin(playerid, Skin);
			}
		}
	}
	if(PlayerInfo[playerid][pPet] && PlayerInfo[playerid][pPetStatus]) SetPlayerAttachedObject(playerid, 6, 19078, 1, 0.320722, -0.067912, -0.165151, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	if(UsingDrugs[playerid] != -1)
	{
		SetPlayerDrunkLevel(playerid, 0);
		UsingDrugs[playerid] = -1;
	}
	if(GiftObject[playerid] != 0)
	{
		DestroyPlayerObject(playerid, GiftObject[playerid]);
		GiftObject[playerid] = 0;
	}
	if(Iter_Contains(InParkour, playerid)){
		StartParkour(playerid);
		SetPlayerVirtualWorld(playerid, playerid + 1);
	}
	if(PlayerInfo[playerid][pTutorial])
	{
		ClearChat(playerid);

		SetPlayerVirtualWorld(playerid, playerid + 1);

		switch(TutorialStep[playerid])
		{
			case 0:
			{
				SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Bine ai venit pe OG-Life Romania!");
				SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Acum vei urma un tutorial pentru a-ti arata sistemele de pe server.");

				ResetPlayerCash(playerid);

				PlayerInfo[playerid][pRespect] = 0;
				pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pRespect]);

				PlayerInfo[playerid][pBasicCrate] = 0;
				pUpdateInt(playerid, "BasicCrate", PlayerInfo[playerid][pBasicCrate]);

				PlayerInfo[playerid][pVehLic] = 0;
				pUpdateInt(playerid, "CarLic", PlayerInfo[playerid][pVehLic]);

				PlayerInfo[playerid][pWTalkie] = false;
				pUpdateInt(playerid, "WTalkie", PlayerInfo[playerid][pWTalkie]);

				PlayerInfo[playerid][pPremiumPoints] = 0;
				pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);

				PlayerInfo[playerid][pBonus] = false;
				pUpdateInt(playerid, "Bonus", PlayerInfo[playerid][pBonus]);

				for(new i = 0; i < PlayerInfo[playerid][pVehSlots]; i++)
				{
					if(PlayerInfo[playerid][pVeh][i] != -1)
					{
						Query_Mysql("DELETE FROM `cars` WHERE `ID`='%d'", PlayerInfo[playerid][pVeh][i]);

						PlayerInfo[playerid][pVeh][i] = -1;

						DestroyNeon(PlayerInfo[playerid][pVehID][i]);
						DestroyVehicleEx(PlayerInfo[playerid][pVehID][i]);

						resetVehicle(playerid, i);
						LoadVehicle(playerid);
					}
				}

				InterpolateCameraPos(playerid, 1142.365722, -1052.819335, 188.920471, 1154.703369, -1735.546386, 32.680225, 10000);
				InterpolateCameraLookAt(playerid, 1142.509277, -1057.621948, 187.536743, 1154.690429, -1739.949340, 30.310853, 10000);

				defer StopCinematicTutorial(playerid, PlayerInfo[playerid][pSession], 1);
			}
			case 1:
			{
				SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Aici este locatia job-ului de Pescar.");
				SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Poti face mai multe job-uri pe server pentru a obtine bani.");
				SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Pentru a le descoperi foloseste comanda [/jobs].");

				SetPlayerPosEx(playerid, 723.1399, -1490.3462, 1.9343);
				SetPlayerFacingAngle(playerid, 180);

				FreezePlayer(playerid, true);

				defer StopCinematicTutorial[5000](playerid, PlayerInfo[playerid][pSession], 2);
			}
		}
	}
	return true;
}

stock CreateVehicleEx(model, Float: x, Float: y, Float: z, Float: angle, color1, color2, respawn, bool: siren = false, bool: lock = false, gas = 100)
{
	new
		vehicleid
	;

	vehicleid = CreateVehicle(model, x, y, z, angle, color1, color2, respawn, siren);

	LastColor1[vehicleid] = color1;
	LastColor2[vehicleid] = color2;

	if(IsABike(vehicleid))
	{
		VehicleEngine[vehicleid] = true;
	}

	else
	{
		VehicleEngine[vehicleid] = false;
	}

	SetVehicleParamsEx(vehicleid, VehicleEngine[vehicleid], 0, 0, lock, 0, 0, 0);
	VehicleLocked[vehicleid] = lock;
	Gas[vehicleid] = gas;
	DestroyNeon(vehicleid);

	LastVehicleHealth[vehicleid] = 1000.0;

	return vehicleid;
}
timer Mineaza[5000](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	SetPlayerCheckpointEx(playerid, 819.1484, 853.9564, 11.3880, 5);
	CP[playerid] = 324;
	JobVeh[playerid] = CreateVehicleEx(422, 646.9725, 949.5314, -34.8347, 269.7562, random(256), random(256), -1, false, true);
	PutPlayerInVehicleEx(playerid, JobVeh[playerid], 0);
	FreezePlayer(playerid, false);
	new rand = random(5);
	switch(rand){
		case 0: Info(playerid, "Ai gasit un minereu de Diamant, urmeaza checkpoint-ul pentru a-l vinde.");
		case 1: Info(playerid, "Ai gasit un minereu de Aur, urmeaza checkpoint-ul pentru a-l vinde.");
		case 2: Info(playerid, "Ai gasit un minereu de Argint, urmeaza checkpoint-ul pentru a-l vinde.");
		case 3: Info(playerid, "Ai gasit un minereu de Cupru, urmeaza checkpoint-ul pentru a-l vinde.");
		case 4: Info(playerid, "Ai gasit un minereu de Carbune, urmeaza checkpoint-ul pentru a-l vinde.");
	}
	SetPVarInt(playerid, "minereu", rand + 1);
	return true;
}
timer CuttingTree[5000](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	ProgressToBattlepass(playerid, 0, 1);

	ResetPlayerWeapons(playerid);

	ClearAnims(playerid);

	if(JobCheckpoint[playerid] + 1 < sizeof(LumberJackCps))
	{
		JobCheckpoint[playerid] ++;

		new
			ncp = JobCheckpoint[playerid]
		;

		SetPlayerCheckpointEx(playerid, LumberJackCps[ncp][0], LumberJackCps[ncp][1], LumberJackCps[ncp][2], 3);
	}
	else
	{
		SetPlayerCheckpointEx(playerid, JobInfo[7][jX], JobInfo[7][jY], JobInfo[7][jZ], 3);

		CP[playerid] ++;

		SendMsg(playerid, COLOR_SERVER, "Padurar >> {ffffff}Urmeaza punctul rosu pentru duce lemnele.");
	}

	return true;
}
new
	Float: WaiterCheckpoints[10][3] =
	{
		{2622.9092, 2403.7227, 17.8203},
		{2616.8118, 2397.6057, 17.8203},
		{2606.3835, 2401.9280, 17.8203},
		{2601.4377, 2389.7229, 17.8203},
		{2589.1650, 2379.2854, 17.8203},
		{2579.9341, 2366.2854, 17.8203},
		{2564.9050, 2376.4817, 17.8203},
		{2564.7961, 2365.6973, 17.8145},
		{2564.9656, 2343.5823, 17.8203},
		{2570.5764, 2336.4885, 17.8203}
	},
	Float: BusDriverCheckpoints[9][3] =
	{
		{2073.9521, -1094.7128, 24.9802},
		{2341.4189, -1156.7106, 27.1466},
		{2900.6152, -1385.3779, 11.0258},
		{2797.6621, -1654.5911, 10.8467},
		{2459.6921, -1730.0201, 13.5764},
		{2118.0271, -1749.5311, 13.5594},
		{2074.6201, -1350.4470, 23.9749},
		{2246.9167, -1303.5868, 23.9964},
		{2194.6580, -1217.9264, 23.9585}
	}
;
timer UnfreezeFarmer[10000](playerid, session, type)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	switch(type)
	{
		case 1:
		{	
			for(new i = 0; i < sizeof(GrauFarmerObjects); i++)
			{
				FarmerObjects[playerid][i] = CreatePlayerObject(playerid, 806, GrauFarmerObjects[i][0], GrauFarmerObjects[i][1], GrauFarmerObjects[i][2], 0, 0, 0);
			}

			FreezePlayer(playerid, false);

			CP[playerid] = 375;
			FarmerCheckpoint[playerid] = 0;
			SetPlayerCheckpointEx(playerid, GrauFarmerObjects[0][0], GrauFarmerObjects[0][1], GrauFarmerObjects[0][2] - 2, 2);

			SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Urmeaza punctele rosii pentru a culege graul.");
		}
		case 2:
		{
			ClearAnims(playerid);
			if(FarmerCheckpoint[playerid] < 9)
			{
				FarmerCheckpoint[playerid] ++;
				new
					fcp = FarmerCheckpoint[playerid]
				;
				SetPlayerCheckpointEx(playerid, MereFarmer[fcp][0], MereFarmer[fcp][1], MereFarmer[fcp][2], 2);
			}
			else
			{
				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;
				SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Mergi la un Non-Stop pentru a vinde merele.");
				FarmerApples[playerid] = true;
			}
		}
		case 3:
		{
			ClearAnims(playerid);
			if(FarmerCheckpoint[playerid] < 4)
			{
				FarmerCheckpoint[playerid] ++;
				new
					fcp = FarmerCheckpoint[playerid]
				;
				SetPlayerCheckpointEx(playerid, VaciFarmer[fcp][0], VaciFarmer[fcp][1], VaciFarmer[fcp][2], 2);
			}
			else
			{
				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;
				SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Mergi la un Non-Stop pentru a vinde laptele.");
				FarmerMilk[playerid] = true;
			}
		}
	}
	return true;
}
timer UnfreezeDDealer[2000](playerid, session, type)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	switch(type)
	{
		case 1:
		{
			ClearAnims(playerid);

			DDActualCP[playerid] ++;

			new
				step = DDActualCP[playerid],
				pstep = step - 1
			;

			if(DDActualCP[playerid] < 10)
			{
				SetPlayerCheckpointEx(playerid, WeedTaskCPs[step][0], WeedTaskCPs[step][1], WeedTaskCPs[step][2], 2);
			}

			else
			{
				DDActualCP[playerid] = 0;
				SetPlayerCheckpointEx(playerid, WeedTaskCPs[0][0], WeedTaskCPs[0][1], WeedTaskCPs[0][2], 2);
				CP[playerid] = 380;
				SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Urmeaza punctele rosii pentru a culege.");
			}

			DDealerObjects[playerid][pstep] = CreatePlayerObject(playerid, 702, WeedTaskCPs[pstep][0], WeedTaskCPs[pstep][1], WeedTaskCPs[pstep][2], 0, 0, 0);
		}
		case 2:
		{
			ClearAnims(playerid);

			DDActualCP[playerid] ++;

			new
				step = DDActualCP[playerid],
				pstep = step - 1
			;

			if(DDActualCP[playerid] < 10)
			{
				SetPlayerCheckpointEx(playerid, WeedTaskCPs[step][0], WeedTaskCPs[step][1], WeedTaskCPs[step][2], 2);
			}

			else
			{
				new
					Amount = 10,
					BonusDrugs
				;

				SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Ai terminat munca si ai primit %dx Weed.", Amount);

				TureDrugToday[playerid] ++;

				if(PerkActive[playerid][36])
				{
					if(TureDrugToday[playerid] > 20)
					{
						BonusDrugs = floatround(0.5 * Amount);
						SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit %dx Cocaine in plus.(50%) #36", BonusDrugs);
					}
				}
				else if(PerkActive[playerid][35])
				{
					if(TureDrugToday[playerid] > 20)
					{
						BonusDrugs = floatround(0.3 * Amount);
						SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit %dx Cocaine in plus.(30%) #35", BonusDrugs);
					}
				}

				DDActualCP[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;
				PlayerInfo[playerid][pDrugs][0] += Amount + BonusDrugs;
			}

			DestroyPlayerObject(playerid, DDealerObjects[playerid][pstep]);
			DDealerObjects[playerid][pstep] = 0;
		}
		case 3:
		{
			new
				amount = MethAmouth[playerid],
				price = amount * 200_000
			;

			FreezePlayer(playerid, false);

			if(GetPlayerCash(playerid) < price)
				return SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Nu ai $%s.", FormatNumber(amount));

			GivePlayerCash(playerid, - price);
			GiveJobBalance(3, price);
			PlayerInfo[playerid][pDrugs][1] += amount;

			SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Ai cumparat %dx Meth pentru $%s.", amount, FormatNumber(price));
		}
		case 4:
		{
			ClearAnims(playerid);

			DDActualCP[playerid] ++;

			new
				step = DDActualCP[playerid]
			;

			if(DDActualCP[playerid] < 10)
			{
				SetPlayerCheckpointEx(playerid, CocaTaskCPs[step][0], CocaTaskCPs[step][1], CocaTaskCPs[step][2], 3);
			}

			else
			{
				DDActualCP[playerid] = 0;
				SetPlayerCheckpointEx(playerid, -995.1561, -721.6647, 35.9375, 2);
				CP[playerid] = 384;
				SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Urmeaza punctul rosu pentru a prelucra frunzele.");
			}
		}
		case 5:
		{
			new
				Amount = 10,
				BonusDrugs
			;

			SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Ai primit %dx Cocaine.", Amount);

			TureDrugToday[playerid] ++;

			if(PerkActive[playerid][36])
			{
				if(TureDrugToday[playerid] > 20)
				{
					BonusDrugs = floatround(0.5 * Amount);
					SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit %dx Cocaine in plus.(50%) #36", BonusDrugs);
				}
			}
			else if(PerkActive[playerid][35])
			{
				if(TureDrugToday[playerid] > 20)
				{
					BonusDrugs = floatround(0.3 * Amount);
					SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit %dx Cocaine in plus.(30%) #35", BonusDrugs);
				}
			}

			FreezePlayer(playerid, false);

			PlayerInfo[playerid][pDrugs][2] += Amount + BonusDrugs;
		}
	}

	return true;
}

timer UnfreezeBoat[10000](playerid, session, type)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	FreezePlayer(playerid, false);

	switch(type)
	{
		case 1:
		{
			CP[playerid] = 472;

			SetPlayerCheckpointEx(playerid, -1431.5016, 1474.9261, 0.0008, 7.5);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Urmeaza punctul rosu pentru a descarca marfa.");
		}
		case 2:
		{
			DestroyVehicleEx(QuestVeh[playerid]);
			QuestVeh[playerid] = -1;

			SetPlayerVirtualWorld(playerid, 0);

			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;

			SetPlayerPosEx(playerid, -2329.8765, 2291.7737, 3.5000);

			new
				RandMoney = 7_000_000 + random(3_000_000),
				RandRP = 3 + random(2)
			;

			GivePlayerCash(playerid, RandMoney);
			GivePlayerRP(playerid, RandRP);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai terminat quest-ul zilnic '%s'.", DailyQuestsName[TodayDailyQuest - 1]);
			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai primit $%s si %dRP.", FormatNumber(RandMoney), RandRP);

			PlayerInfo[playerid][pDailyQuestToday] = true;
			pUpdateInt(playerid, "DailyQuestToday", PlayerInfo[playerid][pDailyQuestToday]);
		}
	}

	return true;
}

timer JafPortCamera[10000](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	SetCameraBehindPlayer(playerid);

	SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Sparge cele 3 containere pentru a lua banii din ele.");

	FreezePlayer(playerid, false);

	CP[playerid] ++;
	SetPlayerCheckpointEx(playerid, 2676.2134, -2227.6963, 13.5469, 3);

	SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Urmeaza punctele rosii pentru a detona containerele.");

	return true;
}

timer PlantBomb[5000](playerid, session, type)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	ClearAnims(playerid);

	CP[playerid] ++;

	switch(type)
	{
		case 1:
		{
			SetPlayerCheckpointEx(playerid, 2664.2991, -2230.9067, 13.5469, 3);
		}
		case 2:
		{
			SetPlayerCheckpointEx(playerid, 2708.6428, -2230.7620, 13.5469, 3);
		}
		case 3:
		{
			SetPlayerCheckpointEx(playerid, 2736.0505, -2247.6855, 13.5469, 3);
		}
	}

	SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Urmeaza punctul rosu pentru a actiona bomba.");

	return true;
}

timer RepairContructor[5000](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	ClearAnims(playerid);

	new
		rand = 30_000 + random(10_000)
	;

	GiveJobMoney(playerid, rand);
	
	Info(playerid, "Ai primit $%s pentru munca depusa.", FormatNumber(rand));

	if(Iter_Count(PossibleContructor[playerid]))
	{
		new
			rand2 = Iter_Random(PossibleContructor[playerid])
		;

		Iter_Remove(PossibleContructor[playerid], rand2);

		SetPlayerCheckpointEx(playerid, RandomContructor[rand2][0], RandomContructor[rand2][1], RandomContructor[rand2][2], 3);

		Info(playerid, "Urmeaza punctul rosu pentru a repara o locuinta.");
	}
	else
	{
		if(Iter_Count(PossibleContructor[playerid]))
		{
			Iter_Clear(PossibleContructor[playerid]);
		}

		for(new i = 0; i < sizeof(RandomContructor); i++)
		{
			Iter_Add(PossibleContructor[playerid], i);
		}

		SetPlayerCheckpointEx(playerid, 2704.6587, 894.7921, 10.1647, 3);
		CP[playerid] = 503;
		Info(playerid, "Urmeaza punctul rosu pentru a lua materialele.");
	}

	return true;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid, 100, PlayerPosii[playerid][0], PlayerPosii[playerid][1], PlayerPosii[playerid][2]))
	{
		SetPVarInt(playerid, "tps", GetPVarInt(playerid, "tps") + 1);
		if(GetPVarInt(playerid, "tps") >= 2) return AKick(playerid, "checkpoint teleport");
	}

	new
		rand
	;

	if(UberAccepted[playerid] != -1)
	{
		Info(playerid, "Ai ajuns la destinatie.");
		UberAccepted[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
		targetfind[playerid] = -1;
		PlayerTextDrawHide(playerid, FindTXD);
	} 
	if(ParamedicAccepted[playerid] != -1)
	{
		Info(playerid, "Ai ajuns la destinatie.");
		ParamedicAccepted[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
		targetfind[playerid] = -1;
		PlayerTextDrawHide(playerid, FindTXD);
	}
	if(GlovoAccepted[playerid] != -1)
	{
		Info(playerid, "Ai ajuns la destinatie.");
		GlovoAccepted[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
		targetfind[playerid] = -1;
		PlayerTextDrawHide(playerid, FindTXD);
	}
	switch(CP[playerid])
	{
		case 43:
		{
			CP[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			Info(playerid, "Ai ajuns la destinatie.");
		}
		case 44:
		{
			CP[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			Info(playerid, "Ai ajuns la destinatie.");
		}
		case 46: SetPlayerCheckpointEx(playerid, 321.8116, -1620.7821, 33.0104, 4.0), CP[playerid] ++;
		case 47: SetPlayerCheckpointEx(playerid, 240.1128, -1583.9192, 32.8902, 4.0), CP[playerid] ++;
		case 48: SetPlayerCheckpointEx(playerid, 287.6829, -1500.7451, 32.4795, 4.0), CP[playerid] ++;
		case 49: SetPlayerCheckpointEx(playerid, 380.5367, -1421.1948, 33.9699, 4.0), CP[playerid] ++;
		case 50: SetPlayerCheckpointEx(playerid, 492.5936, -1353.9841, 16.5663, 4.0), CP[playerid] ++;
		case 51: SetPlayerCheckpointEx(playerid, 608.6411, -1322.5270, 13.4244, 4.0), CP[playerid] ++;
		case 52: SetPlayerCheckpointEx(playerid, 625.1283, -1380.7775, 13.3747, 4.0), CP[playerid] ++;
		case 53: SetPlayerCheckpointEx(playerid, 541.4894, -1404.4932, 15.3743, 4.0), CP[playerid] ++;
		case 54: SetPlayerCheckpointEx(playerid, 345.7706, -1525.0887, 33.0861, 4.0), CP[playerid] ++;
		case 55: {
			if(!IsPlayerInVehicle(playerid, ExamVeh[playerid])) return Info(playerid, "Nu esti in vehiculul de Examen.");
			DestroyVehicleEx(ExamVeh[playerid]);
			ExamVeh[playerid] = -1;
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
			PlayerInfo[playerid][pVehLic] = 25;
			pUpdateInt(playerid, "CarLic", PlayerInfo[playerid][pVehLic]);
			ProgressToBattlepass(playerid, 7, 1);
			Info(playerid, "Ai trecut Examenul auto.");
			if(PlayerInfo[playerid][pTutorial] != true)
			{
				SetPlayerVirtualWorld(playerid, 0);
			}
			else
			{
				new
					Float: x,
					Float: y,
					Float: z,
					Float: a
				;

				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, a);

				RentVeh[playerid] = CreateVehicleEx(510, x, y, z, a, 0, 0, -1, false, true);
				SetVehicleVirtualWorld(RentVeh[playerid], GetPlayerVirtualWorld(playerid));
				PutPlayerInVehicleEx(playerid, RentVeh[playerid], 0);

				SetPlayerCheckpointEx(playerid, LocationPos[MAX_LOCATIONS - 1][0], LocationPos[MAX_LOCATIONS - 1][1], LocationPos[MAX_LOCATIONS - 1][2], 3);
				CP[playerid] = 502;

				SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Urmeaza punctul rosu pentru a lua bonusul de inceput.");
			}
		}
		case 108: {
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Info(playerid, "Trebuie sa fi soferul vehicului.");
			CP[playerid] ++;
			Info(playerid, "Urmeaza checkpoint-ul pentru a descarca marfa.");
			SetPlayerCheckpointEx(playerid, JobInfo[2][jX], JobInfo[2][jY], JobInfo[2][jZ], 2);
		}
		case 109: {
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Info(playerid, "Trebuie sa fi soferul vehicului.");
			Info(playerid, "Urmeaza checkpoint-ul pentru a incarca marfa.");
			rand = 10_000 + random(5_000);
			GiveJobMoney(playerid, rand);
			Info(playerid, "Ai primit $%s pentru munca depusa.", FormatNumber(rand));
			new randcp = random(sizeof(RandomForklift));
			SetPlayerCheckpointEx(playerid, RandomForklift[randcp][0], RandomForklift[randcp][1], RandomForklift[randcp][2], 2);
			CP[playerid] = 108;
		}
		case 300: {
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Info(playerid, "Trebuie sa fi soferul vehicului.");
			if(!CheckPlayerDistanceToVehicle(50, playerid, JobVeh[playerid]) && GetPVarInt(playerid, "AreWorking") != GetPlayerVehicleID(playerid)) return Info(playerid, "Nu esti langa vehiculul de job.");
			CP[playerid] ++;
			Info(playerid, "Urmeaza checkpoint-ul pentru a prelucra petrolul.");
			SetPlayerCheckpointEx(playerid, 248.5506, 1418.2223, 10.5447, 5);	
		}
		case 301: {
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Info(playerid, "Trebuie sa fi soferul vehicului.");
			if(!CheckPlayerDistanceToVehicle(50, playerid, JobVeh[playerid]) && GetPVarInt(playerid, "AreWorking") != GetPlayerVehicleID(playerid)) return Info(playerid, "Nu esti langa vehiculul de job.");
			CP[playerid] ++;
			Info(playerid, "Urmeaza checkpoint-ul pentru a transporta petrolul prelucrat.");
			SetPlayerCheckpointEx(playerid, 569.7424, 1218.7247, 11.7188, 5);	
		}
		case 302: {
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Info(playerid, "Trebuie sa fi soferul vehicului.");
			if(!CheckPlayerDistanceToVehicle(50, playerid, JobVeh[playerid]) && GetPVarInt(playerid, "AreWorking") != GetPlayerVehicleID(playerid)) return Info(playerid, "Nu esti langa vehiculul de job.");
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
			rand = 60000 + random(5000);
			GiveJobMoney(playerid, rand);
			Info(playerid, "Ai primit $%s pentru munca depusa.", FormatNumber(rand));
			Info(playerid, "Urmeaza checkpoint-ul pentru a incarca petrolul.");
			SetPlayerCheckpointEx(playerid, 555.2475, 1302.6099, 10.5306, 5);
			CP[playerid] = 300;
		}
		case 303: {
			if(!CheckPlayerDistanceToVehicle(50, playerid, JobVeh[playerid]) && GetPVarInt(playerid, "AreWorking") != GetPlayerVehicleID(playerid)) return Info(playerid, "Nu esti langa vehiculul de job.");
			punecppizza(playerid);
			rand = 40000 + random(10000);
			GiveJobMoney(playerid, rand);
			ProgressToTask(playerid, 5, 1);
			Info(playerid, "Ai primit $%s pentru munca depusa.", FormatNumber(rand));
			ProgressToPerkMissions(playerid, 1, 1);
		}
		case 304: {
			defer Mineaza(playerid, PlayerInfo[playerid][pSession]);
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
			FreezePlayer(playerid, true);
			ApplyAnimation(playerid, "CHAINSAW", "CSAW_1", 4.1, 1, 1, 1, 1, 1, 1); 
		}
		case 305:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return Info(playerid, "Trebuie sa fi soferul vehicului.");

			if(!IsPlayerInVehicle(playerid, JobVeh[playerid]) && GetPVarInt(playerid, "AreWorking") != GetPlayerVehicleID(playerid))
				return Info(playerid, "Nu esti in vehiculul de job.");

			JobCheckpoint[playerid] ++;

			new
				CPs = JobCheckpoint[playerid]
			;

			if(CPs >= sizeof(BusDriverCheckpoints) - 1)
			{
				JobCheckpoint[playerid] = -1;
			}
			if(CPs == sizeof(BusDriverCheckpoints))
			{
				rand = 40_000 + random(5_000);
				GiveJobMoney(playerid, rand);
				Info(playerid, "Ai primit $%s pentru munca depusa.", FormatNumber(rand));
			}
			
			SendMsg(playerid, COLOR_SERVER, "Job >> {ffffff}Checkpoint %d / %d.", CPs, sizeof(BusDriverCheckpoints));
			SetPlayerCheckpointEx(playerid, BusDriverCheckpoints[CPs][0], BusDriverCheckpoints[CPs][1], BusDriverCheckpoints[CPs][2], 5);
		}
		case 315: {
			if(GetPVarInt(playerid, "AreWorking") != GetPlayerVehicleID(playerid) && !CheckPlayerDistanceToVehicle(50, playerid, JobVeh[playerid])) return Info(playerid, "Nu esti langa vehiculul de job.");
			if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Trebuie sa te dai jos din vehicul.");
			if(!GetPVarInt(playerid, "AreWorking")){
				new Float:vehx, Float:vehy, Float:vehz;
				GetVehiclePos(JobVeh[playerid], vehx, vehy, vehz);
				if(GetDistanceBetweenPoints(PlayerPosii[playerid][0], PlayerPosii[playerid][1], PlayerPosii[playerid][2], vehx, vehy, vehz) > 50)
					return Info(playerid, "Esti prea departe de vehiculul de job.");
			}
			punecpfireman(playerid);
			FreezePlayer(playerid, true);
			defer UnfreezeTimer(playerid, PlayerInfo[playerid][pSession]);
			rand = 50000 + random(10000);
			GiveJobMoney(playerid, rand);
			Info(playerid, "Ai primit $%s pentru munca depusa.", FormatNumber(rand));
		}
		case 324: {
			if(IsPlayerInVehicle(playerid, JobVeh[playerid]))
			switch(GetPVarInt(playerid, "minereu")){
				case 1: rand = 100000, Info(playerid, "Ai vandut minereul de Diamant, si ai primit $%s", FormatNumber(rand));
				case 2: rand = 90000, Info(playerid, "Ai vandut minereul de Aur, si ai primit $%s", FormatNumber(rand));
				case 3: rand = 80000, Info(playerid, "Ai vandut minereul de Argint, si ai primit $%s", FormatNumber(rand));
				case 4: rand = 70000, Info(playerid, "Ai vandut minereul de Cupru, si ai primit $%s", FormatNumber(rand));
				case 5: rand = 60000, Info(playerid, "Ai vandut minereul de Carbune, si ai primit $%s", FormatNumber(rand));
			}
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
			GiveJobMoney(playerid, rand);
		}
		case 325: {
			if(!IsPlayerInVehicle(playerid, JobVeh[playerid]) && GetPVarInt(playerid, "sciema")) return Info(playerid, "Nu esti in vehiculul de job.");
			new suma = 20 * floatround(KmTrucker[playerid]);
			rand = suma + random(10_000);
			Info(playerid, "Ai primit $%s pentru cursa aceasta.", FormatNumber(rand));
			Info(playerid, "Urmeaza checkpoint-ul pentru a alege o alta cursa.");
			CP[playerid] = 325;
			ShowTrucker(playerid);
			GiveJobMoney(playerid, rand);
			ProgressToPerkMissions(playerid, 2, 1);
			if(PerkActive[playerid][9])
			{
				new
					rand2 = random(100)
				;

				switch(rand2)
				{
					case 0..5:
					{
						GivePlayerPP(playerid, 1);

						SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit un punct premium. #9");
					}
				}
			}
			if(PerkActive[playerid][10])
			{
				if(CursaLungaTrucker[playerid])
				{
					GivePlayerCash(playerid, 30_000);

					SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit $30,000 in plus. #10");

					new
						rand2 = random(100)
					;

					switch(rand2)
					{
						case 0..10:
						{
							GivePlayerRP(playerid, 1);

							SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit un punct de respect. #10");
						}
					}
				}
			}
		}
		case 329: {
			if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Trebuie sa te dai jos din vehicul.");
			new atm = random(sizeof(gAtms));
			SetPlayerCheckpointEx(playerid, gAtms[atm][0], gAtms[atm][1], gAtms[atm][2], 3);
			CP[playerid] = 330;
			Info(playerid, "Urmeaza checkpoint-ul pentru a exploda ATM-ul.");
		}
		case 330: {
			if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Trebuie sa te dai jos din vehicul.");
			rand = random(sizeof(Cuvinte));
			RandomWord[playerid] = rand;
			gString[0] = (EOS);
			format(gString, sizeof(gString), "Ordoneaza literele '%s' pentru a forma un cuvant:", Cuvinte[rand][0]);
			SPD(playerid, DIALOG_ATMBLOWER, DIALOG_STYLE_INPUT, "Cuvant" , gString, "Inainte", "Anuleaza");
		}
		case 331: Info(playerid, "Intra in afacere, si apoi du-te la casierie");
		case 332: {
			new Float: vx, Float: vy, Float: vz;
			GetVehiclePos(QuestVeh[playerid], vx, vy, vz);
			SetPlayerCheckpointEx(playerid, vx, vy, vz, 5);
			CP[playerid] = 333;
			Info(playerid, "Intoarce-te la vehicul.");
		}
		case 333: Info(playerid, "Intra in afacere, si apoi du-te la casierie");
		case 334: {
			new Float: vx, Float: vy, Float: vz;
			GetVehiclePos(QuestVeh[playerid], vx, vy, vz);
			SetPlayerCheckpointEx(playerid, vx, vy, vz, 5);
			CP[playerid] = 335;
			Info(playerid, "Intoarce-te la vehicul.");
		}
		case 335: {
			PutPlayerInVehicleEx(playerid, QuestVeh[playerid], 0);
			SetPlayerCheckpointEx(playerid, LocationPos[10][0], LocationPos[10][1], LocationPos[10][2], 5);
			CP[playerid] = 336;
			if(HavePremium(playerid)) PlayerInfo[playerid][pRob] -= 8, pUpdateInt(playerid, "Rob", PlayerInfo[playerid][pRob]);
			else PlayerInfo[playerid][pRob] -= 10, pUpdateInt(playerid, "Rob", PlayerInfo[playerid][pRob]);
			WantedPoints[playerid] = 12;
			SetPlayerCriminal(playerid, -1, "robbery");
			Info(playerid, "Pentru a primii banii, urmeaza checkpoint-ul.");
		}
		case 336: {
			if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Trebuie sa te dai jos din vehicul.");
			DestroyVehicleEx(QuestVeh[playerid]);
			QuestVeh[playerid] = -1;
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
			rand = randEx(1000000, 2000000);
			GivePlayerCash(playerid, rand);
			GiveGoal(rand);
			Info(playerid, "Ai terminat cu succes jaful, si ai primit $%s.", FormatNumber(rand));
			ProgressToBattlepass(playerid, 3, 1);
			PlayerInfo[playerid][pHeists][0] = true;
		}
		case 348:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Job >> {ffffff}Trebuie sa te dai jos din vehicul.");

			GivePlayerWeapon(playerid, 9, 1);

			OnePlayAnim(playerid, "CHAINSAW", "CSAW_1", 4.0, 1, 0, 0, 0, 0);

			defer CuttingTree(playerid, PlayerInfo[playerid][pSession]);

			SendMsg(playerid, COLOR_SERVER, "Padurar >> {ffffff}Ai inceput sa tai acest copac...");
		}
		case 349:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Job >> {ffffff}Trebuie sa te dai jos din vehicul.");

			JobVeh[playerid] = CreateVehicleEx(422, 2396.4329, -665.4066, 127.9999, 0, random(256), random(256), -1, false, true);
			PutPlayerInVehicleEx(playerid, JobVeh[playerid], 0);

			CP[playerid] ++;
			SetPlayerCheckpointEx(playerid, 2269.7966, -75.1297, 26.7724, 3);

			SendMsg(playerid, COLOR_SERVER, "Padurar >> {ffffff}Urmeaza punctul rosu pentru a vinde lemnele.");
		}
		case 350:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Job >> {ffffff}Trebuie sa te dai jos din vehicul.");

			rand = 70_000 + random(10_000);
			GiveJobMoney(playerid, rand); 
			SendMsg(playerid, COLOR_SERVER, "Padurar >> {ffffff}Ai primit $%s pentru lemnele aduse.", FormatNumber(rand));

			SetPlayerCheckpointEx(playerid, JobInfo[7][jX], JobInfo[7][jY], JobInfo[7][jZ], 3);

			CP[playerid] ++;

			SendMsg(playerid, COLOR_SERVER, "Padurar >> {ffffff}Urmeaza punctul rosu pentru te intoarce.");
		}
		case 351:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Job >> {ffffff}Trebuie sa te dai jos din vehicul.");

			DestroyVehicleEx(JobVeh[playerid]);
			JobVeh[playerid] = -1;

			SetPlayerCheckpointEx(playerid, LumberJackCps[0][0], LumberJackCps[0][1], LumberJackCps[0][2], 3);
			CP[playerid] = 348;

			JobCheckpoint[playerid] = 0;

			SendMsg(playerid, COLOR_SERVER, "Padurar >> {ffffff}Urmeaza punctele rosii pentru a taia copacii.");
		}
		case 353:
		{
			SetPlayerCheckpointEx(playerid, 365.0003, -11.8427, 1001.8516, 3.0);
			Info(playerid, "Urmeaza checkpoint-ul pentru a iesi pe terasa.");
			CP[playerid] ++;
		}
		case 354:
		{
			new
				Served = JobCheckpoint[playerid]
			;
			SetPlayerInterior(playerid, 0);
			SetPlayerPosEx(playerid, JobInfo[16][jX], JobInfo[16][jY], JobInfo[16][jZ]);
			Info(playerid, "Urmeaza checkpoint-ul pentru a servi clientii.");
			SetPlayerCheckpointEx(playerid, WaiterCheckpoints[Served][0], WaiterCheckpoints[Served][1], WaiterCheckpoints[Served][2], 3.0);
			CP[playerid] ++;
			JobCheckpoint[playerid] ++;
		}
		case 355:
		{
			new
				Served = JobCheckpoint[playerid]
			;
			SetPlayerCheckpointEx(playerid, WaiterCheckpoints[Served][0], WaiterCheckpoints[Served][1], WaiterCheckpoints[Served][2], 3.0);
			CP[playerid] ++;
			JobCheckpoint[playerid] ++;
		}
		case 356:
		{
			SetPlayerCheckpointEx(playerid, JobInfo[16][jX], JobInfo[16][jY], JobInfo[16][jZ], 3.0);
			CP[playerid] ++;
			new
				Served = JobCheckpoint[playerid]
			;
			if(Served < sizeof(WaiterCheckpoints) - 1)
			{
				Info(playerid, "Urmeaza checkpoint-ul pentru a intra in bucatarie.");
			}
			else
			{
				Info(playerid, "Urmeaza checkpoint-ul pentru a termina munca.");
			}
		}
		case 357:
		{
			new
				Served = JobCheckpoint[playerid]
			;
			if(Served < sizeof(WaiterCheckpoints) - 1)
			{
				SetPlayerPosEx(playerid, 365.0003, -11.8427, 1001.8516);
				SetPlayerInterior(playerid, 9);
				SetPlayerCheckpointEx(playerid, 371.6427, -6.0166, 1001.8589, 3.0);
				CP[playerid] = 353;
				Info(playerid, "Urmeaza checkpoint-ul pentru a ridica mancarea.");
			}
			else
			{
				rand = 60_000 + random(10_000);
				GiveJobMoney(playerid, rand);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				Info(playerid, "Ai primit $%s pentru munca prestata.", FormatNumber(rand));
				JobWorking[playerid] = false;
				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;
			}
		}
		case 358..362:
		{
			if(CP[playerid] < 362)
			{
				CP[playerid] ++;
				SetPlayerCheckpointEx(playerid, BoatCP[CP[playerid] - 358][0], BoatCP[CP[playerid] - 358][1], BoatCP[CP[playerid] - 358][2], 5);
			}
			else
			{
				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;
				DestroyVehicleEx(ExamVeh[playerid]);
				ExamVeh[playerid] = -1;
				SendMsg(playerid, COLOR_SERVER, "Licenta de navigatie >> {ffffff}Felicitari, ai obtinut licenta de navigatie.");
				PlayerInfo[playerid][pBoatLic] = 25;
				pUpdateInt(playerid, "BoatLic", PlayerInfo[playerid][pBoatLic]);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPosEx(playerid, LocationPos[12][0], LocationPos[12][1], LocationPos[12][2]);
				ProgressToBattlepass(playerid, 7, 1);
			}
		}
		case 368..369:
		{
			if(CP[playerid] < 369)
			{
				CP[playerid] ++;
				SetPlayerCheckpointEx(playerid, FlyCP[CP[playerid] - 368][0], FlyCP[CP[playerid] - 368][1], FlyCP[CP[playerid] - 368][2], 5);
			}
			else
			{
				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;
				DestroyVehicleEx(ExamVeh[playerid]);
				ExamVeh[playerid] = -1;
				SendMsg(playerid, COLOR_SERVER, "Licenta de aviatie >> {ffffff}Felicitari, ai obtinut licenta de aviatie.");
				PlayerInfo[playerid][pFlyLic] = 25;
				pUpdateInt(playerid, "FlyLic", PlayerInfo[playerid][pFlyLic]);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPosEx(playerid, LocationPos[13][0], LocationPos[13][1], LocationPos[13][2]);
				ProgressToBattlepass(playerid, 7, 1);
			}
		}
		case 370:
		{
			if(PlayerInfo[playerid][pGunLic] < 1) return SendMsg(playerid, COLOR_SERVER, "Giftbox >> {ffffff}Ai nevoie de licenta de arme.");
			GivePlayerWeapon(playerid, 31, 60);
			CP[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			SendMsg(playerid, COLOR_SERVER, "Giftbox >> {ffffff}Trebuie sa tragi 30 de gloante in cadou pentru a-l colecta.");
		}
		case 371:
		{
			if(GetPlayerVehicleID(playerid) != StuntVehicle[playerid]) return SendMsg(playerid, COLOR_SERVER, "Stunt >> {ffffff}Trebuie sa fi in vehiculul de stunt.");
			LeaveStunt(playerid);
			PlayerInfo[playerid][pDailyStunt] = true;
			pUpdateInt(playerid, "DailyStunt", PlayerInfo[playerid][pDailyStunt]);
			rand = 10_000_000 + random(5_000_000);
			GivePlayerCash(playerid, rand);
			GiveGoal(rand);
			GivePlayerPP(playerid, 2);
			GivePlayerRP(playerid, 3);
			GivePlayerOG(playerid, 50);
			GivePlayerGift(playerid, 200);
			SendMsg(playerid, COLOR_SERVER, "Stunt >> {ffffff}Ai primit $%s, 2PP, 3RP, 50 OGPoints si 200 GiftPoints.", FormatNumber(rand));
			va_SendClientMessageToAll(COLOR_SERVER, "Stunt >> %s a terminat Stunt-ul si a fost recompensat.", GetName(playerid));
		}
		case 372:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Nu te poti afla intr-un vehicul.");

			if(FarmerCheckpoint[playerid] < 19)
			{
				FarmerCheckpoint[playerid] ++;
				new
					fcp = FarmerCheckpoint[playerid]
				;
				SetPlayerCheckpointEx(playerid, GrauFarmerObjects[fcp][0], GrauFarmerObjects[fcp][1], GrauFarmerObjects[fcp][2] - 2, 2);
			}
			else
			{
				SetPlayerCheckpointEx(playerid, 1931.8022, 147.6382, 37.2813, 2);
				CP[playerid] = 373;
				SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Urmeaza punctul rosu pentru a lua o galeata.");
			}
		}
		case 373:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Nu te poti afla intr-un vehicul.");

			FarmerCheckpoint[playerid] = 0;
			SetPlayerCheckpointEx(playerid, GrauFarmerObjects[0][0], GrauFarmerObjects[0][1], GrauFarmerObjects[0][2] - 2, 2);
			CP[playerid] = 374;
			SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Urmeaza punctele rosii pentru a uda graul.");
		}
		case 374:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Nu te poti afla intr-un vehicul.");

			if(FarmerCheckpoint[playerid] < 19)
			{
				FarmerCheckpoint[playerid] ++;
				new
					fcp = FarmerCheckpoint[playerid]
				;
				SetPlayerCheckpointEx(playerid, GrauFarmerObjects[fcp][0], GrauFarmerObjects[fcp][1], GrauFarmerObjects[fcp][2] - 2, 2);
			}
			else
			{
				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;
				FreezePlayer(playerid, true);
				defer UnfreezeFarmer(playerid, PlayerInfo[playerid][pSession], 1);
				SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Asteapta sa creasca graul.");
			}
		}
		case 375:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Nu te poti afla intr-un vehicul.");

			new
				todestroy = FarmerCheckpoint[playerid]
			;
			DestroyPlayerObject(playerid, FarmerObjects[playerid][todestroy]);
			FarmerObjects[playerid][todestroy] = 0;

			if(FarmerCheckpoint[playerid] < 19)
			{
				FarmerCheckpoint[playerid] ++;
				new
					fcp = FarmerCheckpoint[playerid]
				;
				SetPlayerCheckpointEx(playerid, GrauFarmerObjects[fcp][0], GrauFarmerObjects[fcp][1], GrauFarmerObjects[fcp][2] - 2, 2);
			}
			else
			{
				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;
				rand = 90_000 + random(10_000);
				GiveJobMoney(playerid, rand);
				SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Ai primit $%s pentru culegerea graului.", FormatNumber(rand));
			}
		}
		case 376:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Nu te poti afla intr-un vehicul.");

			OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 0, 0, 0, 0);
			defer UnfreezeFarmer[5000](playerid, PlayerInfo[playerid][pSession], 2);
		}
		case 377:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Nu te poti afla intr-un vehicul.");

			SetPlayerCheckpointEx(playerid, VaciFarmer[0][0], VaciFarmer[0][1], VaciFarmer[0][2], 2.0);
			CP[playerid] = 378;
			SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Urmeaza punctele rosii pentru a mulge vacile.");
		}
		case 378:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Nu te poti afla intr-un vehicul.");

			OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 0, 0, 0, 0);
			defer UnfreezeFarmer[7000](playerid, PlayerInfo[playerid][pSession], 3);
		}
		case 379:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return true;

			OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 0, 0, 0, 0);

			defer UnfreezeDDealer(playerid, PlayerInfo[playerid][pSession], 1);
		}
		case 380:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return true;

			OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 0, 0, 0, 0);

			defer UnfreezeDDealer(playerid, PlayerInfo[playerid][pSession], 2);
		}
		case 381:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return true;

			SetPlayerCheckpointEx(playerid, -144.72845, -50.10076, 3.05452, 2);
			CP[playerid] ++;
			SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Urmeaza punctul rosu pentru a prelucra materialele.");
		}
		case 382:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return true;

			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;

			SPD(playerid, DIALOG_BUYMETH, DIALOG_STYLE_INPUT, "Meth", "Introdu cantitatea de Meth dorita: (1 - 10)\nVei plati $200,000 pentru fiecare bucata.", "Alege", "Anuleaza");
		}
		case 383:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return true;

			OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 0, 0, 0, 0);

			defer UnfreezeDDealer(playerid, PlayerInfo[playerid][pSession], 4);
		}
		case 384:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return true;

			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;

			FreezePlayer(playerid, true);

			SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Asteapta 10 secunde pentru prelucrare...");

			defer UnfreezeDDealer[10000](playerid, PlayerInfo[playerid][pSession], 5);
		}
		case 385:
		{
			CP[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			SPD(playerid, DIALOG_BUYECS, DIALOG_STYLE_INPUT, "Ecstasy", "Introdu cantitatea de Ecstasy dorita: (1 - 10)\nVei plati $50,000 pentru fiecare bucata.", "Alege", "Anuleaza");
		}
		case 386..394:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Trebuie sa cobori din vehicul.");

			if(PlayerInfo[playerid][pDrugs][0] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Nu ai 1g de weed.");

			new
				Next = CP[playerid] - 385
			;

			SetPlayerCheckpointEx(playerid, CpsDailyQuest1[Next][0], CpsDailyQuest1[Next][1], CpsDailyQuest1[Next][2], 3);

			CP[playerid] ++;

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Mai ai de dus %dg de weed.", 10 - Next);
		}
		case 395:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Trebuie sa cobori din vehicul.");

			if(PlayerInfo[playerid][pDrugs][0] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Nu ai 1g de weed.");

			new
				RandMoney = 7_000_000 + random(3_000_000),
				RandRP = 3 + random(2)
			;

			GivePlayerCash(playerid, RandMoney);
			GivePlayerRP(playerid, RandRP);

			DisablePlayerCheckpoint(playerid);

			CP[playerid] = 0;

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai terminat quest-ul zilnic '%s'.", DailyQuestsName[TodayDailyQuest - 1]);
			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai primit $%s si %dRP.", FormatNumber(RandMoney), RandRP);

			PlayerInfo[playerid][pDailyQuestToday] = true;
			pUpdateInt(playerid, "DailyQuestToday", PlayerInfo[playerid][pDailyQuestToday]);
		}
		case 396:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Trebuie sa cobori din vehicul.");

			if(PlayerInfo[playerid][pFlyLic] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai nevoie de licenta de aviatie.");

			SetPlayerCheckpointEx(playerid, -2750.2163, 374.8267, 4.1417, 7.5);

			CP[playerid] ++;

			QuestVeh[playerid] = CreateVehicleEx(487, 1388.8352, 1466.5592, 10.8203, 180.0, random(256), random(256), -1, false, true); 
			PutPlayerInVehicleEx(playerid, QuestVeh[playerid], 0);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Urmeaza punctul rosu pentru a ajuta hotii sa evadeze.");
		}
		case 397:
		{
			if(!IsPlayerInVehicle(playerid, QuestVeh[playerid]))
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Trebuie sa fi in elicopter.");

			CP[playerid] ++;

			SetPlayerCheckpointEx(playerid, -2199.4678, -2512.1924, 31.8163, 10);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Urmeaza punctul rosu pentru a duce hotii la safehose-ul lor.");
		}
		case 398:
		{
			if(!IsPlayerInVehicle(playerid, QuestVeh[playerid]))
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Trebuie sa fi in elicopter.");

			new
				RandMoney = 7_000_000 + random(3_000_000),
				RandRP = 3 + random(2)
			;

			DestroyVehicleEx(QuestVeh[playerid]);
			QuestVeh[playerid] = -1;

			GivePlayerCash(playerid, RandMoney);
			GivePlayerRP(playerid, RandRP);

			DisablePlayerCheckpoint(playerid);

			CP[playerid] = 0;

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai terminat quest-ul zilnic '%s'.", DailyQuestsName[TodayDailyQuest - 1]);
			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai primit $%s si %dRP.", FormatNumber(RandMoney), RandRP);

			PlayerInfo[playerid][pDailyQuestToday] = true;
			pUpdateInt(playerid, "DailyQuestToday", PlayerInfo[playerid][pDailyQuestToday]);

			defer Spawn(playerid, PlayerInfo[playerid][pSession]);
		}
		case 399:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Trebuie sa cobori din vehicul.");

			if(PlayerInfo[playerid][pVehLic] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai nevoie de licenta de condus.");

			QuestVeh[playerid] = CreateVehicleEx(411, 1380.5426, -925.7275, 33.8824, 0, random(256), random(256), -1, false, true);
			SetVehicleVirtualWorld(QuestVeh[playerid], playerid + 1);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			PutPlayerInVehicleEx(playerid, QuestVeh[playerid], 0);

			new
				engine,
				lights,
				alarm,
				doors,
				bonnet,
				boot,
				objective,
				vehicleid = GetPlayerVehicleID(playerid)
			;

			VehicleEngine[vehicleid] = true;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, VehicleEngine[vehicleid], true, alarm, doors, bonnet, boot, objective);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Pentru a completa quest-ul trebuie sa termini cursa in 1:50 minute.");

			RaceTime[playerid] = 120;

			va_PlayerTextDrawSetString(playerid, StuntPTD, "Cursa incepe in %d secunde", RaceTime[playerid] - 110);
			PlayerTextDrawShow(playerid, StuntPTD);

			FreezePlayer(playerid, true);

			Iter_Add(InRaceQuest, playerid);

			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;

			RaceType[playerid] = 1;
		}
		case 400..413:
		{
			CP[playerid] ++;

			new
				NextCP = CP[playerid] - 400
			;

			SetPlayerCheckpointEx(playerid, CpsDailyQuest3[NextCP][0], CpsDailyQuest3[NextCP][1], CpsDailyQuest3[NextCP][2], 4);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Checkpoint: %d / 15.", NextCP);
		}
		case 414:
		{
			Iter_Remove(InRaceQuest, playerid);

			ExitRace(playerid);

			new
				RandMoney = 7_000_000 + random(3_000_000),
				RandRP = 3 + random(2)
			;

			GivePlayerCash(playerid, RandMoney);
			GivePlayerRP(playerid, RandRP);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai terminat quest-ul zilnic '%s'.", DailyQuestsName[TodayDailyQuest - 1]);
			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai primit $%s si %dRP.", FormatNumber(RandMoney), RandRP);

			PlayerInfo[playerid][pDailyQuestToday] = true;
			pUpdateInt(playerid, "DailyQuestToday", PlayerInfo[playerid][pDailyQuestToday]);
		}
		case 415:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Trebuie sa cobori din vehicul.");

			if(PlayerInfo[playerid][pVehLic] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai nevoie de licenta de condus.");

			QuestVeh[playerid] = CreateVehicleEx(411, 2892.0005, -783.5004, 10.5397, 0, random(256), random(256), -1, false, true);
			SetVehicleVirtualWorld(QuestVeh[playerid], playerid + 1);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			PutPlayerInVehicleEx(playerid, QuestVeh[playerid], 0);

			new
				engine,
				lights,
				alarm,
				doors,
				bonnet,
				boot,
				objective,
				vehicleid = GetPlayerVehicleID(playerid)
			;

			VehicleEngine[vehicleid] = true;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, VehicleEngine[vehicleid], true, alarm, doors, bonnet, boot, objective);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Pentru a completa quest-ul trebuie sa termini cursa in 2:30 minute.");

			RaceTime[playerid] = 160;

			va_PlayerTextDrawSetString(playerid, StuntPTD, "Cursa incepe in %d secunde", RaceTime[playerid] - 150);
			PlayerTextDrawShow(playerid, StuntPTD);

			FreezePlayer(playerid, true);

			Iter_Add(InRaceQuest, playerid);

			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;

			RaceType[playerid] = 2;
		}
		case 416..432:
		{
			CP[playerid] ++;

			new
				NextCP = CP[playerid] - 416
			;

			SetPlayerCheckpointEx(playerid, CpsDailyQuest4[NextCP][0], CpsDailyQuest4[NextCP][1], CpsDailyQuest4[NextCP][2], 4);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Checkpoint: %d / 18.", NextCP);
		}
		case 433:
		{
			Iter_Remove(InRaceQuest, playerid);

			ExitRace(playerid);

			new
				RandMoney = 7_000_000 + random(3_000_000),
				RandRP = 3 + random(2)
			;

			GivePlayerCash(playerid, RandMoney);
			GivePlayerRP(playerid, RandRP);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai terminat quest-ul zilnic '%s'.", DailyQuestsName[TodayDailyQuest - 1]);
			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai primit $%s si %dRP.", FormatNumber(RandMoney), RandRP);

			PlayerInfo[playerid][pDailyQuestToday] = true;
			pUpdateInt(playerid, "DailyQuestToday", PlayerInfo[playerid][pDailyQuestToday]);
		}
		case 434:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Trebuie sa cobori din vehicul.");

			if(PlayerInfo[playerid][pVehLic] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai nevoie de licenta de condus.");

			QuestVeh[playerid] = CreateVehicleEx(411, -852.7993, 1856.9600, 59.8428, 16.1159, random(256), random(256), -1, false, true);
			SetVehicleVirtualWorld(QuestVeh[playerid], playerid + 1);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			PutPlayerInVehicleEx(playerid, QuestVeh[playerid], 0);

			new
				engine,
				lights,
				alarm,
				doors,
				bonnet,
				boot,
				objective,
				vehicleid = GetPlayerVehicleID(playerid)
			;

			VehicleEngine[vehicleid] = true;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, VehicleEngine[vehicleid], true, alarm, doors, bonnet, boot, objective);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Pentru a completa quest-ul trebuie sa termini cursa in 2:05 minute.");

			RaceTime[playerid] = 135;

			va_PlayerTextDrawSetString(playerid, StuntPTD, "Cursa incepe in %d secunde", RaceTime[playerid] - 125);
			PlayerTextDrawShow(playerid, StuntPTD);

			FreezePlayer(playerid, true);

			Iter_Add(InRaceQuest, playerid);

			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;

			RaceType[playerid] = 3;
		}
		case 435..448:
		{
			CP[playerid] ++;

			new
				NextCP = CP[playerid] - 435
			;

			SetPlayerCheckpointEx(playerid, CpsDailyQuest5[NextCP][0], CpsDailyQuest5[NextCP][1], CpsDailyQuest5[NextCP][2], 4);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Checkpoint: %d / 15.", NextCP);
		}
		case 449:
		{
			Iter_Remove(InRaceQuest, playerid);

			ExitRace(playerid);

			new
				RandMoney = 7_000_000 + random(3_000_000),
				RandRP = 3 + random(2)
			;

			GivePlayerCash(playerid, RandMoney);
			GivePlayerRP(playerid, RandRP);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai terminat quest-ul zilnic '%s'.", DailyQuestsName[TodayDailyQuest - 1]);
			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai primit $%s si %dRP.", FormatNumber(RandMoney), RandRP);

			PlayerInfo[playerid][pDailyQuestToday] = true;
			pUpdateInt(playerid, "DailyQuestToday", PlayerInfo[playerid][pDailyQuestToday]);
		}
		case 470:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Trebuie sa cobori din vehicul.");

			if(PlayerInfo[playerid][pVehLic] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai nevoie de licenta de condus.");

			QuestVeh[playerid] = CreateVehicleEx(430, -2330.2397, 2271.5493, -0.3302, 180, random(256), random(256), -1, false, true);
			SetVehicleVirtualWorld(QuestVeh[playerid], playerid + 1);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			PutPlayerInVehicleEx(playerid, QuestVeh[playerid], 0);

			new
				engine,
				lights,
				alarm,
				doors,
				bonnet,
				boot,
				objective,
				vehicleid = GetPlayerVehicleID(playerid)
			;

			VehicleEngine[vehicleid] = true;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, VehicleEngine[vehicleid], lights, alarm, doors, bonnet, boot, objective);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Urmeaza punctele rosii pentru a incarca marfa.");

			SetPlayerCheckpointEx(playerid, 2443.6814, -2715.3110, -0.2958, 7.5);
			CP[playerid] ++;
		}
		case 471:
		{
			FreezePlayer(playerid, true);

			defer UnfreezeBoat(playerid, PlayerInfo[playerid][pSession], 1);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Asteapta 10 secunde pentru a se incarca marfa.");
		}
		case 472:
		{
			FreezePlayer(playerid, true);

			defer UnfreezeBoat(playerid, PlayerInfo[playerid][pSession], 2);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Asteapta 10 secunde pentru a se descarca marfa.");
		}
		case 473:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Trebuie sa cobori din vehicul.");

			SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Intra in banca apoi cauta seiful.");

			CP[playerid] ++;

			SetPlayerCheckpointEx(playerid, 2310.3328, -5.2060, 26.7422, 2.5);

			ShotsSafe[playerid] = 0;
		}
		case 474:
		{
			SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Trage 50 de gloante in seif pentru a-l sparge.");
		}
		case 475:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Trebuie sa cobori din vehicul.");
			
			DestroyPlayerObject(playerid, BankSafe[playerid]);

			BankSafe[playerid] = CreatePlayerObject(playerid, 2332, 2310.67090, -6.02892, 26.13791, 0.00000, 0.00000, -148.67999);

			SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Intra in banca apoi cauta seiful.");

			CP[playerid] ++;

			SetPlayerCheckpointEx(playerid, 2310.3328, -5.2060, 26.7422, 2.5);

			ShotsSafe[playerid] = 0;
		}
		case 476:
		{
			SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Trage 50 de gloante in seif pentru a-l sparge.");
		}
		case 477:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Trebuie sa cobori din vehicul.");

			new
				RandMoney = 5_000_000 + random(3_000_000),
				RandRP = 2 + random(2)
			;

			GivePlayerCash(playerid, RandMoney);
			GivePlayerRP(playerid, RandRP);

			SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Ai terminat jaful si ai primit $%s si %d puncte de respect.", FormatNumber(RandMoney), RandRP);

			PlayerInfo[playerid][pHeists][1] = true;

			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;

			DestroyVehicleEx(QuestVeh[playerid]);
			QuestVeh[playerid] = -1;

			ResetPlayerWeapons(playerid);

			ProgressToBattlepass(playerid, 3, 1);
		}
		case 478:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Trebuie sa cobori din vehicul.");

			InterpolateCameraPos(playerid, 2654.207519, -2243.664062, 34.360355, 2774.689697, -2259.679443, 31.493459, 10000);
			InterpolateCameraLookAt(playerid, 2657.728515, -2241.261962, 31.746515, 2770.952636, -2257.515380, 28.973476, 10000);

			FreezePlayer(playerid, true);

			DestroyVehicleEx(QuestVeh[playerid]);
			QuestVeh[playerid] = -1;
			SetPVarInt(playerid, "jobdilei", 0);

			SetPlayerVirtualWorld(playerid, playerid + 1);

			defer JafPortCamera(playerid, PlayerInfo[playerid][pSession]);
		}
		case 479:
		{
			OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 0, 0, 0, 0);

			defer PlantBomb(playerid, PlayerInfo[playerid][pSession], 1);
		}
		case 480:
		{
			CreateExplosionForPlayer(playerid, 2676.2134, -2227.6963, 13.5469, 0, 5);

			DestroyPlayerObject(playerid, HeistsObjects[playerid][2]);
			HeistsObjects[playerid][2] = 0;

			CP[playerid] ++;
			SetPlayerCheckpointEx(playerid, 2676.2134, -2227.6963, 13.5469, 3);

			SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Urmeaza punctul rosu pentru a colecta sacii cu bani.");
		}
		case 481:
		{
			for(new i = 3; i < 6; i++)
			{
				DestroyPlayerObject(playerid, HeistsObjects[playerid][i]);
				HeistsObjects[playerid][i] = 0;
			}

			CP[playerid] ++;
			SetPlayerCheckpointEx(playerid, 2720.8003, -2223.7224, 13.5469, 3);
		}
		case 482:
		{
			OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 0, 0, 0, 0);

			defer PlantBomb(playerid, PlayerInfo[playerid][pSession], 2);
		}
		case 483:
		{
			CreateExplosionForPlayer(playerid, 2720.8003, -2223.7224, 13.5469, 0, 5);

			DestroyPlayerObject(playerid, HeistsObjects[playerid][1]);
			HeistsObjects[playerid][1] = 0;

			CP[playerid] ++;
			SetPlayerCheckpointEx(playerid, 2720.8003, -2223.7224, 13.5469, 3);

			SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Urmeaza punctul rosu pentru a colecta sacii cu bani.");
		}
		case 484:
		{
			for(new i = 6; i < 9; i++)
			{
				DestroyPlayerObject(playerid, HeistsObjects[playerid][i]);
				HeistsObjects[playerid][i] = 0;
			}

			CP[playerid] ++;
			SetPlayerCheckpointEx(playerid, 2748.7578, -2240.7710, 13.5469, 3);
		}
		case 485:
		{
			OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 0, 0, 0, 0);

			defer PlantBomb(playerid, PlayerInfo[playerid][pSession], 3);
		}
		case 486:
		{
			CreateExplosionForPlayer(playerid, 2748.7578, -2240.7710, 13.5469, 0, 5);

			DestroyPlayerObject(playerid, HeistsObjects[playerid][0]);
			HeistsObjects[playerid][0] = 0;

			CP[playerid] ++;
			SetPlayerCheckpointEx(playerid, 2748.7578, -2240.7710, 13.5469, 3);

			SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Urmeaza punctul rosu pentru a colecta sacii cu bani.");
		}
		case 487:
		{
			for(new i = 9; i < 12; i++)
			{
				DestroyPlayerObject(playerid, HeistsObjects[playerid][i]);
				HeistsObjects[playerid][i] = 0;
			}

			CP[playerid] ++;
			SetPlayerCheckpointEx(playerid, 2640.9600, -2241.6099, 13.5469, 3);

			SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Urmeaza punctul rosu pentru a te intoarce.");
		}
		case 488:
		{
			WantedPoints[playerid] = 12;
			SetPlayerCriminal(playerid, -1, "robbery");

			SetPlayerVirtualWorld(playerid, 0);

			CP[playerid] ++;
			SetPlayerCheckpointEx(playerid, LocationPos[10][0], LocationPos[10][1], LocationPos[10][2], 4);

			QuestVeh[playerid] = CreateVehicleEx(560, 2640.9600, -2241.6099, 13.5469, 90, random(256), random(256), -1, false, true); 
			PutPlayerInVehicleEx(playerid, QuestVeh[playerid], 0);

			SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Urmeaza punctul rosu pentru a termina Heist-ul.");
		}
		case 489:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Trebuie sa cobori din vehicul.");

			new
				RandomCash = 8_000_000 + random(5_000_000),
				RandomRP = 3 + random(2)
			;

			GivePlayerCash(playerid, RandomCash);
			GivePlayerRP(playerid, RandomRP);

			SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Ai terminat jaful si ai primit $%s si %d puncte de respect.", FormatNumber(RandomCash), RandomRP);

			PlayerInfo[playerid][pHeists][2] = true;

			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;

			DestroyVehicleEx(QuestVeh[playerid]);
			QuestVeh[playerid] = -1;

			ProgressToBattlepass(playerid, 3, 1);
		}
		case 500:
		{
			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Urca pe bicicleta pentru a continua.");
		}
		case 501:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Trebuie sa cobori din vehicul.");

			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Intra in non-stop pentru a vinde pestele.");
			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Pentru a intra apasa tasta F.");
		}
		case 502:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Trebuie sa cobori din vehicul.");

			DestroyVehicleEx(RentVeh[playerid]);
			RentVeh[playerid] = -1;

			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Apasa tasta Y pentru a lua bonusul de inceput.");
		}         
		case 503:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return Info(playerid, "Trebuie sa cobori din vehicul.");

			if(JobVeh[playerid] == -1)
				return Info(playerid, "Nu ai un vehicul de job.");

			if(GetDistancePlayerVeh(playerid, JobVeh[playerid]) > 25)
				return Info(playerid, "Esti prea departe de vehiculul de job.");

			new rand2 = Iter_Random(PossibleContructor[playerid]);

			Iter_Remove(PossibleContructor[playerid], rand2);

			SetPlayerCheckpointEx(playerid, RandomContructor[rand2][0], RandomContructor[rand2][1], RandomContructor[rand2][2], 3);

			CP[playerid] ++;

			Info(playerid, "Urmeaza punctul rosu pentru a repara o locuinta.");
		}
		case 504:
		{
			if(IsPlayerInAnyVehicle(playerid))
				return Info(playerid, "Trebuie sa cobori din vehicul.");

			if(JobVeh[playerid] == -1)
				return Info(playerid, "Nu ai un vehicul de job.");

			if(GetDistancePlayerVeh(playerid, JobVeh[playerid]) > 25)
				return Info(playerid, "Esti prea departe de vehiculul de job.");

			OnePlayAnim(playerid, "CHAINSAW", "CSAW_1", 4.0, 1, 0, 0, 0, 0);

			defer RepairContructor(playerid, PlayerInfo[playerid][pSession]);
		}
		case 505: 
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Trebuie sa cobori din vehicul.");

			if(PlayerInfo[playerid][pVehLic] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai nevoie de licenta de condus.");

			QuestVeh[playerid] = CreateVehicleEx(411, -1910.6317, -748.4869, 44.3512, 178.8239, random(256), random(256), -1, false, true);
			SetVehicleVirtualWorld(QuestVeh[playerid], playerid + 1);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			PutPlayerInVehicleEx(playerid, QuestVeh[playerid], 0);

			new
				engine,
				lights,
				alarm,
				doors,
				bonnet,
				boot,
				objective,
				vehicleid = GetPlayerVehicleID(playerid)
			;

			VehicleEngine[vehicleid] = true;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, VehicleEngine[vehicleid], true, alarm, doors, bonnet, boot, objective);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Pentru a completa quest-ul trebuie sa termini cursa in 2:55 minute.");

			RaceTime[playerid] = 185;

			va_PlayerTextDrawSetString(playerid, StuntPTD, "Cursa incepe in %d secunde", RaceTime[playerid] - 175);
			PlayerTextDrawShow(playerid, StuntPTD);

			FreezePlayer(playerid, true);

			Iter_Add(InRaceQuest, playerid);

			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;

			RaceType[playerid] = 4;
		}
		case 506..524:
		{
			CP[playerid] ++;

			new
				NextCP = CP[playerid] - 506
			;

			SetPlayerCheckpointEx(playerid, CpsDailyQuest6[NextCP][0], CpsDailyQuest6[NextCP][1], CpsDailyQuest6[NextCP][2], 4);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Checkpoint: %d / 20.", NextCP);
		}
		case 525:
		{
			Iter_Remove(InRaceQuest, playerid);

			ExitRace(playerid);

			new
				RandMoney = 10_000_000 + random(5_000_000),
				RandRP = 5 + random(2)
			;

			GivePlayerCash(playerid, RandMoney);
			GivePlayerRP(playerid, RandRP);

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai terminat quest-ul zilnic '%s'.", DailyQuestsName[TodayDailyQuest - 1]);
			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai primit $%s si %dRP.", FormatNumber(RandMoney), RandRP);

			PlayerInfo[playerid][pDailyQuestToday] = true;
			pUpdateInt(playerid, "DailyQuestToday", PlayerInfo[playerid][pDailyQuestToday]);
		}
		case 526:
		{
			new
				materiale = randEx(2_500, 3_000),
				money = randEx(50_000, 55_000)
			;

			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;

			Info(playerid, "Ai primit %s materiale si $%s.", FormatNumber(materiale), FormatNumber(money));
			GiveJobMoney(playerid, money);

			PlayerInfo[playerid][pMats] += materiale;

			if(PerkActive[playerid][14])
			{
				if(TureArmsToday[playerid] > 50)
				{
					PlayerInfo[playerid][pMats] += 2000;

					SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit 2,000 materiale in plus. #14");

					new
						rand2 = random(100)
					;

					switch(rand2)
					{
						case 0..5:
						{
							GivePlayerPP(playerid, 1);

							SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit un punct premium. #14");
						}
					}
				}
			}
			else if(PerkActive[playerid][12])
			{
				if(TureArmsToday[playerid] > 50)
				{
					PlayerInfo[playerid][pMats] += 2000;

					SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit 2,000 materiale in plus. #12");
				}
			}
			else if(PerkActive[playerid][11])
			{
				if(TureArmsToday[playerid] > 30)
				{
					PlayerInfo[playerid][pMats] += 1000;

					SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit 1,000 materiale in plus. #11");
				}
			}
			if(PerkActive[playerid][13])
			{
				if(TureArmsToday[playerid] > 50)
				{
					new
						rand2 = random(100)
					;

					switch(rand2)
					{
						case 0..10:
						{
							GivePlayerRP(playerid, 1);

							SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit un punct de respect. #13");
						}
					}
				}
			}
			if(PerkActive[playerid][36])
			{
				if(TureArmsToday[playerid] > 20)
				{
					new
						BonusMats = floatround(0.5 * materiale)
					;

					PlayerInfo[playerid][pMats] += BonusMats;

					SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit %d materiale in plus.(50%) #36", BonusMats);
				}
			}
			else if(PerkActive[playerid][35])
			{
				if(TureArmsToday[playerid] > 20)
				{
					new
						BonusMats = floatround(0.3 * materiale)
					;

					PlayerInfo[playerid][pMats] += BonusMats;

					SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit %d materiale in plus.(30%) #35", BonusMats);
				}
			}
			pUpdateInt(playerid, "Materials", PlayerInfo[playerid][pMats]);
		}
	}
	//milsugio
	return true;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger){
	if(IsPlayerInAnyVehicle(playerid) && IsAndroidPlayer(playerid) != true) return AKick(playerid, "troll hack #1");
	LastVeh[playerid] = vehicleid;
	SetVehicleParamsForPlayer(vehicleid,playerid, 0, VehicleLocked[vehicleid]);
	if(vehicleid == JobVeh[playerid] || vehicleid == RentVeh[playerid] || vehicleid == QuestVeh[playerid] || vehicleid == pfVehicle[playerid] || vehicleid == pcVehicle[playerid]) 
		SetVehicleParamsForPlayer(vehicleid,playerid, 0, 0);
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++){ 
		if(vehicleid == PlayerInfo[playerid][pVehID][vv]) SetVehicleParamsForPlayer(PlayerInfo[playerid][pVehID][vv],playerid, 0, 0); 
	}
	if(!ispassenger){
		if(IsABoat(vehicleid) && !PlayerInfo[playerid][pBoatLic]) Info(playerid, "Nu ai licenta de navigat."), ClearAnimations(playerid);
		if(IsAPlane(vehicleid)){
			if(PlayerInfo[playerid][pFlyLic] < 1) Info(playerid, "Nu ai licenta de zburat."), ClearAnimations(playerid);
			if(PlayerInfo[playerid][pWantedLevel] > 0) Info(playerid, "Nu poti face asta deoarece ai wanted."), ClearAnimations(playerid);
		} 
		if(GetVehicleModel(vehicleid) >= 400 && GetVehicleModel(vehicleid) <= 611 && !PlayerInfo[playerid][pVehLic]){
			if(!IsABike(vehicleid) && !IsAPlane(vehicleid) && GetVehicleModel(vehicleid) != 462 && !IsABoat(vehicleid)){
				Info(playerid, "Nu ai licenta de condus.");
				ClearAnimations(playerid);
			}
		}
	}
	if(InTurfZone[playerid] == WarOnTurf && ServerWars && OnDuty[playerid] && IsAGangMember(playerid))
	{
		SendMsg(playerid, COLOR_SERVER, "War >> {ffffff}Nu poti urca intr-un vehicul.");
		ClearAnims(playerid);
	}
	return true;
}
stock DaSauNu(val)
{
	new
		ReturnString[8]
	;
	gString[0] = (EOS);
	if(val) format(ReturnString, 3, "Da");
	else format(ReturnString, 3, "Nu");
	return ReturnString;
}
function ClearAnims(playerid)
{
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	return true;
}
public OnPlayerStateChange(playerid, newstate, oldstate){
	if((oldstate == PLAYER_STATE_PASSENGER || oldstate == PLAYER_STATE_DRIVER) && newstate != PLAYER_STATE_PASSENGER && newstate != PLAYER_STATE_DRIVER)
	{
		ClearAnims(playerid);
		StopAudioStreamForPlayer(playerid);
		PlayerTextDrawHide(playerid, SpeedPTD);
	}
	if(Iter_Contains(WithState[oldstate], playerid))
	{
		Iter_Remove(WithState[oldstate], playerid);
	}
	Iter_Add(WithState[newstate], playerid);
	switch(newstate){
		case PLAYER_STATE_DRIVER: {
			switch(CP[playerid])
			{
				case 474:
				{				
					CP[playerid] ++;

					SetPlayerCheckpointEx(playerid, 2446.8894, 2376.4934, 12.1635, 5);

					SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Urmeaza punctul rosu pentru a jefui a doua banca.");
				}
				case 476:
				{
					SetPlayerCheckpointEx(playerid, LocationPos[10][0], LocationPos[10][1], LocationPos[10][2], 5);

					CP[playerid] ++;

					SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Urmeaza punctul rosu pentru termina jaful.");
				}
				case 500:
				{
					TutorialStep[playerid] ++;

					CP[playerid] ++;

					SetPlayerCheckpointEx(playerid, 1081.0483, -1697.8408, 13.5469, 3);

					SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Urmeaza punctul rosu pentru a vinde pestele.");
				}
			}
			SetPlayerArmedWeapon(playerid, 0);
			new vid = GetPlayerVehicleID(playerid);
			if(!IsABike(vid) && VehicleEngine[vid] != true)
			{
				SendMsg(playerid, COLOR_SERVER, "Engine >> {ffffff}Pentru a porni motorul acestui vehicul apasa tasta 2 sau tasteaza [/engine].");
			}
			PlayerTextDrawSetString(playerid, SpeedPTD, "Se incarca...");
			PlayerTextDrawShow(playerid, SpeedPTD);
			if(RainbowOn[vid])
			{
				RainbowStep[vid] = 0;
				Iter_Add(RainbowVehicles, vid);
			}
			if(GetPVarInt(playerid, "jobdilei") && QuestVeh[playerid] == vid) SetPVarInt(playerid, "jobdilei", 0);
			if(GetPVarInt(playerid, "jobdilei") && JobVeh[playerid] == vid && (PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob] == 9 || PlayerInfo[playerid][pJob] == 11 || PlayerInfo[playerid][pJob] == 14)) SetPVarInt(playerid, "jobdilei", 0);
			new Float: xveh, Float: yveh, Float: zveh; GetVehiclePos(vid, xveh, yveh, zveh);
			LastVehX[playerid] = xveh; LastVehY[playerid] = yveh; LastVehZ[playerid] = zveh;	
			if(LastVeh[playerid] != vid && ac_trolltimer != false) return AKick(playerid, "troll hack #2");		
			LastVeh[playerid] = vid;
			StopAudioStreamForPlayer(playerid); 
			if(vehRadio[vid]) PlayAudioStreamForPlayer(playerid, Radios[vehRadio[vid]]);
			GetVehiclePos(vid, old_veh_pos[vid][0], old_veh_pos[vid][1], old_veh_pos[vid][2]);
			if(IsABike(vid)) VehicleEngine[vid] = true;
			new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(vid,VehicleEngine[vid],lights,alarm,doors,bonnet,boot,objective);
			if(IsABoat(vid)){
				if(PlayerInfo[playerid][pBoatLic] < 1){
					if(ExamVeh[playerid] != vid)
					{
						Info(playerid, "Nu ai licenta de Navigat.");
						RemovePlayerFromVehicle(playerid);
					}
				}
				if(PlayerInfo[playerid][pWantedLevel] > 0) RemovePlayerFromVehicle(playerid);
			} 
			if(IsAPlane(vid)){
				if(PlayerInfo[playerid][pFlyLic] < 1){
					if(ExamVeh[playerid] != vid)
					{
						Info(playerid, "Nu ai licenta de Aviatie.");
						RemovePlayerFromVehicle(playerid);
					}
				}
				if(PlayerInfo[playerid][pWantedLevel] > 0) RemovePlayerFromVehicle(playerid);
			} 
			if(!IsABike(vid) && !IsAPlane(vid) && GetVehicleModel(vid) != 462 && !IsABoat(vid) && !IsPlayerInVehicle(playerid, ExamVeh[playerid])){
				if(PlayerInfo[playerid][pVehLic] < 1){
					Info(playerid, "Nu ai licenta de Condus.");
					RemovePlayerFromVehicle(playerid);
				}
			}
			if(OwnableVehicle(vid)){
				foreach(new i : Player){
					for(new v; v < MAX_PERSONAL_VEHICLES; v++){
						if(PlayerInfo[i][pVehID][v] == vid){
							Info(playerid, "Acest %s(%d), detinut de %s, are %d zile, %0.2f km, si culorile %d, %d",GetVehicleName(PlayerInfo[i][pVehModel][v]),PlayerInfo[i][pVeh][v],GetName(i),GetDaysFromTimestamp(PlayerInfo[i][pVehBuyTime][v]),PlayerInfo[i][pVehKM][v],PlayerInfo[i][pVehColor1][v],PlayerInfo[i][pVehColor2][v]);
							new cneon[32] = "Nu";
							if(PlayerInfo[i][pVehNeon][v] || PlayerInfo[i][pVehNeonCustom][v]){
								switch(PlayerInfo[i][pVehNeon][v]){
									case 0: cneon = "Nu";
									case 18650: cneon = "Galben";
									case 18649: cneon = "Verde";
									case 18648: cneon = "Albastru";
									case 18647: cneon = "Rosu";
									case 18651: cneon = "Roz";
									case 18652: cneon = "Alb";
								}
								if(PlayerInfo[i][pVehNeonCustom][v]) cneon = "Custom";
							}
							new
								bool: vStage = PlayerInfo[i][pVehStage][v],
								vNeon = PlayerInfo[i][pVehNeon][v],
								bool: vWorking = PlayerInfo[i][pVehWorking][v],
								bool: vVip = PlayerInfo[i][pVehVip][v],
								bool: vRainbow = PlayerInfo[i][pVehRainbow][v]
							;
							if(vStage || vNeon || vWorking || vVip || vRainbow)
							{
								SendMsg(playerid, COLOR_SERVER, "Other >> Stage: %s, Neon: %s, Working: %s, VIP: %s, Rainbow: %s",
									DaSauNu(vStage), cneon, DaSauNu(vWorking), DaSauNu(vVip), DaSauNu(vRainbow));
							}
							break;
						}
					}
				} 
			}
			for(new i; i < 9; i ++){
				if(Iter_Contains(fVehicles[i], vid)){
					if(i != PlayerInfo[playerid][pMember] || (OnDuty[playerid] != true && i != 8)){
						Info(playerid, "Nu faci parte din factiunea %s sau nu esti la datorie.", FacInfo[i][fName]);
						RemovePlayerFromVehicle(playerid);
						break;
					}
				}
			}
			for(new i; i < MAX_CLANS; i ++){
				if(Iter_Contains(cVehicles[i], vid)){
					if(i != PlayerInfo[playerid][pClan]){
						Info(playerid, "Nu faci parte din clanul %s.", ClanInfo[i][clanName]);
						RemovePlayerFromVehicle(playerid);
						break;
					}
				}
			}
			if(InTurfZone[playerid] == WarOnTurf && ServerWars && OnDuty[playerid] && IsAGangMember(playerid))
			{
				SendMsg(playerid, COLOR_SERVER, "War >> {ffffff}Nu poti urca intr-un vehicul.");
				RemovePlayerFromVehicle(playerid);
			}
		}
		case PLAYER_STATE_ONFOOT: {
			if(IsValidVehicle(LastVeh[playerid])){
				new vid = LastVeh[playerid];
				if(!VehicleLocked[vid]) SetVehicleParamsForPlayer(vid,playerid, 0, 0);
				if(vid == JobVeh[playerid] || vid == RentVeh[playerid] || vid == QuestVeh[playerid] || vid == pfVehicle[playerid] || vid == pcVehicle[playerid]) SetVehicleParamsForPlayer(vid,playerid, 0, 0);
				for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++){ 
					if(vid == PlayerInfo[playerid][pVehID][vv]) SetVehicleParamsForPlayer(PlayerInfo[playerid][pVehID][vv],playerid, 0, 0); 
				}
			}
			if(UberTimer[playerid] && UberDriver[playerid] != -1){
				new Uber = UberDriver[playerid];
				PlayerTextDrawHide(playerid, RentCarText[playerid]);
				PlayerTextDrawHide(playerid, RentCarText[UberDriver[playerid]]);
				SendMsg(Uber, COLOR_SERVER, "Server >> {ffffff}%s s-a dat jos si ti-a platit $%s in total.", GetName(playerid), FormatNumber(UberMoneySpent[playerid]));
				Info(playerid, "Te-ai dat jos si i-ai platit lui %s in total $%s.", GetName(Uber), FormatNumber(UberMoneySpent[playerid]));
				UberTimer[playerid] = 0;
				UberMoneySpent[playerid] = 0;
				UberDriver[playerid] = -1;
				PlayerInfo[Uber][pRaport] ++;
				pUpdateInt(Uber, "Raport", PlayerInfo[Uber][pRaport]);
			}
			if(UberFare[playerid] > 0){
				UberFare[playerid] = 0;
				UberMoneyEarned[playerid] = 0;
				PlayerTextDrawHide(playerid, RentCarText[playerid]);
				foreach(new x : FactionMembers[6])
				if(UberDriver[x] == playerid){
					UberDriver[x] = -1;
					UberMoneySpent[x] = 0;
					UberTimer[x] = 0;
					PlayerTextDrawHide(x, RentCarText[x]);
					break;
				}
			}
		}
		case PLAYER_STATE_WASTED: {
			if(PlayerInfo[playerid][pWantedLevel] > 0){
				foreach(new i : FactionMembers[1]){
					if(GetDistanceBetweenPlayers(playerid, i) < 100 && OnDuty[i]){
						PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pWantedLevel] * 5;
						pUpdateInt(playerid, "JailTime", PlayerInfo[playerid][pJailTime]);
						PlayerInfo[playerid][pJailed] = 1;
						PlayerInfo[playerid][pWantedLevel] = 0;
						WantedPoints[playerid] = 0;
						SendFamilyMessage(1, COLOR_SERVER, "Dispecerat >> %s a fost omorat si arestat.", GetName(playerid));
						pUpdateInt(playerid, "WantedLevel", PlayerInfo[playerid][pWantedLevel]);
						pUpdateInt(playerid, "Jailed", PlayerInfo[playerid][pJailed]);
						ClearCrime(playerid);
						FreezePlayer(playerid, true);
						defer UnfreezeTimer(playerid, PlayerInfo[playerid][pSession]);
						PlayerInfo[i][pRaport] ++;
						pUpdateInt(i, "Raport", PlayerInfo[i][pRaport]);
						break;
					}
				} 
			}
		}
		case PLAYER_STATE_PASSENGER: {
			SetPlayerArmedWeapon(playerid, 0);
			new vid = GetPlayerVehicleID(playerid);
			if(vehRadio[vid]){
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, Radios[vehRadio[vid]]);
			} 
			if(IsAnUber(vid)){
				foreach(new i : FactionMembers[6]){
					if(GetPlayerVehicleID(i) == vid && !GetPlayerVehicleSeat(i) && PlayerInfo[i][pMember] == 6 && UberFare[i] >= 1){
						UberTimer[playerid] = (10 + random(7)); 
						UberMoneyEarned[i] += UberFare[i]; 
						UberDriver[playerid] = i; 
						UberMoneySpent[playerid] += UberFare[i];
						GivePlayerCash(i, UberFare[i]); GivePlayerCash(playerid, -UberFare[i]); 
						va_PlayerTextDrawSetString(playerid, RentCarText[playerid], "money spent so far: ~g~$%s", FormatNumber(UberMoneySpent[playerid])); 
						PlayerTextDrawShow(playerid, RentCarText[playerid]);
						va_PlayerTextDrawSetString(i, RentCarText[i], "money earned: ~g~$%s", FormatNumber(UberMoneyEarned[i])); 
						PlayerTextDrawShow(i, RentCarText[i]);
						break;
					}
				} 
			}
			if(InTurfZone[playerid] == WarOnTurf && ServerWars && OnDuty[playerid] && IsAGangMember(playerid))
			{
				SendMsg(playerid, COLOR_SERVER, "War >> {ffffff}Nu poti urca intr-un vehicul.");
				RemovePlayerFromVehicle(playerid);
			}
			return true; 
		}
	}
	switch(oldstate)
	{
		case PLAYER_STATE_DRIVER:
		{
			new
				vehicleid = LastVeh[playerid]
			;

			if(vehicleid == JobVeh[playerid] && PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pJob] != 9 && PlayerInfo[playerid][pJob] != 11 && PlayerInfo[playerid][pJob] != 14)
			{
				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0; 

				DestroyVehicleEx(JobVeh[playerid]);
				JobVeh[playerid] = -1; 

				JobWorking[playerid] = false; 
			}

			if(vehicleid == ExamVeh[playerid])
			{
				if(PlayerInfo[playerid][pTutorial] != true)
				{
					SetPlayerVirtualWorld(playerid, 0);
				}

				SendMsg(playerid, COLOR_SERVER, "Exam >> {ffffff}Intoarce-te pentru a relua testul.");

				if(IsABoat(vehicleid))
				{
					SetPlayerPosEx(playerid, LocationPos[12][0], LocationPos[12][1], LocationPos[12][2]);
				}
				else if(IsAPlane(vehicleid))
				{
					SetPlayerPosEx(playerid, LocationPos[13][0], LocationPos[13][1], LocationPos[13][2]);
				}
				else
				{
					SetPlayerPosEx(playerid, LocationPos[0][0], LocationPos[0][1], LocationPos[0][2]);
				}

				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;

				DestroyVehicleEx(ExamVeh[playerid]);
				ExamVeh[playerid] = -1;

				SendMsg(playerid, COLOR_SERVER, "Exam >> {ffffff}Ai picat examenul deoarece ai parasit vehicului.");
			}

			if(JobVeh[playerid] == vehicleid && PlayerInfo[playerid][pJob] == 7 && GetVehicleModel(JobVeh[playerid]) == 422)
			{
				StopDelay(playerid, 120);
			}

			if(JobVeh[playerid] == vehicleid && PlayerInfo[playerid][pJob] == 9 && GetVehicleModel(JobVeh[playerid]) == 448)
			{
				StopDelay(playerid, 120);
			}

			if(JobVeh[playerid] == vehicleid && PlayerInfo[playerid][pJob] == 11 && GetVehicleModel(JobVeh[playerid]) == 552)
			{
				StopDelay(playerid, 120);
			}

			if(JobVeh[playerid] == vehicleid && PlayerInfo[playerid][pJob] == 14 && GetVehicleModel(JobVeh[playerid]) == 422)
			{
				StopDelay(playerid, 120);
			}

			if(QuestVeh[playerid] == vehicleid)
			{
				StopDelay(playerid, 120);
			}

			if(InTextdrawMenu[playerid] == 2)
			{
				ExitTuning(playerid);
			}

			if(Iter_Contains(RainbowVehicles, vehicleid))
			{
				RainbowStep[vehicleid] = 0;
				ChangeVehicleColor(vehicleid, LastColor1[vehicleid], LastColor2[vehicleid]);
				Iter_Remove(RainbowVehicles, vehicleid);
			}

			if(NeedRemoveFromWarVehicle[playerid] != false)
			{
				NeedRemoveFromWarVehicle[playerid] = false;
				stop RemoveFromWarVehicle[playerid];
			}
		}
		case PLAYER_STATE_PASSENGER:
		{
			if(NeedRemoveFromWarVehicle[playerid] != false)
			{
				NeedRemoveFromWarVehicle[playerid] = false;
				stop RemoveFromWarVehicle[playerid];
			}
		}
	}
	return true;
}
function StopDelay(playerid, delay){
	Info(playerid, "Ai %d secunde sa te intorci in vehicul.", delay);
	SetPVarInt(playerid, "jobdilei", delay);
	SetVehicleParamsForPlayer(LastVeh[playerid],playerid, 0, 0);
	return true;
}
stock LocateVeh(playerid, car)
{
	new
		Float: x,
		Float: y,
		Float: z
	;

	GetVehiclePos(car, x, y, z);

	SetPlayerCheckpointEx(playerid, x, y, z, 4);

	CP[playerid] = 43;

	Info(playerid, "Urmeaza checkpoint-ul pentru a-ti gasi vehiculul.");

	return true;
}
public OnRconLoginAttempt(ip[], password[], success){
	new pip[16];
	if(!success){
		foreach(new i : Player){
			GetPlayerIp(i, pip, sizeof(pip));
			if(!strcmp(ip, pip, true)){
				gString[0] = (EOS); 
				format(gString, 32, "banip %s", ip); 
				SendRconCommand(gString);
				break;
			}
		}
	}
	else if(success){
		foreach(new i : Player){
			GetPlayerIp(i, pip, sizeof(pip));
			if(!strcmp(ip, pip, true)){
				if(!Scripter(i)) return Kick(i);
				SendMsg(i, COLOR_SERVER, "Server >> {ffffff}Te-ai conectat cu succes la rcon.");
				break;
			}
		}
	}
	return true;
}
public OnPlayerRequestSpawn(playerid){
	if(!Logat[playerid]) return Info(playerid, "Trebuie sa te loghezi pentru a face asta.");
	return true;
}
public OnPlayerRequestClass(playerid, classid){
	if(Logat[playerid]) defer Spawn(playerid, PlayerInfo[playerid][pSession]);
	return true;
}
function SetPlayerCriminal(playerid,declare, const reason[]){
	new points = WantedPoints[playerid], ini, string[124], yesno, y,m,d,h,mi, turner[25]; ini = PlayerInfo[playerid][pWantedLevel];
	if(declare == -1){
		format(turner, sizeof turner, "Unknown"); format(PlayerInfo[playerid][pVictim], 25, turner); pUpdateStr(playerid, "Victim", PlayerInfo[playerid][pVictim]);
	} else {
		if(IsPlayerConnected(declare)){
			format(PlayerInfo[playerid][pVictim], 25, GetName(playerid)); pUpdateStr(playerid, "Victim", PlayerInfo[playerid][pVictim]);
		}
	} getdate(y,m,d); gettime(h,mi);
	if(strcmp(PlayerInfo[playerid][pCrime1], "Fara Crima", true) == 0){
		format(string, sizeof string, "%s", reason); format(PlayerInfo[playerid][pCrime1], 25, string, 0); pUpdateStr(playerid, "Crime1", PlayerInfo[playerid][pCrime1]);
	} else if(strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0){
		format(string, sizeof string, "%s", reason); format(PlayerInfo[playerid][pCrime2], 25, string, 0); pUpdateStr(playerid, "Crime2", PlayerInfo[playerid][pCrime2]);
	} else if(strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0){
		format(string, sizeof string, "%s", reason); format(PlayerInfo[playerid][pCrime3], 25, string, 0); pUpdateStr(playerid, "Crime3", PlayerInfo[playerid][pCrime3]);
	} else if(strcmp(PlayerInfo[playerid][pCrime1], "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0){ }
	else {
		format(string, sizeof string, "%s", reason); format(PlayerInfo[playerid][pCrime1], 25, string, 0); pUpdateStr(playerid, "Crime1", PlayerInfo[playerid][pCrime1]);
		format(string, sizeof string, "Fara Crima"); format(PlayerInfo[playerid][pCrime2], 25, string, 0); format(PlayerInfo[playerid][pCrime3], 25, string, 0);	
		pUpdateStr(playerid, "Crime2", PlayerInfo[playerid][pCrime2]); pUpdateStr(playerid, "Crime3", PlayerInfo[playerid][pCrime3]);			
	} if(points > 0){
		if(points >= 1 && points <= 3 && PlayerInfo[playerid][pWantedLevel] != 1) PlayerInfo[playerid][pWantedLevel] = 1, yesno = 1;
		else if(points >= 4 && points <= 5 && PlayerInfo[playerid][pWantedLevel] != 2) PlayerInfo[playerid][pWantedLevel] = 2, yesno = 1;
		else if(points >= 6 && points <= 7 && PlayerInfo[playerid][pWantedLevel] != 3) PlayerInfo[playerid][pWantedLevel] = 3, yesno = 1;
		else if(points >= 8 && points <= 9 && PlayerInfo[playerid][pWantedLevel] != 4) PlayerInfo[playerid][pWantedLevel] = 4, yesno = 1;
		else if(points >= 10 && points <= 11 && PlayerInfo[playerid][pWantedLevel] != 5) PlayerInfo[playerid][pWantedLevel] = 5, yesno = 1;
		else if(points >= 12 && points <= 13 && PlayerInfo[playerid][pWantedLevel] != 6) PlayerInfo[playerid][pWantedLevel] = 6, yesno = 1;
		pUpdateInt(playerid, "WantedLevel", PlayerInfo[playerid][pWantedLevel]);
		wantedlost[playerid] = 15;
		SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
		va_PlayerTextDrawSetString(playerid, WantedText, "WANTED SCADE IN: ~r~%d MINUTE", wantedlost[playerid]);
		PlayerTextDrawShow(playerid, WantedText);
		if(yesno){
			ini = PlayerInfo[playerid][pWantedLevel] - ini;
			SendFamilyMessage(1, 0x2641FEAA, "Dispecerat >> {ffffff}%s [%d] a comis o crima: %s. Raportat de: %s. W: +%d.", GetName(playerid),playerid, reason, turner, ini);
			SendMsg(playerid, COLOR_RED, "Server >> {ffffff}Ai comis o crima: %s, raportat de: %s. W: +%d.", reason, turner, ini);
		}
	}
	return true;
}
task TenSecondsTimer[10000]()
{
	foreach(new i : Player)
	{
		if(Logat[i])
		{
			switch(PlayerInfo[i][pWantedLevel])
			{
				case 0: SetPlayerWantedLevel(i, 0), PlayerTextDrawHide(i, WantedText);
				case 1: SetPlayerWantedLevel(i, 1);
				case 2:	SetPlayerWantedLevel(i, 2);
				case 3: SetPlayerWantedLevel(i, 3);
				case 4: SetPlayerWantedLevel(i, 4);
				case 5: SetPlayerWantedLevel(i, 5);
				case 6: SetPlayerWantedLevel(i, 6);
				default: if(PlayerInfo[i][pWantedLevel] > 6) PlayerInfo[i][pWantedLevel] = 6;			
			}
			if(PlayerInfo[i][pWantedLevel]) playerTextDrawShow(i, WantedText, "WANTED SCADE IN: ~r~%d MINUTE", wantedlost[i]);
			if(ac_kills[i])
			{
				ac_kills[i] = 0; 
			}
			if(GetPVarInt(i, "magie"))
			{
				DeletePVar(i, "magie");
			}
			if(GetPVarInt(i, "ftps"))
			{
				DeletePVar(i, "ftps");
			}
			if(GetPVarInt(i, "flys"))
			{
				DeletePVar(i, "flys");
			}
			if(GetPVarInt(i, "sflys"))
			{
				DeletePVar(i, "sflys");
			}
		}
	}
	gString[0] = (EOS);
	mysql_format(SQL, gString, 64, "SELECT * FROM `kenny_actions` WHERE `Gived` = '0'");
	mysql_tquery(SQL, gString, "SanctiuniPanel", "");
	return true;
}
function SanctiuniPanel(){
	for(new i, j = cache_num_rows(); i != j; ++i){
		new sID, UserID, UserName[MAX_PLAYER_NAME], AdminID, AdminName[MAX_PLAYER_NAME], STime, Reason[64], Type, ComplaintID;

		cache_get_value_name_int(i, "ID", sID);
		cache_get_value_name_int(i, "UserID", UserID);
		cache_get_value_name(i, "UserName", UserName);
		cache_get_value_name_int(i, "AdminID", AdminID);
		cache_get_value_name(i, "AdminName", AdminName);
		cache_get_value_name_int(i, "Time", STime);
		cache_get_value_name(i, "Reason", Reason);
		cache_get_value_name_int(i, "Type", Type);
		cache_get_value_name_int(i, "ComplaintID", ComplaintID);

		if(ComplaintID) format(Reason, 128, "%s(%d)", Reason, ComplaintID);
		else format(Reason, 128, "%s", Reason);

		switch(Type){
			case 1..2: BanUser(UserName, Reason, AdminName, AdminID, STime);
			case 3: WarnUser(UserName, Reason, AdminName, AdminID);
			case 4: {
				va_SendClientMessageToAll(COLOR_SANCTION, "Mute >> %s a fost amutit de %s pentru %d minute, motiv: %s.", UserName, AdminName, STime, Reason);

				Query_Mysql("UPDATE `users` SET `MuteTime` = '%d' WHERE `id` = '%d'", STime, UserID);
				
				gString[0] = (EOS);
				format(gString, 32, "SQLID%d", UserID);
				new
					playerid = GetSVarInt(gString) - 1
				;
				if(playerid != -1)
				{
					PlayerInfo[playerid][pMuteTime] = STime;
				}
			}
			case 5..6: {
				va_SendClientMessageToAll(COLOR_SANCTION, "Jail >> %s a fost inchis de %s, motiv: %s.", UserName, AdminName, Reason);

				Query_Mysql("UPDATE `users` SET `JailTime` = '%d', `Jailed` = '2', `GunLic` = '0' WHERE `id` = '%d'", STime, UserID);

				Query_Mysql("INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`actiontime`,`unixtime`) VALUES ('%d','%d','6','%s','%s','%s','10','%d')", 
					UserID, AdminID, Reason, UserName, AdminName, gettime());

				gString[0] = (EOS);
				format(gString, 32, "SQLID%d", UserID);
				new
					playerid = GetSVarInt(gString) - 1
				;
				if(playerid != -1)
				{
					WantedPoints[playerid] = 0;
					PlayerInfo[playerid][pJailed] = 2;
					PlayerInfo[playerid][pJailTime] = STime;
					PlayerInfo[playerid][pGunLic] = 0;
					defer Spawn(playerid, PlayerInfo[playerid][pSession]);
				}

			}
			case 7: {
				gString[0] = (EOS);
				format(gString, 32, "SQLID%d", UserID);
				new
					playerid = GetSVarInt(gString) - 1
				;
				if(playerid != -1)
				{
					va_SendClientMessageToAll(COLOR_SANCTION, "Kick >> %s a fost dat afara de %s, motiv: %s.", UserName, AdminName, Reason);
					defer KickEx(playerid, PlayerInfo[playerid][pSession]);
				}
			}
		}
		Query_Mysql("UPDATE `kenny_actions` SET `Gived` = '1' WHERE `ID` = '%d'", sID);
	}
	return true;
}
function UpdateSpec(playerid)
{
	if(!IsPlayerConnected(Spectate[playerid]) || Spectate[playerid] == INVALID_PLAYER_ID || !Logat[Spectate[playerid]])
		return PC_EmulateCommand(playerid, "/specoff");

	new
		id = Spectate[playerid]
	;

	if(IsPlayerInAnyVehicle(id))
	{	
		new
			vehicleid = GetPlayerVehicleID(id),
			Float: vHP
		;

		GetVehicleHealth(vehicleid, vHP);

		if(SpectateState[playerid] != 1)
		{
			SpectateState[playerid] = 1;
			PlayerSpectateVehicle(playerid, vehicleid);
		}

		va_PlayerTextDrawSetString(playerid, SpecPTD, "%s (~r~%d~w~) - L ~r~%d~n~~w~HP:~r~ %.2f~n~~w~W: ~r~%d ~w~- J: ~r~%d~n~~w~VEH: ~r~%d ~w~(~r~%.1f~w~ HP)~n~~w~SPEED: ~r~%d KM/H",
			GetName(id), id, PlayerInfo[id][pLevel], Health[id], PlayerInfo[id][pWantedLevel], PlayerInfo[id][pJailTime], vehicleid, vHP, VehSpeed(vehicleid));
	}
	else
	{
		if(SpectateState[playerid] != 2)
		{
			SpectateState[playerid] = 2;
			PlayerSpectatePlayer(playerid, id);
		}

		va_PlayerTextDrawSetString(playerid, SpecPTD, "%s (~r~%d~w~) - L ~r~%d~n~~w~HP:~r~ %.2f~n~~w~W: ~r~%d ~w~- J: ~r~%d",
			GetName(id), id, PlayerInfo[id][pLevel], Health[id], PlayerInfo[id][pWantedLevel], PlayerInfo[id][pJailTime]);
	}

	if(GetPlayerInterior(playerid) != GetPlayerInterior(id))
	{
		SetPlayerInterior(playerid, GetPlayerInterior(id));

		PlayerSpectatePlayer(playerid, id);
	}

	if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(id))
	{
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));

		PlayerSpectatePlayer(playerid, id);
	}

	return true;
}
function AssignPlayerFPS(playerid)
{
	new
		Drunk = GetPlayerDrunkLevel(playerid)
	;

	if(Drunk < 100)
	{
		SetPlayerDrunkLevel(playerid, 2000);
	}

	else
	{
		if(PlayerInfo[playerid][pDrunkLevelLast] != Drunk)
		{

			new
				FPS = PlayerInfo[playerid][pDrunkLevelLast] - Drunk
			;

			if(FPS > 0 && FPS < 400)
			{
				PlayerInfo[playerid][pFPS] = FPS;
			}

			PlayerInfo[playerid][pDrunkLevelLast] = Drunk;
		}
	}

	return true;
}
new
	Ruleta[5]
;
timer ExitLucky[2000](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	for(new i = 0; i < sizeof(LuckyTD); i++)
	{
		TextDrawHideForPlayer(playerid, LuckyTD[i]);
	}
	for(new i = 0; i < sizeof(LuckyPTD); i++)
	{
		PlayerTextDrawHide(playerid, LuckyPTD[i]);
	}
	LuckyStep[playerid] = 0;
	switch(LuckyType[playerid])
	{
		case 1:
		{
			new
				Vehicles[8] = {61, 59, 60, 2, 27, 18, 1, 6},
				FragmentSelected = SelectedFragment[playerid],
				StockID = Vehicles[FragmentSelected],
				VehModel = StockInfo[StockID][vModel]
			;
			if(LuckyObject[playerid][1] == VehModel)
			{
				SendMsg(playerid, COLOR_SERVER, "Fragments >> {ffffff}Ti-ai convertit cu succes fragmentele intr-un %s.", GetVehicleName(VehModel));
				InsertVehicle(playerid, StockID, true);
			}
			else
			{
				SendMsg(playerid, COLOR_SERVER, "Fragments >> {ffffff}Ti-a esuat convertirea fragmentelor intr-un %s.", GetVehicleName(VehModel));
			}
		}
		case 2:
		{
			new
				money = LuckyMoney[playerid]
			;
			if(LuckyObject[playerid][1] == 1274)
			{
				SendMsg(playerid, COLOR_SERVER, "Lucky >> {ffffff}Ti-ai dublat cei $%s, ai primit $%s.", FormatNumber(money), FormatNumber(money * 2));
				GivePlayerCash(playerid, money * 2);
				CastigatiLucky += money * 2;
				if(CastigatiLucky > 999_999_999)
				{
					MCastigatiLucky ++;
					CastigatiLucky -= 1_000_000_000;
				}
			}
			else
			{
				PierdutiLucky += money;
				if(PierdutiLucky > 999_999_999)
				{
					MPierdutiLucky ++;
					PierdutiLucky -= 1_000_000_000;
				}
				SendMsg(playerid, COLOR_SERVER, "Lucky >> {ffffff}Ti-a esuat dublarea, ai pierdut $%s.", FormatNumber(money));
			}
		}
		case 3:
		{
			new
				Icon[3] = {0, 1274, 1240},
				Type = UpgradeType[playerid],
				Amount = UpgradeAmount[playerid],
				Power = UpgradePower[playerid],
				ItemIcon = Icon[Type],
				NewAmount = Amount * Power
			;
			switch(Type)
			{
				case 1:
				{
					if(LuckyObject[playerid][1] == ItemIcon)
					{
						GivePlayerCash(playerid, NewAmount);
						SendMsg(playerid, COLOR_SERVER, "Upgrader >> {ffffff}Ti-a reusit Upgrade-ul pentru cei $%s, ai primit $%s.", FormatNumber(Amount), FormatNumber(NewAmount));
						CastigatiUpgrader += NewAmount;
						if(CastigatiUpgrader > 999_999_999)
						{
							MCastigatiUpgrader ++;
							CastigatiUpgrader -= 1_000_000_000;
						}
					}
					else
					{
						PierdutiUpgrader += Amount;
						if(PierdutiUpgrader > 999_999_999)
						{
							MPierdutiUpgrader ++;
							PierdutiUpgrader -= 1_000_000_000;
						}
						SendMsg(playerid, COLOR_SERVER, "Upgrader >> {ffffff}Ti-a esuat Upgrade-ul pentru cei $%s.", FormatNumber(Amount));
					}
				}
				case 2:
				{
					if(LuckyObject[playerid][1] == ItemIcon)
					{
						PlayerInfo[playerid][pPremiumPoints] += NewAmount;
						pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
						SendMsg(playerid, COLOR_SERVER, "Upgrader >> {ffffff}Ti-a reusit Upgrade-ul pentru cele %dPP, ai primit %dPP.", Amount, NewAmount);
						CastigateUpgrader += NewAmount;
					}
					else
					{
						SendMsg(playerid, COLOR_SERVER, "Upgrader >> {ffffff}Ti-a esuat Upgrade-ul pentru cele %dPP.", Amount);
						PierduteUpgrader += Amount;
					}
				}
			}
		}
	}
	LuckyType[playerid] = 0;
	return true;
}
function ExitRace(playerid)
{
	DestroyVehicleEx(QuestVeh[playerid]);
	QuestVeh[playerid] = -1;

	SetPlayerVirtualWorld(playerid, 0);

	switch(RaceType[playerid])
	{
		case 1:
		{		
			SetPlayerPosEx(playerid, 1380.5426, -925.7275, 33.8824);
		}
		case 2:
		{
			SetPlayerPosEx(playerid, 2892.0005, -783.5004, 10.5397);
		}
		case 3:
		{
			SetPlayerPosEx(playerid, -852.7993, 1856.9600, 59.8428);
		}
		case 4:
		{
			SetPlayerPosEx(playerid, -1910.6317, -748.4869, 44.3512);
		}
	}

	PlayerTextDrawHide(playerid, StuntPTD);

	DisablePlayerCheckpoint(playerid);
	CP[playerid] = 0;

	RaceTime[playerid] = 0;

	RaceType[playerid] = 0;

	return true;
}

new
	TimeForRace[4] = {110, 150, 125, 175}
;

task OneSecondTimer[1000]()
{
	if(Iter_Count(InRaceQuest))
	{
		foreach(new x : InRaceQuest)
		{
			new
				TypeRace = RaceType[x] - 1,
				RouteTime = TimeForRace[TypeRace]
			;

			RaceTime[x] --;

			if(RaceTime[x] > RouteTime)
			{
				va_PlayerTextDrawSetString(x, StuntPTD, "Cursa incepe in %d secunde", RaceTime[x] - RouteTime);

				if(RaceTime[x] - RouteTime < 4)
				{
					va_GameTextForPlayer(x, "%d", 1000, 4, RaceTime[x] - RouteTime);
				}
			}
			else
			{
				if(RaceTime[x] == RouteTime)
				{
					new
						CPID[4] = {400, 416, 435, 506}
					;

					FreezePlayer(x, false);

					CP[x] = CPID[TypeRace];

					switch(TypeRace + 1)
					{
						case 1:
						{
							SetPlayerCheckpointEx(x, CpsDailyQuest3[0][0], CpsDailyQuest3[0][1], CpsDailyQuest3[0][2], 4);
						}
						case 2:
						{
							SetPlayerCheckpointEx(x, CpsDailyQuest4[0][0], CpsDailyQuest4[0][1], CpsDailyQuest4[0][2], 4);
						}
						case 3:
						{
							SetPlayerCheckpointEx(x, CpsDailyQuest5[0][0], CpsDailyQuest5[0][1], CpsDailyQuest5[0][2], 4);
						}
						case 4:
						{
							SetPlayerCheckpointEx(x, CpsDailyQuest6[0][0], CpsDailyQuest6[0][1], CpsDailyQuest6[0][2], 4);
						}
					}
				}

				va_PlayerTextDrawSetString(x, StuntPTD, "Cursa se termina in %d secunde", RaceTime[x]);

				if(RaceTime[x] < 1)
				{
					ExitRace(x);

					Iter_SafeRemove(InRaceQuest, x, x);
				}
			}
		}
	}
	if(Iter_Count(MovingDice))
	{
		foreach(new x : MovingDice)
		{
			new
				rolled = MovingDiceID[x] - 1,
				randomdice = 1 + random(6),
				id = DicePartner[x]
			;

			DiceNumber[x][rolled] = randomdice;

			MovingDiceStep[x] ++;

			UpdateDices(x);

			UpdateDices(id);

			if(MovingDiceStep[x] >= 5)
			{
				new
					bool: DiceFinal = true
				;

				DiceRolled[x][rolled] = true;

				for(new i = 0; i < 2; i++)
				{
					if(DiceRolled[x][i] != true)
					{
						DiceFinal = false;
					}
				}

				for(new i = 0; i < 2; i++)
				{
					if(DiceRolled[id][i] != true)
					{
						DiceFinal = false;
					}
				}

				if(DiceFinal != false)
				{
					new
						scor1 = DiceNumber[x][0] + DiceNumber[x][1],
						scor2 = DiceNumber[id][0] + DiceNumber[id][1],
						money = DiceMoney[x],
						bool: NuAuBanii
					;

					if(GetPlayerCash(x) < money)
					{
						SendMsg(x, COLOR_SERVER, "Dice >> {ffffff}Nu ai banii necesari.");
						SendMsg(id, COLOR_SERVER, "Dice >> {ffffff}Adversarul nu are banii necesari.");

						NuAuBanii = true;
					}

					if(GetPlayerCash(id) < money)
					{
						SendMsg(id, COLOR_SERVER, "Dice >> {ffffff}Nu ai banii necesari.");
						SendMsg(x, COLOR_SERVER, "Dice >> {ffffff}Adversarul nu are banii necesari.");

						NuAuBanii = true;
					}

					if(NuAuBanii != true)
					{
						if(scor1 == scor2)
						{
							SendMsg(x, COLOR_SERVER, "Dice >> {ffffff}A fost egalitate.");
						}

						else
						{
							if(scor1 > scor2)
							{
								GivePlayerCash(x, money);
								GivePlayerCash(id, -money);

								SendMsg(x, COLOR_SERVER, "Dice >> {ffffff}Ai dat %d, iar %s %d, ai castigat.", scor1, GetName(id), scor2);
								SendMsg(id, COLOR_SERVER, "Dice >> {ffffff}Ai dat %d, iar %s %d, ai pierdut.", scor2, GetName(x), scor1);

								ProgressToTask(x, 4, 1);

								if(money >= 100_000)
								{
									ProgressToPerkMissions(x, 5, 1);
								}

								if(money >= 500_000)
								{
									ProgressToBattlepass(x, 1, 1);
								}
							}
							else
							{
								GivePlayerCash(x, -money);
								GivePlayerCash(id, money);

								SendMsg(x, COLOR_SERVER, "Dice >> {ffffff}Ai dat %d, iar %s %d, ai pierdut.", scor1, GetName(id), scor2);
								SendMsg(id, COLOR_SERVER, "Dice >> {ffffff}Ai dat %d, iar %s %d, ai castigat.", scor2, GetName(x), scor1);

								ProgressToTask(id, 4, 1);

								if(money >= 100_000)
								{
									ProgressToPerkMissions(id, 5, 1);
								}

								if(money >= 500_000)
								{
									ProgressToBattlepass(id, 1, 1);
								}
							}
						}

						for(new i = 0; i < 2; i++)
						{
							DiceRolled[x][i] = false;
						}

						for(new i = 0; i < 2; i++)
						{
							DiceRolled[id][i] = false;
						}
					}
				}

				MovingDiceStep[x] = 0;

				Iter_SafeRemove(MovingDice, x, x);
			}
		}
	}
	if(Iter_Count(InStunt))
	{
		foreach(new x : InStunt)
		{
			if(StuntTime[x] > 0)
			{
				new
					Float: vHealth
				;
				GetVehicleHealth(StuntVehicle[x], vHealth);
				if(vHealth < 300)
				{
					RepairVehicleEx(StuntVehicle[x]);
				}
				StuntTime[x] --;
				va_PlayerTextDrawSetString(x, StuntPTD, "Stunt System~n~~w~Mai ai %d de secunde.", StuntTime[x]);
			}
			else
			{
				DisablePlayerCheckpoint(x);
				CP[x] = 0;
				PlayerTextDrawHide(x, StuntPTD);
				DestroyVehicleEx(StuntVehicle[x]);
				StuntVehicle[x] = -1;
				StuntTime[x] = 0;
				SetPlayerPosEx(x, LocationPos[6][0], LocationPos[6][1], LocationPos[6][2]);
				SetPlayerVirtualWorld(x, 0);
				SendMsg(x, COLOR_SERVER, "Stunt >> {ffffff}Ai esuat Stunt-ul deoarece au trecut 90 de secunde.");
				Iter_SafeRemove(InStunt, x, x);
			}
		}
	}
	if(Iter_Count(InLucky))
	{
		foreach(new x : InLucky)
		{
			if(LuckyStep[x] < 10)
			{
				new
					Objects[2] = {1654, 1}
				;
				switch(LuckyType[x])
				{
					case 1:
					{
						new
							Vehicles[8] = {61, 59, 60, 2, 27, 18, 1, 6},
							FragmentSelected = SelectedFragment[x],
							StockID = Vehicles[FragmentSelected],
							VehModel = StockInfo[StockID][vModel]
						;
						Objects[1] = VehModel;
					}
					case 2:
					{
						Objects[1] = 1274;
					}
					case 3:
					{
						new
							Icon[3] = {0, 1274, 1240}
						;
						Objects[1] = Icon[UpgradeType[x]];
					}
				}
				for(new i = 2; i >= 1; i--)
				{
					LuckyObject[x][i] = LuckyObject[x][i - 1];
				}
				switch(LuckyType[x])
				{
					case 1, 2:
					{
						LuckyObject[x][0] = Objects[random(2)];
					}
					case 3:
					{
						new
							Power = UpgradePower[x]
						;
						switch(Power)
						{
							case 2:
							{
								LuckyObject[x][0] = Objects[random(2)];
							}
							case 5:
							{
								new
									Sanse[10] = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
									Rand = random(sizeof(Sanse))
								;
								LuckyObject[x][0] = Objects[1 * Sanse[Rand]];
							}
							case 10:
							{
								new
									Sanse[10] = {0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
									Rand = random(sizeof(Sanse))
								;
								LuckyObject[x][0] = Objects[1 * Sanse[Rand]];
							}
						}
					}
				}
				for(new i = 0; i < sizeof(LuckyPTD); i++)
				{
					PlayerTextDrawSetPreviewModel(x, LuckyPTD[i], LuckyObject[x][i]);
					PlayerTextDrawShow(x, LuckyPTD[i]);
				}
				LuckyStep[x] ++;
			}
			else
			{
				defer ExitLucky(x, PlayerInfo[x][pSession]);
				Iter_SafeRemove(InLucky, x, x);
			}
		}
	}

	new
		hour,
		minute,
		second,
		year,
		month,
		day
	;

	gettime(hour, minute, second);
	getdate(year, month, day);

	va_TextDrawSetString(DateTD, "%02d:%02d:%02d~n~~w~~h~%02d/%02d/%02d", hour, minute, second, day, month, year);
	va_TextDrawSetString(DateATD, "%02d:%02d:%02d~n~~w~~h~%02d/%02d/%02d", hour, minute, second, day, month, year);

	if(Iter_Count(InCasinoSlots))
	{
		foreach(new x : InCasinoSlots)
		{
			switch(SlotsDate[x])
			{
				case 0..6:
				{
					for(new i = 2; i >= 1; i--)
					{
						ObjectSlots[x][i][0] = ObjectSlots[x][i - 1][0];
						PlayerTextDrawSetPreviewModel(x, SlotsPTD[i], ObjectSlots[x][i][0]);
						PlayerTextDrawShow(x, SlotsPTD[i]);
					}
					ObjectSlots[x][0][0] = TypeSlots[random(9)];
					PlayerTextDrawSetPreviewModel(x, SlotsPTD[0], ObjectSlots[x][0][0]);
					PlayerTextDrawShow(x, SlotsPTD[0]);
					SlotsDate[x] ++;
				}
				case 7..13:
				{
					for(new i = 2; i >= 1; i--)
					{
						ObjectSlots[x][i][1] = ObjectSlots[x][i - 1][1];
						PlayerTextDrawSetPreviewModel(x, SlotsPTD[i + 3], ObjectSlots[x][i][1]);
						PlayerTextDrawShow(x, SlotsPTD[i + 3]);
					}
					ObjectSlots[x][0][1] = TypeSlots[random(9)];
					PlayerTextDrawSetPreviewModel(x, SlotsPTD[3], ObjectSlots[x][0][1]);
					PlayerTextDrawShow(x, SlotsPTD[3]);
					SlotsDate[x] ++;
				}
				case 14..20:
				{
					for(new i = 2; i >= 1; i--)
					{
						ObjectSlots[x][i][2] = ObjectSlots[x][i - 1][2];
						PlayerTextDrawSetPreviewModel(x, SlotsPTD[i + 6], ObjectSlots[x][i][2]);
						PlayerTextDrawShow(x, SlotsPTD[i + 6]);
					}
					ObjectSlots[x][0][2] = TypeSlots[random(9)];
					PlayerTextDrawSetPreviewModel(x, SlotsPTD[6], ObjectSlots[x][0][2]);
					PlayerTextDrawShow(x, SlotsPTD[6]);
					SlotsDate[x] ++;
				}
				case 21:
				{
					new
						Matches[9]
					;
					for(new i = 0; i < 3; i++)
					{					
						for(new j = 0; j < 9; j++)
						{
							if(TypeSlots[j] == ObjectSlots[x][1][i])
							{
								Matches[j] ++;
							}
						}
					}
					new
						bool: Castigator
					;
					for(new i = 0; i < 9; i++)
					{
						switch(Matches[i])
						{
							case 2:
							{
								new
									Suma = SlotsBet[x] * 2
								;
								SendMsg(x, COLOR_SERVER, "Sloturi >> {ffffff}Ai castigat $%s.", FormatNumber(Suma));
								GivePlayerCash(x, Suma);
								Castigator = true;
								CastigatiSlots += Suma;
								if(CastigatiSlots > 999_999_999)
								{
									MCastigatiSlots ++;
									CastigatiSlots -= 1_000_000_000;
								}
								break;
							}
							case 3:
							{
								new
									Suma = SlotsBet[x] * 5
								;
								SendMsg(x, COLOR_SERVER, "Sloturi >> {ffffff}Ai castigat $%s.", FormatNumber(Suma));
								GivePlayerCash(x, Suma);
								Castigator = true;
								CastigatiSlots += Suma;
								if(CastigatiSlots > 999_999_999)
								{
									MCastigatiSlots ++;
									CastigatiSlots -= 1_000_000_000;
								}
								break;
							}
						}
					}
					if(Castigator != true)
					{
						new
							Suma = SlotsBet[x]
						;
						SendMsg(x, COLOR_SERVER, "Sloturi >> {ffffff}Ai pierdut $%s.", FormatNumber(Suma));
					}
					Iter_SafeRemove(InCasinoSlots, x, x);
				}
			}
		}
	}
	if(Iter_Count(InParkour))
	{
		foreach(new x : InParkour)
		{
			new
				Float: floatx,
				Float: floaty,
				Float: floatz

			;
			GetPlayerPos(x, floatx, floaty, floatz);

			if(floatz < 200)
			{
				StartParkour(x);
			}
		}
	}
	if(Iter_Count(RainbowVehicles))
	{	
		foreach(new x : RainbowVehicles)
		{
			RainbowStep[x] ++;
			if(RainbowStep[x] == sizeof(RainbowColors))
			{
				RainbowStep[x] = 0;
			}
			new
				Step = RainbowStep[x],
				Color = RainbowColors[Step]
			;
			ChangeVehicleColor(x, Color, Color);
		}
	}
	if(SkyWarsTimer != 0)
	{
		if(SkyWarsStarted == false)
		{
			if(SkyWarsTimer - gettime() > 0)
			{
				va_TextDrawSetString(SkyWarsTD, "Runda incepe in %d secunde.", SkyWarsTimer - gettime());
			}
			else
			{
				for(new i; i < sizeof(SkyWarsWeapons); i++)
				{
					new
						Float: X = SkyWarsWeapons[i][0],
						Float: Y = SkyWarsWeapons[i][1],
						Float: Z = SkyWarsWeapons[i][2],
						Weapon = floatround(SkyWarsWeapons[i][3]),
						Pickup = CreateDynamicPickup(Weapon, 1, X, Y, Z, -1, -1)
					;
					switch(Weapon)
					{
						case 356: // M4
						{
							Iter_Add(SkyWarsPickups[0], Pickup);
						}
						case 348: // Deagle
						{
							Iter_Add(SkyWarsPickups[1], Pickup);
						}
						case 349: // Shotgun
						{
							Iter_Add(SkyWarsPickups[2], Pickup);
						}
						case 359: // Rocket Launcher
						{
							Iter_Add(SkyWarsPickups[3], Pickup);
						}
					}
				}
				SkyWarsTimer = gettime() + 180;
				va_TextDrawSetString(SkyWarsTD, "Runda se termina in %d secunde.", SkyWarsTimer - gettime());
				SkyWarsStarted = true;


				foreach(new x : InSkyWars)
				{
					for(new i = 0; i < 4; i++)
					{
						if(InsulaSkywars[i] == x)
						{	
							new
								Float: X = SkyWarsPos[i][0],
								Float: Y = SkyWarsPos[i][1],
								Float: Z = SkyWarsPos[i][2]
							;
							SetPlayerPosEx(x, X, Y, Z);
							FreezePlayer(x, true);
							defer UnfreezeTimer(x, PlayerInfo[x][pSession]);
							SetPlayerHP(x, 100);
							ResetPlayerWeapons(x);
						}
					}
				}
				for(new i = 0; i < 4; i++)
				{
					InsulaSkywars[i] = -1;
				}
			}	
		}
		else
		{
			if(SkyWarsTimer - gettime() > 0)
			{
				va_TextDrawSetString(SkyWarsTD, "Runda se termina in %d secunde.", SkyWarsTimer - gettime());
			}
			else
			{
				foreach(new x : InSkyWars)
				{
					defer Spawn(x, PlayerInfo[x][pSession]);
					SetPVarInt(x, "TrebuieTeleportat", 1);
				}
			}
		}
	}
	if(ac_trolltimer != false)
	{
		foreach(new x : WithState[1])
		{
			if(PlayerInfo[x][pAdmin] < 1)
			{
				new Float: Vel[3];
				GetPlayerVelocity(x, Vel[0], Vel[1], Vel[2]);
				new Float:vel1 = Vel[0] - LastVel[x][0], Float:vel2 = Vel[1] - LastVel[x][2];
				if(vel1 > 6.0 || vel1 < -8.0 || vel2 > 20.0 || vel2 < -20.0 || Vel[2] == 0.100000)
				{
					AKick(x, "troll hack #6"); 
				}
				GetPlayerVelocity(x, LastVel[x][0], LastVel[x][1], LastVel[x][2]);
			}
		}
		foreach(new x : WithState[2])
		{
			if(PlayerInfo[x][pAdmin] < 1)
			{
				new
					Float: Vel[3],
					vid = GetPlayerVehicleID(x);

				GetVehicleVelocity(vid, Vel[0], Vel[1], Vel[2]);

				if(Vel[1] == -90.000000 && Vel[2] == 0.100000)
				{
					AKick(x, "troll hack #5"); 
				}
			}
		}
	}
	foreach(new x : InLogin){
		if(GetPVarInt(x, "TimerLogin") < gettime()){
			SendMsg(x, COLOR_SERVER, "Logare >> {ffffff}Ai fost dat afara deoarece nu te-ai logat in 60 secunde.");
			defer KickEx(x, PlayerInfo[x][pSession]);
		}
	}
	if(Iter_Count(InLogin) > 0 && Iter_Count(InLogin) < 10){
		foreach(new i : Player){
			if(!Logat[i] && !Iter_Contains(InLogin, i)){
				CheckLoginQueue(i);
			}
		}
	}
	if(!Iter_Count(InRuleta) && (GetSVarInt("Ruleta") || GetSVarInt("SecundeRuleta"))) StopRoulette();
	if(Iter_Count(InRuleta)){
		if(JucatoriRuleta()){
			if(!GetSVarInt("Ruleta")){
				SetSVarInt("SecundeRuleta", GetSVarInt("SecundeRuleta") - 1);
				va_TextDrawSetString(RuletaTD[11], "Ruleta se invarte in %d secunde.", GetSVarInt("SecundeRuleta"));
				if(!GetSVarInt("SecundeRuleta")) {
					SetSVarInt("Ruleta", 1);
					TextDrawSetString(RuletaTD[11], "Ruleta se invarte...");
					for(new i; i < 5; i++){
						Ruleta[i] = random(37);
						TextDrawBoxColor(RuletaTD[i + 5], CuloareNumar(Ruleta[i]));
						foreach(new x : InRuleta) TextDrawShowForPlayer(x, RuletaTD[i + 5]);
					}
				}
				foreach(new i : InRuleta) TextDrawShowForPlayer(i, RuletaTD[11]);
			}
			if(GetSVarInt("Ruleta")){
				SetSVarInt("RuletaRamase", GetSVarInt("RuletaRamase") - 1);
				for(new i; i < 4; i++){
					Ruleta[i] = Ruleta[i + 1];
				}
				Ruleta[4] = random(37);
				for(new i; i < 5; i++){
					TextDrawBoxColor(RuletaTD[i + 5], CuloareNumar(Ruleta[i]));
					foreach(new x : InRuleta) TextDrawShowForPlayer(x, RuletaTD[i + 5]);
				}
				if(!GetSVarInt("RuletaRamase")){
					foreach(new i : VotRuleta[0]){
						if(CuloareNumar(Ruleta[2]) == 255) {
							GivePlayerCash(i, floatround(GetPVarInt(i, "SumaPariata") * 2));
							CastigatiRuleta += floatround(GetPVarInt(i, "SumaPariata") * 2);
							if(CastigatiRuleta > 999_999_999)
							{
								MCastigatiRuleta ++;
								CastigatiRuleta -= 1_000_000_000;
							}
							Info(i, "Ai castigat $%s deoarece ai pariat pe Negru.", FormatNumber(floatround(GetPVarInt(i, "SumaPariata") * 2)));
						}
						else {
							PierdutiRuleta += GetPVarInt(i, "SumaPariata");
							if(PierdutiRuleta > 999_999_999)
							{
								MPierdutiRuleta ++;
								PierdutiRuleta -= 1_000_000_000;
							}
							Info(i, "Ai pierdut $%s deoarece ai pariat pe Negru.", FormatNumber(GetPVarInt(i, "SumaPariata")));
						}
					}
					foreach(new i : VotRuleta[1]){
						if(CuloareNumar(Ruleta[2]) == 1677721855) {
							GivePlayerCash(i, floatround(GetPVarInt(i, "SumaPariata") * 2));
							CastigatiRuleta += floatround(GetPVarInt(i, "SumaPariata") * 2);
							if(CastigatiRuleta > 999_999_999)
							{
								MCastigatiRuleta ++;
								CastigatiRuleta -= 1_000_000_000;
							}
							Info(i, "Ai castigat $%s deoarece ai pariat pe Rosu.", FormatNumber(floatround(GetPVarInt(i, "SumaPariata") * 2)));
						}
						else {
							PierdutiRuleta += GetPVarInt(i, "SumaPariata");
							if(PierdutiRuleta > 999_999_999)
							{
								MPierdutiRuleta ++;
								PierdutiRuleta -= 1_000_000_000;
							}
							Info(i, "Ai pierdut $%s deoarece ai pariat pe Rosu.", FormatNumber(GetPVarInt(i, "SumaPariata")));
						}
					}
					foreach(new i : VotRuleta[2]){
						if(CuloareNumar(Ruleta[2]) == 6553855) {
							GivePlayerCash(i, GetPVarInt(i, "SumaPariata") * 6);
							CastigatiRuleta += GetPVarInt(i, "SumaPariata") * 6;
							if(CastigatiRuleta > 999_999_999)
							{
								MCastigatiRuleta ++;
								CastigatiRuleta -= 1_000_000_000;
							}
							Info(i, "Ai castigat $%s deoarece ai pariat pe Verde.", FormatNumber(GetPVarInt(i, "SumaPariata") * 6));
						}
						else {
							PierdutiRuleta += GetPVarInt(i, "SumaPariata");
							if(PierdutiRuleta > 999_999_999)
							{
								MPierdutiRuleta ++;
								PierdutiRuleta -= 1_000_000_000;
							}
							Info(i, "Ai pierdut $%s deoarece ai pariat pe Verde.", FormatNumber(GetPVarInt(i, "SumaPariata")));
						}
					}
					StopRoulette();
				}
			}
		}
	}
	if(ServerWars)
	{
		new
			i = WarOnTurf,
			attackers = WarInfo[wAttacker],
			defenders = WarInfo[wFaction],
			atscore,
			defscore,
			winner,
			oamenipeturf[4]
		;

		if(WarInfo[wTime])
		{
			WarInfo[wTime] --;

			for(new m = 2; m < 4; m++)
			{
				foreach(new x : FactionMembers[m])
				{	
					if(OnDuty[x])
					{
						if(IsPlayerInTurf(x, i))
						{
							oamenipeturf[PlayerInfo[x][pMember]] ++;
							SecondsOnTurf[x] ++;
						}

						new
							WarString[256]
						;

						format(WarString, sizeof(WarString), "~w~~h~Turf id: %d~n~%s %d - %d %s~n~Round %d/15~n~%s %d - %d %s~n~War Time: %s~n~Kills: %d Deaths: %d Seconds: %d~n~On turf: %s %d - %d %s",
							i, FactionName(attackers), WarWinRounds[attackers], WarWinRounds[defenders], FactionName(defenders), WarRounds,
							FactionName(attackers), WarScoreF[attackers], WarScoreF[defenders], FactionName(defenders), CalculeazaTimp(WarInfo[wTime]), PlayerKills[x], PlayerDeaths[x],
							SecondsOnTurf[x], FactionName(attackers), oamenipeturf[attackers], oamenipeturf[defenders], FactionName(defenders)
						);

						PlayerTextDrawSetString(x, WarPTD, WarString);
						
						GangZoneFlashForPlayer(x, Turfs[i], GetFactionColor(attackers));

						if(IsPlayerInAnyVehicle(x) && IsAPlane(GetPlayerVehicleID(x))) RemovePlayerFromVehicle(x), Info(x, "Nu te poti deplasa cu un elicopter in timpul warului.");
					}
				}
			}

			if(WarInfo[wTime] == 0)
			{
				atscore = WarScoreF[attackers];
				defscore = WarScoreF[defenders];

				if(atscore >= defscore) winner = 1;
				else winner = 2;

				if(WarRounds < 15)
				{
					switch(winner)
					{
						case 1:
						{
							WarWinRounds[attackers] ++;
						}
						case 2:
						{
							WarWinRounds[defenders] ++;
						}
					}
					for(new m = 2; m < 4; m++)
					{
						RoundScore[m] = 0;
						WarScoreF[m] = 0;
					}

					WarInfo[wTime] = 120;

					if(WarRounds >= 2)
					{
						if(oamenipeturf[attackers] > oamenipeturf[defenders])
						{
							WarScoreF[attackers] ++;
							SendFamilyMessage(attackers, GetFactionColor(attackers), "War >> {ffffff}Datorita numarului de participanti pe turf, ati primit un punct.");
							SendFamilyMessage(defenders, GetFactionColor(defenders), "War >> {ffffff}Datorita numarului de participanti pe turf, rivalii au primit un punct.");
						}
						else if(oamenipeturf[defenders] > oamenipeturf[attackers])
						{
							WarScoreF[defenders] ++;
							SendFamilyMessage(defenders, GetFactionColor(defenders), "War >> {ffffff}Datorita numarului de participanti pe turf, ati primit un punct.");
							SendFamilyMessage(attackers, GetFactionColor(attackers), "War >> {ffffff}Datorita numarului de participanti pe turf, rivalii au primit un punct.");
						}
					}

					WarRounds ++;
				}
				else
				{

					if(WarWinRounds[attackers] >= WarWinRounds[defenders]) winner = 1;
					else winner = 2;

					WarScoreF[attackers] = 0;
					WarScoreF[defenders] = 0;

					switch(winner)
					{
						case 1:
						{
							TurfInfo[i][zOwned] = attackers;
							Query_Mysql("UPDATE `turfs` SET `Owned` = '%d' WHERE `ID` = '%d'", TurfInfo[i][zOwned], i);
						}
						case 2:
						{
							TurfInfo[i][zOwned] = defenders;
						}
					}

					new
						ScoruriMafioti[20][4],
						Size = sizeof(ScoruriMafioti),
						LastID,
						LastWorster = -1
					;

					for(new n = 0; n < Size; n++)
					{
						ScoruriMafioti[n][0] = -1;
					}

					for(new m = 2; m < 4; m++)
					{
						foreach(new x : FactionMembers[m])
						{
							new
								Ucideri = PlayerKills[x],
								Decese = PlayerDeaths[x],
								Scor = Ucideri - Decese
							;

							ScoruriMafioti[LastID][0] = x;
							ScoruriMafioti[LastID][1] = Scor;
							ScoruriMafioti[LastID][2] = Ucideri;
							ScoruriMafioti[LastID][3] = Decese;

							LastID ++;
						}
					}

					for(new k = 0; k < Size - 1; k ++)
				    {
				    	for(new j = k + 1; j < Size; j++)
				    	{
				    		if(ScoruriMafioti[k][1] < ScoruriMafioti[j][1])
				    		{
				    			new
				    				Aux1 = ScoruriMafioti[k][0],
				    				Aux2 = ScoruriMafioti[k][1],
				    				Aux3 = ScoruriMafioti[k][2],
				    				Aux4 = ScoruriMafioti[k][3]
				    			;

				    			ScoruriMafioti[k][0] = ScoruriMafioti[j][0];
				    			ScoruriMafioti[k][1] = ScoruriMafioti[j][1];
				    			ScoruriMafioti[k][2] = ScoruriMafioti[j][2];
				    			ScoruriMafioti[k][3] = ScoruriMafioti[j][3];

				    			ScoruriMafioti[j][0] = Aux1;
				    			ScoruriMafioti[j][1] = Aux2;
				    			ScoruriMafioti[j][2] = Aux3;
				    			ScoruriMafioti[j][3] = Aux4;
				    		}
				    	}
				    }

				    va_TextDrawSetString(FinishWarTD[2], "%s %d - %d %s", (winner == 1) ? (FactionName(attackers)) : (FactionName(defenders)), (winner == 1) ? (atscore) : (defscore), (winner == 1) ? (defscore) : (atscore), (winner == 1) ? (FactionName(defenders)) : (FactionName(attackers)));
				    for(new p = 0; p < 10; p++)
				    {
				    	if(ScoruriMafioti[p][0] != -1)
				    	{
					    	new
								ID = ScoruriMafioti[p][0],
								Score = ScoruriMafioti[p][1],
								Kills = ScoruriMafioti[p][2],
								Deaths = ScoruriMafioti[p][3]
							;
					    	va_TextDrawSetString(FinishWarTD[p + 3], "%s - %d(%d - %d)", GetName(ID), Score, Kills, Deaths);
				    	}
				    	else
				    	{
				    		va_TextDrawSetString(FinishWarTD[p + 3], "...");
				    	}
				    }
					for(new j = 0; j < Size; j ++)
				    {
				    	if(ScoruriMafioti[j][0] != -1)
				    	{
					    	LastWorster = j;
				    	}
				    }

				    if(LastWorster != -1)
				    {
						new
							ID = ScoruriMafioti[LastWorster][0],
							Score = ScoruriMafioti[LastWorster][1],
							Kills = ScoruriMafioti[LastWorster][2],
							Deaths = ScoruriMafioti[LastWorster][3]
						;
				    	va_TextDrawSetString(FinishWarTD[14], "%s - %d(%d - %d)", GetName(ID), Score, Kills, Deaths);
				    }
				    else
				    {
				    	TextDrawSetString(FinishWarTD[14], "---");
				    }

					va_SendClientMessageToAll(COLOR_SERVER, "Server >> {ffffff}Gruparea mafiota %s a %s teritoriul #%d %s de mafia %s.", (winner == 1) ? (FactionName(attackers)) : (FactionName(defenders)), (winner == 1) ? ("cucerit") : ("aparat"), i, (winner == 1) ? ("detinut") : ("atacat"), (winner == 1) ? (FactionName(defenders)) : (FactionName(attackers)));
					
					for(new m = 2; m < 4; m++)
					{
						new
							Float: X = FacInfo[m][fcX],
							Float: Y = FacInfo[m][fcY],
							Float: Z = FacInfo[m][fcZ],
							Int = FacInfo[m][fInterior]
						;
						foreach(new x : FactionMembers[m])
						{
							new
								IDTau
							;
							for(new g = 0; g < 20; g++)
							{
								if(ScoruriMafioti[g][0] == x)
								{
									IDTau = g;
								}
							}
					    	for(new n = 0; n < sizeof(FinishWarTD); n++)
					    	{
					    		TextDrawShowForPlayer(x, FinishWarTD[n]);
					    	}
					    	va_PlayerTextDrawSetString(x, FinishWarPTD, "Scorul tau: %d (%d Ucideri - %d Decese)", ScoruriMafioti[IDTau][1], ScoruriMafioti[IDTau][2], ScoruriMafioti[IDTau][3]);
					    	PlayerTextDrawShow(x, FinishWarPTD);
					    	InFinishWarTD[x] = true;
					    	SelectTextDraw(x, HOVER_COLOR);
							SecondsOnTurf[x] = 0;
							GangZoneStopFlashForPlayer(x, Turfs[i]);
							if(OnDuty[x])
							{
								new
									Ucideri = PlayerKills[x],
									Decese = PlayerDeaths[x],
									Scor = Ucideri - Decese
								;

								PlayerInfo[x][pKills] += Ucideri;
								pUpdateInt(x, "Kills", PlayerInfo[x][pKills]);
								PlayerInfo[x][pDeaths] += Decese;
								pUpdateInt(x, "Deaths", PlayerInfo[x][pDeaths]);

								if(Scor > 0)
								{
									new
										Money = Scor * 500_000
									;
									GivePlayerCash(x, Money);
									SendMsg(x, COLOR_SERVER, "War >> {ffffff}Pentru scorul obtinut, ai primit $%s.", FormatNumber(Money));
								}

								for(new j = 0; j != 5; j++)
								{
									SendDeathMessageToPlayer(x, 1001, 1001, 1001);
								}

								SendMsg(x, 0x33AA33AA, "Your personal score: %d (%d kills, %d deaths).", Scor, Ucideri, Decese);
								if(LastWar >= 3)
								{
									PlayerTextDrawHide(x, WarPTD);
								}
								SetPlayerPosEx(x, X, Y, Z);
								SetPlayerInterior(x, Int);
								SetPlayerVirtualWorld(x, m);
								InHQ[x] = m;
								FreezePlayer(x, true);
								defer UnfreezeTimer(x, PlayerInfo[x][pSession]);
								PlayerKills[x] = 0;
								PlayerDeaths[x] = 0;
							}
							for(new f = 2; f < 4; f++)
							{
								foreach(new g : FactionMembers[f])
								{
									SetPlayerMarkerForPlayer(x, g, ((GetFactionColor(PlayerInfo[g][pMember]) & 0xffffff00)));
								}
							}
							if(NeedRemoveFromWarVehicle[x] != false)
							{
								NeedRemoveFromWarVehicle[x] = false;
								stop RemoveFromWarVehicle[x];
							}
						}
					}

					foreach(new x : Player)
					{
						if(TurfsDisp[x])
						{
							if(TurfInfo[i][zOwned] == 2) GangZoneShowForPlayerEx(x, Turfs[i], 0x156314aa); 
							if(TurfInfo[i][zOwned] == 3) GangZoneShowForPlayerEx(x, Turfs[i], 0x8a1676aa); 
						}
					}

					ServerWars = false;
					WarInfo[wTime] = 0;
					WarInfo[wFaction] = 0;
					WarInfo[wAttacker] = 0;

					foreach(new p : WarHP)
					{
						DestroyDynamicPickup(p);
					}
					Iter_Clear(WarHP);

					foreach(new p : WarWeapons)
					{
						DestroyDynamicPickup(p);
					}
					Iter_Clear(WarWeapons);

					WarOnTurf = 0;

					mysql_tquery(SQL, "update users set WarKills = 0, WarDeaths = 0 where WarKills <> 0 or WarDeaths <> 0");
					
					if(LastWar < 3)
					{
						LastWar ++;
						StartWars(TodayWar[LastWar], TodayTurf[LastWar]);
					}
					else
					{
						ChooseWars();
					}
				}
			}
		}
	}
	foreach(new x : Spectators)
	{
		if(Spectate[x] != -1)
		{
			UpdateSpec(x);
		}
	}
	new
		bool: SkipVehicle[MAX_VEHICLES]
	;
	foreach(new x : RacePerk)
	{
		if(GetPlayerState(x) == PLAYER_STATE_DRIVER)
		{
			new
				Vehicle = GetPlayerVehicleID(x),
				Model = GetVehicleModel(Vehicle),
				MaxSpeed = GetVehicleMaxSpeed(Model),
				Speed = VehSpeed(Vehicle),
				SpeedWithPerk = 0,
				Bonus = 0,
				Float: Velocity = 0
			;

			if(PerkActive[x][28])
			{
				Bonus = 15;
				Velocity = 1.07;
			}
			else if(PerkActive[x][27])
			{
				Bonus = 10;
				Velocity = 1.065;
			}
			else if(PerkActive[x][26])
			{
				Bonus = 5;
				Velocity = 1.0625;
			}
			else if(PerkActive[x][25])
			{
				Bonus = 3;
				Velocity = 1.06;
			}

			SpeedWithPerk = MaxSpeed + Bonus;

			if(VehicleWithStage[Vehicle])
			{
				SpeedWithPerk += 25;
				Velocity = 1.10;
			}

			if(Speed >= MaxSpeed && Speed <= SpeedWithPerk)
			{
				new
					Float: vx,
					Float: vy,
					Float: vz
				;

				GetVehicleVelocity(Vehicle, vx, vy, vz);
				SetVehicleVelocity(Vehicle, vx * Velocity, vy * Velocity, vz * Velocity);
			}

			SkipVehicle[Vehicle] = true;
		}
	}
	foreach(new x : StageVehicles)
	{	
		if(IsValidVehicle(x) && SkipVehicle[x] != true)
		{
			new
				Model = GetVehicleModel(x),
				MaxSpeed = GetVehicleMaxSpeed(Model),
				Speed = VehSpeed(x),
				MaxStageSpeed = MaxSpeed + 25
			;

			if(Speed >= MaxSpeed && Speed <= MaxStageSpeed)
			{
				new
					Float: vx,
					Float: vy,
					Float: vz
				;

				GetVehicleVelocity(x, vx, vy, vz);
				SetVehicleVelocity(x, vx * 1.10, vy * 1.10, vz * 1.10);
			}
		}
	}
	foreach(new x : WithState[2])
	{
		if(IsPlayerInAnyVehicle(x))
		{	
			new
				veh = GetPlayerVehicleID(x)
			;
			if(!IsAPlane(veh) && VehSpeed(veh) > 275 && !PlayerInfo[x][pAdmin])
			{
				SendAdmins(COLOR_RED, "%s (%d / nivel %d) poate folosi speed hack, vehicul: %s, viteza: %.0d.", 1, GetName(x), x, GetPlayerScore(x), GetVehicleName(GetVehicleModel(veh)), VehSpeed(veh));
			}
			if(!IsAPlane(veh) && VehSpeed(veh) > 350 && !PlayerInfo[x][pAdmin])
			{
				AKick(x, "speed hack");
			}
			if(VehSpeed(veh) < 3){	
				if(!GetPVarInt(x, "NeedSpawn") && !PlayerInfo[x][pAdmin] && Spectate[x] == -1 && !IsPlayerInRangeOfPoint(x, 10, LastVehX[x], LastVehY[x], LastVehZ[x]))
				{
					SetPVarInt(x, "flys", GetPVarInt(x, "flys") + 1);
					if(GetPVarInt(x, "flys") == 3)
					{
						AKick(x, "vehicle fly hack");
					}
				}
				GetVehiclePos(veh, LastVehX[x], LastVehY[x], LastVehZ[x]);	
			}
			if(OwnableVehicle(veh) && !IsPlayerAFK[x])
			{
				foreach(new xyz : Player)
				{
					for(new v; v < MAX_PERSONAL_VEHICLES; v++)
					{
						if(PlayerInfo[xyz][pVehID][v] == veh)
						{
							PlayerInfo[xyz][pVehKM][v] += VehSpeed(veh) * 0.000277778;
							if(xyz == x)
							{
								if(PlayerInfo[xyz][pVehKM][v] - LastVehKM[veh] >= 1)
								{
									LastVehKM[veh] = PlayerInfo[xyz][pVehKM][v];
									ProgressToBattlepass(xyz, 4, 1);
									ProgressToBattlepass(xyz, 14, 1);
								}
							}
						}
					}
				}
			}
			if(IsABoat(veh) && PlayerInfo[x][pBoatLic] < 1)
			{
				if(ExamVeh[x] != veh)
				{
					RemovePlayerFromVehicle(x);	
				}
			}
			if(IsAPlane(veh) && PlayerInfo[x][pFlyLic] < 1)
			{
				if(ExamVeh[x] != veh)
				{
					RemovePlayerFromVehicle(x);	
				}
			}
			if(InTextdrawMenu[x] != 7)
			{
				new
					speed = VehSpeed(veh),
					lock[16]
				;

				if(VehicleLocked[veh] == true)
				{
					lock = "Incuiate"; 
				}
				else
				{
					lock = "Descuiate";
				}

				if(!IsABike(veh) && !IsAPlane(veh) && !IsABoat(veh))
				{
					va_PlayerTextDrawSetString(x, SpeedPTD, "Viteza: ~g~~h~%d~w~~h~ km/h Combustibil: ~g~~h~%d~w~~h~%% Usi: ~g~~h~%s", speed, Gas[veh], lock); 
				} 
				else
				{
					va_PlayerTextDrawSetString(x, SpeedPTD, "Viteza: ~g~~h~%d~w~~h~ km/h Usi: ~g~~h~%s", speed, lock);
				}
			}

			if(FreezedPlayer[x] != true && GetPlayerVirtualWorld(x) != x + 1 && PlayerInfo[x][pAdmin] < 1)
			{
				new
					Float: VehicleHealth
				;

				GetVehicleHealth(veh, VehicleHealth);

				if(VehicleHealth < LastVehicleHealth[veh])
				{
					LastVehicleHealth[veh] = VehicleHealth;
				}
				else if(VehicleHealth > LastVehicleHealth[veh])
				{
					SetVehicleHealth(veh, LastVehicleHealth[veh]);

					SendAdmins(COLOR_RED, "Repair Hack >> {ffffff}%s e posibil sa foloseasca repair hack.", 1, GetName(x));
				}
			}
		}
	}
	foreach(new x : WithFpsText)
	{
		new
			FPS = PlayerInfo[x][pFPS]
		;

		if(Spectate[x] != -1)
		{
			FPS = PlayerInfo[Spectate[x]][pFPS];
		}

		if(PlayerInfo[x][pSettings][10] == true)
		{
			new
				TickRate = GetServerTickRate(),
				Queries = mysql_unprocessed_queries()
			;

			va_PlayerTextDrawSetString(x, FPSText, "%d~w~~h~ ~r~%d~w~~h~ ~b~%d", FPS, TickRate, Queries);
		}

		else
		{
			va_PlayerTextDrawSetString(x, FPSText, "%d", FPS);
		}
	}
	foreach(new x : Player){
		if(PlayerInfo[x][pLevel] >= 5 && PlayerInfo[x][pGiftBoxSeconds] > 0 && !IsPlayerAFK[x])
		{
			PlayerInfo[x][pGiftBoxSeconds] --;
			if(PlayerInfo[x][pGiftBoxSeconds] < 1)
			{
				PlayerTextDrawSetString(x, GiftBoxPTD, "~g~~h~Gift~n~~g~~h~Disponibil");
			}
			else
			{
				va_PlayerTextDrawSetString(x, GiftBoxPTD, "~g~~h~%s", CalculeazaTimp(PlayerInfo[x][pGiftBoxSeconds]));
			}
		}
		if(!GetPVarInt(x, "NeedSpawn") && !PlayerInfo[x][pAdmin] && Spectate[x] == -1 && GetPlayerState(x) != PLAYER_STATE_SPECTATING){
			if(!IsPlayerInRangeOfPoint(x, 30, PlayerPosii[x][0], PlayerPosii[x][1], PlayerPosii[x][2]) && GetPlayerWeapon(x) != 46 && !IsPlayerInAnyVehicle(x) && GetPlayerSurfingVehicleID(x) == INVALID_VEHICLE_ID){
				SetPVarInt(x, "ftps", GetPVarInt(x, "ftps") + 1);
				if(GetPVarInt(x, "ftps") == 3) AKick(x, "fly hack / teleport");
			}
			if(!IsPlayerInAnyVehicle(x) && GetPlayerSurfingVehicleID(x) == INVALID_VEHICLE_ID){
				new Float: vel[3];
				GetPlayerVelocity(x, vel[0], vel[1], vel[2]);
				if(vel[0] > 0.5 || vel[0] < -0.5 || vel[1] > 0.5 || vel[1] < -0.5 || vel[2] > 0.15 || vel[2] < -0.5){
					SetPVarInt(x, "sflys", GetPVarInt(x, "sflys") + 1);
					if(GetPVarInt(x, "sflys") == 3) AKick(x, "fly hack");
				}
			}
			if(GetPlayerSpecialAction(x) == SPECIAL_ACTION_USEJETPACK) AKick(x, "jetpack");
		}
		if(GetPVarInt(x, "FishTimer") > 0){
			SetPVarInt(x, "FishTimer", GetPVarInt(x, "FishTimer") - 1);
			UpdatePesti(x);
			if(GetPVarInt(x, "FishTimer") == 0) FailFish(x);
		}
		if(GetPVarInt(x, "CrateType") && GetPVarInt(x, "Step") < 12) CrateCastig(x);
		if(GetPVarInt(x, "InSpin") && GetPVarInt(x, "Step") < 5) SpinCastig(x);
		if(GetPVarInt(x, "InBonus") && GetPVarInt(x, "Step") < 5) BonusCastig(x);
		if(GetPVarInt(x, "InTrivia")){
			SetPVarInt(x, "TimpTrivia", GetPVarInt(x, "TimpTrivia") - 1);
			va_PlayerTextDrawSetString(x, TriviaPTD[4], "Mai ai %d secunde, si ai gresit %d / 3 intrebari.", GetPVarInt(x, "TimpTrivia"), GetPVarInt(x, "GresiteTrivia")); 
			PlayerTextDrawShow(x, TriviaPTD[4]);
			if(GetPVarInt(x, "TimpTrivia") == 0) SetPVarInt(x, "GresiteTrivia", GetPVarInt(x, "GresiteTrivia") + 1), SetPVarInt(x, "TimpTrivia", 10);
			if(GetPVarInt(x, "GresiteTrivia") >= 3) CloseTrivia(x);
		}
		if(TradeTime[x] > 0){
			TradeTime[x] --;
			va_PlayerTextDrawSetString(x, TradePTD[6], "00:0%d", TradeTime[x]);
			va_PlayerTextDrawSetString(TradeID[x], TradePTD[6], "00:0%d", TradeTime[x]);
			PlayerTextDrawShow(x, TradePTD[6]);
			PlayerTextDrawShow(TradeID[x], TradePTD[6]);
			if(TradeTime[x] == 0) FinishTrade(x), PlayerTextDrawHide(x, TradePTD[6]), PlayerTextDrawHide(TradeID[x], TradePTD[6]); 
		}
		if(GetPVarInt(x, "jobdilei") > 0){
			SetPVarInt(x, "jobdilei", GetPVarInt(x, "jobdilei") - 1);
			if(GetPVarInt(x, "jobdilei") == 0){
				if(JobVeh[x] != -1) DestroyVehicleEx(JobVeh[x]), JobVeh[x] = -1;
				if(QuestVeh[x] != -1)
				{
					if(Iter_Contains(InRaceQuest, x))
					{
						ExitRace(x);

						Iter_Remove(InRaceQuest, x);
					}
					else
					{
						DestroyVehicleEx(QuestVeh[x]);
						QuestVeh[x] = -1;
					}
				}
				CP[x] = 0;
				DisablePlayerCheckpoint(x);
				JobWorking[x] = false;
			} 
		} 
		if(UberTimer[x] > 0){
			UberTimer[x] --;
			if(!UberTimer[x]){
				UberTimer[x] = random(7) + 10; GivePlayerCash(x, -UberFare[UberDriver[x]]); GivePlayerCash(UberDriver[x], UberFare[UberDriver[x]]);
				UberMoneySpent[x] += UberFare[UberDriver[x]]; UberMoneyEarned[UberDriver[x]] += UberFare[UberDriver[x]];
				va_PlayerTextDrawSetString(x, RentCarText[x], "money spent: ~g~%s$", FormatNumber(UberMoneySpent[x])); PlayerTextDrawShow(x, RentCarText[x]);
				va_PlayerTextDrawSetString(UberDriver[x], RentCarText[UberDriver[x]], "money earned: ~g~$%s", FormatNumber(UberMoneyEarned[UberDriver[x]])); PlayerTextDrawShow(UberDriver[x], RentCarText[UberDriver[x]]);
				if(GetPlayerCash(x) < 1000){
					UberMoneySpent[x] = 0;
					PlayerTextDrawHide(x, RentCarText[x]);
					UberTimer[x] = 0;
					RemovePlayerFromVehicle(x);
					PlayerInfo[UberDriver[x]][pRaport] ++;
					pUpdateInt(UberDriver[x], "Raport", PlayerInfo[UberDriver[x]][pRaport]);				
					PlayerTextDrawHide(UberDriver[x], RentCarText[UberDriver[x]]);
					UberDriver[x] = -1;
				}
			}
		}
		if(UberFare[x] > 0 && !IsPlayerInAnyVehicle(x)){
			UberFare[x] = 0;
			UberMoneyEarned[x] = 0;
			PlayerTextDrawHide(x, RentCarText[x]);
			foreach(new y : FactionMembers[6]){
				if(UberDriver[y] == x){
					UberDriver[y] = -1;
					UberTimer[y] = 0;
					UberMoneySpent[y] = 0;
					PlayerTextDrawHide(y, RentCarText[y]);
					break;
				}
			}
		}
		if(UsingDrugs[x] == -1)
		{
			AssignPlayerFPS(x);
		}
		else
		{
			SetPlayerDrunkLevel(x, 4000);
		}
		if(targetfind[x] != -1 && Logat[x])
		{
			new
				target = targetfind[x]
			;
			if(InBiz[target] && GetPlayerInterior(target) == BInt(InBiz[target]) && GetPlayerVirtualWorld(target) == InBiz[target])
			{
				new j = InBiz[target];
				SetPlayerCheckpointEx(x, BEnX(j), BEnY(j), BEnZ(j), 4);
			}
			else if(InHouse[target] == GetPlayerInterior(target) && HouseInfo[InHouse[target]][hInterior] && GetPlayerVirtualWorld(target) == InHouse[target])
			{
				new j = InHouse[target];
				SetPlayerCheckpointEx(x,HouseInfo[j][hEntranceX],HouseInfo[j][hEntranceY],HouseInfo[j][hEntranceZ], 4);	
			}
			else if(InHQ[target] && GetPlayerInterior(target) == FacInfo[InHQ[target]][fInterior] && GetPlayerVirtualWorld(target) == InHQ[target])
			{
				SetPlayerCheckpointEx(x, FacInfo[InHQ[target]][fceX], FacInfo[InHQ[target]][fceY], FacInfo[InHQ[target]][fceZ], 4); 
			}
			else
			{
				new Float: floatx, Float: floaty, Float: floatz;
				GetPlayerPos(target, floatx, floaty, floatz);
				SetPlayerCheckpointEx(x, floatx, floaty, floatz, 4.0);	
			}
			playerTextDrawShow(x, FindTXD, "~r~%s ~w~~h~(%d)\n~r~%.0fm", GetName(targetfind[x]), targetfind[x], GetDistanceBetweenPlayers(x, targetfind[x]));
		}
		if(PlayerTazeTime[x] >= 1){
			PlayerTazeTime[x] ++;
			if(PlayerTazeTime[x] == 15) PlayerTazeTime[x] = 0;
			else { new Float: ang; GetPlayerFacingAngle(x, ang); SetPlayerFacingAngle(x, ang + 90);	}
		}
		if(PlayerCuffed[x]){
			if(PlayerCuffedTime[x] <= 0) FreezePlayer(x, false), PlayerCuffed[x] = false, PlayerCuffedTime[x] = 0, PlayerTazeTime[x] = 1;
			else PlayerCuffedTime[x] --;
		}
		if(GetPlayerMoney(x) != GetPlayerCashNormal(x))
		{
			ResetPlayerMoney(x);
			GivePlayerMoney(x, GetPlayerCashNormal(x));
		}
		if(GetPlayerCameraMode(x) == 53){
			new Float: px, Float: py, Float: pz;
			GetPlayerCameraPos(x, px, py, pz);
			if(pz < -50000 || pz > 50000) AKick(x, "troll hack #4");	
		} GetPlayerPos(x, PlayerPosii[x][0], PlayerPosii[x][1], PlayerPosii[x][2]);				
		if(PlayerPosii[x][0] == PlayerPosii[x][3] && PlayerPosii[x][1] == PlayerPosii[x][4] && PlayerPosii[x][2] == PlayerPosii[x][5]){
			if(LastMove[x] >= 20) IsPlayerAFK[x] ++;
			else LastMove[x] ++;
		} else IsPlayerAFK[x] = 0, LastMove[x] = 0;
		PlayerPosii[x][3] = PlayerPosii[x][0]; PlayerPosii[x][4] = PlayerPosii[x][1]; PlayerPosii[x][5] = PlayerPosii[x][2];
		if(IsPlayerAFK[x] < 40 && GetPlayerAnimationIndex(x) != 1189 && GetPlayerAnimationIndex(x) != 378) PlayerInfo[x][pPayDay] ++;
		if(IsPlayerAFK[x] >= 60 && Iter_Contains(InPaint, x))
		{
			va_SendClientMessageToAll(COLOR_SANCTION, "Kick >> %s a fost dat afara, motiv: AFK in Paint", GetName(x));
			defer KickEx(x, PlayerInfo[x][pSession]);
		}
	}
	if(painttime != -1){
		painttime --;
		foreach(new x : InPaint){
			if(painttime > 180) va_PlayerTextDrawSetString(x, PaintTD, "Runda incepe in ~g~~h~%d~w~~h~ secunde", painttime - 180);
			else va_PlayerTextDrawSetString(x, PaintTD, "Runda se termina in ~g~~h~%d~w~~h~ secunde", painttime);
			PlayerTextDrawShow(x, PaintTD);
		}
		if(painttime == 0){
			foreach(new x : InPaint){
				Info(x, "Runda s-a terminat!");
				Info(x, "Scorul tau: %d", paintkills[x]);
				paintkills[x] = 0;
				painttime = 195;
				for(new i; i != 5; ++i) SendDeathMessageToPlayer(x, 1001, 1001, 1001);
				ResetPlayerWeapons(x);
			}
		}
		if(painttime == 180){
			foreach(new x : InPaint){
				defer Spawn(x, PlayerInfo[x][pSession]);
				Info(x, "Runda a inceput!");
			}
		}
	}
	if(Iter_Count(ClanZonesWithDeelay) > 0)
	{
		foreach(new i : ClanZonesWithDeelay)
		{
			if(ClanZoneInfo[i][clanZoneDeelay] > 0)
			{
				ClanZoneInfo[i][clanZoneDeelay] --;
				if(ClanZoneInfo[i][clanZoneDeelay] == 0)
				{
					Iter_Remove(ClanZonesWithDeelay, i);
					break;
				}
			}
		}
	}
	return true;
}

function WipeBillboard(id)
{
	format(Billboards[id][bOwner], 8, "Server");
	Billboards[id][bPrice] = 0;
	format(Billboards[id][bText], 5, "Text");
	Query_Mysql("update billboards set Owner = '%s', Price = %d, Text = '%s' where ID = %d", JobInfo[id][jOwner], JobInfo[id][jPrice], Billboards[id][bText], id);
	Query_Mysql("update users set Billboard = '0' where Billboard = %d", id);
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pBillboard] == id)
		{
			if(Logat[i])
			{
				PlayerInfo[i][pBillboard] = 0;
				break;
			}
		}
	}
	UpdateLabel(4, id);
	return true;
}

function RemoveInactiveHouses()
{
	if(cache_num_rows() < 1)
		return true;

	for(new rows = 1; rows <= cache_num_rows(); ++rows)
	{
		new
			House
		;

		cache_get_value_name_int(rows - 1, "House", House);

		MoveHouseToState(House);
	}

	return true;
}

function RemoveInactiveBusiness()
{
	if(cache_num_rows() < 1)
		return true;

	for(new rows = 1; rows <= cache_num_rows(); ++rows)
	{
		new
			Business
		;

		cache_get_value_name_int(rows - 1, "Bizz", Business);

		MoveBusinessToState(Business);
	}

	return true;
}

function RemoveInactiveJobs()
{
	if(cache_num_rows() < 1)
		return true;

	for(new rows = 1; rows <= cache_num_rows(); ++rows)
	{
		new
			Job
		;

		cache_get_value_name_int(rows - 1, "OwnedJob", Job);

		WipeJob(Job);
	}

	return true;
}

function RemoveInactiveBillboards()
{
	if(cache_num_rows() < 1)
		return true;

	for(new rows = 1; rows <= cache_num_rows(); ++rows)
	{
		new
			Billboard
		;

		cache_get_value_name_int(rows - 1, "Billboard", Billboard);

		WipeBillboard(Billboard);
	}

	return true;
}

function ResetTurfs()
{
	new
		Turfs1,
		Turfs2,
		Castigator
	;

	for(new i = 1; i < sizeof(TurfInfo); i++)
	{
		if(TurfInfo[i][zOwned] == 2)
		{
			Turfs1 ++;
		}
		else if(TurfInfo[i][zOwned] == 3)
		{
			Turfs2 ++;
		}
	}

	if(Turfs1 != Turfs2)
	{
		if(Turfs1 > Turfs2)
		{
			Castigator = 2;
		}
		else
		{
			Castigator = 3;
		}
	}

	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "update users set PremiumPoints = PremiumPoints + 50 where member = %d", Castigator);
	mysql_tquery(SQL, gString);

	foreach(new x : FactionMembers[Castigator])
	{
		PlayerInfo[x][pPremiumPoints] += 50;
		SendMsg(x, COLOR_SERVER, "Factiune >> {ffffff}Ai primit 50PP deoarece mafia ta a avut cele mai multe turf-uri.");
	}

	mysql_tquery(SQL, "update turfs set owned = 2 where id < 10");
	mysql_tquery(SQL, "update turfs set owned = 3 where id >= 10");

	for(new i = 1; i < sizeof(TurfInfo); i++)
	{
		if(i < 10)
		{
			TurfInfo[i][zOwned] = 2;
		}
		else if(i >= 10)
		{
			TurfInfo[i][zOwned] = 3;
		}
	}

	foreach(new x : Player)
	{
		for(new i = 1; i < sizeof(TurfInfo); i++)
		{
			if(TurfsDisp[x])
			{
				switch(TurfInfo[i][zOwned])
				{
					case 2:
					{
						GangZoneShowForPlayerEx(x, Turfs[i], 0x156314aa);
					}
					case 3:
					{
						GangZoneShowForPlayerEx(x, Turfs[i], 0x8a1676aa);
					}
				}
			}
		}
	}
	return true;
}

function UpdateLast7()
{
	if(strmatch(GetWeekDay(), "Luni"))
	{
		mysql_tquery(SQL, "update users set Last7 = ConnectedTime where Last7 <> ConnectedTime");

		foreach(new i : Player)
		{
			PlayerInfo[i][pLast7] = PlayerInfo[i][pConnectTime];
		}

		DailyQuests = {0, 0, 0, 0, 0, 0, 0};
	}

	new
		Year,
		Month,
		Day
	;

	getdate(Year, Month, Day);

	if(Day == 1)
	{
		ResetTurfs();

		gString[0] = (EOS);
		mysql_format(SQL, gString, 128, "SELECT * FROM `users` WHERE `House` <> 0 AND ConnectedTime < LastMonth + 15");
		mysql_tquery(SQL, gString, "RemoveInactiveHouses", "");

		gString[0] = (EOS);
		mysql_format(SQL, gString, 128, "SELECT * FROM `users` WHERE `Bizz` <> 0 AND ConnectedTime < LastMonth + 15");
		mysql_tquery(SQL, gString, "RemoveInactiveBusiness", "");

		gString[0] = (EOS);
		mysql_format(SQL, gString, 128, "SELECT * FROM `users` WHERE `OwnedJob` <> 0 AND ConnectedTime < LastMonth + 15");
		mysql_tquery(SQL, gString, "RemoveInactiveJobs", "");

		gString[0] = (EOS);
		mysql_format(SQL, gString, 128, "SELECT * FROM `users` WHERE `Billboard` <> 0 AND ConnectedTime < LastMonth + 15");
		mysql_tquery(SQL, gString, "RemoveInactiveBillboards", "");

		mysql_tquery(SQL, "update users set LastMonth = ConnectedTime where LastMonth <> ConnectedTime");

		foreach(new i : Player)
		{
			PlayerInfo[i][pLastMonth] = PlayerInfo[i][pConnectTime];
		}
	}

	return true;
}
timer RespawnCars[15000](){
	for(new i; i < MAX_VEHICLES; i++){
		if(!IsVehicleOccupied(i)){
			if(Iter_Contains(SpawnVehs, i)) DestroyVehicleEx(i), Iter_Remove(SpawnVehs, i);
			else SetVehicleToRespawn(i);
		}
	}
	return true;
}

function GiveProcentFromCreatorCode(playerid, pp)
{
	if(cache_num_rows())
	{
		new
			sqlid
		;
		cache_get_value_name_int(0, "PlayerSQLID", sqlid);

		gString[0] = (EOS);
		format(gString, 32, "SQLID%d", sqlid);
		new
			id = GetSVarInt(gString) - 1
		;
		if(id != -1)
		{
			PlayerInfo[id][pPremiumPoints] += pp;
			pUpdateInt(id, "PremiumPoints", PlayerInfo[id][pPremiumPoints]);
			SendMsg(id, COLOR_SERVER, "Creator Code >> {ffffff}Ai primit %dPP deoarece %s si-a cumparat ceva folosindu-ti codul.", pp, GetName(playerid));
		}
		else
		{
			gString[0] = (EOS);
			mysql_format(SQL, gString, sizeof(gString), "update users set PremiumPoints = PremiumPoints + %d where ID = %d", pp, id);
			mysql_tquery(SQL, gString);
		}
	}
	return true;
}

new
	PremiumShopPrices[13] =
	{
		300,
		100,
		30,
		100,
		100,
		30,
		350,
		500,
		25,
		150,
		100,
		500,
		150
	}
;

function BuyFromShop(playerid, item)
{
	if(!strmatch(PlayerInfo[playerid][pCreatorCode], "NoCreatorCode"))
	{
		new
			pret = PremiumShopPrices[item]
		;

		pret = floatround(pret * 0.1);

		gString[0] = (EOS);
		mysql_format(SQL, gString, sizeof(gString), "select * from creatorcodes where CodeName = '%e'", PlayerInfo[playerid][pCreatorCode]);
		mysql_tquery(SQL, gString, "GiveProcentFromCreatorCode", "ii", playerid, pret);
	}

	GivePlayerPP(playerid, - GetShopPrice(playerid, item));

	return true;
}

stock GetShopPrice(playerid, id)
{
	new
		pret = PremiumShopPrices[id]
	;

	if(!strmatch(PlayerInfo[playerid][pCreatorCode], "NoCreatorCode"))
	{
		new
			pretredus = floatround(pret * 0.9)
		;

		SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Pretul este redus de la %dPP la %dPP deoarece folosesti un Creator Code.", pret, pretredus);

		pret = pretredus;
	}
	return pret;
}
function ResetMission()
{
	if(cache_num_rows())
	{
		for(new i = 0; i < cache_num_rows(); i++)
		{
			new
				test[64],
				test2[18],
				test3[64],
				bool: Connected,
				id
			;

			cache_get_value_name_int(i, "Status", Connected);

			if(Connected)
			{
				continue;
			}

			cache_get_value_name_int(i, "id", id);
			cache_get_value_name(i, "BattlepassProgress", test);

			sscanf(test, "p<|>a<i>[18]", test2);

			test2[6] = 0;

			if(strmatch(GetWeekDay(), "Luni"))
			{
				test2[8] = 0;
			}

			format(test3, sizeof(test3), "%d", test2[0]);
			for(new j = 1; j < sizeof(test2); j++)
			{
				format(test3, sizeof(test3), "%s|%d", test3, test2[j]);
			}
			Query_Mysql("update users set BattlepassProgress = '%s' where id = %d", test3, id);
		}
	}
	return true;
}
task OneMinuteTimer[60000]()
{
	SetSVarInt("mancaruri", GetSVarInt("mancaruri") + 1);
	if(GetSVarInt("mancaruri") >= 4) SetSVarInt("mancaruri", 0);
	foreach(new i : WithState[2])
	{
		if(VehicleEngine[GetPlayerVehicleID(i)])
		{
			new
				vid = GetPlayerVehicleID(i)
			;

			if(!IsAPlane(vid) && !IsABoat(vid) && !IsABike(vid) && !IsPlayerInVehicle(i, JobVeh[i]) && !IsPlayerInVehicle(i, QuestVeh[i]) && !IsPlayerInVehicle(i, pfVehicle[i]) 
				&& !IsPlayerInVehicle(i, pcVehicle[i]))
				{
					Gas[vid]--;
					if(Gas[vid] < 1)
					{
						if(PerkActive[i][30])
						{
							Gas[vid] = 100;

							SendMsg(i, COLOR_SERVER, "Perks >> {ffffff}Ai primit +100 combustibil. #30");
						}
						else if(PerkActive[i][29])
						{
							Gas[vid] = 50;

							SendMsg(i, COLOR_SERVER, "Perks >> {ffffff}Ai primit +50 combustibil. #29");
						}
					}
				}

			if(OwnableVehicle(vid))
			{
				foreach(new s : Player)
				{
					for(new v; v < MAX_PERSONAL_VEHICLES; v++)
					{
						if(PlayerInfo[s][pVehID][v] == vid && GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vid)
						{
							PlayerInfo[s][pVehGas][v] = Gas[vid]; 
						}
					} 
				} 
			}
			if(Gas[vid] < 1)
			{
				SetVehicleParamsEx(vid, 0, 0, 0, 0, 0, 0, 0); 
				Info(i, "Nu ai Combustibil."); 
				VehicleEngine[vid] = false; 
			}
		}
	}
	foreach(new i : Vips)
	{
		if(!GetPVarInt(i, "PoateNos"))
		{
			SetPVarInt(i, "PoateNos", 1);
		}
		if(!GetPVarInt(i, "PoateFV"))
		{
			SetPVarInt(i, "PoateFV", 1);
		}
		if(!GetPVarInt(i, "PoateFlip"))
		{
			SetPVarInt(i, "PoateFlip", 1);
		}
	}
	foreach(new i : Player){
		if(Logat[i]){
			if(GetSVarInt("mancaruri") == 3){
				PlayerInfo[i][pMancare] --;
				PlayerInfo[i][pApa] -= 2;
				if(PlayerInfo[i][pMancare] < 1 || PlayerInfo[i][pApa] < 1) {
					defer Spawn(i, PlayerInfo[i][pSession]);
					PlayerInfo[i][pMancare] = 50;
					PlayerInfo[i][pApa] = 50;
					if(PlayerInfo[i][pMancare] < 10) Info(i, "Ai murit de foame.");
					if(PlayerInfo[i][pApa] < 10) Info(i, "Ai murit de sete.");
				}
				if(PlayerInfo[i][pMancare] < 10) Info(i, "Ai mancarea sub 10 procente, apasa tasta H si mananca.");
				if(PlayerInfo[i][pApa] < 10) Info(i, "Ai apa sub 10 procente, apasa tasta H si bea.");
				UpdateFood(i);
			}
			if(PlayerInfo[i][pMuteTime]) PlayerInfo[i][pMuteTime] --;
			if(PlayerInfo[i][pJailed]){
				if(PlayerInfo[i][pJailTime] < 1){
					PlayerInfo[i][pJailTime] = 0;
					PlayerInfo[i][pJailed] = 0;
					pUpdateInt(i, "Jailed", 0);
					PlayerTextDrawHide(i, Jailtime);
					ClearCrime(i);
					if(!IsACop(i))
					{
						SetPlayerFactionColor(i);
					}
					defer Spawn(i, PlayerInfo[i][pSession]);
				}
				else {
					PlayerInfo[i][pJailTime] --;
					PlayerTextDrawShow(i, Jailtime);
					va_PlayerTextDrawSetString(i, Jailtime, "ELIBERAT IN: ~r~%d MINUTE", PlayerInfo[i][pJailTime]);
				}
			}
			if(PlayerInfo[i][pWantedLevel]){
				wantedlost[i] --; 
				if(!wantedlost[i]){
					wantedlost[i] = 15;
					PlayerInfo[i][pWantedLevel] --;
					Info(i, "Ai scapat de unul dintre punctele de wanted.");
					SendFamilyMessage(1, 0x2641FEAA, "Dispecerat >> {ffffff}%s (%d) a pierdut un punct de Wanted.", GetName(i), i);
					if(!PlayerInfo[i][pWantedLevel]) ClearCrime(i);
				}
			}
			if(PlayerInfo[i][pRmute]) PlayerInfo[i][pRmute] --;
			if(PlayerInfo[i][pNmute]) PlayerInfo[i][pNmute] --;
			if(soexpire[i]){
				soexpire[i] --;
				if(!soexpire[i] && somated[i] != -1)
				{
					somated[i] = -1;
				}
			}
		}
	} 
	new
		hour,
		minute,
		second
	;
	gettime(hour, minute, second);
	if(lastpayday != hour){
		lastpayday = hour;
		foreach(new i : Player) PayDay(i);
		if(hour == 0){
			mysql_tquery(SQL, "UPDATE `users` SET `ClanTime` = `ClanTime` + '1' WHERE `Clan` > '0'");
			mysql_tquery(SQL, "UPDATE `bans` SET `Days` = `Days` - '1' WHERE `Days` > '0' AND `Permanent` = '0'");
			mysql_tquery(SQL, "UPDATE `bans` SET `Active` = '0' WHERE `Days` < '1'");
			mysql_tquery(SQL, "UPDATE `users` SET `FactionTime` = `FactionTime` + '1' WHERE `Member` > '0'");
			mysql_tquery(SQL, "UPDATE `users` SET `Ziua` = '0' WHERE `Ziua` = '10' OR `ZiuaColectat` = '0'");
			mysql_tquery(SQL, "select * from users where BattlepassProgress <> '0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0'", "ResetMission");
			mysql_tquery(SQL, "select * from users where PerkProgress <> 0|0|0|0|0|0|0|0|0|0|0|0|0", "ProcessPerkProgress");
			mysql_tquery(SQL, "update users set Heists = '0|0|0' where Heists <> '0|0|0'");
			mysql_tquery(SQL, "update users set TodayTasks = '0|0|0' where TodayTasks <> '0|0|0'");
			ResetSomething("Parkour");
			ResetSomething("Taskuri");
			ResetSomething("TaskActual");
			ResetSomething("ZiuaColectat");
			ResetSomething("Trivia");
			ResetSomething("DailyStunt");
			ResetSomething("TureJobToday");
			ResetSomething("TureArmsToday");
			ResetSomething("TureDrugToday");
			ResetSomething("KPaintToday");
			ResetSomething("GiftsToday");
			ResetSomething("DailyQuestToday");
			ResetSomething("LoggedToday");
			ResetSomething("PayDaysToday");

			mysql_tquery(SQL, "UPDATE `users` SET `Ziua` = `Ziua` + '1'");
			mysql_tquery(SQL, "UPDATE `users` SET `Money` = `Money` + '5000000', `PremiumPoints` = `PremiumPoints` + '1' WHERE `YouTuber` = '1'");
			if(Iter_Count(YouTubers)){
				foreach(new i : YouTubers){
					GivePlayerCash(i, 5_000_000);
					PlayerInfo[i][pPremiumPoints] ++;
					Info(i, "Deoarece esti YouTuber ai primit $5,000,000 si 1PP.");
				}
			}
			foreach(new i : Player){
				if(!PlayerInfo[i][pZiuaColectat] || PlayerInfo[i][pZiua] == 10) PlayerInfo[i][pZiua] = 0;
				PlayerInfo[i][pZiua] ++;
				PlayerInfo[i][pTaskuri] =
				PlayerInfo[i][pTaskActual] = 0;
				PlayerInfo[i][pTrivia] =
				PlayerInfo[i][pZiuaColectat] =
				PlayerInfo[i][pParkour] = false;
				if(PlayerInfo[i][pBattlepassProgress][9] < 3)
				{
					PlayerInfo[i][pBattlepassProgress][9] = 0;
				}
				if(PlayerInfo[i][pPerkProgress][7] < 3) //&& PlayerInfo[i][pSummerQuestToday] != true)
				{
					PlayerInfo[i][pPerkProgress][7] = 0;
				}
				if(PlayerInfo[i][pPerkProgress][8] < 6)
				{
					PlayerInfo[i][pPerkProgress][8] = 0;
				}
				if(PlayerInfo[i][pPerkProgress][9] < 3 && PlayerInfo[i][pSkyWarsWinToday] != true)
				{
					PlayerInfo[i][pPerkProgress][9] = 0;
				}
				if(PlayerInfo[i][pPerkProgress][10] < 3 && PlayerInfo[i][pGiftBoxOpenedToday] != true)
				{
					PlayerInfo[i][pPerkProgress][10] = 0;
				}
				if(PlayerInfo[i][pPerkProgress][11] < 21 && strmatch(GetWeekDay(), "Luni"))
				{
					PlayerInfo[i][pPerkProgress][11] = 0;
				}
				PlayerInfo[i][pSkyWarsWinToday] = false;
				PlayerInfo[i][pGiftBoxOpenedToday] = false;
				TureJobToday[i] = TureArmsToday[i] = TureDrugToday[i] = KPaintToday[i] = 0;
				PlayerInfo[i][pDailyQuestToday] = false;
				for(new j = 0; j < 3; j ++)
				{
					if(PlayerInfo[i][pHeists][j] != false)
					{
						PlayerInfo[i][pHeists][j] = false;
					}
				}
				for(new j = 0; j < 3; j ++)
				{
					if(PlayerInfo[i][pTodayTasks][j] != 0)
					{
						PlayerInfo[i][pTodayTasks][j] = 0;
					}
				}

				PlayerInfo[i][pLoggedToday] = false;
				PlayerInfo[i][pPayDaysToday] = 0;
			}
			for(new i = 1; i <= MAX_JOBS; i++){
				JobInfo[i][jLastProp] ++;
				JobInfo[i][jLastDay] = 0;
				Query_Mysql("UPDATE `jobs` SET `LastProp` = '%d', `LastDay` = '%d' WHERE `ID` = '%d'", JobInfo[i][jLastProp], JobInfo[i][jLastDay], i);
			}
			UpdateLast7();
			ChooseDailyJob();
			GivedBonus = false;
			ChooseDailyQuest();
		}
		Drop();
		SetWorldTime(hour);
		SendClientMessageToAll(COLOR_SERVER, "Server >> {ffffff}Toate vehiculele nefolosite vor fi respawnate in 15 secunde.");
		defer RespawnCars();
		if(hour == 20 && ActiveWars && !strmatch(GetWeekDay(), "Sambata") && !strmatch(GetWeekDay(), "Duminica"))
		{
			LastWar = 0;
			StartWars(TodayWar[LastWar], TodayTurf[LastWar]);
		}
	}
	if(GetSVarInt("ContractAutomat") < gettime()){
		foreach(new id : Player){
			if(id != INVALID_PLAYER_ID && Logat[id] && PlayerInfo[id][pMember] != 5 && !PlayerInfo[id][pAdmin] && PlayerInfo[id][pHeadValue] < 1){
				PlayerInfo[id][pHeadValue] += 1_000_000;
				pUpdateInt(id, "HeadValue", PlayerInfo[id][pHeadValue]);
				Iter_Add(Contracts, id);
				SendFamilyMessage(5, 0x211CDEC8, "Contract: %s, pret: $%s.", GetName(id), FormatNumber(PlayerInfo[id][pHeadValue]));
				SetSVarInt("ContractAutomat", gettime() + 600);
				break;
			}
		}
	}
	if(Iter_Count(Player) >= 30 && GivedBonus != true)
	{
		new
			money = 3_000_000 + random(2_000_000),
			pp = 2 + random(2),
			rp = 3 + random(2),
			og = 50 + random(50)
		;

		foreach(new i : Player)
		{
			GivePlayerCash(i, money);
			GivePlayerPP(i, pp);
			GivePlayerRP(i, rp);
			GivePlayerOG(i, og);
		}

		va_SendClientMessageToAll(COLOR_SERVER, "Bonus >> {ffffff}Deoarece s-au strans 30 de jucatori, ai primit $%s, %dPP, %dRP si %d OGPoints.", FormatNumber(money), pp, rp, og);
		
		GivedBonus = true;
	}

	if(LastRandomMsg + 1800 <= gettime())
	{
		new
			RandomMsg[3][] =
			{
				"Pentru a vedea toate beneficiile contului Premium, foloseste comanda [/premiuminfo].",
				"Pentru a vedea toate beneficiile contului VIP, foloseste comanda [/vipinfo].",
				"Pentru a vedea toate beneficiile contului Supreme, foloseste comanda [/supremeinfo]."
			}
		;

		va_SendClientMessageToAll(COLOR_SERVER, "Random Msg >> {ffffff}%s", RandomMsg[LastRandomMsgType]);

		LastRandomMsgType ++;

		if(LastRandomMsgType > 2)
		{
			LastRandomMsgType = 0;
		}

		LastRandomMsg = gettime();
	}

	return true;
}
function ResetSomething(const something[])
{
	gString[0] = (EOS);
	mysql_format(SQL, gString, 128, "update users set %s = 0 where %s <> 0", something, something);
	mysql_tquery(SQL, gString);
	return true;
}
public OnEnterExitModShop(playerid, enterexit, interiorid){
	AKick(playerid, "Vehicle Tuning #3");
	return true;
}
function ShowStats(playerid, id)
{
	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(id) || playerid == INVALID_PLAYER_ID || id == INVALID_PLAYER_ID)
		return true;

	new
		PremiumString[3],
		VipString[3],
		SupremeDays = (PlayerInfo[id][pSupreme] - gettime()) / 86_400
	;

	format(PremiumString, 3, "%s", (PlayerInfo[id][pPremium] ? "Da" : "Nu"));
	format(VipString, 3, "%s", (PlayerInfo[id][pVIP] ? "Da" : "Nu"));

	if(SupremeDays < 0)
	{
		SupremeDays = 0;
	}

	SendMsg(playerid, 0xa88332ff, "General >> {ffffff}Nume: %s | SQLID: %d | Ore jucate: %0.2f | Avertismente: %d / 3 | Premium: %s",
		GetName(id), PlayerInfo[id][pSQLID], PlayerInfo[id][pConnectTime], PlayerInfo[id][pWarns], PremiumString);

	SendMsg(playerid, 0xa88332ff, "Economie >> {ffffff}Bani in mana: $%s | Bani in banca: $%s | Vehicule: %d/%d | Casa: %d | Afacere: %d",
		formatBytes(PlayerCash[id]), formatBytes(PlayerBank[id]), GetPlayerVehicles(id), PlayerInfo[id][pVehSlots], PlayerInfo[id][pHouse], PlayerInfo[id][pBizz]);

	SendMsg(playerid, 0xa88332ff, "Factiune >> {ffffff}Factiune: %s | Rang: %d | Avertismente: %d / 3 | Puncte Pedeapsa: %d / 20",
		FactionName(PlayerInfo[id][pMember]), PlayerInfo[id][pRank], PlayerInfo[id][pFACWarns], PlayerInfo[id][pFpunish]);

	SendMsg(playerid, 0xa88332ff, "Puncte >> {ffffff}Premium: %d | Jaf: %d | Evadare: %d | Gift: %d | Spin: %d | OG: %d",
		PlayerInfo[id][pPremiumPoints], PlayerInfo[id][pRob], PlayerInfo[id][pEscapePoints], PlayerInfo[id][pGiftPoints], PlayerInfo[id][pSpin], PlayerInfo[id][pOGPoints]);

	SendMsg(playerid, 0xa88332ff, "Activitate >> {ffffff}Secunde pentru PayDay: %d | Ore in ultima saptamana: %0.2f | Ore in ultima luna: %0.2f",
		PlayerInfo[id][pPayDay], PlayerInfo[id][pConnectTime] - PlayerInfo[id][pLast7], PlayerInfo[id][pConnectTime] - PlayerInfo[id][pLastMonth]);

	SendMsg(playerid, 0xa88332ff, "Altele >> {ffffff}Job Boost: %d | Materiale: %d | Lume: %d | Interior: %d | VIP: %s | Supreme: %d zile",
		PlayerInfo[id][pJobBoost], PlayerInfo[id][pMats], GetPlayerVirtualWorld(id), GetPlayerInterior(id), VipString, SupremeDays);

	SendMsg(playerid, 0xa88332ff, "Altele >> {ffffff}Discord: %s | Battlepass-uri Premium: %d | Cadouri colectate: %d | Hiddens: %d",
		PlayerInfo[id][pDiscord], PlayerInfo[id][pBattlepassPremiums], PlayerInfo[id][pHuntCollected], PlayerInfo[id][pHiddens]);

	if(PlayerInfo[id][pHelper] || PlayerInfo[id][pAdmin])
	{
		SendMsg(playerid, 0xa88332ff, "Staff >> {ffffff}Raport: %d | Avertismente: %d", PlayerInfo[id][pHelpedPlayers], PlayerInfo[id][pStaffWarns]);
	}

	if(playerid == id)
	{
		UpdateLevelBar(playerid);
	}

	return true;
}

public OnGameModeExit()
{
	new
		Query[128]
	;

	mysql_format(SQL, Query, sizeof(Query), "update server_vars set GlobalGoal = %d, DailyQuests = '%d|%d|%d|%d|%d|%d|%d'",
		server_goal, DailyQuests[0], DailyQuests[1], DailyQuests[2], DailyQuests[3], DailyQuests[4], DailyQuests[5], DailyQuests[6]);

	mysql_tquery(SQL, Query);

	mysql_tquery(SQL, "UPDATE `users` SET `Status` = '0', UserID = 65535");

	mysql_close(SQL);

	return true;
}
function LoadHouses(){
	CaseJ = cache_num_rows();
	for(new i = 1; i <= CaseJ; i++){
		new h = i - 1;
		cache_get_value_name_int(h, "ID", HouseInfo[i][hID]);
		cache_get_value_name_float(h, "Entrancex", HouseInfo[i][hEntranceX]);
		cache_get_value_name_float(h, "Entrancey", HouseInfo[i][hEntranceY]);
		cache_get_value_name_float(h, "Entrancez", HouseInfo[i][hEntranceZ]);
		cache_get_value_name_float(h, "Exitx", HouseInfo[i][hExitX]);
		cache_get_value_name_float(h, "Exity", HouseInfo[i][hExitY]);
		cache_get_value_name_float(h, "Exitz", HouseInfo[i][hExitZ]);
		cache_get_value_name(h, "Owner", HouseInfo[i][hOwner]);
		cache_get_value_name_int(h, "Prices", HouseInfo[i][hPrice]);
		cache_get_value_name_int(h, "Interior", HouseInfo[i][hInterior]);
		cache_get_value_name_int(h, "Rent", HouseInfo[i][hRent]);
		cache_get_value_name_int(h, "Takings", HouseInfo[i][hTakings]);
		cache_get_value_name_float(h, "GarageX", HouseInfo[i][hGarageX]);
		cache_get_value_name_float(h, "GarageY", HouseInfo[i][hGarageY]);
		cache_get_value_name_float(h, "GarageZ", HouseInfo[i][hGarageZ]);
		cache_get_value_name_int(h, "GarageLocked", HouseInfo[i][hGarageLocked]);
		UpdateLabel(1, i);
	}
	printf("%d Case Incarcate.", CaseJ);
	return true;
}

function LoadBizz(){
	Bizuri = cache_num_rows();
	for(new i = 1; i <= Bizuri; i++){
		new b = i - 1;
		cache_get_value_name_int(b, "ID", BizzInfo[i][bID]);
		cache_get_value_name(b, "Owner", BizzInfo[i][bOwner]);
		cache_get_value_name_float(b, "EntranceX", BizzInfo[i][bEntranceX]);
		cache_get_value_name_float(b, "EntranceY", BizzInfo[i][bEntranceY]);
		cache_get_value_name_float(b, "EntranceZ", BizzInfo[i][bEntranceZ]);
		cache_get_value_name_int(b, "EntranceCost", BizzInfo[i][bEntranceCost]);
		cache_get_value_name_int(b, "Till", BizzInfo[i][bTill]);
		cache_get_value_name_int(b, "Type", BizzInfo[i][bType]);
		cache_get_value_name_int(b, "Prices", BizzInfo[i][bPrice]);
		UpdateLabel(2, i);
	}
	printf("%d Afaceri Incarcate.", Bizuri);
	return true;
}

stock CreateDynamicSphere2(type, id, Float:x, Float:y, Float:z, Float:size, worldid = -1, interiorid = -1, playerid = -1, priority = 0)
{
	new
		AreaID
	;

	AreaID = CreateDynamicSphere(x, y, z, size, worldid, interiorid, playerid, priority);
	AreaInfo[AreaID][aID] = id;
	AreaInfo[AreaID][aType] = type;
	Areas ++;

	//printf("CreateDynamicSphere2(%d, %d, %0.2f, %0.2f, %0.2f, %0.2f, %d, %d, %d, %d), Total Areas: %d", type, id, x, y, z, size, worldid, interiorid, playerid, priority, Areas);
	
	return AreaID;
}

stock CreateDynamicRectangle2(type, id, Float:minx, Float:miny, Float:maxx, Float:maxy, worldid = -1, interiorid = -1, playerid = -1, priority = 0)
{
	new
		AreaID
	;

	AreaID = CreateDynamicRectangle(minx, miny, maxx, maxy, worldid, interiorid, playerid, priority);
	AreaInfo[AreaID][aID] = id;
	AreaInfo[AreaID][aType] = type;
	Areas ++;

	//printf("CreateDynamicRectangle2(%d, %d, %0.2f, %0.2f, %0.2f, %0.2f, %d, %d, %d, %d), Total Areas: %d", type, id, minx, miny, maxx, maxy, worldid, interiorid, playerid, priority, Areas);

	return AreaID;
}

stock DestroyDynamicArea2(areaid)
{
	//printf("DestroyDynamicArea2(%d), aID: %d, aType: %d, Total Areas: %d", areaid, AreaInfo[areaid][aID], AreaInfo[areaid][aType], Areas - 1);

	AreaInfo[areaid][aID] = 0;
	AreaInfo[areaid][aType] = 0;
	DestroyDynamicArea(areaid);
	Areas --;
	return true;
}

function ChooseWars()
{
	new
		Randoms[2] = {2, 3},
		bool: Attacked[sizeof(TurfInfo)],
		Libere[2] = {sizeof(TurfInfo) - 1, sizeof(TurfInfo) - 1}
	;

	for(new i = 1; i < sizeof(TurfInfo); i++)
	{
		switch(TurfInfo[i][zOwned])
		{
			case 2:
			{
				Libere[0] --;
			}
			case 3:
			{
				Libere[1] --;
			}
		}
	}

	TodayWar[0] = Randoms[random(2)];

	for(new i = 1; i < sizeof(TodayWar); i++)
	{
		if(TodayWar[i - 1] == 2)
		{
			TodayWar[i] = 3;
		}
		if(TodayWar[i - 1] == 3)
		{
			TodayWar[i] = 2;
		}
	}

	if(Libere[0] < 2)
	{
		TodayWar = {3, 3, 3, 3};
	}

	if(Libere[1] < 2)
	{
		TodayWar = {2, 2, 2, 2};
	}

	for(new i = 0; i < sizeof(TodayTurf); i++)
	{
		new
			RandomTurf = 1 + random(sizeof(TurfInfo) - 1)
		;

		while(TurfInfo[RandomTurf][zOwned] == TodayWar[i] || Attacked[RandomTurf] == true)
		{
			RandomTurf = 1 + random(sizeof(TurfInfo) - 1);
		}

		TodayTurf[i] = RandomTurf;

		Attacked[RandomTurf] = true;
	}

	return true;
}
function LoadTurfs()
{
	turfss = cache_num_rows();
	for(new i = 1; i <= turfss; i++)
	{
		new
			t = i - 1
		;

		cache_get_value_name_int(t, "ID", TurfInfo[i][zID]);
		cache_get_value_name_int(t, "Owned", TurfInfo[i][zOwned]);
		cache_get_value_name_float(t, "MinX", TurfInfo[i][zMinX]);
		cache_get_value_name_float(t, "MinY", TurfInfo[i][zMinY]);
		cache_get_value_name_float(t, "MaxX", TurfInfo[i][zMaxX]);
		cache_get_value_name_float(t, "MaxY", TurfInfo[i][zMaxY]);
	}

	for(new i; i < sizeof(TurfInfo); i++)
	{
		Turfs[i] = GangZoneCreateEx(TurfInfo[i][zMinX], TurfInfo[i][zMinY], TurfInfo[i][zMaxX], TurfInfo[i][zMaxY], TurfInfo[i][zID], 1.0);

		TurfArea[i] = CreateDynamicRectangle2(13, i, TurfInfo[i][zMinX], TurfInfo[i][zMinY], TurfInfo[i][zMaxX], TurfInfo[i][zMaxY]);
	}

	printf("%d Teritorii Incarcate.", turfss);

	mysql_tquery(SQL, "update users set WarKills = 0, WarDeaths = 0 where WarKills <> 0 or WarDeaths <> 0");

	ChooseWars();

	return true;
}
function LoadFacInfo(){
	factionss = cache_num_rows();
	for(new i = 1; i <= factionss; i++){
		new f = i - 1;
		cache_get_value_name_int(f, "ID", FacInfo[i][fID]);
		cache_get_value_name(f, "Name", FacInfo[i][fName]);
		cache_get_value_name_float(f, "X", FacInfo[i][fcX]);
		cache_get_value_name_float(f, "Y", FacInfo[i][fcY]);
		cache_get_value_name_float(f, "Z", FacInfo[i][fcZ]);
		cache_get_value_name_float(f, "eX", FacInfo[i][fceX]);
		cache_get_value_name_float(f, "eY", FacInfo[i][fceY]);
		cache_get_value_name_float(f, "eZ", FacInfo[i][fceZ]);
		cache_get_value_name_int(f, "Mats", FacInfo[i][fMats]);
		cache_get_value_name_int(f, "Interior", FacInfo[i][fInterior]);
		cache_get_value_name_int(f, "Drugs", FacInfo[i][fDrugs]);
		cache_get_value_name(f, "gMotd", FacInfo[i][fMotd]);
		format(gString, 32, "%s's HQ", FacInfo[i][fName]);
		CreateTextPickup(gString, COLOR_SERVER, FacInfo[i][fceX], FacInfo[i][fceY], FacInfo[i][fceZ], 25, -1, -1, 1314);
		if(FacInfo[i][fArea])
		{
			DestroyDynamicArea2(FacInfo[i][fArea]);
		}
		FacInfo[i][fArea] = CreateDynamicSphere2(1, i, FacInfo[i][fceX], FacInfo[i][fceY], FacInfo[i][fceZ], 1);
		if(FacInfo[i][fSfvArea])
		{
			DestroyDynamicArea2(FacInfo[i][fSfvArea]);
		}
		FacInfo[i][fSfvArea] = CreateDynamicSphere2(2, i, fvPos[i][0], fvPos[i][1], fvPos[i][2], 1);
	}
	printf("%d Factiuni Incarcate.", factionss);
	return true;
}
function GetVehicleMaxSpeed(Model)
{
	if(Model < 400 || Model > 611)
	{
		return false;
	}
	new VehString[7];
	format(VehString, 7, "Veh%d", Model);
	return GetSVarInt(VehString);
}
function LoadStock()
{
	stockss = cache_num_rows();

	for(new i = 1; i <= stockss; i++)
	{
		new
			s = i - 1,
			MaxSpeed
		;

		cache_get_value_name_int(s, "ID", StockInfo[i][vID]);
		cache_get_value_name_int(s, "Stock", StockInfo[i][vStock]);
		cache_get_value_name_bigint(DealerShipPrice[i], s, "Price");
		cache_get_value_name_bigint(DealerShipPrice97[i], s, "Price97");
		cache_get_value_name_bigint(DealerShipPrice95[i], s, "Price95");
		cache_get_value_name_bigint(DealerShipSell[i], s, "SellPrice");
		cache_get_value_name_bigint(DealerShip75Sell[i], s, "SellPrice75");
		cache_get_value_name_int(s, "Model", StockInfo[i][vModel]);
		cache_get_value_name_int(s, "MaxSpeed", MaxSpeed);

		new
			VehString[7]
		;

		format(VehString, sizeof(VehString), "Veh%d", StockInfo[i][vModel]);

		SetSVarInt(VehString, MaxSpeed);
	}

	new
		AddedVehicles[1][2] =
		{
			{477, 165}
		}
	;

	for(new i = 0; i < sizeof(AddedVehicles); i++)
	{
		new
			VehString[7]
		;

		format(VehString, sizeof(VehString), "Veh%d", AddedVehicles[i][0]);

		SetSVarInt(VehString, AddedVehicles[i][1]);
	}

	printf("%d Modele de Vehicule Incarcate.", stockss);
	return true;
}
new
	ConturiTotale = 0
;
function LoadUsers(){
	ConturiTotale = cache_num_rows();
	printf("%d Conturi Incarcate.", ConturiTotale);
	mysql_tquery(SQL, "update users set UserID = 65535, Status = 0 where UserID <> 65535 or Status <> 0");
	return true;
}
function DespawnVehicles(playerid){
	for(new v; v < MAX_PERSONAL_VEHICLES; v++){
		if(PlayerInfo[playerid][pVehID][v])
		{
			DestroyNeon(PlayerInfo[playerid][pVehID][v]);
			DestroyVehicleEx(PlayerInfo[playerid][pVehID][v]);
		}
	}
	return true;
}
function LoadPlayerVehicles(playerid, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++) resetVehicle(playerid, idd);
	new count;
	for(new i, j = cache_num_rows(); i != j; ++i){
		if(count < MAX_PERSONAL_VEHICLES) cache_get_value_name_int(i, "ID", PlayerInfo[playerid][pVeh][count]);
		count++;
	}
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++) resetVehicle(playerid, idd, 1);
	LoadVehicle(playerid);
	return true;
}
function LoadVehicle(playerid){
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++){
		gString[0] = EOS;
		mysql_format(SQL, gString, 64, "SELECT * FROM `cars` WHERE `ID`='%d'", PlayerInfo[playerid][pVeh][idd]);
		mysql_tquery(SQL, gString, "LoadVehicle2", "idd", playerid, idd, PlayerInfo[playerid][pSession]);
	}
	return true;
}

function CreateAndAttachVipText(vehicleid, const Text[64], Float: vX, Float: vY, Float: vZ, Float: rX, Float: rY, Float: rZ)
{
	if(VipTextObject[vehicleid] != 0)
	{
		DestroyDynamicObject(VipTextObject[vehicleid]);
		VipTextObject[vehicleid] = 0;
	}

	VipTextObject[vehicleid] = CreateDynamicObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	SetDynamicObjectMaterialText(VipTextObject[vehicleid], 0, Text, OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1);
	AttachDynamicObjectToVehicle(VipTextObject[vehicleid], vehicleid, vX, vY, vZ, rX, rY, rZ);
	return true;
}
function LoadVehicle2(playerid, idd, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(cache_num_rows()){
		cache_get_value_name_int(0, "Model", PlayerInfo[playerid][pVehModel][idd]);
		cache_get_value_name_float(0, "Locationx", PlayerInfo[playerid][pVehLocX][idd]);
		cache_get_value_name_float(0, "Locationy", PlayerInfo[playerid][pVehLocY][idd]);
		cache_get_value_name_float(0, "Locationz", PlayerInfo[playerid][pVehLocZ][idd]);
		cache_get_value_name_float(0, "Angle", PlayerInfo[playerid][pVehAngle][idd]);
		cache_get_value_name_int(0, "BuyTime", PlayerInfo[playerid][pVehBuyTime][idd]);
		cache_get_value_name_int(0, "ColorOne", PlayerInfo[playerid][pVehColor1][idd]);
		cache_get_value_name_int(0, "ColorTwo", PlayerInfo[playerid][pVehColor2][idd]);
		cache_get_value_name_float(0, "KM", PlayerInfo[playerid][pVehKM][idd]);
		cache_get_value_name_int(0, "Gas", PlayerInfo[playerid][pVehGas][idd]);
		cache_get_value_name_int(0, "PaintJ", PlayerInfo[playerid][pVehPaintJ][idd]);
		cache_get_value_name_int(0, "Stage", PlayerInfo[playerid][pVehStage][idd]);
		cache_get_value_name_int(0, "Neon", PlayerInfo[playerid][pVehNeon][idd]);
		cache_get_value_name_int(0, "NeonCustom", PlayerInfo[playerid][pVehNeonCustom][idd]);
		cache_get_value_name_int(0, "Working", PlayerInfo[playerid][pVehWorking][idd]);
		cache_get_value_name_int(0, "VipVehicle", PlayerInfo[playerid][pVehVip][idd]);
		cache_get_value_name(0, "Owner", CarOwner[playerid][idd]);

		cache_get_value_name(0, "VipText", VipText[playerid][idd]);
		cache_get_value_name(0, "VipTextColor", VipTextColor[playerid][idd]);

		new viptextpos[64];
		cache_get_value_name(0, "VipTextPos", viptextpos);
		sscanf(viptextpos, "p<|>ffffff", VipTextPos[0][playerid][idd], VipTextPos[1][playerid][idd], VipTextPos[2][playerid][idd], VipTextPos[3][playerid][idd], VipTextPos[4][playerid][idd], VipTextPos[5][playerid][idd]);

		for(new s = 1; s <= 17; s++){
			new string[8];
			format(string, sizeof string, "mod%d",s);
			new ids = s - 1;
			cache_get_value_name_int(0, string, CarMod[playerid][idd][ids]);
		}

		cache_get_value_name_int(0, "Rainbow", PlayerInfo[playerid][pVehRainbow][idd]);

		cache_get_value_name_int(0, "RainbowOn", PlayerInfo[playerid][pVehRainbowOn][idd]);

		cache_get_value_name_int(0, "BoughtMethod", PlayerInfo[playerid][pBoughtMethod][idd]);

		cache_get_value_name_int(0, "InGarage", PlayerInfo[playerid][pVehInGarage][idd]);
	} 
	return true;
}
function LoadSystems(){
	mysql_tquery(SQL, "select * from factions", "LoadFacInfo", "");
	mysql_tquery(SQL, "select * from houses", "LoadHouses", "");
	mysql_tquery(SQL, "select * from turfs", "LoadTurfs", "");
	mysql_tquery(SQL, "select * from clans order by `clanID` asc", "LoadcInfo", "");
	mysql_tquery(SQL, "select * from clanzones order by `zoneID` asc", "LoadClanZones", "");
	mysql_tquery(SQL, "select * from bizz", "LoadBizz", "");
	mysql_tquery(SQL, "select * from stock", "LoadStock", "");
	mysql_tquery(SQL, "select * from users", "LoadUsers", "");
	mysql_tquery(SQL, "select * from jobs", "LoadJobs", "");
	mysql_tquery(SQL, "select * from billboards", "LoadBillboards");
	mysql_tquery(SQL, "select * from clanhqs", "LoadClanHQs");
	mysql_tquery(SQL, "select * from server_vars", "LoadServerVars");
	return true;
}
function LoadServerVars()
{
	if(cache_num_rows())
	{
		new
			TempGoal,
			TempDailyQuests[14],
			TempGiftHunt[200]
		;

		cache_get_value_name_int(0, "GlobalGoal", TempGoal);

		cache_get_value_name(0, "DailyQuests", TempDailyQuests);

		sscanf(TempDailyQuests, "p<|>a<i>[7]", DailyQuests);

		cache_get_value_name(0, "GiftHunt", TempGiftHunt);

		sscanf(TempGiftHunt, "p<|>a<i>[100]", GiftHuntCollected);

		TodayDailyQuest = DailyQuests[GetWeekDayNumber()];

		for(new i = 1; i < 8; i ++)
		{
			Iter_Add(PossibleQuests, i);
		}

		for(new i = 0; i < 7; i ++)
		{
			if(DailyQuests[i] != 0)
			{
				Iter_Remove(PossibleQuests, DailyQuests[i]);
			}
		}

		if(TodayDailyQuest == 0)
		{
			ChooseDailyQuest();
		}
		else
		{
			printf("Quest-ul zilei este '%s'.", DailyQuestsName[TodayDailyQuest - 1]);
		}

		GiveGoal(TempGoal);

		for(new i = 0; i < 100; i++)
		{
			if(GiftHuntCollected[i] != true)
			{			
				AreaGiftHunt[i] = CreateDynamicSphere2(20, i, GiftHuntPos[i][0], GiftHuntPos[i][1], GiftHuntPos[i][2], 3, 0, 0);

				GiftHuntObject[i] = CreateDynamicObject(1550, GiftHuntPos[i][0], GiftHuntPos[i][1], GiftHuntPos[i][2], 0, 0, 0, 0, 0);
			}
		}

		printf("Gift Hunt Objects: %d", HuntRamase());
	}

	FinishTime = gettime();
	printf("Serverul a pornit in %d secunde.", FinishTime - StartTime);
	SendRconCommand("password 0");

	return true;
}
function OnPlayerGoto(playerid, interior, virtual)
{
	SetPVarInt(playerid, "ftps", 0);
	SetPVarInt(playerid, "tps", 0);
	if(IsPlayerInAnyVehicle(playerid))
	{
		foreach(new i : Nearby[playerid])
		{
			if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid) || GetPlayerSurfingVehicleID(i) == GetPlayerVehicleID(playerid))
			{
				SetPlayerInterior(i, interior);
				SetPlayerVirtualWorld(i, virtual);
				SetPVarInt(i, "ftps", 0);
				SetPVarInt(i, "tps", 0);
			}
		}
	}
	return true;
}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(!IsValidVehicle(vehicleid))
		return false;

	new
		Float: PlayerX,
		Float: PlayerY,
		Float: PlayerZ,
		Float: VehicleX,
		Float: VehicleY,
		Float: VehicleZ
	;
	GetPlayerPos(playerid, PlayerX, PlayerY, PlayerZ);
	GetVehiclePos(vehicleid, VehicleX, VehicleY, VehicleZ);
	new
		Float: Distance = (VehicleX - PlayerX) * (VehicleX - PlayerX) + (VehicleY - PlayerY) * (VehicleY - PlayerY) + (VehicleZ - PlayerZ) * (VehicleZ - PlayerZ)
	;
	if(Distance <= radi * radi)
		return true;

	return false;
}
public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle){
	printf("Eroare: %d | %s | %s", errorid, error, callback);
	printf("Query: %s", query);
	return true;
}
function ResetSkyWars()
{
	if(Iter_Count(InSkyWars) != 0)
	{
		Iter_Clear(InSkyWars);
	}
	SkyWarsStarted = false;
	SkyWarsTimer = 0;
	TextDrawSetString(SkyWarsTD, "Se asteapta jucatori...");
	for(new i; i < 4; i++)
	{
		foreach(new x : SkyWarsPickups[i])
		{
			DestroyDynamicPickup(x);
		}
		Iter_Clear(SkyWarsPickups[i]);
	}
	SkyWarsMoney = 0;
	return true;
}
function ChooseDailyJob()
{
	new
		rand = 2 + random(15)
	;
	while(rand == DailyJob || rand == 3)
	{
		rand = 2 + random(15);
	}
	if(DailyJob != 0)
	{
		printf("Jobul zilei este: %s, vechiul job: %s.", JobInfo[rand][jName], JobInfo[DailyJob][jName]);
		va_SendClientMessageToAll(0xb0251eff, "Jobul zilei >> {ffffff}Noul job al zilei este %s, vechiul job a fost %s.", JobInfo[rand][jName], JobInfo[DailyJob][jName]);
	}
	else
	{
		printf("Jobul zilei este: %s.", JobInfo[rand][jName]);
		va_SendClientMessageToAll(0xb0251eff, "Jobul zilei >> {ffffff}Noul job al zilei este %s.", JobInfo[rand][jName]);
	}
	DailyJob = rand;
	return true;
}
public OnGameModeInit()
{
	AddPlayerClass(0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0);

	StartTime = gettime();
	SendRconCommand("password acuporneste");

	AntiDeAMX();
	mysql_log(ERROR | WARNING);
	SQL = mysql_connect_file("mysql.ini");
	DisableInteriorEnterExits();
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();
	ManualVehicleEngineAndLights();
	SetNameTagDrawDistance(30);
	EnableStuntBonusForAll(0);
	LimitPlayerMarkerRadius(5.0);
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
	Iter_Clear(Admins);
	Iter_Clear(Helpers);
	Iter_Clear(InPaint);
	Iter_Clear(Contracts);
	Iter_Clear(SpawnVehs);
	Iter_Clear(InRuleta);
	Iter_Clear(InLogin);
	Iter_Clear(YouTubers);
	for(new i; i < 9; i++)
	{
		Iter_Clear(fVehicles[i]);
	}
	for(new i; i < MAX_CLANS; i++)
	{
		Iter_Clear(cVehicles[i]);
	}
	Iter_Clear(UberCalls);
	Iter_Clear(ParamedicCalls);
	Iter_Clear(GlovoCalls);
	for(new i; i < 3; i++)
	{
		Iter_Clear(VotRuleta[i]);
	}
	Iter_Clear(WarHP);
	Iter_Clear(WarWeapons);
	for(new i; i < 10; i ++)
	{
		Iter_Clear(WithState[i]);
	}
	Iter_Clear(Spectators);
	Iter_Clear(StageVehicles);
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		VehicleWithStage[i] = false;
	}
	for(new i; i < 9; i++)
	{
		Iter_Clear(FactionMembers[i]);
	}
	gTextdraws();
	LoadSystems();
	SetGameModeText("OG-Life RPG");
	SetSVarInt("Ruleta", 0);
	SetSVarInt("SecundeRuleta", 30);
	SetSVarInt("RuletaRamase", 15);

	for(new i; i < MAX_LOCATIONS; i++)
	{
		if(i == 3) format(gString, 256, "%s\n{ffffff}Apasa tasta {00a326}N {ffffff}pentru a-ti cumpara / upgrada un PC\n{ffffff}Apasa tasta {00a326}Y {ffffff}pentru a vinde bitcoin-ul", LocationName[i]);
		else if(i == 4) format(gString, 64, "%s\n{ffffff}Apasa tasta {00a326}F", LocationName[i]);
		else if(i == 5) format(gString, 64, "%s\n{ffffff}Tasteaza {00a326}/ad", LocationName[i]);
		else format(gString, 64, "%s\n{ffffff}Apasa tasta {00a326}Y", LocationName[i]);
		CreateTextPickup(gString, COLOR_SERVER, LocationPos[i][0], LocationPos[i][1], LocationPos[i][2], 8, -1, -1, 1239);
		if(LocationArea[i])
		{
			DestroyDynamicArea2(LocationArea[i]);
		}
		LocationArea[i] = CreateDynamicSphere2(3, i, LocationPos[i][0], LocationPos[i][1], LocationPos[i][2], 1);
	}

	for(new i; i < sizeof(RuletaPos); i++)
	{
		CreateDynamicSphere2(16, i, RuletaPos[i][0], RuletaPos[i][1], RuletaPos[i][2], 1);
		CreateTextPickup("Ruleta\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, RuletaPos[i][0], RuletaPos[i][1], RuletaPos[i][2], 8, 8, 10, 1239);
	}

	for(new i; i < sizeof(gAtms); i++)
	{
		AtmHealth[i] = 1000;

		gString[0] = (EOS);
		format(gString, sizeof(gString), "{ffffff}ATM {00a326}#%d\n{ffffff}Tasteaza {00a326}/deposit sau /withdraw\n{ffffff}Viata: {00a326}%0.2f", i + 1, AtmHealth[i]);

		AtmText[i] = CreateDynamic3DTextLabel(gString, COLOR_SERVER, gAtms[i][0], gAtms[i][1], gAtms[i][2], 8.0, INVALID_PLAYER_ID, INVALID_PLAYER_ID, 0, 0, 0, -1, 100.0);

		AtmObject[i] = CreateDynamicObject(19324, gAtms[i][0], gAtms[i][1], gAtms[i][2], 0.00000, 0.00000, gAtms[i][3]);

		if(AtmArea[i])
		{
			DestroyDynamicArea2(AtmArea[i]);
		}
		AtmArea[i] = CreateDynamicSphere2(4, i, gAtms[i][0], gAtms[i][1], gAtms[i][2], 2.5, 0, 0);
	}

	for(new i = 1; i < sizeof(fvPos); i++)
	{
		CreateTextPickup("Creare Vehicul De Factiune\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, fvPos[i][0], fvPos[i][1], fvPos[i][2], 8.0, -1, -1, 19133);
	}

	CreateTextPickup("24/7 store\n{ffffff}Apasa tasta {00a326}Y",COLOR_SERVER, -27.9863, -89.9510, 1003.5469, 8, -1, -1, 19131);
	CreateTextPickup("Gun Shop\n{ffffff}Apasa tasta {00a326}Y",COLOR_SERVER, 314.2594, -133.6906, 999.6016, 8, -1, -1, 2061);
	CreateTextPickup("Sex Shop\n{ffffff}Apasa tasta {00a326}Y",COLOR_SERVER, -104.0322, -22.6779, 1000.7188, 8, -1, -1, 18631);
	CreateTextPickup("Burger Shot\n{ffffff}Apasa tasta {00a326}Y",COLOR_SERVER, 377.5607, -67.4351, 1001.5078, 8, -1, -1, 1241);
	CreateTextPickup("Clothing Store\n{ffffff}Apasa tasta {00a326}Y",COLOR_SERVER, 161.5606, -83.2514, 1001.8047, 8, -1, -1, 1275);
	CreateTextPickup("Parkour\n{ffffff}Apasa tasta {00a326}Y",COLOR_SERVER, 1387.1040, -1219.1051, 202.4453, 8, -1, -1, 1275);

	CreateTextPickup("Police\nProcessing Entrance\n(/arrest)",COLOR_SERVER, 1525.2217, -1677.8744, 5.8906, 20.0, 0, 0, 1314);

	CreateTextPickup("Gard\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, 1754.3385,-1581.8805,12.4487, 20.0, 305500, 0, 1239);
	CreateTextPickup("Gard\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, 1812.1967,-1536.2157,13.0976, 20.0, 305500, 0, 1239);

	CreateTextPickup("Basic Crate\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, 539.8737, -1806.7468, 6.0625, 25.0, 0, 0, 18631);
	CreateTextPickup("Normal Crate\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, 543.3936, -1806.6151, 6.0625, 25.0, 0, 0, 18631);
	CreateTextPickup("Medium Crate\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, 544.6931, -1807.6870, 6.0625, 25.0, 0, 0, 18631);
	CreateTextPickup("Diamond Crate\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, 544.8458, -1811.1481, 6.0625, 25.0, 0, 0, 18631);
	CreateTextPickup("Vehicle Crate\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, 544.8479, -1815.3947, 6.0625, 25.0, 0, 0, 18631);
	CreateTextPickup("Fragment Crate\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, 544.8452, -1819.1011, 6.0625, 25.0, 0, 0, 18631);
	CreateTextPickup("Skin Crate\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, 543.4644, -1820.6315, 6.0625, 25.0, 0, 0, 18631);
	CreateTextPickup("OG Crate\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, 539.7991, -1820.6997, 6.0625, 25.0, 0, 0, 18631);

	CreateTextPickup("Lucky\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, 1993.5016, 1005.5135, 994.4688, 25, 8, 10, 1274);

	new hour, minute, second;
	gettime(hour, minute, second);

	lastpayday = hour;
	SetWorldTime(hour);
	SendRconCommand("weather 0");

	LoadMapping();

	for(new i = 1; i <= factionss; i++)
	{
		DeelayGov[i] = gettime();
	}

	SetSVarInt("ContractAutomat", gettime() + 600);

	SpecInfo[MAX_PLAYERS][sSpectate] =
	SpecInfo[MAX_PLAYERS][sState] =
	SpecInfo[MAX_PLAYERS][sWorld] =
	SpecInfo[MAX_PLAYERS][sInterior] =
	SpecInfo[MAX_PLAYERS][sVehicle] =
	SpecInfo[MAX_PLAYERS][sSeat] = -1;

	SpecInfo[MAX_PLAYERS][sPosX] =
	SpecInfo[MAX_PLAYERS][sPosY] =
	SpecInfo[MAX_PLAYERS][sPosZ] = 0.0;

	ResetSkyWars();

	Iter_Clear(PlayersWithRadar);
	for(new Radar = 0; Radar < 1000; Radar ++)
	{
		RadarInfo[Radar][rOwner] = INVALID_PLAYER_ID;
		RadarInfo[Radar][rSpeed] = 0;
		RadarInfo[Radar][rArea] = 0;
	}

	for(new i = 0; i <= MAX_JOBS; i++)
	{
		Iter_Clear(WithJob[i]);
	}

	Iter_Clear(WithFpsText);

	CreateDynamicSphere2(5, 1, SpawnX, SpawnY, SpawnZ, 100, 0, 0);

	Iter_Clear(AtEvent);

	Iter_Clear(ClanZonesWithDeelay);

	for(new i = 0; i < 4; i++)
	{
		InsulaSkywars[i] = -1;
	}

	Iter_Clear(Leaders);
	Iter_Clear(Vips);
	Iter_Clear(Premiums);
	Iter_Clear(PcPlayers);
	Iter_Clear(AndroidPlayers);
	
	for(new i = 0; i < MAX_CLANS; i++)
	{
		Iter_Clear(InClan[i]);
	}

	LoadVehiclesType();

	for(new i = 0; i < 10000; i ++)
	{
		Iter_Clear(WithFreq[i]);
	}

	Iter_Clear(RainbowVehicles);

	CastigatiRuleta = 0;

	PierdutiRuleta = 0;

	for(new i = 0; i < sizeof(SlotsCoords); i++)
	{
		SlotsArea[i] = CreateDynamicSphere2(15, i, SlotsCoords[i][0], SlotsCoords[i][1], SlotsCoords[i][2], 1, 8, 10);
		CreateTextPickup("Slots\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, SlotsCoords[i][0], SlotsCoords[i][1], SlotsCoords[i][2], 8.0, 8, 10, 19135);
	}

	Iter_Clear(InCasinoSlots);

	PierdutiSlots = 0;
	MPierdutiSlots = 0;
	CastigatiSlots = 0;
	MCastigatiSlots = 0;

	Iter_Clear(MovingDice);

	GivedBonus = false;

	CreateTextPickup("Weed Task\n{ffffff}Apasa tasta {00a326}Y", COLOR_SERVER, 316.1940, 1117.5341, 1083.8828, 20.0, 0, 5, 1279);

	Iter_Clear(RacePerk);

	Iter_Clear(InRaceQuest);

	LastRandomMsg = gettime();
	LastRandomMsgType = 0;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		StatusLabel[i] = INVALID_3DTEXT_ID;
	}

	return true;
}
function ShowRoulette(playerid){
	if(Iter_Contains(InRuleta, playerid)) return true;
	for(new i; i < 12; i++) TextDrawShowForPlayer(playerid, RuletaTD[i]);
	SelectTextDraw(playerid, HOVER_COLOR);
	Iter_Add(InRuleta, playerid);
	return true;
}
function HideRoulette(playerid){
	if(GetSVarInt("Ruleta")){
		for(new i; i < 3; i++){
			if(Iter_Contains(VotRuleta[i], playerid)){
				SelectTextDraw(playerid, HOVER_COLOR);
				Info(playerid, "Nu poti iesi acum.");
				return true;
			}
		}
	}
	for(new i; i < 3; i++){
		if(Iter_Contains(VotRuleta[i], playerid))
		{
			GivePlayerCash(playerid, GetPVarInt(playerid, "SumaPariata"));
			Iter_Remove(VotRuleta[i], playerid);
			break;
		}
	} 
	for(new i; i < 12; i++) TextDrawHideForPlayer(playerid, RuletaTD[i]);
	Iter_Remove(InRuleta, playerid);
	CancelSelectTextDraw(playerid);
	return true;
}
function JucatoriRuleta(){
	new Jucatori;
	for(new i; i < 3; i ++){
		Jucatori += Iter_Count(VotRuleta[i]);
	}
	return Jucatori;
}
function PariuRuleta(playerid){
	new Pariu = -1;
	for(new i; i < 3; i++){
		if(Iter_Contains(VotRuleta[i], playerid)) Pariu = i;
	}
	return Pariu;
}
function StopRoulette(){
	TextDrawSetString(RuletaTD[11], "Se asteapta pariuri...");
	SetSVarInt("Ruleta", 0);
	SetSVarInt("SecundeRuleta", 30);
	SetSVarInt("RuletaRamase", 15);
	for(new i; i < 3; i++) Iter_Clear(VotRuleta[i]);
	return true;
}
function CuloareNumar(numar){
	new NumereNegre[19] = {2, 4, 6, 8, 10, 11, 13, 15, 17, 19, 20, 22, 24, 26, 28, 29, 31, 33, 35},
		NumereRosii[17] = {1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 30, 32, 34, 36};
	if(numar == 0) return 6553855;
	for(new i; i < sizeof(NumereNegre); i++){
		if(NumereNegre[i] == numar) return 255;
	}
	for(new i; i < sizeof(NumereRosii); i++){
		if(NumereRosii[i] == numar) return 1677721855;
	}
	return true;
}
stock gTextdraws()
{
	MySkinsTD[0] = TextDrawCreate(319.500000, 159.000000, "_");
	TextDrawFont(MySkinsTD[0], 1);
	TextDrawLetterSize(MySkinsTD[0], 0.600000, 12.250027);
	TextDrawTextSize(MySkinsTD[0], 298.500000, 241.000000);
	TextDrawSetOutline(MySkinsTD[0], 1);
	TextDrawSetShadow(MySkinsTD[0], 0);
	TextDrawAlignment(MySkinsTD[0], 2);
	TextDrawColor(MySkinsTD[0], -1);
	TextDrawBackgroundColor(MySkinsTD[0], 255);
	TextDrawBoxColor(MySkinsTD[0], 175);
	TextDrawUseBox(MySkinsTD[0], 1);
	TextDrawSetProportional(MySkinsTD[0], 1);
	TextDrawSetSelectable(MySkinsTD[0], 0);

	MySkinsTD[1] = TextDrawCreate(438.000000, 139.000000, "ld_beat:cross");
	TextDrawFont(MySkinsTD[1], 4);
	TextDrawLetterSize(MySkinsTD[1], 0.600000, 2.000000);
	TextDrawTextSize(MySkinsTD[1], 20.000000, 20.000000);
	TextDrawSetOutline(MySkinsTD[1], 1);
	TextDrawSetShadow(MySkinsTD[1], 0);
	TextDrawAlignment(MySkinsTD[1], 1);
	TextDrawColor(MySkinsTD[1], -1);
	TextDrawBackgroundColor(MySkinsTD[1], 255);
	TextDrawBoxColor(MySkinsTD[1], 50);
	TextDrawUseBox(MySkinsTD[1], 1);
	TextDrawSetProportional(MySkinsTD[1], 1);
	TextDrawSetSelectable(MySkinsTD[1], 1);

	MySkinsTD[2] = TextDrawCreate(172.000000, 201.000000, "ld_beat:left");
	TextDrawFont(MySkinsTD[2], 4);
	TextDrawLetterSize(MySkinsTD[2], 0.600000, 2.000000);
	TextDrawTextSize(MySkinsTD[2], 25.000000, 25.000000);
	TextDrawSetOutline(MySkinsTD[2], 1);
	TextDrawSetShadow(MySkinsTD[2], 0);
	TextDrawAlignment(MySkinsTD[2], 1);
	TextDrawColor(MySkinsTD[2], -1);
	TextDrawBackgroundColor(MySkinsTD[2], 255);
	TextDrawBoxColor(MySkinsTD[2], 50);
	TextDrawUseBox(MySkinsTD[2], 1);
	TextDrawSetProportional(MySkinsTD[2], 1);
	TextDrawSetSelectable(MySkinsTD[2], 1);

	MySkinsTD[3] = TextDrawCreate(443.000000, 201.000000, "ld_beat:right");
	TextDrawFont(MySkinsTD[3], 4);
	TextDrawLetterSize(MySkinsTD[3], 0.600000, 2.000000);
	TextDrawTextSize(MySkinsTD[3], 25.000000, 25.000000);
	TextDrawSetOutline(MySkinsTD[3], 1);
	TextDrawSetShadow(MySkinsTD[3], 0);
	TextDrawAlignment(MySkinsTD[3], 1);
	TextDrawColor(MySkinsTD[3], -1);
	TextDrawBackgroundColor(MySkinsTD[3], 255);
	TextDrawBoxColor(MySkinsTD[3], 50);
	TextDrawUseBox(MySkinsTD[3], 1);
	TextDrawSetProportional(MySkinsTD[3], 1);
	TextDrawSetSelectable(MySkinsTD[3], 1);

	CrateTD = TextDrawCreate(317.500000, 147.000000, "_");
	TextDrawFont(CrateTD, 1);
	TextDrawLetterSize(CrateTD, 0.600000, 17.500061);
	TextDrawTextSize(CrateTD, 298.500000, 231.000000);
	TextDrawSetOutline(CrateTD, 1);
	TextDrawSetShadow(CrateTD, 0);
	TextDrawAlignment(CrateTD, 2);
	TextDrawColor(CrateTD, -1);
	TextDrawBackgroundColor(CrateTD, 255);
	TextDrawBoxColor(CrateTD, 175);
	TextDrawUseBox(CrateTD, 1);
	TextDrawSetProportional(CrateTD, 1);
	TextDrawSetSelectable(CrateTD, 0);

	PerkDetailsTD[0] = TextDrawCreate(315.000000, 145.000000, "_");
	TextDrawFont(PerkDetailsTD[0], 1);
	TextDrawLetterSize(PerkDetailsTD[0], 0.600000, 26.450002);
	TextDrawTextSize(PerkDetailsTD[0], 298.500000, 153.500000);
	TextDrawSetOutline(PerkDetailsTD[0], 1);
	TextDrawSetShadow(PerkDetailsTD[0], 0);
	TextDrawAlignment(PerkDetailsTD[0], 2);
	TextDrawColor(PerkDetailsTD[0], -1);
	TextDrawBackgroundColor(PerkDetailsTD[0], 255);
	TextDrawBoxColor(PerkDetailsTD[0], 175);
	TextDrawUseBox(PerkDetailsTD[0], 1);
	TextDrawSetProportional(PerkDetailsTD[0], 1);
	TextDrawSetSelectable(PerkDetailsTD[0], 0);

	PerkDetailsTD[1] = TextDrawCreate(372.000000, 145.000000, "ld_beat:cross");
	TextDrawFont(PerkDetailsTD[1], 4);
	TextDrawLetterSize(PerkDetailsTD[1], 0.600000, 2.000000);
	TextDrawTextSize(PerkDetailsTD[1], 20.000000, 20.000000);
	TextDrawSetOutline(PerkDetailsTD[1], 1);
	TextDrawSetShadow(PerkDetailsTD[1], 0);
	TextDrawAlignment(PerkDetailsTD[1], 1);
	TextDrawColor(PerkDetailsTD[1], -1);
	TextDrawBackgroundColor(PerkDetailsTD[1], 255);
	TextDrawBoxColor(PerkDetailsTD[1], 50);
	TextDrawUseBox(PerkDetailsTD[1], 1);
	TextDrawSetProportional(PerkDetailsTD[1], 1);
	TextDrawSetSelectable(PerkDetailsTD[1], 1);

	PerkDetailsTD[2] = TextDrawCreate(315.000000, 182.000000, "_");
	TextDrawFont(PerkDetailsTD[2], 1);
	TextDrawLetterSize(PerkDetailsTD[2], 0.600000, 0.150001);
	TextDrawTextSize(PerkDetailsTD[2], 298.500000, 152.000000);
	TextDrawSetOutline(PerkDetailsTD[2], 1);
	TextDrawSetShadow(PerkDetailsTD[2], 0);
	TextDrawAlignment(PerkDetailsTD[2], 2);
	TextDrawColor(PerkDetailsTD[2], -1);
	TextDrawBackgroundColor(PerkDetailsTD[2], 255);
	TextDrawBoxColor(PerkDetailsTD[2], -121);
	TextDrawUseBox(PerkDetailsTD[2], 1);
	TextDrawSetProportional(PerkDetailsTD[2], 1);
	TextDrawSetSelectable(PerkDetailsTD[2], 0);

	PerkDetailsTD[3] = TextDrawCreate(315.000000, 265.000000, "_");
	TextDrawFont(PerkDetailsTD[3], 1);
	TextDrawLetterSize(PerkDetailsTD[3], 0.600000, 0.150001);
	TextDrawTextSize(PerkDetailsTD[3], 298.500000, 152.000000);
	TextDrawSetOutline(PerkDetailsTD[3], 1);
	TextDrawSetShadow(PerkDetailsTD[3], 0);
	TextDrawAlignment(PerkDetailsTD[3], 2);
	TextDrawColor(PerkDetailsTD[3], -1);
	TextDrawBackgroundColor(PerkDetailsTD[3], 255);
	TextDrawBoxColor(PerkDetailsTD[3], -121);
	TextDrawUseBox(PerkDetailsTD[3], 1);
	TextDrawSetProportional(PerkDetailsTD[3], 1);
	TextDrawSetSelectable(PerkDetailsTD[3], 0);

	PerkDetailsTD[4] = TextDrawCreate(315.000000, 350.000000, "_");
	TextDrawFont(PerkDetailsTD[4], 1);
	TextDrawLetterSize(PerkDetailsTD[4], 0.600000, 0.150001);
	TextDrawTextSize(PerkDetailsTD[4], 298.500000, 152.000000);
	TextDrawSetOutline(PerkDetailsTD[4], 1);
	TextDrawSetShadow(PerkDetailsTD[4], 0);
	TextDrawAlignment(PerkDetailsTD[4], 2);
	TextDrawColor(PerkDetailsTD[4], -1);
	TextDrawBackgroundColor(PerkDetailsTD[4], 255);
	TextDrawBoxColor(PerkDetailsTD[4], -121);
	TextDrawUseBox(PerkDetailsTD[4], 1);
	TextDrawSetProportional(PerkDetailsTD[4], 1);
	TextDrawSetSelectable(PerkDetailsTD[4], 0);

	PerkDetailsTD[5] = TextDrawCreate(266.000000, 366.000000, "Buy");
	TextDrawFont(PerkDetailsTD[5], 1);
	TextDrawLetterSize(PerkDetailsTD[5], 0.400000, 1.550000);
	TextDrawTextSize(PerkDetailsTD[5], 15.000000, 50.500000);
	TextDrawSetOutline(PerkDetailsTD[5], 1);
	TextDrawSetShadow(PerkDetailsTD[5], 0);
	TextDrawAlignment(PerkDetailsTD[5], 2);
	TextDrawColor(PerkDetailsTD[5], -1);
	TextDrawBackgroundColor(PerkDetailsTD[5], 255);
	TextDrawBoxColor(PerkDetailsTD[5], 16711730);
	TextDrawUseBox(PerkDetailsTD[5], 1);
	TextDrawSetProportional(PerkDetailsTD[5], 1);
	TextDrawSetSelectable(PerkDetailsTD[5], 1);

	PerkDetailsTD[6] = TextDrawCreate(352.000000, 366.000000, "Deallocate");
	TextDrawFont(PerkDetailsTD[6], 1);
	TextDrawLetterSize(PerkDetailsTD[6], 0.400000, 1.550000);
	TextDrawTextSize(PerkDetailsTD[6], 15.000000, 75.000000);
	TextDrawSetOutline(PerkDetailsTD[6], 1);
	TextDrawSetShadow(PerkDetailsTD[6], 0);
	TextDrawAlignment(PerkDetailsTD[6], 2);
	TextDrawColor(PerkDetailsTD[6], -1);
	TextDrawBackgroundColor(PerkDetailsTD[6], 255);
	TextDrawBoxColor(PerkDetailsTD[6], -16777166);
	TextDrawUseBox(PerkDetailsTD[6], 1);
	TextDrawSetProportional(PerkDetailsTD[6], 1);
	TextDrawSetSelectable(PerkDetailsTD[6], 1);

	CategoryPerksTD[0] = TextDrawCreate(315.000000, 145.000000, "_");
	TextDrawFont(CategoryPerksTD[0], 1);
	TextDrawLetterSize(CategoryPerksTD[0], 0.600000, 20.000019);
	TextDrawTextSize(CategoryPerksTD[0], 298.500000, 300.000000);
	TextDrawSetOutline(CategoryPerksTD[0], 1);
	TextDrawSetShadow(CategoryPerksTD[0], 0);
	TextDrawAlignment(CategoryPerksTD[0], 2);
	TextDrawColor(CategoryPerksTD[0], -1);
	TextDrawBackgroundColor(CategoryPerksTD[0], 255);
	TextDrawBoxColor(CategoryPerksTD[0], 175);
	TextDrawUseBox(CategoryPerksTD[0], 1);
	TextDrawSetProportional(CategoryPerksTD[0], 1);
	TextDrawSetSelectable(CategoryPerksTD[0], 0);

	CategoryPerksTD[1] = TextDrawCreate(441.000000, 145.000000, "ld_beat:cross");
	TextDrawFont(CategoryPerksTD[1], 4);
	TextDrawLetterSize(CategoryPerksTD[1], 0.600000, 2.000000);
	TextDrawTextSize(CategoryPerksTD[1], 25.000000, 25.000000);
	TextDrawSetOutline(CategoryPerksTD[1], 1);
	TextDrawSetShadow(CategoryPerksTD[1], 0);
	TextDrawAlignment(CategoryPerksTD[1], 1);
	TextDrawColor(CategoryPerksTD[1], -1);
	TextDrawBackgroundColor(CategoryPerksTD[1], 255);
	TextDrawBoxColor(CategoryPerksTD[1], 50);
	TextDrawUseBox(CategoryPerksTD[1], 1);
	TextDrawSetProportional(CategoryPerksTD[1], 1);
	TextDrawSetSelectable(CategoryPerksTD[1], 1);

	PerkMenuTD[0] = TextDrawCreate(315.000000, 145.000000, "_");
	TextDrawFont(PerkMenuTD[0], 1);
	TextDrawLetterSize(PerkMenuTD[0], 0.625000, 23.500003);
	TextDrawTextSize(PerkMenuTD[0], 103.500000, 309.500000);
	TextDrawSetOutline(PerkMenuTD[0], 1);
	TextDrawSetShadow(PerkMenuTD[0], 0);
	TextDrawAlignment(PerkMenuTD[0], 2);
	TextDrawColor(PerkMenuTD[0], -1);
	TextDrawBackgroundColor(PerkMenuTD[0], 255);
	TextDrawBoxColor(PerkMenuTD[0], 175);
	TextDrawUseBox(PerkMenuTD[0], 1);
	TextDrawSetProportional(PerkMenuTD[0], 1);
	TextDrawSetSelectable(PerkMenuTD[0], 0);

	PerkMenuTD[1] = TextDrawCreate(446.000000, 144.000000, "ld_beat:cross");
	TextDrawFont(PerkMenuTD[1], 4);
	TextDrawLetterSize(PerkMenuTD[1], 0.600000, 2.000000);
	TextDrawTextSize(PerkMenuTD[1], 25.000000, 25.000000);
	TextDrawSetOutline(PerkMenuTD[1], 1);
	TextDrawSetShadow(PerkMenuTD[1], 0);
	TextDrawAlignment(PerkMenuTD[1], 1);
	TextDrawColor(PerkMenuTD[1], -1);
	TextDrawBackgroundColor(PerkMenuTD[1], 255);
	TextDrawBoxColor(PerkMenuTD[1], 50);
	TextDrawUseBox(PerkMenuTD[1], 1);
	TextDrawSetProportional(PerkMenuTD[1], 1);
	TextDrawSetSelectable(PerkMenuTD[1], 1);

	PerkMenuTD[2] = TextDrawCreate(315.000000, 150.000000, "Perk System");
	TextDrawFont(PerkMenuTD[2], 1);
	TextDrawLetterSize(PerkMenuTD[2], 0.600000, 1.950000);
	TextDrawTextSize(PerkMenuTD[2], 400.000000, 130.500000);
	TextDrawSetOutline(PerkMenuTD[2], 1);
	TextDrawSetShadow(PerkMenuTD[2], 0);
	TextDrawAlignment(PerkMenuTD[2], 2);
	TextDrawColor(PerkMenuTD[2], -1);
	TextDrawBackgroundColor(PerkMenuTD[2], 255);
	TextDrawBoxColor(PerkMenuTD[2], 50);
	TextDrawUseBox(PerkMenuTD[2], 0);
	TextDrawSetProportional(PerkMenuTD[2], 1);
	TextDrawSetSelectable(PerkMenuTD[2], 0);

	PerkMenuTD[3] = TextDrawCreate(236.000000, 181.000000, "_");
	TextDrawFont(PerkMenuTD[3], 1);
	TextDrawLetterSize(PerkMenuTD[3], 0.600000, 4.549993);
	TextDrawTextSize(PerkMenuTD[3], 298.500000, 75.000000);
	TextDrawSetOutline(PerkMenuTD[3], 1);
	TextDrawSetShadow(PerkMenuTD[3], 0);
	TextDrawAlignment(PerkMenuTD[3], 2);
	TextDrawColor(PerkMenuTD[3], -1);
	TextDrawBackgroundColor(PerkMenuTD[3], 255);
	TextDrawBoxColor(PerkMenuTD[3], 16711815);
	TextDrawUseBox(PerkMenuTD[3], 1);
	TextDrawSetProportional(PerkMenuTD[3], 1);
	TextDrawSetSelectable(PerkMenuTD[3], 0);

	PerkMenuTD[4] = TextDrawCreate(315.000000, 181.000000, "_");
	TextDrawFont(PerkMenuTD[4], 1);
	TextDrawLetterSize(PerkMenuTD[4], 0.600000, 4.549993);
	TextDrawTextSize(PerkMenuTD[4], 298.500000, 75.000000);
	TextDrawSetOutline(PerkMenuTD[4], 1);
	TextDrawSetShadow(PerkMenuTD[4], 0);
	TextDrawAlignment(PerkMenuTD[4], 2);
	TextDrawColor(PerkMenuTD[4], -1);
	TextDrawBackgroundColor(PerkMenuTD[4], 255);
	TextDrawBoxColor(PerkMenuTD[4], 16711815);
	TextDrawUseBox(PerkMenuTD[4], 1);
	TextDrawSetProportional(PerkMenuTD[4], 1);
	TextDrawSetSelectable(PerkMenuTD[4], 0);

	PerkMenuTD[5] = TextDrawCreate(394.000000, 181.000000, "_");
	TextDrawFont(PerkMenuTD[5], 1);
	TextDrawLetterSize(PerkMenuTD[5], 0.600000, 4.549993);
	TextDrawTextSize(PerkMenuTD[5], 298.500000, 75.000000);
	TextDrawSetOutline(PerkMenuTD[5], 1);
	TextDrawSetShadow(PerkMenuTD[5], 0);
	TextDrawAlignment(PerkMenuTD[5], 2);
	TextDrawColor(PerkMenuTD[5], -1);
	TextDrawBackgroundColor(PerkMenuTD[5], 255);
	TextDrawBoxColor(PerkMenuTD[5], 16711815);
	TextDrawUseBox(PerkMenuTD[5], 1);
	TextDrawSetProportional(PerkMenuTD[5], 1);
	TextDrawSetSelectable(PerkMenuTD[5], 0);

	PerkMenuTD[6] = TextDrawCreate(236.000000, 227.000000, "_");
	TextDrawFont(PerkMenuTD[6], 1);
	TextDrawLetterSize(PerkMenuTD[6], 0.600000, 4.549993);
	TextDrawTextSize(PerkMenuTD[6], 298.500000, 75.000000);
	TextDrawSetOutline(PerkMenuTD[6], 1);
	TextDrawSetShadow(PerkMenuTD[6], 0);
	TextDrawAlignment(PerkMenuTD[6], 2);
	TextDrawColor(PerkMenuTD[6], -1);
	TextDrawBackgroundColor(PerkMenuTD[6], 255);
	TextDrawBoxColor(PerkMenuTD[6], 16711815);
	TextDrawUseBox(PerkMenuTD[6], 1);
	TextDrawSetProportional(PerkMenuTD[6], 1);
	TextDrawSetSelectable(PerkMenuTD[6], 0);

	PerkMenuTD[7] = TextDrawCreate(315.000000, 227.000000, "_");
	TextDrawFont(PerkMenuTD[7], 1);
	TextDrawLetterSize(PerkMenuTD[7], 0.600000, 4.549993);
	TextDrawTextSize(PerkMenuTD[7], 298.500000, 75.000000);
	TextDrawSetOutline(PerkMenuTD[7], 1);
	TextDrawSetShadow(PerkMenuTD[7], 0);
	TextDrawAlignment(PerkMenuTD[7], 2);
	TextDrawColor(PerkMenuTD[7], -1);
	TextDrawBackgroundColor(PerkMenuTD[7], 255);
	TextDrawBoxColor(PerkMenuTD[7], 16711815);
	TextDrawUseBox(PerkMenuTD[7], 1);
	TextDrawSetProportional(PerkMenuTD[7], 1);
	TextDrawSetSelectable(PerkMenuTD[7], 0);

	PerkMenuTD[8] = TextDrawCreate(394.000000, 227.000000, "_");
	TextDrawFont(PerkMenuTD[8], 1);
	TextDrawLetterSize(PerkMenuTD[8], 0.600000, 4.549993);
	TextDrawTextSize(PerkMenuTD[8], 298.500000, 75.000000);
	TextDrawSetOutline(PerkMenuTD[8], 1);
	TextDrawSetShadow(PerkMenuTD[8], 0);
	TextDrawAlignment(PerkMenuTD[8], 2);
	TextDrawColor(PerkMenuTD[8], -1);
	TextDrawBackgroundColor(PerkMenuTD[8], 255);
	TextDrawBoxColor(PerkMenuTD[8], 16711815);
	TextDrawUseBox(PerkMenuTD[8], 1);
	TextDrawSetProportional(PerkMenuTD[8], 1);
	TextDrawSetSelectable(PerkMenuTD[8], 0);

	PerkMenuTD[9] = TextDrawCreate(236.000000, 273.000000, "_");
	TextDrawFont(PerkMenuTD[9], 1);
	TextDrawLetterSize(PerkMenuTD[9], 0.600000, 4.549993);
	TextDrawTextSize(PerkMenuTD[9], 298.500000, 75.000000);
	TextDrawSetOutline(PerkMenuTD[9], 1);
	TextDrawSetShadow(PerkMenuTD[9], 0);
	TextDrawAlignment(PerkMenuTD[9], 2);
	TextDrawColor(PerkMenuTD[9], -1);
	TextDrawBackgroundColor(PerkMenuTD[9], 255);
	TextDrawBoxColor(PerkMenuTD[9], 16711815);
	TextDrawUseBox(PerkMenuTD[9], 1);
	TextDrawSetProportional(PerkMenuTD[9], 1);
	TextDrawSetSelectable(PerkMenuTD[9], 0);

	PerkMenuTD[10] = TextDrawCreate(315.000000, 273.000000, "_");
	TextDrawFont(PerkMenuTD[10], 1);
	TextDrawLetterSize(PerkMenuTD[10], 0.600000, 4.549993);
	TextDrawTextSize(PerkMenuTD[10], 298.500000, 75.000000);
	TextDrawSetOutline(PerkMenuTD[10], 1);
	TextDrawSetShadow(PerkMenuTD[10], 0);
	TextDrawAlignment(PerkMenuTD[10], 2);
	TextDrawColor(PerkMenuTD[10], -1);
	TextDrawBackgroundColor(PerkMenuTD[10], 255);
	TextDrawBoxColor(PerkMenuTD[10], 16711815);
	TextDrawUseBox(PerkMenuTD[10], 1);
	TextDrawSetProportional(PerkMenuTD[10], 1);
	TextDrawSetSelectable(PerkMenuTD[10], 0);

	PerkMenuTD[11] = TextDrawCreate(394.000000, 273.000000, "_");
	TextDrawFont(PerkMenuTD[11], 1);
	TextDrawLetterSize(PerkMenuTD[11], 0.600000, 4.549993);
	TextDrawTextSize(PerkMenuTD[11], 298.500000, 75.000000);
	TextDrawSetOutline(PerkMenuTD[11], 1);
	TextDrawSetShadow(PerkMenuTD[11], 0);
	TextDrawAlignment(PerkMenuTD[11], 2);
	TextDrawColor(PerkMenuTD[11], -1);
	TextDrawBackgroundColor(PerkMenuTD[11], 255);
	TextDrawBoxColor(PerkMenuTD[11], 16711815);
	TextDrawUseBox(PerkMenuTD[11], 1);
	TextDrawSetProportional(PerkMenuTD[11], 1);
	TextDrawSetSelectable(PerkMenuTD[11], 0);

	PerkMenuTD[12] = TextDrawCreate(236.000000, 193.000000, "Job");
	TextDrawFont(PerkMenuTD[12], 1);
	TextDrawLetterSize(PerkMenuTD[12], 0.241666, 1.549998);
	TextDrawTextSize(PerkMenuTD[12], 10.000000, 17.000000);
	TextDrawSetOutline(PerkMenuTD[12], 1);
	TextDrawSetShadow(PerkMenuTD[12], 0);
	TextDrawAlignment(PerkMenuTD[12], 2);
	TextDrawColor(PerkMenuTD[12], -1);
	TextDrawBackgroundColor(PerkMenuTD[12], 255);
	TextDrawBoxColor(PerkMenuTD[12], 50);
	TextDrawUseBox(PerkMenuTD[12], 0);
	TextDrawSetProportional(PerkMenuTD[12], 1);
	TextDrawSetSelectable(PerkMenuTD[12], 1);

	PerkMenuTD[13] = TextDrawCreate(315.000000, 193.000000, "Fisher");
	TextDrawFont(PerkMenuTD[13], 1);
	TextDrawLetterSize(PerkMenuTD[13], 0.241666, 1.549998);
	TextDrawTextSize(PerkMenuTD[13], 10.000000, 26.000000);
	TextDrawSetOutline(PerkMenuTD[13], 1);
	TextDrawSetShadow(PerkMenuTD[13], 0);
	TextDrawAlignment(PerkMenuTD[13], 2);
	TextDrawColor(PerkMenuTD[13], -1);
	TextDrawBackgroundColor(PerkMenuTD[13], 255);
	TextDrawBoxColor(PerkMenuTD[13], 50);
	TextDrawUseBox(PerkMenuTD[13], 0);
	TextDrawSetProportional(PerkMenuTD[13], 1);
	TextDrawSetSelectable(PerkMenuTD[13], 1);

	PerkMenuTD[14] = TextDrawCreate(394.000000, 193.000000, "Trucker");
	TextDrawFont(PerkMenuTD[14], 1);
	TextDrawLetterSize(PerkMenuTD[14], 0.241666, 1.549998);
	TextDrawTextSize(PerkMenuTD[14], 10.000000, 30.500000);
	TextDrawSetOutline(PerkMenuTD[14], 1);
	TextDrawSetShadow(PerkMenuTD[14], 0);
	TextDrawAlignment(PerkMenuTD[14], 2);
	TextDrawColor(PerkMenuTD[14], -1);
	TextDrawBackgroundColor(PerkMenuTD[14], 255);
	TextDrawBoxColor(PerkMenuTD[14], 50);
	TextDrawUseBox(PerkMenuTD[14], 0);
	TextDrawSetProportional(PerkMenuTD[14], 1);
	TextDrawSetSelectable(PerkMenuTD[14], 1);

	PerkMenuTD[15] = TextDrawCreate(236.000000, 239.000000, "Weapons & Drugs");
	TextDrawFont(PerkMenuTD[15], 1);
	TextDrawLetterSize(PerkMenuTD[15], 0.241666, 1.549998);
	TextDrawTextSize(PerkMenuTD[15], 10.000000, 75.000000);
	TextDrawSetOutline(PerkMenuTD[15], 1);
	TextDrawSetShadow(PerkMenuTD[15], 0);
	TextDrawAlignment(PerkMenuTD[15], 2);
	TextDrawColor(PerkMenuTD[15], -1);
	TextDrawBackgroundColor(PerkMenuTD[15], 255);
	TextDrawBoxColor(PerkMenuTD[15], 50);
	TextDrawUseBox(PerkMenuTD[15], 0);
	TextDrawSetProportional(PerkMenuTD[15], 1);
	TextDrawSetSelectable(PerkMenuTD[15], 1);

	PerkMenuTD[16] = TextDrawCreate(315.000000, 239.000000, "Paint");
	TextDrawFont(PerkMenuTD[16], 1);
	TextDrawLetterSize(PerkMenuTD[16], 0.241666, 1.549998);
	TextDrawTextSize(PerkMenuTD[16], 10.000000, 25.000000);
	TextDrawSetOutline(PerkMenuTD[16], 1);
	TextDrawSetShadow(PerkMenuTD[16], 0);
	TextDrawAlignment(PerkMenuTD[16], 2);
	TextDrawColor(PerkMenuTD[16], -1);
	TextDrawBackgroundColor(PerkMenuTD[16], 255);
	TextDrawBoxColor(PerkMenuTD[16], 50);
	TextDrawUseBox(PerkMenuTD[16], 0);
	TextDrawSetProportional(PerkMenuTD[16], 1);
	TextDrawSetSelectable(PerkMenuTD[16], 1);

	PerkMenuTD[17] = TextDrawCreate(394.000000, 239.000000, "Murder & Health");
	TextDrawFont(PerkMenuTD[17], 1);
	TextDrawLetterSize(PerkMenuTD[17], 0.241666, 1.549998);
	TextDrawTextSize(PerkMenuTD[17], 10.000000, 70.000000);
	TextDrawSetOutline(PerkMenuTD[17], 1);
	TextDrawSetShadow(PerkMenuTD[17], 0);
	TextDrawAlignment(PerkMenuTD[17], 2);
	TextDrawColor(PerkMenuTD[17], -1);
	TextDrawBackgroundColor(PerkMenuTD[17], 255);
	TextDrawBoxColor(PerkMenuTD[17], 50);
	TextDrawUseBox(PerkMenuTD[17], 0);
	TextDrawSetProportional(PerkMenuTD[17], 1);
	TextDrawSetSelectable(PerkMenuTD[17], 1);

	PerkMenuTD[18] = TextDrawCreate(236.000000, 285.000000, "Cars & Racing");
	TextDrawFont(PerkMenuTD[18], 1);
	TextDrawLetterSize(PerkMenuTD[18], 0.241666, 1.549998);
	TextDrawTextSize(PerkMenuTD[18], 10.000000, 57.500000);
	TextDrawSetOutline(PerkMenuTD[18], 1);
	TextDrawSetShadow(PerkMenuTD[18], 0);
	TextDrawAlignment(PerkMenuTD[18], 2);
	TextDrawColor(PerkMenuTD[18], -1);
	TextDrawBackgroundColor(PerkMenuTD[18], 255);
	TextDrawBoxColor(PerkMenuTD[18], 50);
	TextDrawUseBox(PerkMenuTD[18], 0);
	TextDrawSetProportional(PerkMenuTD[18], 1);
	TextDrawSetSelectable(PerkMenuTD[18], 1);

	PerkMenuTD[19] = TextDrawCreate(315.000000, 285.000000, "Trader");
	TextDrawFont(PerkMenuTD[19], 1);
	TextDrawLetterSize(PerkMenuTD[19], 0.241666, 1.549998);
	TextDrawTextSize(PerkMenuTD[19], 10.000000, 30.500000);
	TextDrawSetOutline(PerkMenuTD[19], 1);
	TextDrawSetShadow(PerkMenuTD[19], 0);
	TextDrawAlignment(PerkMenuTD[19], 2);
	TextDrawColor(PerkMenuTD[19], -1);
	TextDrawBackgroundColor(PerkMenuTD[19], 255);
	TextDrawBoxColor(PerkMenuTD[19], 50);
	TextDrawUseBox(PerkMenuTD[19], 0);
	TextDrawSetProportional(PerkMenuTD[19], 1);
	TextDrawSetSelectable(PerkMenuTD[19], 1);

	PerkMenuTD[20] = TextDrawCreate(394.000000, 285.000000, "Gift");
	TextDrawFont(PerkMenuTD[20], 1);
	TextDrawLetterSize(PerkMenuTD[20], 0.241666, 1.549998);
	TextDrawTextSize(PerkMenuTD[20], 10.000000, 17.500000);
	TextDrawSetOutline(PerkMenuTD[20], 1);
	TextDrawSetShadow(PerkMenuTD[20], 0);
	TextDrawAlignment(PerkMenuTD[20], 2);
	TextDrawColor(PerkMenuTD[20], -1);
	TextDrawBackgroundColor(PerkMenuTD[20], 255);
	TextDrawBoxColor(PerkMenuTD[20], 50);
	TextDrawUseBox(PerkMenuTD[20], 0);
	TextDrawSetProportional(PerkMenuTD[20], 1);
	TextDrawSetSelectable(PerkMenuTD[20], 1);

	PerkMenuTD[21] = TextDrawCreate(188.000000, 338.000000, "Misiuni");
	TextDrawFont(PerkMenuTD[21], 1);
	TextDrawLetterSize(PerkMenuTD[21], 0.349999, 1.750000);
	TextDrawTextSize(PerkMenuTD[21], 10.000000, 50.500000);
	TextDrawSetOutline(PerkMenuTD[21], 1);
	TextDrawSetShadow(PerkMenuTD[21], 0);
	TextDrawAlignment(PerkMenuTD[21], 2);
	TextDrawColor(PerkMenuTD[21], -1);
	TextDrawBackgroundColor(PerkMenuTD[21], 255);
	TextDrawBoxColor(PerkMenuTD[21], 16711815);
	TextDrawUseBox(PerkMenuTD[21], 1);
	TextDrawSetProportional(PerkMenuTD[21], 1);
	TextDrawSetSelectable(PerkMenuTD[21], 1);
	
	ClothingStoreTD[0] = TextDrawCreate(90.000000, 245.000000, "_");
	TextDrawFont(ClothingStoreTD[0], 1);
	TextDrawLetterSize(ClothingStoreTD[0], 0.600000, 8.500002);
	TextDrawTextSize(ClothingStoreTD[0], 298.500000, 156.500000);
	TextDrawSetOutline(ClothingStoreTD[0], 1);
	TextDrawSetShadow(ClothingStoreTD[0], 0);
	TextDrawAlignment(ClothingStoreTD[0], 2);
	TextDrawColor(ClothingStoreTD[0], -1);
	TextDrawBackgroundColor(ClothingStoreTD[0], 255);
	TextDrawBoxColor(ClothingStoreTD[0], 135);
	TextDrawUseBox(ClothingStoreTD[0], 1);
	TextDrawSetProportional(ClothingStoreTD[0], 1);
	TextDrawSetSelectable(ClothingStoreTD[0], 0);

	ClothingStoreTD[1] = TextDrawCreate(152.000000, 244.000000, "ld_beat:cross");
	TextDrawFont(ClothingStoreTD[1], 4);
	TextDrawLetterSize(ClothingStoreTD[1], 0.600000, 2.000000);
	TextDrawTextSize(ClothingStoreTD[1], 17.000000, 17.000000);
	TextDrawSetOutline(ClothingStoreTD[1], 1);
	TextDrawSetShadow(ClothingStoreTD[1], 0);
	TextDrawAlignment(ClothingStoreTD[1], 1);
	TextDrawColor(ClothingStoreTD[1], -1);
	TextDrawBackgroundColor(ClothingStoreTD[1], 255);
	TextDrawBoxColor(ClothingStoreTD[1], 50);
	TextDrawUseBox(ClothingStoreTD[1], 1);
	TextDrawSetProportional(ClothingStoreTD[1], 1);
	TextDrawSetSelectable(ClothingStoreTD[1], 1);

	ClothingStoreTD[2] = TextDrawCreate(12.000000, 276.000000, "ld_beat:left");
	TextDrawFont(ClothingStoreTD[2], 4);
	TextDrawLetterSize(ClothingStoreTD[2], 0.600000, 2.000000);
	TextDrawTextSize(ClothingStoreTD[2], 17.000000, 17.000000);
	TextDrawSetOutline(ClothingStoreTD[2], 1);
	TextDrawSetShadow(ClothingStoreTD[2], 0);
	TextDrawAlignment(ClothingStoreTD[2], 1);
	TextDrawColor(ClothingStoreTD[2], -1);
	TextDrawBackgroundColor(ClothingStoreTD[2], 255);
	TextDrawBoxColor(ClothingStoreTD[2], 50);
	TextDrawUseBox(ClothingStoreTD[2], 1);
	TextDrawSetProportional(ClothingStoreTD[2], 1);
	TextDrawSetSelectable(ClothingStoreTD[2], 1);

	ClothingStoreTD[3] = TextDrawCreate(151.000000, 276.000000, "ld_beat:right");
	TextDrawFont(ClothingStoreTD[3], 4);
	TextDrawLetterSize(ClothingStoreTD[3], 0.600000, 2.000000);
	TextDrawTextSize(ClothingStoreTD[3], 17.000000, 17.000000);
	TextDrawSetOutline(ClothingStoreTD[3], 1);
	TextDrawSetShadow(ClothingStoreTD[3], 0);
	TextDrawAlignment(ClothingStoreTD[3], 1);
	TextDrawColor(ClothingStoreTD[3], -1);
	TextDrawBackgroundColor(ClothingStoreTD[3], 255);
	TextDrawBoxColor(ClothingStoreTD[3], 50);
	TextDrawUseBox(ClothingStoreTD[3], 1);
	TextDrawSetProportional(ClothingStoreTD[3], 1);
	TextDrawSetSelectable(ClothingStoreTD[3], 1);

	DiceTD[0] = TextDrawCreate(315.000000, 155.000000, "_");
	TextDrawFont(DiceTD[0], 1);
	TextDrawLetterSize(DiceTD[0], 0.600000, 11.950042);
	TextDrawTextSize(DiceTD[0], 298.500000, 265.000000);
	TextDrawSetOutline(DiceTD[0], 1);
	TextDrawSetShadow(DiceTD[0], 0);
	TextDrawAlignment(DiceTD[0], 2);
	TextDrawColor(DiceTD[0], -1);
	TextDrawBackgroundColor(DiceTD[0], 255);
	TextDrawBoxColor(DiceTD[0], 175);
	TextDrawUseBox(DiceTD[0], 1);
	TextDrawSetProportional(DiceTD[0], 1);
	TextDrawSetSelectable(DiceTD[0], 0);

	DiceTD[1] = TextDrawCreate(428.000000, 154.000000, "ld_beat:cross");
	TextDrawFont(DiceTD[1], 4);
	TextDrawLetterSize(DiceTD[1], 0.600000, 2.000000);
	TextDrawTextSize(DiceTD[1], 20.000000, 20.000000);
	TextDrawSetOutline(DiceTD[1], 1);
	TextDrawSetShadow(DiceTD[1], 0);
	TextDrawAlignment(DiceTD[1], 1);
	TextDrawColor(DiceTD[1], -1);
	TextDrawBackgroundColor(DiceTD[1], 255);
	TextDrawBoxColor(DiceTD[1], 50);
	TextDrawUseBox(DiceTD[1], 1);
	TextDrawSetProportional(DiceTD[1], 1);
	TextDrawSetSelectable(DiceTD[1], 1);

	DiceTD[2] = TextDrawCreate(315.000000, 155.000000, "_");
	TextDrawFont(DiceTD[2], 1);
	TextDrawLetterSize(DiceTD[2], 0.600000, 11.949981);
	TextDrawTextSize(DiceTD[2], 298.500000, 0.000000);
	TextDrawSetOutline(DiceTD[2], 1);
	TextDrawSetShadow(DiceTD[2], 0);
	TextDrawAlignment(DiceTD[2], 2);
	TextDrawColor(DiceTD[2], -1);
	TextDrawBackgroundColor(DiceTD[2], 255);
	TextDrawBoxColor(DiceTD[2], -81);
	TextDrawUseBox(DiceTD[2], 1);
	TextDrawSetProportional(DiceTD[2], 1);
	TextDrawSetSelectable(DiceTD[2], 0);

	BattlepassTD[0] = TextDrawCreate(315.000000, 152.000000, "_");
	TextDrawFont(BattlepassTD[0], 1);
	TextDrawLetterSize(BattlepassTD[0], 0.600000, 15.650032);
	TextDrawTextSize(BattlepassTD[0], 298.500000, 355.000000);
	TextDrawSetOutline(BattlepassTD[0], 1);
	TextDrawSetShadow(BattlepassTD[0], 0);
	TextDrawAlignment(BattlepassTD[0], 2);
	TextDrawColor(BattlepassTD[0], -1);
	TextDrawBackgroundColor(BattlepassTD[0], 255);
	TextDrawBoxColor(BattlepassTD[0], 175);
	TextDrawUseBox(BattlepassTD[0], 1);
	TextDrawSetProportional(BattlepassTD[0], 1);
	TextDrawSetSelectable(BattlepassTD[0], 0);

	BattlepassTD[1] = TextDrawCreate(490.000000, 135.000000, "ld_beat:cross");
	TextDrawFont(BattlepassTD[1], 4);
	TextDrawLetterSize(BattlepassTD[1], 0.600000, 2.000000);
	TextDrawTextSize(BattlepassTD[1], 20.000000, 20.000000);
	TextDrawSetOutline(BattlepassTD[1], 1);
	TextDrawSetShadow(BattlepassTD[1], 0);
	TextDrawAlignment(BattlepassTD[1], 1);
	TextDrawColor(BattlepassTD[1], -1);
	TextDrawBackgroundColor(BattlepassTD[1], 255);
	TextDrawBoxColor(BattlepassTD[1], 50);
	TextDrawUseBox(BattlepassTD[1], 1);
	TextDrawSetProportional(BattlepassTD[1], 1);
	TextDrawSetSelectable(BattlepassTD[1], 1);

	BattlepassTD[2] = TextDrawCreate(315.000000, 134.750000, "Battlepass");
	TextDrawFont(BattlepassTD[2], 1);
	TextDrawLetterSize(BattlepassTD[2], 0.474999, 1.549998);
	TextDrawTextSize(BattlepassTD[2], 400.000000, 110.000000);
	TextDrawSetOutline(BattlepassTD[2], 1);
	TextDrawSetShadow(BattlepassTD[2], 0);
	TextDrawAlignment(BattlepassTD[2], 2);
	TextDrawColor(BattlepassTD[2], -1);
	TextDrawBackgroundColor(BattlepassTD[2], 255);
	TextDrawBoxColor(BattlepassTD[2], 174);
	TextDrawUseBox(BattlepassTD[2], 1);
	TextDrawSetProportional(BattlepassTD[2], 1);
	TextDrawSetSelectable(BattlepassTD[2], 0);

	BattlepassTD[3] = TextDrawCreate(165.000000, 155.000000, "Misiuni");
	TextDrawFont(BattlepassTD[3], 1);
	TextDrawLetterSize(BattlepassTD[3], 0.349999, 0.949998);
	TextDrawTextSize(BattlepassTD[3], 5.000000, 50.500000);
	TextDrawSetOutline(BattlepassTD[3], 1);
	TextDrawSetShadow(BattlepassTD[3], 0);
	TextDrawAlignment(BattlepassTD[3], 2);
	TextDrawColor(BattlepassTD[3], -1);
	TextDrawBackgroundColor(BattlepassTD[3], 255);
	TextDrawBoxColor(BattlepassTD[3], -1962934097);
	TextDrawUseBox(BattlepassTD[3], 1);
	TextDrawSetProportional(BattlepassTD[3], 1);
	TextDrawSetSelectable(BattlepassTD[3], 1);

	BattlepassTD[4] = TextDrawCreate(165.000000, 171.000000, "_");
	TextDrawFont(BattlepassTD[4], 1);
	TextDrawLetterSize(BattlepassTD[4], 0.600000, 6.000000);
	TextDrawTextSize(BattlepassTD[4], 400.000000, 50.500000);
	TextDrawSetOutline(BattlepassTD[4], 1);
	TextDrawSetShadow(BattlepassTD[4], 0);
	TextDrawAlignment(BattlepassTD[4], 2);
	TextDrawColor(BattlepassTD[4], -1);
	TextDrawBackgroundColor(BattlepassTD[4], 255);
	TextDrawBoxColor(BattlepassTD[4], 1296911791);
	TextDrawUseBox(BattlepassTD[4], 1);
	TextDrawSetProportional(BattlepassTD[4], 1);
	TextDrawSetSelectable(BattlepassTD[4], 0);

	BattlepassTD[5] = TextDrawCreate(138.000000, 169.000000, "Preview_Model");
	TextDrawFont(BattlepassTD[5], 5);
	TextDrawLetterSize(BattlepassTD[5], 0.600000, 2.000000);
	TextDrawTextSize(BattlepassTD[5], 53.500000, 58.000000);
	TextDrawSetOutline(BattlepassTD[5], 0);
	TextDrawSetShadow(BattlepassTD[5], 0);
	TextDrawAlignment(BattlepassTD[5], 1);
	TextDrawColor(BattlepassTD[5], -1);
	TextDrawBackgroundColor(BattlepassTD[5], 125);
	TextDrawBoxColor(BattlepassTD[5], 255);
	TextDrawUseBox(BattlepassTD[5], 0);
	TextDrawSetProportional(BattlepassTD[5], 1);
	TextDrawSetSelectable(BattlepassTD[5], 0);
	TextDrawSetPreviewModel(BattlepassTD[5], 1581);
	TextDrawSetPreviewRot(BattlepassTD[5], 0.000000, 0.000000, 180.000000, 1.000000);
	TextDrawSetPreviewVehCol(BattlepassTD[5], 1, 1);

	BattlepassTD[6] = TextDrawCreate(165.000000, 235.000000, "_");
	TextDrawFont(BattlepassTD[6], 1);
	TextDrawLetterSize(BattlepassTD[6], 0.600000, 6.000000);
	TextDrawTextSize(BattlepassTD[6], 400.000000, 50.500000);
	TextDrawSetOutline(BattlepassTD[6], 1);
	TextDrawSetShadow(BattlepassTD[6], 0);
	TextDrawAlignment(BattlepassTD[6], 2);
	TextDrawColor(BattlepassTD[6], -1);
	TextDrawBackgroundColor(BattlepassTD[6], 255);
	TextDrawBoxColor(BattlepassTD[6], -2686801);
	TextDrawUseBox(BattlepassTD[6], 1);
	TextDrawSetProportional(BattlepassTD[6], 1);
	TextDrawSetSelectable(BattlepassTD[6], 0);

	BattlepassTD[7] = TextDrawCreate(138.000000, 233.000000, "Preview_Model");
	TextDrawFont(BattlepassTD[7], 5);
	TextDrawLetterSize(BattlepassTD[7], 0.600000, 2.000000);
	TextDrawTextSize(BattlepassTD[7], 53.500000, 58.000000);
	TextDrawSetOutline(BattlepassTD[7], 0);
	TextDrawSetShadow(BattlepassTD[7], 0);
	TextDrawAlignment(BattlepassTD[7], 1);
	TextDrawColor(BattlepassTD[7], -1);
	TextDrawBackgroundColor(BattlepassTD[7], 125);
	TextDrawBoxColor(BattlepassTD[7], 255);
	TextDrawUseBox(BattlepassTD[7], 0);
	TextDrawSetProportional(BattlepassTD[7], 1);
	TextDrawSetSelectable(BattlepassTD[7], 1);
	TextDrawSetPreviewModel(BattlepassTD[7], 1247);
	TextDrawSetPreviewRot(BattlepassTD[7], 0.000000, 0.000000, 180.000000, 1.000000);
	TextDrawSetPreviewVehCol(BattlepassTD[7], 1, 1);

	BattlepassTD[8] = TextDrawCreate(179.000000, 220.000000, "ld_beat:left");
	TextDrawFont(BattlepassTD[8], 4);
	TextDrawLetterSize(BattlepassTD[8], 0.600000, 2.000000);
	TextDrawTextSize(BattlepassTD[8], 20.000000, 20.000000);
	TextDrawSetOutline(BattlepassTD[8], 1);
	TextDrawSetShadow(BattlepassTD[8], 0);
	TextDrawAlignment(BattlepassTD[8], 1);
	TextDrawColor(BattlepassTD[8], -1);
	TextDrawBackgroundColor(BattlepassTD[8], 255);
	TextDrawBoxColor(BattlepassTD[8], 50);
	TextDrawUseBox(BattlepassTD[8], 1);
	TextDrawSetProportional(BattlepassTD[8], 1);
	TextDrawSetSelectable(BattlepassTD[8], 1);

	BattlepassTD[9] = TextDrawCreate(492.000000, 220.000000, "ld_beat:right");
	TextDrawFont(BattlepassTD[9], 4);
	TextDrawLetterSize(BattlepassTD[9], 0.600000, 2.000000);
	TextDrawTextSize(BattlepassTD[9], 20.000000, 20.000000);
	TextDrawSetOutline(BattlepassTD[9], 1);
	TextDrawSetShadow(BattlepassTD[9], 0);
	TextDrawAlignment(BattlepassTD[9], 1);
	TextDrawColor(BattlepassTD[9], -1);
	TextDrawBackgroundColor(BattlepassTD[9], 255);
	TextDrawBoxColor(BattlepassTD[9], 50);
	TextDrawUseBox(BattlepassTD[9], 1);
	TextDrawSetProportional(BattlepassTD[9], 1);
	TextDrawSetSelectable(BattlepassTD[9], 1);

	DealerShipTD[0] = TextDrawCreate(527.000000, 161.000000, "_");
	TextDrawFont(DealerShipTD[0], 1);
	TextDrawLetterSize(DealerShipTD[0], 0.600000, 15.000000);
	TextDrawTextSize(DealerShipTD[0], 300.500000, 115.000000);
	TextDrawSetOutline(DealerShipTD[0], 1);
	TextDrawSetShadow(DealerShipTD[0], 0);
	TextDrawAlignment(DealerShipTD[0], 2);
	TextDrawColor(DealerShipTD[0], -1);
	TextDrawBackgroundColor(DealerShipTD[0], 255);
	TextDrawBoxColor(DealerShipTD[0], 175);
	TextDrawUseBox(DealerShipTD[0], 1);
	TextDrawSetProportional(DealerShipTD[0], 1);
	TextDrawSetSelectable(DealerShipTD[0], 0);

	DealerShipTD[1] = TextDrawCreate(565.000000, 161.000000, "ld_beat:cross");
	TextDrawFont(DealerShipTD[1], 4);
	TextDrawLetterSize(DealerShipTD[1], 0.600000, 2.000000);
	TextDrawTextSize(DealerShipTD[1], 20.000000, 20.000000);
	TextDrawSetOutline(DealerShipTD[1], 1);
	TextDrawSetShadow(DealerShipTD[1], 0);
	TextDrawAlignment(DealerShipTD[1], 1);
	TextDrawColor(DealerShipTD[1], -1);
	TextDrawBackgroundColor(DealerShipTD[1], 255);
	TextDrawBoxColor(DealerShipTD[1], 50);
	TextDrawUseBox(DealerShipTD[1], 1);
	TextDrawSetProportional(DealerShipTD[1], 1);
	TextDrawSetSelectable(DealerShipTD[1], 1);

	DealerShipTD[2] = TextDrawCreate(527.000000, 300.000000, "Buy");
	TextDrawFont(DealerShipTD[2], 1);
	TextDrawLetterSize(DealerShipTD[2], 0.400000, 1.399999);
	TextDrawTextSize(DealerShipTD[2], 10.000000, 45.000000);
	TextDrawSetOutline(DealerShipTD[2], 1);
	TextDrawSetShadow(DealerShipTD[2], 0);
	TextDrawAlignment(DealerShipTD[2], 2);
	TextDrawColor(DealerShipTD[2], -1);
	TextDrawBackgroundColor(DealerShipTD[2], 255);
	TextDrawBoxColor(DealerShipTD[2], 9109679);
	TextDrawUseBox(DealerShipTD[2], 1);
	TextDrawSetProportional(DealerShipTD[2], 1);
	TextDrawSetSelectable(DealerShipTD[2], 1);

	DealerShipTD[3] = TextDrawCreate(447.000000, 220.000000, "ld_beat:left");
	TextDrawFont(DealerShipTD[3], 4);
	TextDrawLetterSize(DealerShipTD[3], 0.600000, 2.000000);
	TextDrawTextSize(DealerShipTD[3], 20.000000, 20.000000);
	TextDrawSetOutline(DealerShipTD[3], 1);
	TextDrawSetShadow(DealerShipTD[3], 0);
	TextDrawAlignment(DealerShipTD[3], 1);
	TextDrawColor(DealerShipTD[3], -1);
	TextDrawBackgroundColor(DealerShipTD[3], 255);
	TextDrawBoxColor(DealerShipTD[3], 50);
	TextDrawUseBox(DealerShipTD[3], 1);
	TextDrawSetProportional(DealerShipTD[3], 1);
	TextDrawSetSelectable(DealerShipTD[3], 1);

	DealerShipTD[4] = TextDrawCreate(588.000000, 220.000000, "ld_beat:right");
	TextDrawFont(DealerShipTD[4], 4);
	TextDrawLetterSize(DealerShipTD[4], 0.600000, 2.000000);
	TextDrawTextSize(DealerShipTD[4], 20.000000, 20.000000);
	TextDrawSetOutline(DealerShipTD[4], 1);
	TextDrawSetShadow(DealerShipTD[4], 0);
	TextDrawAlignment(DealerShipTD[4], 1);
	TextDrawColor(DealerShipTD[4], -1);
	TextDrawBackgroundColor(DealerShipTD[4], 255);
	TextDrawBoxColor(DealerShipTD[4], 50);
	TextDrawUseBox(DealerShipTD[4], 1);
	TextDrawSetProportional(DealerShipTD[4], 1);
	TextDrawSetSelectable(DealerShipTD[4], 1);

	DealerShipTD[5] = TextDrawCreate(234.000000, 220.000000, "ld_beat:left");
	TextDrawFont(DealerShipTD[5], 4);
	TextDrawLetterSize(DealerShipTD[5], 0.600000, 2.000000);
	TextDrawTextSize(DealerShipTD[5], 20.000000, 20.000000);
	TextDrawSetOutline(DealerShipTD[5], 1);
	TextDrawSetShadow(DealerShipTD[5], 0);
	TextDrawAlignment(DealerShipTD[5], 1);
	TextDrawColor(DealerShipTD[5], -1);
	TextDrawBackgroundColor(DealerShipTD[5], 255);
	TextDrawBoxColor(DealerShipTD[5], 50);
	TextDrawUseBox(DealerShipTD[5], 1);
	TextDrawSetProportional(DealerShipTD[5], 1);
	TextDrawSetSelectable(DealerShipTD[5], 1);

	DealerShipTD[6] = TextDrawCreate(382.000000, 220.000000, "ld_beat:right");
	TextDrawFont(DealerShipTD[6], 4);
	TextDrawLetterSize(DealerShipTD[6], 0.600000, 2.000000);
	TextDrawTextSize(DealerShipTD[6], 20.000000, 20.000000);
	TextDrawSetOutline(DealerShipTD[6], 1);
	TextDrawSetShadow(DealerShipTD[6], 0);
	TextDrawAlignment(DealerShipTD[6], 1);
	TextDrawColor(DealerShipTD[6], -1);
	TextDrawBackgroundColor(DealerShipTD[6], 255);
	TextDrawBoxColor(DealerShipTD[6], 50);
	TextDrawUseBox(DealerShipTD[6], 1);
	TextDrawSetProportional(DealerShipTD[6], 1);
	TextDrawSetSelectable(DealerShipTD[6], 1);

	FinishWarTD[0] = TextDrawCreate(315.000000, 118.000000, "_");
	TextDrawFont(FinishWarTD[0], 1);
	TextDrawLetterSize(FinishWarTD[0], 0.687498, 22.500057);
	TextDrawTextSize(FinishWarTD[0], 298.500000, 200.000000);
	TextDrawSetOutline(FinishWarTD[0], 1);
	TextDrawSetShadow(FinishWarTD[0], 0);
	TextDrawAlignment(FinishWarTD[0], 2);
	TextDrawColor(FinishWarTD[0], -1);
	TextDrawBackgroundColor(FinishWarTD[0], 255);
	TextDrawBoxColor(FinishWarTD[0], 175);
	TextDrawUseBox(FinishWarTD[0], 1);
	TextDrawSetProportional(FinishWarTD[0], 1);
	TextDrawSetSelectable(FinishWarTD[0], 0);

	FinishWarTD[1] = TextDrawCreate(396.000000, 117.000000, "ld_beat:cross");
	TextDrawFont(FinishWarTD[1], 4);
	TextDrawLetterSize(FinishWarTD[1], 0.600000, 2.000000);
	TextDrawTextSize(FinishWarTD[1], 20.000000, 20.000000);
	TextDrawSetOutline(FinishWarTD[1], 1);
	TextDrawSetShadow(FinishWarTD[1], 0);
	TextDrawAlignment(FinishWarTD[1], 1);
	TextDrawColor(FinishWarTD[1], -1);
	TextDrawBackgroundColor(FinishWarTD[1], 255);
	TextDrawBoxColor(FinishWarTD[1], 50);
	TextDrawUseBox(FinishWarTD[1], 1);
	TextDrawSetProportional(FinishWarTD[1], 1);
	TextDrawSetSelectable(FinishWarTD[1], 1);

	FinishWarTD[2] = TextDrawCreate(307.000000, 121.000000, "Grove 20 - 23 Vagos");
	TextDrawFont(FinishWarTD[2], 1);
	TextDrawLetterSize(FinishWarTD[2], 0.400000, 1.500000);
	TextDrawTextSize(FinishWarTD[2], 400.000000, 169.500000);
	TextDrawSetOutline(FinishWarTD[2], 1);
	TextDrawSetShadow(FinishWarTD[2], 0);
	TextDrawAlignment(FinishWarTD[2], 2);
	TextDrawColor(FinishWarTD[2], -1);
	TextDrawBackgroundColor(FinishWarTD[2], 255);
	TextDrawBoxColor(FinishWarTD[2], 50);
	TextDrawUseBox(FinishWarTD[2], 0);
	TextDrawSetProportional(FinishWarTD[2], 1);
	TextDrawSetSelectable(FinishWarTD[2], 0);

	FinishWarTD[3] = TextDrawCreate(315.000000, 142.000000, "qAlexGT3 - 32(37 - 5)");
	TextDrawFont(FinishWarTD[3], 1);
	TextDrawLetterSize(FinishWarTD[3], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[3], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[3], 1);
	TextDrawSetShadow(FinishWarTD[3], 0);
	TextDrawAlignment(FinishWarTD[3], 2);
	TextDrawColor(FinishWarTD[3], -1);
	TextDrawBackgroundColor(FinishWarTD[3], 255);
	TextDrawBoxColor(FinishWarTD[3], 50);
	TextDrawUseBox(FinishWarTD[3], 1);
	TextDrawSetProportional(FinishWarTD[3], 1);
	TextDrawSetSelectable(FinishWarTD[3], 0);

	FinishWarTD[4] = TextDrawCreate(315.000000, 156.000000, "qAlexGT3 - 32(37 - 5)");
	TextDrawFont(FinishWarTD[4], 1);
	TextDrawLetterSize(FinishWarTD[4], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[4], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[4], 1);
	TextDrawSetShadow(FinishWarTD[4], 0);
	TextDrawAlignment(FinishWarTD[4], 2);
	TextDrawColor(FinishWarTD[4], -1);
	TextDrawBackgroundColor(FinishWarTD[4], 255);
	TextDrawBoxColor(FinishWarTD[4], 50);
	TextDrawUseBox(FinishWarTD[4], 1);
	TextDrawSetProportional(FinishWarTD[4], 1);
	TextDrawSetSelectable(FinishWarTD[4], 0);

	FinishWarTD[5] = TextDrawCreate(315.000000, 170.000000, "qAlexGT3 - 32(37 - 5)");
	TextDrawFont(FinishWarTD[5], 1);
	TextDrawLetterSize(FinishWarTD[5], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[5], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[5], 1);
	TextDrawSetShadow(FinishWarTD[5], 0);
	TextDrawAlignment(FinishWarTD[5], 2);
	TextDrawColor(FinishWarTD[5], -1);
	TextDrawBackgroundColor(FinishWarTD[5], 255);
	TextDrawBoxColor(FinishWarTD[5], 50);
	TextDrawUseBox(FinishWarTD[5], 1);
	TextDrawSetProportional(FinishWarTD[5], 1);
	TextDrawSetSelectable(FinishWarTD[5], 0);

	FinishWarTD[6] = TextDrawCreate(315.000000, 184.000000, "qAlexGT3 - 32(37 - 5)");
	TextDrawFont(FinishWarTD[6], 1);
	TextDrawLetterSize(FinishWarTD[6], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[6], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[6], 1);
	TextDrawSetShadow(FinishWarTD[6], 0);
	TextDrawAlignment(FinishWarTD[6], 2);
	TextDrawColor(FinishWarTD[6], -1);
	TextDrawBackgroundColor(FinishWarTD[6], 255);
	TextDrawBoxColor(FinishWarTD[6], 50);
	TextDrawUseBox(FinishWarTD[6], 1);
	TextDrawSetProportional(FinishWarTD[6], 1);
	TextDrawSetSelectable(FinishWarTD[6], 0);

	FinishWarTD[7] = TextDrawCreate(315.000000, 198.000000, "qAlexGT3 - 32(37 - 5)");
	TextDrawFont(FinishWarTD[7], 1);
	TextDrawLetterSize(FinishWarTD[7], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[7], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[7], 1);
	TextDrawSetShadow(FinishWarTD[7], 0);
	TextDrawAlignment(FinishWarTD[7], 2);
	TextDrawColor(FinishWarTD[7], -1);
	TextDrawBackgroundColor(FinishWarTD[7], 255);
	TextDrawBoxColor(FinishWarTD[7], 50);
	TextDrawUseBox(FinishWarTD[7], 1);
	TextDrawSetProportional(FinishWarTD[7], 1);
	TextDrawSetSelectable(FinishWarTD[7], 0);

	FinishWarTD[8] = TextDrawCreate(315.000000, 212.000000, "qAlexGT3 - 32(37 - 5)");
	TextDrawFont(FinishWarTD[8], 1);
	TextDrawLetterSize(FinishWarTD[8], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[8], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[8], 1);
	TextDrawSetShadow(FinishWarTD[8], 0);
	TextDrawAlignment(FinishWarTD[8], 2);
	TextDrawColor(FinishWarTD[8], -1);
	TextDrawBackgroundColor(FinishWarTD[8], 255);
	TextDrawBoxColor(FinishWarTD[8], 50);
	TextDrawUseBox(FinishWarTD[8], 1);
	TextDrawSetProportional(FinishWarTD[8], 1);
	TextDrawSetSelectable(FinishWarTD[8], 0);

	FinishWarTD[9] = TextDrawCreate(315.000000, 226.000000, "qAlexGT3 - 32(37 - 5)");
	TextDrawFont(FinishWarTD[9], 1);
	TextDrawLetterSize(FinishWarTD[9], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[9], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[9], 1);
	TextDrawSetShadow(FinishWarTD[9], 0);
	TextDrawAlignment(FinishWarTD[9], 2);
	TextDrawColor(FinishWarTD[9], -1);
	TextDrawBackgroundColor(FinishWarTD[9], 255);
	TextDrawBoxColor(FinishWarTD[9], 50);
	TextDrawUseBox(FinishWarTD[9], 1);
	TextDrawSetProportional(FinishWarTD[9], 1);
	TextDrawSetSelectable(FinishWarTD[9], 0);

	FinishWarTD[10] = TextDrawCreate(315.000000, 240.000000, "qAlexGT3 - 32(37 - 5)");
	TextDrawFont(FinishWarTD[10], 1);
	TextDrawLetterSize(FinishWarTD[10], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[10], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[10], 1);
	TextDrawSetShadow(FinishWarTD[10], 0);
	TextDrawAlignment(FinishWarTD[10], 2);
	TextDrawColor(FinishWarTD[10], -1);
	TextDrawBackgroundColor(FinishWarTD[10], 255);
	TextDrawBoxColor(FinishWarTD[10], 50);
	TextDrawUseBox(FinishWarTD[10], 1);
	TextDrawSetProportional(FinishWarTD[10], 1);
	TextDrawSetSelectable(FinishWarTD[10], 0);

	FinishWarTD[11] = TextDrawCreate(315.000000, 254.000000, "qAlexGT3 - 32(37 - 5)");
	TextDrawFont(FinishWarTD[11], 1);
	TextDrawLetterSize(FinishWarTD[11], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[11], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[11], 1);
	TextDrawSetShadow(FinishWarTD[11], 0);
	TextDrawAlignment(FinishWarTD[11], 2);
	TextDrawColor(FinishWarTD[11], -1);
	TextDrawBackgroundColor(FinishWarTD[11], 255);
	TextDrawBoxColor(FinishWarTD[11], 50);
	TextDrawUseBox(FinishWarTD[11], 1);
	TextDrawSetProportional(FinishWarTD[11], 1);
	TextDrawSetSelectable(FinishWarTD[11], 0);

	FinishWarTD[12] = TextDrawCreate(315.000000, 268.000000, "qAlexGT3 - 32(37 - 5)");
	TextDrawFont(FinishWarTD[12], 1);
	TextDrawLetterSize(FinishWarTD[12], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[12], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[12], 1);
	TextDrawSetShadow(FinishWarTD[12], 0);
	TextDrawAlignment(FinishWarTD[12], 2);
	TextDrawColor(FinishWarTD[12], -1);
	TextDrawBackgroundColor(FinishWarTD[12], 255);
	TextDrawBoxColor(FinishWarTD[12], 50);
	TextDrawUseBox(FinishWarTD[12], 1);
	TextDrawSetProportional(FinishWarTD[12], 1);
	TextDrawSetSelectable(FinishWarTD[12], 0);

	FinishWarTD[13] = TextDrawCreate(315.000000, 282.000000, "...");
	TextDrawFont(FinishWarTD[13], 1);
	TextDrawLetterSize(FinishWarTD[13], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[13], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[13], 1);
	TextDrawSetShadow(FinishWarTD[13], 0);
	TextDrawAlignment(FinishWarTD[13], 2);
	TextDrawColor(FinishWarTD[13], -1);
	TextDrawBackgroundColor(FinishWarTD[13], 255);
	TextDrawBoxColor(FinishWarTD[13], 50);
	TextDrawUseBox(FinishWarTD[13], 1);
	TextDrawSetProportional(FinishWarTD[13], 1);
	TextDrawSetSelectable(FinishWarTD[13], 0);

	FinishWarTD[14] = TextDrawCreate(315.000000, 296.000000, "qAlexGT3 - 32(37 - 5)");
	TextDrawFont(FinishWarTD[14], 1);
	TextDrawLetterSize(FinishWarTD[14], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[14], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[14], 1);
	TextDrawSetShadow(FinishWarTD[14], 0);
	TextDrawAlignment(FinishWarTD[14], 2);
	TextDrawColor(FinishWarTD[14], -1);
	TextDrawBackgroundColor(FinishWarTD[14], 255);
	TextDrawBoxColor(FinishWarTD[14], 50);
	TextDrawUseBox(FinishWarTD[14], 1);
	TextDrawSetProportional(FinishWarTD[14], 1);
	TextDrawSetSelectable(FinishWarTD[14], 0);

	FinishWarTD[15] = TextDrawCreate(400.000000, 142.000000, "Best");
	TextDrawFont(FinishWarTD[15], 1);
	TextDrawLetterSize(FinishWarTD[15], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[15], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[15], 1);
	TextDrawSetShadow(FinishWarTD[15], 0);
	TextDrawAlignment(FinishWarTD[15], 2);
	TextDrawColor(FinishWarTD[15], 9109759);
	TextDrawBackgroundColor(FinishWarTD[15], 255);
	TextDrawBoxColor(FinishWarTD[15], 0);
	TextDrawUseBox(FinishWarTD[15], 1);
	TextDrawSetProportional(FinishWarTD[15], 1);
	TextDrawSetSelectable(FinishWarTD[15], 0);

	FinishWarTD[16] = TextDrawCreate(400.000000, 296.000000, "Worst");
	TextDrawFont(FinishWarTD[16], 1);
	TextDrawLetterSize(FinishWarTD[16], 0.250000, 1.100000);
	TextDrawTextSize(FinishWarTD[16], 400.000000, 200.000000);
	TextDrawSetOutline(FinishWarTD[16], 1);
	TextDrawSetShadow(FinishWarTD[16], 0);
	TextDrawAlignment(FinishWarTD[16], 2);
	TextDrawColor(FinishWarTD[16], -16776961);
	TextDrawBackgroundColor(FinishWarTD[16], 255);
	TextDrawBoxColor(FinishWarTD[16], 0);
	TextDrawUseBox(FinishWarTD[16], 1);
	TextDrawSetProportional(FinishWarTD[16], 1);
	TextDrawSetSelectable(FinishWarTD[16], 0);

	InventoryTD[0] = TextDrawCreate(315.000000, 150.000000, "_");
	TextDrawFont(InventoryTD[0], 0);
	TextDrawLetterSize(InventoryTD[0], 0.595833, 17.700050);
	TextDrawTextSize(InventoryTD[0], 298.500000, 265.000000);
	TextDrawSetOutline(InventoryTD[0], 1);
	TextDrawSetShadow(InventoryTD[0], 0);
	TextDrawAlignment(InventoryTD[0], 2);
	TextDrawColor(InventoryTD[0], -1);
	TextDrawBackgroundColor(InventoryTD[0], 255);
	TextDrawBoxColor(InventoryTD[0], 175);
	TextDrawUseBox(InventoryTD[0], 1);
	TextDrawSetProportional(InventoryTD[0], 1);
	TextDrawSetSelectable(InventoryTD[0], 0);

	InventoryTD[1] = TextDrawCreate(428.000000, 149.000000, "ld_beat:cross");
	TextDrawFont(InventoryTD[1], 4);
	TextDrawLetterSize(InventoryTD[1], 0.600000, 2.000000);
	TextDrawTextSize(InventoryTD[1], 20.000000, 20.000000);
	TextDrawSetOutline(InventoryTD[1], 1);
	TextDrawSetShadow(InventoryTD[1], 0);
	TextDrawAlignment(InventoryTD[1], 1);
	TextDrawColor(InventoryTD[1], -1);
	TextDrawBackgroundColor(InventoryTD[1], 255);
	TextDrawBoxColor(InventoryTD[1], 50);
	TextDrawUseBox(InventoryTD[1], 1);
	TextDrawSetProportional(InventoryTD[1], 1);
	TextDrawSetSelectable(InventoryTD[1], 1);

	InventoryTD[2] = TextDrawCreate(315.000000, 275.000000, "_");
	TextDrawFont(InventoryTD[2], 1);
	TextDrawLetterSize(InventoryTD[2], 0.600000, 1.000002);
	TextDrawTextSize(InventoryTD[2], 298.500000, 265.000000);
	TextDrawSetOutline(InventoryTD[2], 1);
	TextDrawSetShadow(InventoryTD[2], 0);
	TextDrawAlignment(InventoryTD[2], 2);
	TextDrawColor(InventoryTD[2], -1);
	TextDrawBackgroundColor(InventoryTD[2], 255);
	TextDrawBoxColor(InventoryTD[2], 9109639);
	TextDrawUseBox(InventoryTD[2], 1);
	TextDrawSetProportional(InventoryTD[2], 1);
	TextDrawSetSelectable(InventoryTD[2], 0);

	InventoryTD[3] = TextDrawCreate(242.000000, 150.000000, "_");
	TextDrawFont(InventoryTD[3], 1);
	TextDrawLetterSize(InventoryTD[3], 0.600000, 13.524991);
	TextDrawTextSize(InventoryTD[3], 298.500000, 5.000000);
	TextDrawSetOutline(InventoryTD[3], 1);
	TextDrawSetShadow(InventoryTD[3], 0);
	TextDrawAlignment(InventoryTD[3], 2);
	TextDrawColor(InventoryTD[3], -1);
	TextDrawBackgroundColor(InventoryTD[3], 255);
	TextDrawBoxColor(InventoryTD[3], 9109639);
	TextDrawUseBox(InventoryTD[3], 1);
	TextDrawSetProportional(InventoryTD[3], 1);
	TextDrawSetSelectable(InventoryTD[3], 0);

	InventoryTD[4] = TextDrawCreate(347.000000, 159.500000, "_");
	TextDrawFont(InventoryTD[4], 1);
	TextDrawLetterSize(InventoryTD[4], 0.600000, 11.350007);
	TextDrawTextSize(InventoryTD[4], 298.500000, 152.500000);
	TextDrawSetOutline(InventoryTD[4], 1);
	TextDrawSetShadow(InventoryTD[4], 0);
	TextDrawAlignment(InventoryTD[4], 2);
	TextDrawColor(InventoryTD[4], -1);
	TextDrawBackgroundColor(InventoryTD[4], 255);
	TextDrawBoxColor(InventoryTD[4], 9109639);
	TextDrawUseBox(InventoryTD[4], 1);
	TextDrawSetProportional(InventoryTD[4], 1);
	TextDrawSetSelectable(InventoryTD[4], 0);

	InventoryTD[5] = TextDrawCreate(309.000000, 162.000000, "_");
	TextDrawFont(InventoryTD[5], 1);
	TextDrawLetterSize(InventoryTD[5], 0.600000, 3.230000);
	TextDrawTextSize(InventoryTD[5], 298.500000, 72.000000);
	TextDrawSetOutline(InventoryTD[5], 1);
	TextDrawSetShadow(InventoryTD[5], 0);
	TextDrawAlignment(InventoryTD[5], 2);
	TextDrawColor(InventoryTD[5], -1);
	TextDrawBackgroundColor(InventoryTD[5], 255);
	TextDrawBoxColor(InventoryTD[5], 135);
	TextDrawUseBox(InventoryTD[5], 1);
	TextDrawSetProportional(InventoryTD[5], 1);
	TextDrawSetSelectable(InventoryTD[5], 1);

	InventoryTD[6] = TextDrawCreate(385.000000, 162.000000, "_");
	TextDrawFont(InventoryTD[6], 1);
	TextDrawLetterSize(InventoryTD[6], 0.600000, 3.230000);
	TextDrawTextSize(InventoryTD[6], 298.500000, 72.000000);
	TextDrawSetOutline(InventoryTD[6], 1);
	TextDrawSetShadow(InventoryTD[6], 0);
	TextDrawAlignment(InventoryTD[6], 2);
	TextDrawColor(InventoryTD[6], -1);
	TextDrawBackgroundColor(InventoryTD[6], 255);
	TextDrawBoxColor(InventoryTD[6], 135);
	TextDrawUseBox(InventoryTD[6], 1);
	TextDrawSetProportional(InventoryTD[6], 1);
	TextDrawSetSelectable(InventoryTD[6], 0);

	InventoryTD[7] = TextDrawCreate(309.000000, 196.000000, "_");
	TextDrawFont(InventoryTD[7], 1);
	TextDrawLetterSize(InventoryTD[7], 0.600000, 3.230000);
	TextDrawTextSize(InventoryTD[7], 298.500000, 72.000000);
	TextDrawSetOutline(InventoryTD[7], 1);
	TextDrawSetShadow(InventoryTD[7], 0);
	TextDrawAlignment(InventoryTD[7], 2);
	TextDrawColor(InventoryTD[7], -1);
	TextDrawBackgroundColor(InventoryTD[7], 255);
	TextDrawBoxColor(InventoryTD[7], 135);
	TextDrawUseBox(InventoryTD[7], 1);
	TextDrawSetProportional(InventoryTD[7], 1);
	TextDrawSetSelectable(InventoryTD[7], 0);

	InventoryTD[8] = TextDrawCreate(309.000000, 230.000000, "_");
	TextDrawFont(InventoryTD[8], 1);
	TextDrawLetterSize(InventoryTD[8], 0.600000, 3.230000);
	TextDrawTextSize(InventoryTD[8], 298.500000, 72.000000);
	TextDrawSetOutline(InventoryTD[8], 1);
	TextDrawSetShadow(InventoryTD[8], 0);
	TextDrawAlignment(InventoryTD[8], 2);
	TextDrawColor(InventoryTD[8], -1);
	TextDrawBackgroundColor(InventoryTD[8], 255);
	TextDrawBoxColor(InventoryTD[8], 135);
	TextDrawUseBox(InventoryTD[8], 1);
	TextDrawSetProportional(InventoryTD[8], 1);
	TextDrawSetSelectable(InventoryTD[8], 0);

	InventoryTD[9] = TextDrawCreate(385.000000, 196.000000, "_");
	TextDrawFont(InventoryTD[9], 1);
	TextDrawLetterSize(InventoryTD[9], 0.600000, 3.230000);
	TextDrawTextSize(InventoryTD[9], 298.500000, 72.000000);
	TextDrawSetOutline(InventoryTD[9], 1);
	TextDrawSetShadow(InventoryTD[9], 0);
	TextDrawAlignment(InventoryTD[9], 2);
	TextDrawColor(InventoryTD[9], -1);
	TextDrawBackgroundColor(InventoryTD[9], 255);
	TextDrawBoxColor(InventoryTD[9], 135);
	TextDrawUseBox(InventoryTD[9], 1);
	TextDrawSetProportional(InventoryTD[9], 1);
	TextDrawSetSelectable(InventoryTD[9], 0);

	InventoryTD[10] = TextDrawCreate(385.000000, 230.000000, "_");
	TextDrawFont(InventoryTD[10], 1);
	TextDrawLetterSize(InventoryTD[10], 0.600000, 3.230000);
	TextDrawTextSize(InventoryTD[10], 298.500000, 72.000000);
	TextDrawSetOutline(InventoryTD[10], 1);
	TextDrawSetShadow(InventoryTD[10], 0);
	TextDrawAlignment(InventoryTD[10], 2);
	TextDrawColor(InventoryTD[10], -1);
	TextDrawBackgroundColor(InventoryTD[10], 255);
	TextDrawBoxColor(InventoryTD[10], 135);
	TextDrawUseBox(InventoryTD[10], 1);
	TextDrawSetProportional(InventoryTD[10], 1);
	TextDrawSetSelectable(InventoryTD[10], 0);

	InventoryTD[11] = TextDrawCreate(235.000000, 129.000000, "Preview_Model");
	TextDrawFont(InventoryTD[11], 5);
	TextDrawLetterSize(InventoryTD[11], 0.600000, 2.000000);
	TextDrawTextSize(InventoryTD[11], 100.000000, 100.000000);
	TextDrawSetOutline(InventoryTD[11], 0);
	TextDrawSetShadow(InventoryTD[11], 0);
	TextDrawAlignment(InventoryTD[11], 1);
	TextDrawColor(InventoryTD[11], -1);
	TextDrawBackgroundColor(InventoryTD[11], 0);
	TextDrawBoxColor(InventoryTD[11], 255);
	TextDrawUseBox(InventoryTD[11], 0);
	TextDrawSetProportional(InventoryTD[11], 1);
	TextDrawSetSelectable(InventoryTD[11], 0);
	TextDrawSetPreviewModel(InventoryTD[11], 347);
	TextDrawSetPreviewRot(InventoryTD[11], 0.000000, -9.000000, 180.000000, 1.099997);
	TextDrawSetPreviewVehCol(InventoryTD[11], 1, 1);

	InventoryTD[12] = TextDrawCreate(311.000000, 130.000000, "Preview_Model");
	TextDrawFont(InventoryTD[12], 5);
	TextDrawLetterSize(InventoryTD[12], 0.600000, 2.000000);
	TextDrawTextSize(InventoryTD[12], 100.000000, 100.000000);
	TextDrawSetOutline(InventoryTD[12], 0);
	TextDrawSetShadow(InventoryTD[12], 0);
	TextDrawAlignment(InventoryTD[12], 1);
	TextDrawColor(InventoryTD[12], -1);
	TextDrawBackgroundColor(InventoryTD[12], 0);
	TextDrawBoxColor(InventoryTD[12], 255);
	TextDrawUseBox(InventoryTD[12], 0);
	TextDrawSetProportional(InventoryTD[12], 1);
	TextDrawSetSelectable(InventoryTD[12], 0);
	TextDrawSetPreviewModel(InventoryTD[12], 348);
	TextDrawSetPreviewRot(InventoryTD[12], 0.000000, 0.000000, 180.000000, 1.239999);
	TextDrawSetPreviewVehCol(InventoryTD[12], 1, 1);

	InventoryTD[13] = TextDrawCreate(240.000000, 163.000000, "Preview_Model");
	TextDrawFont(InventoryTD[13], 5);
	TextDrawLetterSize(InventoryTD[13], 0.600000, 2.000000);
	TextDrawTextSize(InventoryTD[13], 100.000000, 100.000000);
	TextDrawSetOutline(InventoryTD[13], 0);
	TextDrawSetShadow(InventoryTD[13], 0);
	TextDrawAlignment(InventoryTD[13], 1);
	TextDrawColor(InventoryTD[13], -1);
	TextDrawBackgroundColor(InventoryTD[13], 0);
	TextDrawBoxColor(InventoryTD[13], 255);
	TextDrawUseBox(InventoryTD[13], 0);
	TextDrawSetProportional(InventoryTD[13], 1);
	TextDrawSetSelectable(InventoryTD[13], 0);
	TextDrawSetPreviewModel(InventoryTD[13], 349);
	TextDrawSetPreviewRot(InventoryTD[13], 0.000000, -8.000000, 180.000000, 2.519998);
	TextDrawSetPreviewVehCol(InventoryTD[13], 1, 1);

	InventoryTD[14] = TextDrawCreate(317.000000, 163.000000, "Preview_Model");
	TextDrawFont(InventoryTD[14], 5);
	TextDrawLetterSize(InventoryTD[14], 0.600000, 2.000000);
	TextDrawTextSize(InventoryTD[14], 100.000000, 100.000000);
	TextDrawSetOutline(InventoryTD[14], 0);
	TextDrawSetShadow(InventoryTD[14], 0);
	TextDrawAlignment(InventoryTD[14], 1);
	TextDrawColor(InventoryTD[14], -1);
	TextDrawBackgroundColor(InventoryTD[14], 0);
	TextDrawBoxColor(InventoryTD[14], 255);
	TextDrawUseBox(InventoryTD[14], 0);
	TextDrawSetProportional(InventoryTD[14], 1);
	TextDrawSetSelectable(InventoryTD[14], 0);
	TextDrawSetPreviewModel(InventoryTD[14], 353);
	TextDrawSetPreviewRot(InventoryTD[14], 0.000000, -8.000000, 180.000000, 1.909999);
	TextDrawSetPreviewVehCol(InventoryTD[14], 1, 1);

	InventoryTD[15] = TextDrawCreate(243.000000, 196.000000, "Preview_Model");
	TextDrawFont(InventoryTD[15], 5);
	TextDrawLetterSize(InventoryTD[15], 0.600000, 2.000000);
	TextDrawTextSize(InventoryTD[15], 100.000000, 100.000000);
	TextDrawSetOutline(InventoryTD[15], 0);
	TextDrawSetShadow(InventoryTD[15], 0);
	TextDrawAlignment(InventoryTD[15], 1);
	TextDrawColor(InventoryTD[15], -1);
	TextDrawBackgroundColor(InventoryTD[15], 0);
	TextDrawBoxColor(InventoryTD[15], 255);
	TextDrawUseBox(InventoryTD[15], 0);
	TextDrawSetProportional(InventoryTD[15], 1);
	TextDrawSetSelectable(InventoryTD[15], 0);
	TextDrawSetPreviewModel(InventoryTD[15], 355);
	TextDrawSetPreviewRot(InventoryTD[15], 0.000000, -3.000000, 180.000000, 2.519998);
	TextDrawSetPreviewVehCol(InventoryTD[15], 1, 1);

	InventoryTD[16] = TextDrawCreate(319.000000, 196.000000, "Preview_Model");
	TextDrawFont(InventoryTD[16], 5);
	TextDrawLetterSize(InventoryTD[16], 0.600000, 2.000000);
	TextDrawTextSize(InventoryTD[16], 100.000000, 100.000000);
	TextDrawSetOutline(InventoryTD[16], 0);
	TextDrawSetShadow(InventoryTD[16], 0);
	TextDrawAlignment(InventoryTD[16], 1);
	TextDrawColor(InventoryTD[16], -1);
	TextDrawBackgroundColor(InventoryTD[16], 0);
	TextDrawBoxColor(InventoryTD[16], 255);
	TextDrawUseBox(InventoryTD[16], 0);
	TextDrawSetProportional(InventoryTD[16], 1);
	TextDrawSetSelectable(InventoryTD[16], 0);
	TextDrawSetPreviewModel(InventoryTD[16], 356);
	TextDrawSetPreviewRot(InventoryTD[16], 0.000000, -3.000000, 180.000000, 2.339998);
	TextDrawSetPreviewVehCol(InventoryTD[16], 1, 1);

	InventoryTD[17] = TextDrawCreate(253.000000, 168.000000, "ld_chat:thumbup");
	TextDrawFont(InventoryTD[17], 4);
	TextDrawLetterSize(InventoryTD[17], 0.600000, 2.000000);
	TextDrawTextSize(InventoryTD[17], 15.000000, 15.000000);
	TextDrawSetOutline(InventoryTD[17], 1);
	TextDrawSetShadow(InventoryTD[17], 0);
	TextDrawAlignment(InventoryTD[17], 1);
	TextDrawColor(InventoryTD[17], -1);
	TextDrawBackgroundColor(InventoryTD[17], 255);
	TextDrawBoxColor(InventoryTD[17], 50);
	TextDrawUseBox(InventoryTD[17], 1);
	TextDrawSetProportional(InventoryTD[17], 1);
	TextDrawSetSelectable(InventoryTD[17], 1);

	InventoryTD[18] = TextDrawCreate(427.000000, 168.000000, "ld_chat:thumbup");
	TextDrawFont(InventoryTD[18], 4);
	TextDrawLetterSize(InventoryTD[18], 0.600000, 2.000000);
	TextDrawTextSize(InventoryTD[18], 15.000000, 15.000000);
	TextDrawSetOutline(InventoryTD[18], 1);
	TextDrawSetShadow(InventoryTD[18], 0);
	TextDrawAlignment(InventoryTD[18], 1);
	TextDrawColor(InventoryTD[18], -1);
	TextDrawBackgroundColor(InventoryTD[18], 255);
	TextDrawBoxColor(InventoryTD[18], 50);
	TextDrawUseBox(InventoryTD[18], 1);
	TextDrawSetProportional(InventoryTD[18], 1);
	TextDrawSetSelectable(InventoryTD[18], 1);

	InventoryTD[19] = TextDrawCreate(253.000000, 204.000000, "ld_chat:thumbup");
	TextDrawFont(InventoryTD[19], 4);
	TextDrawLetterSize(InventoryTD[19], 0.600000, 2.000000);
	TextDrawTextSize(InventoryTD[19], 15.000000, 15.000000);
	TextDrawSetOutline(InventoryTD[19], 1);
	TextDrawSetShadow(InventoryTD[19], 0);
	TextDrawAlignment(InventoryTD[19], 1);
	TextDrawColor(InventoryTD[19], -1);
	TextDrawBackgroundColor(InventoryTD[19], 255);
	TextDrawBoxColor(InventoryTD[19], 50);
	TextDrawUseBox(InventoryTD[19], 1);
	TextDrawSetProportional(InventoryTD[19], 1);
	TextDrawSetSelectable(InventoryTD[19], 1);

	InventoryTD[20] = TextDrawCreate(427.000000, 204.000000, "ld_chat:thumbup");
	TextDrawFont(InventoryTD[20], 4);
	TextDrawLetterSize(InventoryTD[20], 0.600000, 2.000000);
	TextDrawTextSize(InventoryTD[20], 15.000000, 15.000000);
	TextDrawSetOutline(InventoryTD[20], 1);
	TextDrawSetShadow(InventoryTD[20], 0);
	TextDrawAlignment(InventoryTD[20], 1);
	TextDrawColor(InventoryTD[20], -1);
	TextDrawBackgroundColor(InventoryTD[20], 255);
	TextDrawBoxColor(InventoryTD[20], 50);
	TextDrawUseBox(InventoryTD[20], 1);
	TextDrawSetProportional(InventoryTD[20], 1);
	TextDrawSetSelectable(InventoryTD[20], 1);

	InventoryTD[21] = TextDrawCreate(253.000000, 239.000000, "ld_chat:thumbup");
	TextDrawFont(InventoryTD[21], 4);
	TextDrawLetterSize(InventoryTD[21], 0.600000, 2.000000);
	TextDrawTextSize(InventoryTD[21], 15.000000, 15.000000);
	TextDrawSetOutline(InventoryTD[21], 1);
	TextDrawSetShadow(InventoryTD[21], 0);
	TextDrawAlignment(InventoryTD[21], 1);
	TextDrawColor(InventoryTD[21], -1);
	TextDrawBackgroundColor(InventoryTD[21], 255);
	TextDrawBoxColor(InventoryTD[21], 50);
	TextDrawUseBox(InventoryTD[21], 1);
	TextDrawSetProportional(InventoryTD[21], 1);
	TextDrawSetSelectable(InventoryTD[21], 1);

	InventoryTD[22] = TextDrawCreate(427.000000, 239.000000, "ld_chat:thumbup");
	TextDrawFont(InventoryTD[22], 4);
	TextDrawLetterSize(InventoryTD[22], 0.600000, 2.000000);
	TextDrawTextSize(InventoryTD[22], 15.000000, 15.000000);
	TextDrawSetOutline(InventoryTD[22], 1);
	TextDrawSetShadow(InventoryTD[22], 0);
	TextDrawAlignment(InventoryTD[22], 1);
	TextDrawColor(InventoryTD[22], -1);
	TextDrawBackgroundColor(InventoryTD[22], 255);
	TextDrawBoxColor(InventoryTD[22], 50);
	TextDrawUseBox(InventoryTD[22], 1);
	TextDrawSetProportional(InventoryTD[22], 1);
	TextDrawSetSelectable(InventoryTD[22], 1);

	InventoryTD[23] = TextDrawCreate(210.000000, 290.500000, "Weapons");
	TextDrawFont(InventoryTD[23], 1);
	TextDrawLetterSize(InventoryTD[23], 0.324999, 1.750000);
	TextDrawTextSize(InventoryTD[23], 10.000000, 50.000000);
	TextDrawSetOutline(InventoryTD[23], 1);
	TextDrawSetShadow(InventoryTD[23], 0);
	TextDrawAlignment(InventoryTD[23], 2);
	TextDrawColor(InventoryTD[23], -1);
	TextDrawBackgroundColor(InventoryTD[23], 255);
	TextDrawBoxColor(InventoryTD[23], 16711730);
	TextDrawUseBox(InventoryTD[23], 1);
	TextDrawSetProportional(InventoryTD[23], 1);
	TextDrawSetSelectable(InventoryTD[23], 1);

	InventoryTD[24] = TextDrawCreate(264.000000, 290.500000, "Badges");
	TextDrawFont(InventoryTD[24], 1);
	TextDrawLetterSize(InventoryTD[24], 0.324999, 1.750000);
	TextDrawTextSize(InventoryTD[24], 10.000000, 45.000000);
	TextDrawSetOutline(InventoryTD[24], 1);
	TextDrawSetShadow(InventoryTD[24], 0);
	TextDrawAlignment(InventoryTD[24], 2);
	TextDrawColor(InventoryTD[24], -1);
	TextDrawBackgroundColor(InventoryTD[24], 255);
	TextDrawBoxColor(InventoryTD[24], 16711730);
	TextDrawUseBox(InventoryTD[24], 1);
	TextDrawSetProportional(InventoryTD[24], 1);
	TextDrawSetSelectable(InventoryTD[24], 1);

	InventoryTD[25] = TextDrawCreate(315.000000, 290.500000, "Food");
	TextDrawFont(InventoryTD[25], 1);
	TextDrawLetterSize(InventoryTD[25], 0.324999, 1.750000);
	TextDrawTextSize(InventoryTD[25], 10.000000, 45.000000);
	TextDrawSetOutline(InventoryTD[25], 1);
	TextDrawSetShadow(InventoryTD[25], 0);
	TextDrawAlignment(InventoryTD[25], 2);
	TextDrawColor(InventoryTD[25], -1);
	TextDrawBackgroundColor(InventoryTD[25], 255);
	TextDrawBoxColor(InventoryTD[25], 16711730);
	TextDrawUseBox(InventoryTD[25], 1);
	TextDrawSetProportional(InventoryTD[25], 1);
	TextDrawSetSelectable(InventoryTD[25], 1);

	InventoryTD[26] = TextDrawCreate(366.000000, 290.500000, "Drinks");
	TextDrawFont(InventoryTD[26], 1);
	TextDrawLetterSize(InventoryTD[26], 0.324999, 1.750000);
	TextDrawTextSize(InventoryTD[26], 10.000000, 45.000000);
	TextDrawSetOutline(InventoryTD[26], 1);
	TextDrawSetShadow(InventoryTD[26], 0);
	TextDrawAlignment(InventoryTD[26], 2);
	TextDrawColor(InventoryTD[26], -1);
	TextDrawBackgroundColor(InventoryTD[26], 255);
	TextDrawBoxColor(InventoryTD[26], 16711730);
	TextDrawUseBox(InventoryTD[26], 1);
	TextDrawSetProportional(InventoryTD[26], 1);
	TextDrawSetSelectable(InventoryTD[26], 1);

	InventoryTD[27] = TextDrawCreate(420.000000, 290.500000, "Licenses");
	TextDrawFont(InventoryTD[27], 1);
	TextDrawLetterSize(InventoryTD[27], 0.324999, 1.750000);
	TextDrawTextSize(InventoryTD[27], 10.000000, 50.000000);
	TextDrawSetOutline(InventoryTD[27], 1);
	TextDrawSetShadow(InventoryTD[27], 0);
	TextDrawAlignment(InventoryTD[27], 2);
	TextDrawColor(InventoryTD[27], -1);
	TextDrawBackgroundColor(InventoryTD[27], 255);
	TextDrawBoxColor(InventoryTD[27], 16711730);
	TextDrawUseBox(InventoryTD[27], 1);
	TextDrawSetProportional(InventoryTD[27], 1);
	TextDrawSetSelectable(InventoryTD[27], 1);

	UpgraderTD[0] = TextDrawCreate(315.000000, 188.000000, "_");
	TextDrawFont(UpgraderTD[0], 1);
	TextDrawLetterSize(UpgraderTD[0], 0.600000, 15.000014);
	TextDrawTextSize(UpgraderTD[0], 298.500000, 250.000000);
	TextDrawSetOutline(UpgraderTD[0], 1);
	TextDrawSetShadow(UpgraderTD[0], 0);
	TextDrawAlignment(UpgraderTD[0], 2);
	TextDrawColor(UpgraderTD[0], -1);
	TextDrawBackgroundColor(UpgraderTD[0], 255);
	TextDrawBoxColor(UpgraderTD[0], 175);
	TextDrawUseBox(UpgraderTD[0], 1);
	TextDrawSetProportional(UpgraderTD[0], 1);
	TextDrawSetSelectable(UpgraderTD[0], 0);

	UpgraderTD[1] = TextDrawCreate(420.000000, 189.000000, "ld_beat:cross");
	TextDrawFont(UpgraderTD[1], 4);
	TextDrawLetterSize(UpgraderTD[1], 0.600000, 2.000000);
	TextDrawTextSize(UpgraderTD[1], 20.000000, 20.000000);
	TextDrawSetOutline(UpgraderTD[1], 1);
	TextDrawSetShadow(UpgraderTD[1], 0);
	TextDrawAlignment(UpgraderTD[1], 1);
	TextDrawColor(UpgraderTD[1], -1);
	TextDrawBackgroundColor(UpgraderTD[1], 255);
	TextDrawBoxColor(UpgraderTD[1], 50);
	TextDrawUseBox(UpgraderTD[1], 1);
	TextDrawSetProportional(UpgraderTD[1], 1);
	TextDrawSetSelectable(UpgraderTD[1], 1);

	UpgraderTD[2] = TextDrawCreate(250.000000, 192.000000, "2X");
	TextDrawFont(UpgraderTD[2], 1);
	TextDrawLetterSize(UpgraderTD[2], 0.300000, 1.299998);
	TextDrawTextSize(UpgraderTD[2], 10.000000, 40.000000);
	TextDrawSetOutline(UpgraderTD[2], 1);
	TextDrawSetShadow(UpgraderTD[2], 0);
	TextDrawAlignment(UpgraderTD[2], 2);
	TextDrawColor(UpgraderTD[2], -1);
	TextDrawBackgroundColor(UpgraderTD[2], 255);
	TextDrawBoxColor(UpgraderTD[2], 9109554);
	TextDrawUseBox(UpgraderTD[2], 1);
	TextDrawSetProportional(UpgraderTD[2], 1);
	TextDrawSetSelectable(UpgraderTD[2], 1);

	UpgraderTD[3] = TextDrawCreate(315.000000, 192.000000, "5X");
	TextDrawFont(UpgraderTD[3], 1);
	TextDrawLetterSize(UpgraderTD[3], 0.300000, 1.299998);
	TextDrawTextSize(UpgraderTD[3], 10.000000, 40.000000);
	TextDrawSetOutline(UpgraderTD[3], 1);
	TextDrawSetShadow(UpgraderTD[3], 0);
	TextDrawAlignment(UpgraderTD[3], 2);
	TextDrawColor(UpgraderTD[3], -1);
	TextDrawBackgroundColor(UpgraderTD[3], 255);
	TextDrawBoxColor(UpgraderTD[3], 9109554);
	TextDrawUseBox(UpgraderTD[3], 1);
	TextDrawSetProportional(UpgraderTD[3], 1);
	TextDrawSetSelectable(UpgraderTD[3], 1);

	UpgraderTD[4] = TextDrawCreate(380.000000, 192.000000, "10X");
	TextDrawFont(UpgraderTD[4], 1);
	TextDrawLetterSize(UpgraderTD[4], 0.300000, 1.299998);
	TextDrawTextSize(UpgraderTD[4], 10.000000, 40.000000);
	TextDrawSetOutline(UpgraderTD[4], 1);
	TextDrawSetShadow(UpgraderTD[4], 0);
	TextDrawAlignment(UpgraderTD[4], 2);
	TextDrawColor(UpgraderTD[4], -1);
	TextDrawBackgroundColor(UpgraderTD[4], 255);
	TextDrawBoxColor(UpgraderTD[4], 9109554);
	TextDrawUseBox(UpgraderTD[4], 1);
	TextDrawSetProportional(UpgraderTD[4], 1);
	TextDrawSetSelectable(UpgraderTD[4], 1);

	UpgraderTD[5] = TextDrawCreate(315.000000, 307.000000, "Upgrade");
	TextDrawFont(UpgraderTD[5], 1);
	TextDrawLetterSize(UpgraderTD[5], 0.300000, 1.299998);
	TextDrawTextSize(UpgraderTD[5], 10.000000, 60.000000);
	TextDrawSetOutline(UpgraderTD[5], 1);
	TextDrawSetShadow(UpgraderTD[5], 0);
	TextDrawAlignment(UpgraderTD[5], 2);
	TextDrawColor(UpgraderTD[5], -1);
	TextDrawBackgroundColor(UpgraderTD[5], 255);
	TextDrawBoxColor(UpgraderTD[5], 9109554);
	TextDrawUseBox(UpgraderTD[5], 1);
	TextDrawSetProportional(UpgraderTD[5], 1);
	TextDrawSetSelectable(UpgraderTD[5], 1);

	UpgraderTD[6] = TextDrawCreate(200.000000, 210.000000, "ld_beat:chit");
	TextDrawFont(UpgraderTD[6], 4);
	TextDrawLetterSize(UpgraderTD[6], 0.600000, 2.000000);
	TextDrawTextSize(UpgraderTD[6], 100.000000, 100.000000);
	TextDrawSetOutline(UpgraderTD[6], 1);
	TextDrawSetShadow(UpgraderTD[6], 0);
	TextDrawAlignment(UpgraderTD[6], 1);
	TextDrawColor(UpgraderTD[6], -1);
	TextDrawBackgroundColor(UpgraderTD[6], 255);
	TextDrawBoxColor(UpgraderTD[6], 50);
	TextDrawUseBox(UpgraderTD[6], 1);
	TextDrawSetProportional(UpgraderTD[6], 1);
	TextDrawSetSelectable(UpgraderTD[6], 0);

	UpgraderTD[7] = TextDrawCreate(331.000000, 210.000000, "ld_beat:chit");
	TextDrawFont(UpgraderTD[7], 4);
	TextDrawLetterSize(UpgraderTD[7], 0.600000, 2.000000);
	TextDrawTextSize(UpgraderTD[7], 100.000000, 100.000000);
	TextDrawSetOutline(UpgraderTD[7], 1);
	TextDrawSetShadow(UpgraderTD[7], 0);
	TextDrawAlignment(UpgraderTD[7], 1);
	TextDrawColor(UpgraderTD[7], -1);
	TextDrawBackgroundColor(UpgraderTD[7], 255);
	TextDrawBoxColor(UpgraderTD[7], 50);
	TextDrawUseBox(UpgraderTD[7], 1);
	TextDrawSetProportional(UpgraderTD[7], 1);
	TextDrawSetSelectable(UpgraderTD[7], 0);

	LuckyTD[0] = TextDrawCreate(315.000000, 150.000000, "_");
	TextDrawFont(LuckyTD[0], 1);
	TextDrawLetterSize(LuckyTD[0], 0.600000, 20.000000);
	TextDrawTextSize(LuckyTD[0], 298.500000, 75.000000);
	TextDrawSetOutline(LuckyTD[0], 1);
	TextDrawSetShadow(LuckyTD[0], 0);
	TextDrawAlignment(LuckyTD[0], 2);
	TextDrawColor(LuckyTD[0], -1);
	TextDrawBackgroundColor(LuckyTD[0], 255);
	TextDrawBoxColor(LuckyTD[0], 175);
	TextDrawUseBox(LuckyTD[0], 1);
	TextDrawSetProportional(LuckyTD[0], 1);
	TextDrawSetSelectable(LuckyTD[0], 0);

	LuckyTD[1] = TextDrawCreate(315.000000, 156.500000, "_");
	TextDrawFont(LuckyTD[1], 0);
	TextDrawLetterSize(LuckyTD[1], 0.600000, 5.199996);
	TextDrawTextSize(LuckyTD[1], 298.500000, 47.000000);
	TextDrawSetOutline(LuckyTD[1], 1);
	TextDrawSetShadow(LuckyTD[1], 0);
	TextDrawAlignment(LuckyTD[1], 2);
	TextDrawColor(LuckyTD[1], -1);
	TextDrawBackgroundColor(LuckyTD[1], 255);
	TextDrawBoxColor(LuckyTD[1], -1962934097);
	TextDrawUseBox(LuckyTD[1], 1);
	TextDrawSetProportional(LuckyTD[1], 1);
	TextDrawSetSelectable(LuckyTD[1], 0);

	LuckyTD[2] = TextDrawCreate(315.000000, 216.500000, "_");
	TextDrawFont(LuckyTD[2], 1);
	TextDrawLetterSize(LuckyTD[2], 0.600000, 5.199996);
	TextDrawTextSize(LuckyTD[2], 298.500000, 47.000000);
	TextDrawSetOutline(LuckyTD[2], 1);
	TextDrawSetShadow(LuckyTD[2], 0);
	TextDrawAlignment(LuckyTD[2], 2);
	TextDrawColor(LuckyTD[2], -1);
	TextDrawBackgroundColor(LuckyTD[2], -1962934017);
	TextDrawBoxColor(LuckyTD[2], 9109679);
	TextDrawUseBox(LuckyTD[2], 1);
	TextDrawSetProportional(LuckyTD[2], 1);
	TextDrawSetSelectable(LuckyTD[2], 0);

	LuckyTD[3] = TextDrawCreate(315.000000, 276.500000, "_");
	TextDrawFont(LuckyTD[3], 1);
	TextDrawLetterSize(LuckyTD[3], 0.600000, 5.199996);
	TextDrawTextSize(LuckyTD[3], 298.500000, 47.000000);
	TextDrawSetOutline(LuckyTD[3], 1);
	TextDrawSetShadow(LuckyTD[3], 0);
	TextDrawAlignment(LuckyTD[3], 2);
	TextDrawColor(LuckyTD[3], -1);
	TextDrawBackgroundColor(LuckyTD[3], -1962934017);
	TextDrawBoxColor(LuckyTD[3], -1962934097);
	TextDrawUseBox(LuckyTD[3], 1);
	TextDrawSetProportional(LuckyTD[3], 1);
	TextDrawSetSelectable(LuckyTD[3], 0);

	LuckyTD[4] = TextDrawCreate(315.000000, 240.000000, "_");
	TextDrawFont(LuckyTD[4], 1);
	TextDrawLetterSize(LuckyTD[4], 0.600000, 0.000001);
	TextDrawTextSize(LuckyTD[4], 296.000000, 42.500000);
	TextDrawSetOutline(LuckyTD[4], 1);
	TextDrawSetShadow(LuckyTD[4], 0);
	TextDrawAlignment(LuckyTD[4], 2);
	TextDrawColor(LuckyTD[4], -1);
	TextDrawBackgroundColor(LuckyTD[4], 255);
	TextDrawBoxColor(LuckyTD[4], 9109679);
	TextDrawUseBox(LuckyTD[4], 1);
	TextDrawSetProportional(LuckyTD[4], 1);
	TextDrawSetSelectable(LuckyTD[4], 0);

	FragmentTD[0] = TextDrawCreate(312.000000, 170.000000, "_");
	TextDrawFont(FragmentTD[0], 1);
	TextDrawLetterSize(FragmentTD[0], 0.720833, 16.500003);
	TextDrawTextSize(FragmentTD[0], 302.500000, 150.000000);
	TextDrawSetOutline(FragmentTD[0], 1);
	TextDrawSetShadow(FragmentTD[0], 0);
	TextDrawAlignment(FragmentTD[0], 2);
	TextDrawColor(FragmentTD[0], -1);
	TextDrawBackgroundColor(FragmentTD[0], 255);
	TextDrawBoxColor(FragmentTD[0], 175);
	TextDrawUseBox(FragmentTD[0], 1);
	TextDrawSetProportional(FragmentTD[0], 1);
	TextDrawSetSelectable(FragmentTD[0], 0);

	FragmentTD[1] = TextDrawCreate(270.000000, 302.000000, "Cancel");
	TextDrawFont(FragmentTD[1], 1);
	TextDrawLetterSize(FragmentTD[1], 0.500000, 1.500000);
	TextDrawTextSize(FragmentTD[1], 10.000000, 60.000000);
	TextDrawSetOutline(FragmentTD[1], 1);
	TextDrawSetShadow(FragmentTD[1], 0);
	TextDrawAlignment(FragmentTD[1], 2);
	TextDrawColor(FragmentTD[1], -1);
	TextDrawBackgroundColor(FragmentTD[1], 255);
	TextDrawBoxColor(FragmentTD[1], -16777166);
	TextDrawUseBox(FragmentTD[1], 1);
	TextDrawSetProportional(FragmentTD[1], 1);
	TextDrawSetSelectable(FragmentTD[1], 1);

	FragmentTD[2] = TextDrawCreate(354.000000, 302.000000, "Craft");
	TextDrawFont(FragmentTD[2], 1);
	TextDrawLetterSize(FragmentTD[2], 0.500000, 1.500000);
	TextDrawTextSize(FragmentTD[2], 10.000000, 60.500000);
	TextDrawSetOutline(FragmentTD[2], 1);
	TextDrawSetShadow(FragmentTD[2], 0);
	TextDrawAlignment(FragmentTD[2], 2);
	TextDrawColor(FragmentTD[2], -1);
	TextDrawBackgroundColor(FragmentTD[2], 255);
	TextDrawBoxColor(FragmentTD[2], 9109554);
	TextDrawUseBox(FragmentTD[2], 1);
	TextDrawSetProportional(FragmentTD[2], 1);
	TextDrawSetSelectable(FragmentTD[2], 1);

	FragmentTD[3] = TextDrawCreate(312.000000, 174.000000, "Craft System");
	TextDrawFont(FragmentTD[3], 1);
	TextDrawLetterSize(FragmentTD[3], 0.500000, 1.500000);
	TextDrawTextSize(FragmentTD[3], 402.500000, 145.000000);
	TextDrawSetOutline(FragmentTD[3], 1);
	TextDrawSetShadow(FragmentTD[3], 0);
	TextDrawAlignment(FragmentTD[3], 2);
	TextDrawColor(FragmentTD[3], -1);
	TextDrawBackgroundColor(FragmentTD[3], 255);
	TextDrawBoxColor(FragmentTD[3], 9109554);
	TextDrawUseBox(FragmentTD[3], 0);
	TextDrawSetProportional(FragmentTD[3], 1);
	TextDrawSetSelectable(FragmentTD[3], 0);

	GiftBoxTD = TextDrawCreate(600.000000, 195.000000, "Preview_Model");
	TextDrawFont(GiftBoxTD, 5);
	TextDrawLetterSize(GiftBoxTD, 0.600000, 2.000000);
	TextDrawTextSize(GiftBoxTD, 35.000000, 35.000000);
	TextDrawSetOutline(GiftBoxTD, 0);
	TextDrawSetShadow(GiftBoxTD, 0);
	TextDrawAlignment(GiftBoxTD, 1);
	TextDrawColor(GiftBoxTD, -1);
	TextDrawBackgroundColor(GiftBoxTD, -256);
	TextDrawBoxColor(GiftBoxTD, 255);
	TextDrawUseBox(GiftBoxTD, 0);
	TextDrawSetProportional(GiftBoxTD, 1);
	TextDrawSetSelectable(GiftBoxTD, 0);
	TextDrawSetPreviewModel(GiftBoxTD, 19054);
	TextDrawSetPreviewRot(GiftBoxTD, 0.000000, 0.000000, 45.000000, 1.000000);
	TextDrawSetPreviewVehCol(GiftBoxTD, 1, 1);

	ServerTD = TextDrawCreate(596.000000, 428.000000, "Jade.~g~~h~OG-Life~w~~h~.Ro");
	TextDrawFont(ServerTD, 1);
	TextDrawLetterSize(ServerTD, 0.300000, 2.000000);
	TextDrawTextSize(ServerTD, 400.000000, 85.000000);
	TextDrawSetOutline(ServerTD, 1);
	TextDrawSetShadow(ServerTD, 0);
	TextDrawAlignment(ServerTD, 2);
	TextDrawColor(ServerTD, -1);
	TextDrawBackgroundColor(ServerTD, 255);
	TextDrawBoxColor(ServerTD, 50);
	TextDrawUseBox(ServerTD, 0);
	TextDrawSetProportional(ServerTD, 1);
	TextDrawSetSelectable(ServerTD, 0);

	SlotsTD[0] = TextDrawCreate(320.000000, 125.000000, "_");
	TextDrawFont(SlotsTD[0], 1);
	TextDrawLetterSize(SlotsTD[0], 0.608331, 24.899999);
	TextDrawTextSize(SlotsTD[0], 300.000000, 225.000000);
	TextDrawSetOutline(SlotsTD[0], 1);
	TextDrawSetShadow(SlotsTD[0], 0);
	TextDrawAlignment(SlotsTD[0], 2);
	TextDrawColor(SlotsTD[0], -1);
	TextDrawBackgroundColor(SlotsTD[0], 255);
	TextDrawBoxColor(SlotsTD[0], 185);
	TextDrawUseBox(SlotsTD[0], 1);
	TextDrawSetProportional(SlotsTD[0], 1);
	TextDrawSetSelectable(SlotsTD[0], 0);

	SlotsTD[1] = TextDrawCreate(250.000000, 324.000000, "CANCEL");
	TextDrawFont(SlotsTD[1], 1);
	TextDrawLetterSize(SlotsTD[1], 0.500000, 2.000000);
	TextDrawTextSize(SlotsTD[1], 400.000000, 70.000000);
	TextDrawSetOutline(SlotsTD[1], 1);
	TextDrawSetShadow(SlotsTD[1], 0);
	TextDrawAlignment(SlotsTD[1], 2);
	TextDrawColor(SlotsTD[1], -1);
	TextDrawBackgroundColor(SlotsTD[1], 255);
	TextDrawBoxColor(SlotsTD[1], -1962934017);
	TextDrawUseBox(SlotsTD[1], 1);
	TextDrawSetProportional(SlotsTD[1], 1);
	TextDrawSetSelectable(SlotsTD[1], 1);

	SlotsTD[2] = TextDrawCreate(390.000000, 324.000000, "BET");
	TextDrawFont(SlotsTD[2], 1);
	TextDrawLetterSize(SlotsTD[2], 0.500000, 2.000000);
	TextDrawTextSize(SlotsTD[2], 400.000000, 70.000000);
	TextDrawSetOutline(SlotsTD[2], 1);
	TextDrawSetShadow(SlotsTD[2], 0);
	TextDrawAlignment(SlotsTD[2], 2);
	TextDrawColor(SlotsTD[2], -1);
	TextDrawBackgroundColor(SlotsTD[2], 255);
	TextDrawBoxColor(SlotsTD[2], 852308735);
	TextDrawUseBox(SlotsTD[2], 1);
	TextDrawSetProportional(SlotsTD[2], 1);
	TextDrawSetSelectable(SlotsTD[2], 1);

	SlotsTD[3] = TextDrawCreate(255.000000, 127.000000, "Slots System");
	TextDrawFont(SlotsTD[3], 1);
	TextDrawLetterSize(SlotsTD[3], 0.600000, 2.000000);
	TextDrawTextSize(SlotsTD[3], 400.000000, 17.000000);
	TextDrawSetOutline(SlotsTD[3], 1);
	TextDrawSetShadow(SlotsTD[3], 0);
	TextDrawAlignment(SlotsTD[3], 1);
	TextDrawColor(SlotsTD[3], -1);
	TextDrawBackgroundColor(SlotsTD[3], 255);
	TextDrawBoxColor(SlotsTD[3], 50);
	TextDrawUseBox(SlotsTD[3], 0);
	TextDrawSetProportional(SlotsTD[3], 1);
	TextDrawSetSelectable(SlotsTD[3], 0);

	SlotsTD[4] = TextDrawCreate(320.000000, 147.000000, "_");
	TextDrawFont(SlotsTD[4], 1);
	TextDrawLetterSize(SlotsTD[4], 0.600000, -0.199995);
	TextDrawTextSize(SlotsTD[4], 298.500000, 205.000000);
	TextDrawSetOutline(SlotsTD[4], 1);
	TextDrawSetShadow(SlotsTD[4], 0);
	TextDrawAlignment(SlotsTD[4], 2);
	TextDrawColor(SlotsTD[4], -1);
	TextDrawBackgroundColor(SlotsTD[4], 255);
	TextDrawBoxColor(SlotsTD[4], 1296911751);
	TextDrawUseBox(SlotsTD[4], 1);
	TextDrawSetProportional(SlotsTD[4], 1);
	TextDrawSetSelectable(SlotsTD[4], 0);

	SlotsTD[5] = TextDrawCreate(250.000000, 155.000000, "_");
	TextDrawFont(SlotsTD[5], 1);
	TextDrawLetterSize(SlotsTD[5], 0.999998, 5.000000);
	TextDrawTextSize(SlotsTD[5], 300.000000, 50.000000);
	TextDrawSetOutline(SlotsTD[5], 0);
	TextDrawSetShadow(SlotsTD[5], 0);
	TextDrawAlignment(SlotsTD[5], 2);
	TextDrawColor(SlotsTD[5], -1094795521);
	TextDrawBackgroundColor(SlotsTD[5], -1094795521);
	TextDrawBoxColor(SlotsTD[5], -1962934137);
	TextDrawUseBox(SlotsTD[5], 1);
	TextDrawSetProportional(SlotsTD[5], 1);
	TextDrawSetSelectable(SlotsTD[5], 0);

	SlotsTD[6] = TextDrawCreate(250.000000, 210.000000, "_");
	TextDrawFont(SlotsTD[6], 1);
	TextDrawLetterSize(SlotsTD[6], 0.999998, 5.000000);
	TextDrawTextSize(SlotsTD[6], 300.000000, 50.000000);
	TextDrawSetOutline(SlotsTD[6], 0);
	TextDrawSetShadow(SlotsTD[6], 0);
	TextDrawAlignment(SlotsTD[6], 2);
	TextDrawColor(SlotsTD[6], -1094795521);
	TextDrawBackgroundColor(SlotsTD[6], 852308735);
	TextDrawBoxColor(SlotsTD[6], 9109639);
	TextDrawUseBox(SlotsTD[6], 1);
	TextDrawSetProportional(SlotsTD[6], 1);
	TextDrawSetSelectable(SlotsTD[6], 0);

	SlotsTD[7] = TextDrawCreate(250.000000, 265.000000, "_");
	TextDrawFont(SlotsTD[7], 1);
	TextDrawLetterSize(SlotsTD[7], 0.999998, 5.000000);
	TextDrawTextSize(SlotsTD[7], 300.000000, 50.000000);
	TextDrawSetOutline(SlotsTD[7], 0);
	TextDrawSetShadow(SlotsTD[7], 0);
	TextDrawAlignment(SlotsTD[7], 2);
	TextDrawColor(SlotsTD[7], -1094795521);
	TextDrawBackgroundColor(SlotsTD[7], -1962934017);
	TextDrawBoxColor(SlotsTD[7], -1962934137);
	TextDrawUseBox(SlotsTD[7], 1);
	TextDrawSetProportional(SlotsTD[7], 1);
	TextDrawSetSelectable(SlotsTD[7], 0);

	SlotsTD[8] = TextDrawCreate(320.000000, 155.000000, "_");
	TextDrawFont(SlotsTD[8], 1);
	TextDrawLetterSize(SlotsTD[8], 0.999998, 5.000000);
	TextDrawTextSize(SlotsTD[8], 300.000000, 50.000000);
	TextDrawSetOutline(SlotsTD[8], 0);
	TextDrawSetShadow(SlotsTD[8], 0);
	TextDrawAlignment(SlotsTD[8], 2);
	TextDrawColor(SlotsTD[8], -1094795521);
	TextDrawBackgroundColor(SlotsTD[8], -1094795521);
	TextDrawBoxColor(SlotsTD[8], -1962934137);
	TextDrawUseBox(SlotsTD[8], 1);
	TextDrawSetProportional(SlotsTD[8], 1);
	TextDrawSetSelectable(SlotsTD[8], 0);

	SlotsTD[9] = TextDrawCreate(320.000000, 210.000000, "_");
	TextDrawFont(SlotsTD[9], 1);
	TextDrawLetterSize(SlotsTD[9], 0.999998, 5.000000);
	TextDrawTextSize(SlotsTD[9], 300.000000, 50.000000);
	TextDrawSetOutline(SlotsTD[9], 0);
	TextDrawSetShadow(SlotsTD[9], 0);
	TextDrawAlignment(SlotsTD[9], 2);
	TextDrawColor(SlotsTD[9], -1094795521);
	TextDrawBackgroundColor(SlotsTD[9], 852308735);
	TextDrawBoxColor(SlotsTD[9], 9109639);
	TextDrawUseBox(SlotsTD[9], 1);
	TextDrawSetProportional(SlotsTD[9], 1);
	TextDrawSetSelectable(SlotsTD[9], 0);

	SlotsTD[10] = TextDrawCreate(320.000000, 265.000000, "_");
	TextDrawFont(SlotsTD[10], 1);
	TextDrawLetterSize(SlotsTD[10], 0.999998, 5.000000);
	TextDrawTextSize(SlotsTD[10], 300.000000, 50.000000);
	TextDrawSetOutline(SlotsTD[10], 0);
	TextDrawSetShadow(SlotsTD[10], 0);
	TextDrawAlignment(SlotsTD[10], 2);
	TextDrawColor(SlotsTD[10], -1094795521);
	TextDrawBackgroundColor(SlotsTD[10], -1962934017);
	TextDrawBoxColor(SlotsTD[10], -1962934137);
	TextDrawUseBox(SlotsTD[10], 1);
	TextDrawSetProportional(SlotsTD[10], 1);
	TextDrawSetSelectable(SlotsTD[10], 0);

	SlotsTD[11] = TextDrawCreate(390.000000, 155.000000, "_");
	TextDrawFont(SlotsTD[11], 1);
	TextDrawLetterSize(SlotsTD[11], 0.999998, 5.000000);
	TextDrawTextSize(SlotsTD[11], 300.000000, 50.000000);
	TextDrawSetOutline(SlotsTD[11], 0);
	TextDrawSetShadow(SlotsTD[11], 0);
	TextDrawAlignment(SlotsTD[11], 2);
	TextDrawColor(SlotsTD[11], -1094795521);
	TextDrawBackgroundColor(SlotsTD[11], -1094795521);
	TextDrawBoxColor(SlotsTD[11], -1962934137);
	TextDrawUseBox(SlotsTD[11], 1);
	TextDrawSetProportional(SlotsTD[11], 1);
	TextDrawSetSelectable(SlotsTD[11], 0);

	SlotsTD[12] = TextDrawCreate(390.000000, 210.000000, "_");
	TextDrawFont(SlotsTD[12], 1);
	TextDrawLetterSize(SlotsTD[12], 0.999998, 5.000000);
	TextDrawTextSize(SlotsTD[12], 300.000000, 50.000000);
	TextDrawSetOutline(SlotsTD[12], 0);
	TextDrawSetShadow(SlotsTD[12], 0);
	TextDrawAlignment(SlotsTD[12], 2);
	TextDrawColor(SlotsTD[12], -1094795521);
	TextDrawBackgroundColor(SlotsTD[12], 852308735);
	TextDrawBoxColor(SlotsTD[12], 9109639);
	TextDrawUseBox(SlotsTD[12], 1);
	TextDrawSetProportional(SlotsTD[12], 1);
	TextDrawSetSelectable(SlotsTD[12], 0);

	SlotsTD[13] = TextDrawCreate(390.000000, 265.000000, "_");
	TextDrawFont(SlotsTD[13], 1);
	TextDrawLetterSize(SlotsTD[13], 0.999998, 5.000000);
	TextDrawTextSize(SlotsTD[13], 300.000000, 50.000000);
	TextDrawSetOutline(SlotsTD[13], 0);
	TextDrawSetShadow(SlotsTD[13], 0);
	TextDrawAlignment(SlotsTD[13], 2);
	TextDrawColor(SlotsTD[13], -1094795521);
	TextDrawBackgroundColor(SlotsTD[13], -1962934017);
	TextDrawBoxColor(SlotsTD[13], -1962934137);
	TextDrawUseBox(SlotsTD[13], 1);
	TextDrawSetProportional(SlotsTD[13], 1);
	TextDrawSetSelectable(SlotsTD[13], 0);

	SlotsTD[14] = TextDrawCreate(250.000000, 232.000000, "_");
	TextDrawFont(SlotsTD[14], 1);
	TextDrawLetterSize(SlotsTD[14], 0.600000, -0.050014);
	TextDrawTextSize(SlotsTD[14], 296.500000, 47.500000);
	TextDrawSetOutline(SlotsTD[14], 1);
	TextDrawSetShadow(SlotsTD[14], 0);
	TextDrawAlignment(SlotsTD[14], 2);
	TextDrawColor(SlotsTD[14], -1);
	TextDrawBackgroundColor(SlotsTD[14], 255);
	TextDrawBoxColor(SlotsTD[14], 9109639);
	TextDrawUseBox(SlotsTD[14], 1);
	TextDrawSetProportional(SlotsTD[14], 1);
	TextDrawSetSelectable(SlotsTD[14], 0);

	SlotsTD[15] = TextDrawCreate(320.000000, 232.000000, "_");
	TextDrawFont(SlotsTD[15], 1);
	TextDrawLetterSize(SlotsTD[15], 0.600000, -0.050014);
	TextDrawTextSize(SlotsTD[15], 296.500000, 47.500000);
	TextDrawSetOutline(SlotsTD[15], 1);
	TextDrawSetShadow(SlotsTD[15], 0);
	TextDrawAlignment(SlotsTD[15], 2);
	TextDrawColor(SlotsTD[15], -1);
	TextDrawBackgroundColor(SlotsTD[15], 255);
	TextDrawBoxColor(SlotsTD[15], 9109639);
	TextDrawUseBox(SlotsTD[15], 1);
	TextDrawSetProportional(SlotsTD[15], 1);
	TextDrawSetSelectable(SlotsTD[15], 0);

	SlotsTD[16] = TextDrawCreate(390.000000, 232.000000, "_");
	TextDrawFont(SlotsTD[16], 1);
	TextDrawLetterSize(SlotsTD[16], 0.600000, -0.050014);
	TextDrawTextSize(SlotsTD[16], 296.500000, 47.500000);
	TextDrawSetOutline(SlotsTD[16], 1);
	TextDrawSetShadow(SlotsTD[16], 0);
	TextDrawAlignment(SlotsTD[16], 2);
	TextDrawColor(SlotsTD[16], -1);
	TextDrawBackgroundColor(SlotsTD[16], 255);
	TextDrawBoxColor(SlotsTD[16], 9109639);
	TextDrawUseBox(SlotsTD[16], 1);
	TextDrawSetProportional(SlotsTD[16], 1);
	TextDrawSetSelectable(SlotsTD[16], 0);

	TuningTD[0] = TextDrawCreate(320.333221, 299.511199, "box");
	TextDrawLetterSize(TuningTD[0], 0.000000, 12.266671);
	TextDrawTextSize(TuningTD[0], 0.000000, 250.000000);
	TextDrawAlignment(TuningTD[0], 2);
	TextDrawColor(TuningTD[0], -1);
	TextDrawUseBox(TuningTD[0], 1);
	TextDrawBoxColor(TuningTD[0], 8388758);
	TextDrawSetShadow(TuningTD[0], 0);
	TextDrawSetOutline(TuningTD[0], 0);
	TextDrawBackgroundColor(TuningTD[0], 255);
	TextDrawFont(TuningTD[0], 1);
	TextDrawSetProportional(TuningTD[0], 1);
	TextDrawSetShadow(TuningTD[0], 0);

	TuningTD[1] = TextDrawCreate(420.666748, 299.355529, "LD_BEAT:cross");
	TextDrawLetterSize(TuningTD[1], 0.000000, 0.000000);
	TextDrawTextSize(TuningTD[1], 25.000000, 25.000000);
	TextDrawAlignment(TuningTD[1], 1);
	TextDrawColor(TuningTD[1], -1);
	TextDrawSetShadow(TuningTD[1], 0);
	TextDrawSetOutline(TuningTD[1], 0);
	TextDrawBackgroundColor(TuningTD[1], 255);
	TextDrawFont(TuningTD[1], 4);
	TextDrawSetProportional(TuningTD[1], 0);
	TextDrawSetShadow(TuningTD[1], 0);
	TextDrawSetSelectable(TuningTD[1], true);

	TuningTD[2] = TextDrawCreate(240.000000, 350.000000, "LD_BEAT:left");
	TextDrawLetterSize(TuningTD[2], 0.000000, 0.000000);
	TextDrawTextSize(TuningTD[2], 25.000000, 25.000000);
	TextDrawAlignment(TuningTD[2], 1);
	TextDrawColor(TuningTD[2], -1);
	TextDrawSetShadow(TuningTD[2], 0);
	TextDrawSetOutline(TuningTD[2], 0);
	TextDrawBackgroundColor(TuningTD[2], 255);
	TextDrawFont(TuningTD[2], 4);
	TextDrawSetProportional(TuningTD[2], 0);
	TextDrawSetShadow(TuningTD[2], 0);
	TextDrawSetSelectable(TuningTD[2], true);

	TuningTD[3] = TextDrawCreate(365.000000, 350.000000, "LD_BEAT:right");
	TextDrawLetterSize(TuningTD[3], 0.000000, 0.000000);
	TextDrawTextSize(TuningTD[3], 25.000000, 25.000000);
	TextDrawAlignment(TuningTD[3], 1);
	TextDrawColor(TuningTD[3], -1);
	TextDrawSetShadow(TuningTD[3], 0);
	TextDrawSetOutline(TuningTD[3], 0);
	TextDrawBackgroundColor(TuningTD[3], 255);
	TextDrawFont(TuningTD[3], 4);
	TextDrawSetProportional(TuningTD[3], 0);
	TextDrawSetShadow(TuningTD[3], 0);
	TextDrawSetSelectable(TuningTD[3], true);

	TuningTD[4] = TextDrawCreate(416.666656, 385.637054, "ld_chat:thumbup");
	TextDrawLetterSize(TuningTD[4], 0.000000, 0.000000);
	TextDrawTextSize(TuningTD[4], 25.000000, 25.000000);
	TextDrawAlignment(TuningTD[4], 1);
	TextDrawColor(TuningTD[4], -1);
	TextDrawSetShadow(TuningTD[4], 0);
	TextDrawSetOutline(TuningTD[4], 0);
	TextDrawBackgroundColor(TuningTD[4], 255);
	TextDrawFont(TuningTD[4], 4);
	TextDrawSetProportional(TuningTD[4], 0);
	TextDrawSetShadow(TuningTD[4], 0);
	TextDrawSetSelectable(TuningTD[4], true);

	RentVehicleTD[0] = TextDrawCreate(322.000091, 318.177795, "box");
	TextDrawLetterSize(RentVehicleTD[0], 0.000000, 10.000984);
	TextDrawTextSize(RentVehicleTD[0], 0.000000, 200.000000);
	TextDrawAlignment(RentVehicleTD[0], 2);
	TextDrawColor(RentVehicleTD[0], -1);
	TextDrawUseBox(RentVehicleTD[0], 1);
	TextDrawBoxColor(RentVehicleTD[0], 150);
	TextDrawSetShadow(RentVehicleTD[0], 0);
	TextDrawSetOutline(RentVehicleTD[0], 0);
	TextDrawBackgroundColor(RentVehicleTD[0], 255);
	TextDrawFont(RentVehicleTD[0], 1);
	TextDrawSetProportional(RentVehicleTD[0], 1);
	TextDrawSetShadow(RentVehicleTD[0], 0);

	RentVehicleTD[1] = TextDrawCreate(398.333343, 317.192657, "LD_BEAT:cross");
	TextDrawLetterSize(RentVehicleTD[1], 0.000000, 0.000000);
	TextDrawTextSize(RentVehicleTD[1], 25.000000, 25.000000);
	TextDrawAlignment(RentVehicleTD[1], 1);
	TextDrawColor(RentVehicleTD[1], -1);
	TextDrawSetShadow(RentVehicleTD[1], 0);
	TextDrawSetOutline(RentVehicleTD[1], 0);
	TextDrawBackgroundColor(RentVehicleTD[1], 255);
	TextDrawFont(RentVehicleTD[1], 4);
	TextDrawSetProportional(RentVehicleTD[1], 0);
	TextDrawSetShadow(RentVehicleTD[1], 0);
	TextDrawSetSelectable(RentVehicleTD[1], true);

	RentVehicleTD[2] = TextDrawCreate(225.000000, 350.000000, "LD_BEAT:left");
	TextDrawLetterSize(RentVehicleTD[2], 0.000000, 0.000000);
	TextDrawTextSize(RentVehicleTD[2], 30.000000, 30.000000);
	TextDrawAlignment(RentVehicleTD[2], 1);
	TextDrawColor(RentVehicleTD[2], -1);
	TextDrawSetShadow(RentVehicleTD[2], 0);
	TextDrawSetOutline(RentVehicleTD[2], 0);
	TextDrawBackgroundColor(RentVehicleTD[2], 255);
	TextDrawFont(RentVehicleTD[2], 4);
	TextDrawSetProportional(RentVehicleTD[2], 0);
	TextDrawSetShadow(RentVehicleTD[2], 0);
	TextDrawSetSelectable(RentVehicleTD[2], true);

	RentVehicleTD[3] = TextDrawCreate(390.000000, 350.000000, "LD_BEAT:right");
	TextDrawLetterSize(RentVehicleTD[3], 0.000000, 0.000000);
	TextDrawTextSize(RentVehicleTD[3], 30.000000, 30.000000);
	TextDrawAlignment(RentVehicleTD[3], 1);
	TextDrawColor(RentVehicleTD[3], -1);
	TextDrawSetShadow(RentVehicleTD[3], 0);
	TextDrawSetOutline(RentVehicleTD[3], 0);
	TextDrawBackgroundColor(RentVehicleTD[3], 255);
	TextDrawFont(RentVehicleTD[3], 4);
	TextDrawSetProportional(RentVehicleTD[3], 0);
	TextDrawSetShadow(RentVehicleTD[3], 0);
	TextDrawSetSelectable(RentVehicleTD[3], true);

	SkyWarsTD = TextDrawCreate(566.999938, 200.785293, "Se asteapta jucatori...");
	TextDrawLetterSize(SkyWarsTD, 0.400000, 1.600000);
	TextDrawTextSize(SkyWarsTD, 0.000000, 143.000000);
	TextDrawAlignment(SkyWarsTD, 2);
	TextDrawColor(SkyWarsTD, -1);
	TextDrawUseBox(SkyWarsTD, 1);
	TextDrawBoxColor(SkyWarsTD, 255);
	TextDrawSetShadow(SkyWarsTD, 0);
	TextDrawSetOutline(SkyWarsTD, 1);
	TextDrawBackgroundColor(SkyWarsTD, 255);
	TextDrawFont(SkyWarsTD, 1);
	TextDrawSetProportional(SkyWarsTD, 1);
	TextDrawSetShadow(SkyWarsTD, 0);

	PhoneTD[0] = TextDrawCreate(535.0000, 200.0000, "Box");
	TextDrawLetterSize(PhoneTD[0], 0.0000, 23.4165);
	TextDrawTextSize(PhoneTD[0], 0.0000, 105.0000);
	TextDrawAlignment(PhoneTD[0], 2);
	TextDrawColor(PhoneTD[0], -1);
	TextDrawUseBox(PhoneTD[0], 1);
	TextDrawBoxColor(PhoneTD[0], 200);
	TextDrawBackgroundColor(PhoneTD[0], 255);
	TextDrawFont(PhoneTD[0], 1);
	TextDrawSetProportional(PhoneTD[0], 1);
	TextDrawSetShadow(PhoneTD[0], 0);

	PhoneTD[1] = TextDrawCreate(483.0000, 205.0000, "Box");
	TextDrawLetterSize(PhoneTD[1], 0.0000, 22.2082);
	TextDrawTextSize(PhoneTD[1], 0.0000, -1.0000);
	TextDrawAlignment(PhoneTD[1], 2);
	TextDrawColor(PhoneTD[1], 255);
	TextDrawUseBox(PhoneTD[1], 1);
	TextDrawBoxColor(PhoneTD[1], 8388863);
	TextDrawBackgroundColor(PhoneTD[1], 8388863);
	TextDrawFont(PhoneTD[1], 1);
	TextDrawSetProportional(PhoneTD[1], 1);
	TextDrawSetShadow(PhoneTD[1], 0);

	PhoneTD[2] = TextDrawCreate(587.0000, 205.0000, "Box");
	TextDrawLetterSize(PhoneTD[2], 0.0000, 22.2082);
	TextDrawTextSize(PhoneTD[2], 0.0000, -1.0000);
	TextDrawAlignment(PhoneTD[2], 2);
	TextDrawColor(PhoneTD[2], 255);
	TextDrawUseBox(PhoneTD[2], 1);
	TextDrawBoxColor(PhoneTD[2], 8388863);
	TextDrawBackgroundColor(PhoneTD[2], 8388863);
	TextDrawFont(PhoneTD[2], 1);
	TextDrawSetProportional(PhoneTD[2], 1);
	TextDrawSetShadow(PhoneTD[2], 0);

	PhoneTD[3] = TextDrawCreate(535.0000, 200.0000, "OG-Phone");
	TextDrawLetterSize(PhoneTD[3], 0.2524, 1.0814);
	TextDrawTextSize(PhoneTD[3], 0.0000, 44.0000);
	TextDrawAlignment(PhoneTD[3], 2);
	TextDrawColor(PhoneTD[3], -1);
	TextDrawSetOutline(PhoneTD[3], -1);
	TextDrawBackgroundColor(PhoneTD[3], 255);
	TextDrawFont(PhoneTD[3], 1);
	TextDrawSetProportional(PhoneTD[3], 1);
	TextDrawSetShadow(PhoneTD[3], 0);

	PhoneTD[4] = TextDrawCreate(522.0000, 385.0000, "LD_BEAT:cring");
	TextDrawTextSize(PhoneTD[4], 25.0000, 25.0000);
	TextDrawAlignment(PhoneTD[4], 1);
	TextDrawColor(PhoneTD[4], 8388863);
	TextDrawBackgroundColor(PhoneTD[4], 255);
	TextDrawFont(PhoneTD[4], 4);
	TextDrawSetProportional(PhoneTD[4], 0);
	TextDrawSetShadow(PhoneTD[4], 0);
	TextDrawSetSelectable(PhoneTD[4], true);

	PhoneTD[5] = TextDrawCreate(500.0000, 215.0000, "Box");
	TextDrawLetterSize(PhoneTD[5], 0.0000, 3.0000);
	TextDrawTextSize(PhoneTD[5], 0.0000, 25.0000);
	TextDrawAlignment(PhoneTD[5], 2);
	TextDrawColor(PhoneTD[5], -1);
	TextDrawUseBox(PhoneTD[5], 1);
	TextDrawBoxColor(PhoneTD[5], 8388683);
	TextDrawBackgroundColor(PhoneTD[5], 255);
	TextDrawFont(PhoneTD[5], 1);
	TextDrawSetProportional(PhoneTD[5], 1);
	TextDrawSetShadow(PhoneTD[5], 0);

	PhoneTD[6] = TextDrawCreate(535.0000, 215.0000, "Box");
	TextDrawLetterSize(PhoneTD[6], 0.0000, 3.0000);
	TextDrawTextSize(PhoneTD[6], 0.0000, 25.0000);
	TextDrawAlignment(PhoneTD[6], 2);
	TextDrawColor(PhoneTD[6], -1);
	TextDrawUseBox(PhoneTD[6], 1);
	TextDrawBoxColor(PhoneTD[6], 8388683);
	TextDrawBackgroundColor(PhoneTD[6], 255);
	TextDrawFont(PhoneTD[6], 1);
	TextDrawSetProportional(PhoneTD[6], 1);
	TextDrawSetShadow(PhoneTD[6], 0);

	PhoneTD[7] = TextDrawCreate(570.0000, 215.0000, "Box");
	TextDrawLetterSize(PhoneTD[7], 0.0000, 3.0000);
	TextDrawTextSize(PhoneTD[7], 0.0000, 25.0000);
	TextDrawAlignment(PhoneTD[7], 2);
	TextDrawColor(PhoneTD[7], -1);
	TextDrawUseBox(PhoneTD[7], 1);
	TextDrawBoxColor(PhoneTD[7], 8388683);
	TextDrawBackgroundColor(PhoneTD[7], 255);
	TextDrawFont(PhoneTD[7], 1);
	TextDrawSetProportional(PhoneTD[7], 1);
	TextDrawSetShadow(PhoneTD[7], 0);

	PhoneTD[8] = TextDrawCreate(500.0000, 253.0000, "Box");
	TextDrawLetterSize(PhoneTD[8], 0.0000, 3.0000);
	TextDrawTextSize(PhoneTD[8], 0.0000, 25.0000);
	TextDrawAlignment(PhoneTD[8], 2);
	TextDrawColor(PhoneTD[8], -1);
	TextDrawUseBox(PhoneTD[8], 1);
	TextDrawBoxColor(PhoneTD[8], 8388683);
	TextDrawBackgroundColor(PhoneTD[8], 255);
	TextDrawFont(PhoneTD[8], 1);
	TextDrawSetProportional(PhoneTD[8], 1);
	TextDrawSetShadow(PhoneTD[8], 0);

	PhoneTD[9] = TextDrawCreate(535.0000, 253.0000, "Box");
	TextDrawLetterSize(PhoneTD[9], 0.0000, 3.0000);
	TextDrawTextSize(PhoneTD[9], 0.0000, 25.0000);
	TextDrawAlignment(PhoneTD[9], 2);
	TextDrawColor(PhoneTD[9], -1);
	TextDrawUseBox(PhoneTD[9], 1);
	TextDrawBoxColor(PhoneTD[9], 8388683);
	TextDrawBackgroundColor(PhoneTD[9], 255);
	TextDrawFont(PhoneTD[9], 1);
	TextDrawSetProportional(PhoneTD[9], 1);
	TextDrawSetShadow(PhoneTD[9], 0);

	PhoneTD[10] = TextDrawCreate(570.0000, 253.0000, "Box");
	TextDrawLetterSize(PhoneTD[10], 0.0000, 3.0000);
	TextDrawTextSize(PhoneTD[10], 0.0000, 25.0000);
	TextDrawAlignment(PhoneTD[10], 2);
	TextDrawColor(PhoneTD[10], -1);
	TextDrawUseBox(PhoneTD[10], 1);
	TextDrawBoxColor(PhoneTD[10], 8388683);
	TextDrawBackgroundColor(PhoneTD[10], 255);
	TextDrawFont(PhoneTD[10], 1);
	TextDrawSetProportional(PhoneTD[10], 1);
	TextDrawSetShadow(PhoneTD[10], 0);

	PhoneTD[11] = TextDrawCreate(469.1665, 206.8518, "");
	TextDrawTextSize(PhoneTD[11], 45.0000, 45.0000);
	TextDrawAlignment(PhoneTD[11], 1);
	TextDrawColor(PhoneTD[11], -1);
	TextDrawFont(PhoneTD[11], 5);
	TextDrawSetProportional(PhoneTD[11], 0);
	TextDrawSetShadow(PhoneTD[11], 0);
	TextDrawSetSelectable(PhoneTD[11], true);
	TextDrawSetPreviewModel(PhoneTD[11], 18871);
	TextDrawSetPreviewRot(PhoneTD[11], 90.0000, 180.0000, 0.0000, 1.0000);
	TextDrawBackgroundColor(PhoneTD[11], 0);

	PhoneTD[12] = TextDrawCreate(523.7500, 215.6665, "LD_CHAT:badchat");
	TextDrawTextSize(PhoneTD[12], 22.0000, 23.0000);
	TextDrawAlignment(PhoneTD[12], 1);
	TextDrawColor(PhoneTD[12], -1);
	TextDrawBackgroundColor(PhoneTD[12], 255);
	TextDrawFont(PhoneTD[12], 4);
	TextDrawSetProportional(PhoneTD[12], 0);
	TextDrawSetShadow(PhoneTD[12], 0);
	TextDrawSetSelectable(PhoneTD[12], true);

	PhoneTD[13] = TextDrawCreate(557.0833, 214.6295, "hud:radar_gangG");
	TextDrawTextSize(PhoneTD[13], 25.0000, 25.0000);
	TextDrawAlignment(PhoneTD[13], 1);
	TextDrawColor(PhoneTD[13], -1);
	TextDrawBackgroundColor(PhoneTD[13], 255);
	TextDrawFont(PhoneTD[13], 4);
	TextDrawSetProportional(PhoneTD[13], 0);
	TextDrawSetShadow(PhoneTD[13], 0);
	TextDrawSetSelectable(PhoneTD[13], true);

	PhoneTD[14] = TextDrawCreate(486.6668, 252.4813, "hud:radar_SWEET");
	TextDrawTextSize(PhoneTD[14], 25.0000, 25.0000);
	TextDrawAlignment(PhoneTD[14], 1);
	TextDrawColor(PhoneTD[14], -1);
	TextDrawBackgroundColor(PhoneTD[14], 255);
	TextDrawFont(PhoneTD[14], 4);
	TextDrawSetProportional(PhoneTD[14], 0);
	TextDrawSetShadow(PhoneTD[14], 0);
	TextDrawSetSelectable(PhoneTD[14], true);

	PhoneTD[15] = TextDrawCreate(522.5003, 250.4073, "hud:radar_impound");
	TextDrawTextSize(PhoneTD[15], 25.0000, 25.0000);
	TextDrawAlignment(PhoneTD[15], 1);
	TextDrawColor(PhoneTD[15], -1);
	TextDrawBackgroundColor(PhoneTD[15], 255);
	TextDrawFont(PhoneTD[15], 4);
	TextDrawSetProportional(PhoneTD[15], 0);
	TextDrawSetShadow(PhoneTD[15], 0);
	TextDrawSetSelectable(PhoneTD[15], true);

	PhoneTD[16] = TextDrawCreate(557.9168, 252.4815, "hud:radar_qmark");
	TextDrawTextSize(PhoneTD[16], 25.0000, 25.0000);
	TextDrawAlignment(PhoneTD[16], 1);
	TextDrawColor(PhoneTD[16], -1);
	TextDrawBackgroundColor(PhoneTD[16], 255);
	TextDrawFont(PhoneTD[16], 4);
	TextDrawSetProportional(PhoneTD[16], 0);
	TextDrawSetShadow(PhoneTD[16], 0);
	TextDrawSetSelectable(PhoneTD[16], true);

	PhoneTD[17] = TextDrawCreate(499.1666, 236.5812, "Call");
	TextDrawLetterSize(PhoneTD[17], 0.2524, 1.0814);
	TextDrawTextSize(PhoneTD[17], 0.0000, 44.0000);
	TextDrawAlignment(PhoneTD[17], 2);
	TextDrawColor(PhoneTD[17], -1);
	TextDrawSetOutline(PhoneTD[17], -1);
	TextDrawBackgroundColor(PhoneTD[17], 255);
	TextDrawFont(PhoneTD[17], 1);
	TextDrawSetProportional(PhoneTD[17], 1);
	TextDrawSetShadow(PhoneTD[17], 0);

	PhoneTD[18] = TextDrawCreate(533.7500, 236.8811, "Sms");
	TextDrawLetterSize(PhoneTD[18], 0.2524, 1.0814);
	TextDrawTextSize(PhoneTD[18], 0.0000, 44.0000);
	TextDrawAlignment(PhoneTD[18], 2);
	TextDrawColor(PhoneTD[18], -1);
	TextDrawSetOutline(PhoneTD[18], -1);
	TextDrawBackgroundColor(PhoneTD[18], 255);
	TextDrawFont(PhoneTD[18], 1);
	TextDrawSetProportional(PhoneTD[18], 1);
	TextDrawSetShadow(PhoneTD[18], 0);

	PhoneTD[19] = TextDrawCreate(569.5833, 236.8148, "Lester");
	TextDrawLetterSize(PhoneTD[19], 0.2324, 1.0814);
	TextDrawTextSize(PhoneTD[19], 0.0000, 44.0000);
	TextDrawAlignment(PhoneTD[19], 2);
	TextDrawColor(PhoneTD[19], -1);
	TextDrawSetOutline(PhoneTD[19], -1);
	TextDrawBackgroundColor(PhoneTD[19], 255);
	TextDrawFont(PhoneTD[19], 1);
	TextDrawSetProportional(PhoneTD[19], 1);
	TextDrawSetShadow(PhoneTD[19], 0);

	PhoneTD[20] = TextDrawCreate(500.0834, 274.2885, "Service");
	TextDrawLetterSize(PhoneTD[20], 0.2524, 1.0814);
	TextDrawTextSize(PhoneTD[20], 0.0000, 44.0000);
	TextDrawAlignment(PhoneTD[20], 2);
	TextDrawColor(PhoneTD[20], -1);
	TextDrawSetOutline(PhoneTD[20], -1);
	TextDrawBackgroundColor(PhoneTD[20], 255);
	TextDrawFont(PhoneTD[20], 1);
	TextDrawSetProportional(PhoneTD[20], 1);
	TextDrawSetShadow(PhoneTD[20], 0);

	PhoneTD[21] = TextDrawCreate(535.0833, 274.8070, "Dealership");
	TextDrawLetterSize(PhoneTD[21], 0.2264, 1.0814);
	TextDrawTextSize(PhoneTD[21], 0.0000, 44.0000);
	TextDrawAlignment(PhoneTD[21], 2);
	TextDrawColor(PhoneTD[21], -1);
	TextDrawSetOutline(PhoneTD[21], -1);
	TextDrawBackgroundColor(PhoneTD[21], 255);
	TextDrawFont(PhoneTD[21], 1);
	TextDrawSetProportional(PhoneTD[21], 1);
	TextDrawSetShadow(PhoneTD[21], 0);

	PhoneTD[22] = TextDrawCreate(570.0833, 274.8070, "Settings");
	TextDrawLetterSize(PhoneTD[22], 0.2344, 1.0814);
	TextDrawTextSize(PhoneTD[22], 0.0000, 44.0000);
	TextDrawAlignment(PhoneTD[22], 2);
	TextDrawColor(PhoneTD[22], -1);
	TextDrawSetOutline(PhoneTD[22], -1);
	TextDrawBackgroundColor(PhoneTD[22], 255);
	TextDrawFont(PhoneTD[22], 1);
	TextDrawSetProportional(PhoneTD[22], 1);
	TextDrawSetShadow(PhoneTD[22], 0);

	PinTD[0] = TextDrawCreate(325.000000, 150.000000, "box");
	TextDrawLetterSize(PinTD[0], 0.000000, 20.000000);
	TextDrawTextSize(PinTD[0], 0.000000, 120.000000);
	TextDrawAlignment(PinTD[0], 2);
	TextDrawColor(PinTD[0], -1);
	TextDrawUseBox(PinTD[0], 1);
	TextDrawBoxColor(PinTD[0], 150);
	TextDrawSetShadow(PinTD[0], 0);
	TextDrawBackgroundColor(PinTD[0], 255);
	TextDrawFont(PinTD[0], 1);
	TextDrawSetProportional(PinTD[0], 1);

	PinTD[1] = TextDrawCreate(285.000000, 195.000000, "1");
	TextDrawLetterSize(PinTD[1], 1.000000, 3.000000);
	TextDrawTextSize(PinTD[1], 25.000000, 35.000000);
	TextDrawAlignment(PinTD[1], 2);
	TextDrawColor(PinTD[1], -1);
	TextDrawUseBox(PinTD[1], 1);
	TextDrawBoxColor(PinTD[1], 255);
	TextDrawSetShadow(PinTD[1], 0);
	TextDrawSetOutline(PinTD[1], 1);
	TextDrawBackgroundColor(PinTD[1], 255);
	TextDrawFont(PinTD[1], 3);
	TextDrawSetProportional(PinTD[1], 1);
	TextDrawSetSelectable(PinTD[1], true);

	PinTD[2] = TextDrawCreate(325.000000, 195.000000, "2");
	TextDrawLetterSize(PinTD[2], 1.000000, 3.000000);
	TextDrawTextSize(PinTD[2], 25.000000, 35.000000);
	TextDrawAlignment(PinTD[2], 2);
	TextDrawColor(PinTD[2], -1);
	TextDrawUseBox(PinTD[2], 1);
	TextDrawBoxColor(PinTD[2], 255);
	TextDrawSetShadow(PinTD[2], 0);
	TextDrawSetOutline(PinTD[2], 1);
	TextDrawBackgroundColor(PinTD[2], 255);
	TextDrawFont(PinTD[2], 3);
	TextDrawSetProportional(PinTD[2], 1);
	TextDrawSetSelectable(PinTD[2], true);

	PinTD[3] = TextDrawCreate(365.000000, 195.000000, "3");
	TextDrawLetterSize(PinTD[3], 1.000000, 3.000000);
	TextDrawTextSize(PinTD[3], 25.000000, 35.000000);
	TextDrawAlignment(PinTD[3], 2);
	TextDrawColor(PinTD[3], -1);
	TextDrawUseBox(PinTD[3], 1);
	TextDrawBoxColor(PinTD[3], 255);
	TextDrawSetShadow(PinTD[3], 0);
	TextDrawSetOutline(PinTD[3], 1);
	TextDrawBackgroundColor(PinTD[3], 255);
	TextDrawFont(PinTD[3], 3);
	TextDrawSetProportional(PinTD[3], 1);
	TextDrawSetSelectable(PinTD[3], true);

	PinTD[4] = TextDrawCreate(285.000000, 228.000000, "4");
	TextDrawLetterSize(PinTD[4], 1.000000, 3.000000);
	TextDrawTextSize(PinTD[4], 25.000000, 35.000000);
	TextDrawAlignment(PinTD[4], 2);
	TextDrawColor(PinTD[4], -1);
	TextDrawUseBox(PinTD[4], 1);
	TextDrawBoxColor(PinTD[4], 255);
	TextDrawSetShadow(PinTD[4], 0);
	TextDrawSetOutline(PinTD[4], 1);
	TextDrawBackgroundColor(PinTD[4], 255);
	TextDrawFont(PinTD[4], 3);
	TextDrawSetProportional(PinTD[4], 1);
	TextDrawSetSelectable(PinTD[4], true);

	PinTD[5] = TextDrawCreate(325.000000, 228.000000, "5");
	TextDrawLetterSize(PinTD[5], 1.000000, 3.000000);
	TextDrawTextSize(PinTD[5], 25.000000, 35.000000);
	TextDrawAlignment(PinTD[5], 2);
	TextDrawColor(PinTD[5], -1);
	TextDrawUseBox(PinTD[5], 1);
	TextDrawBoxColor(PinTD[5], 255);
	TextDrawSetShadow(PinTD[5], 0);
	TextDrawSetOutline(PinTD[5], 1);
	TextDrawBackgroundColor(PinTD[5], 255);
	TextDrawFont(PinTD[5], 3);
	TextDrawSetProportional(PinTD[5], 1);
	TextDrawSetSelectable(PinTD[5], true);

	PinTD[6] = TextDrawCreate(365.000000, 228.000000, "6");
	TextDrawLetterSize(PinTD[6], 1.000000, 3.000000);
	TextDrawTextSize(PinTD[6], 25.000000, 35.000000);
	TextDrawAlignment(PinTD[6], 2);
	TextDrawColor(PinTD[6], -1);
	TextDrawUseBox(PinTD[6], 1);
	TextDrawBoxColor(PinTD[6], 255);
	TextDrawSetShadow(PinTD[6], 0);
	TextDrawSetOutline(PinTD[6], 1);
	TextDrawBackgroundColor(PinTD[6], 255);
	TextDrawFont(PinTD[6], 3);
	TextDrawSetProportional(PinTD[6], 1);
	TextDrawSetSelectable(PinTD[6], true);

	PinTD[7] = TextDrawCreate(285.000000, 261.000000, "7");
	TextDrawLetterSize(PinTD[7], 1.000000, 3.000000);
	TextDrawTextSize(PinTD[7], 25.000000, 35.000000);
	TextDrawAlignment(PinTD[7], 2);
	TextDrawColor(PinTD[7], -1);
	TextDrawUseBox(PinTD[7], 1);
	TextDrawBoxColor(PinTD[7], 255);
	TextDrawSetShadow(PinTD[7], 0);
	TextDrawSetOutline(PinTD[7], 1);
	TextDrawBackgroundColor(PinTD[7], 255);
	TextDrawFont(PinTD[7], 3);
	TextDrawSetProportional(PinTD[7], 1);
	TextDrawSetSelectable(PinTD[7], true);

	PinTD[8] = TextDrawCreate(325.000000, 261.000000, "8");
	TextDrawLetterSize(PinTD[8], 1.000000, 3.000000);
	TextDrawTextSize(PinTD[8], 25.000000, 35.000000);
	TextDrawAlignment(PinTD[8], 2);
	TextDrawColor(PinTD[8], -1);
	TextDrawUseBox(PinTD[8], 1);
	TextDrawBoxColor(PinTD[8], 255);
	TextDrawSetShadow(PinTD[8], 0);
	TextDrawSetOutline(PinTD[8], 1);
	TextDrawBackgroundColor(PinTD[8], 255);
	TextDrawFont(PinTD[8], 3);
	TextDrawSetProportional(PinTD[8], 1);
	TextDrawSetSelectable(PinTD[8], true);

	PinTD[9] = TextDrawCreate(365.000000, 261.000000, "9");
	TextDrawLetterSize(PinTD[9], 1.000000, 3.000000);
	TextDrawTextSize(PinTD[9], 25.000000, 35.000000);
	TextDrawAlignment(PinTD[9], 2);
	TextDrawColor(PinTD[9], -1);
	TextDrawUseBox(PinTD[9], 1);
	TextDrawBoxColor(PinTD[9], 255);
	TextDrawSetShadow(PinTD[9], 0);
	TextDrawSetOutline(PinTD[9], 1);
	TextDrawBackgroundColor(PinTD[9], 255);
	TextDrawFont(PinTD[9], 3);
	TextDrawSetProportional(PinTD[9], 1);
	TextDrawSetSelectable(PinTD[9], true);

	PinTD[10] = TextDrawCreate(325.000000, 293.000000, "0");
	TextDrawLetterSize(PinTD[10], 1.000000, 3.000000);
	TextDrawTextSize(PinTD[10], 25.000000, 35.000000);
	TextDrawAlignment(PinTD[10], 2);
	TextDrawColor(PinTD[10], -1);
	TextDrawUseBox(PinTD[10], 1);
	TextDrawBoxColor(PinTD[10], 255);
	TextDrawSetShadow(PinTD[10], 0);
	TextDrawSetOutline(PinTD[10], 1);
	TextDrawBackgroundColor(PinTD[10], 255);
	TextDrawFont(PinTD[10], 3);
	TextDrawSetProportional(PinTD[10], 1);
	TextDrawSetSelectable(PinTD[10], true);

	PinTD[11] = TextDrawCreate(350.000000, 293.000000, "LD_BEAT:right");
	TextDrawTextSize(PinTD[11], 30.000000, 30.000000);
	TextDrawAlignment(PinTD[11], 1);
	TextDrawColor(PinTD[11], -1);
	TextDrawSetShadow(PinTD[11], 0);
	TextDrawBackgroundColor(PinTD[11], 255);
	TextDrawFont(PinTD[11], 4);
	TextDrawSetProportional(PinTD[11], 0);
	TextDrawSetSelectable(PinTD[11], true);

	PinTD[12] = TextDrawCreate(270.000000, 293.000000, "LD_BEAT:cross");
	TextDrawTextSize(PinTD[12], 30.000000, 30.000000);
	TextDrawAlignment(PinTD[12], 1);
	TextDrawColor(PinTD[12], -1);
	TextDrawSetShadow(PinTD[12], 0);
	TextDrawBackgroundColor(PinTD[12], 255);
	TextDrawFont(PinTD[12], 4);
	TextDrawSetProportional(PinTD[12], 0);
	TextDrawSetSelectable(PinTD[12], true);

	MilestoneTD[0] = TextDrawCreate(315.000000, 155.000000, "box");
	TextDrawLetterSize(MilestoneTD[0], 0.000000, 15.000000);
	TextDrawTextSize(MilestoneTD[0], 0.000000, 300.000000);
	TextDrawAlignment(MilestoneTD[0], 2);
	TextDrawColor(MilestoneTD[0], -1);
	TextDrawUseBox(MilestoneTD[0], 1);
	TextDrawBoxColor(MilestoneTD[0], 175);
	TextDrawSetShadow(MilestoneTD[0], 0);
	TextDrawBackgroundColor(MilestoneTD[0], 255);
	TextDrawFont(MilestoneTD[0], 1);
	TextDrawSetProportional(MilestoneTD[0], 1);

	MilestoneTD[1] = TextDrawCreate(450.000000, 155.000000, "X");
	TextDrawLetterSize(MilestoneTD[1], 0.500000, 2.000000);
	TextDrawTextSize(MilestoneTD[1], 25.000000, 25.000000);
	TextDrawAlignment(MilestoneTD[1], 2);
	TextDrawColor(MilestoneTD[1], -1);
	TextDrawSetShadow(MilestoneTD[1], 0);
	TextDrawSetOutline(MilestoneTD[1], 1);
	TextDrawBackgroundColor(MilestoneTD[1], 255);
	TextDrawFont(MilestoneTD[1], 1);
	TextDrawSetProportional(MilestoneTD[1], 1);
	TextDrawSetSelectable(MilestoneTD[1], true);

	MilestoneTD[2] = TextDrawCreate(165.000000, 175.000000, "");
	TextDrawTextSize(MilestoneTD[2], 90.000000, 90.000000);
	TextDrawAlignment(MilestoneTD[2], 1);
	TextDrawColor(MilestoneTD[2], -1);
	TextDrawSetShadow(MilestoneTD[2], 0);
	TextDrawFont(MilestoneTD[2], 5);
	TextDrawSetProportional(MilestoneTD[2], 0);
	TextDrawSetPreviewModel(MilestoneTD[2], 1274);
	TextDrawSetPreviewRot(MilestoneTD[2], 0.000000, 0.000000, 0.000000, 1.000000);

	MilestoneTD[3] = TextDrawCreate(210.000000, 210.000000, "$20,000,000");
	TextDrawLetterSize(MilestoneTD[3], 0.400000, 1.600000);
	TextDrawTextSize(MilestoneTD[3], 25.000000, 100.000000);
	TextDrawAlignment(MilestoneTD[3], 2);
	TextDrawColor(MilestoneTD[3], -1);
	TextDrawSetShadow(MilestoneTD[3], 0);
	TextDrawSetOutline(MilestoneTD[3], -1);
	TextDrawBackgroundColor(MilestoneTD[3], 255);
	TextDrawFont(MilestoneTD[3], 1);
	TextDrawSetProportional(MilestoneTD[3], 1);
	TextDrawSetSelectable(MilestoneTD[3], true);

	MilestoneTD[4] = TextDrawCreate(265.000000, 175.000000, "");
	TextDrawTextSize(MilestoneTD[4], 90.000000, 90.000000);
	TextDrawAlignment(MilestoneTD[4], 1);
	TextDrawColor(MilestoneTD[4], -1);
	TextDrawSetShadow(MilestoneTD[4], 0);
	TextDrawFont(MilestoneTD[4], 5);
	TextDrawSetProportional(MilestoneTD[4], 0);
	TextDrawSetPreviewModel(MilestoneTD[4], 1240);
	TextDrawSetPreviewRot(MilestoneTD[4], 0.000000, 0.000000, 0.000000, 1.000000);

	MilestoneTD[5] = TextDrawCreate(310.000000, 210.000000, "10PP");
	TextDrawLetterSize(MilestoneTD[5], 0.400000, 1.600000);
	TextDrawTextSize(MilestoneTD[5], 25.000000, 50.000000);
	TextDrawAlignment(MilestoneTD[5], 2);
	TextDrawColor(MilestoneTD[5], -1);
	TextDrawSetShadow(MilestoneTD[5], 0);
	TextDrawSetOutline(MilestoneTD[5], -1);
	TextDrawBackgroundColor(MilestoneTD[5], 255);
	TextDrawFont(MilestoneTD[5], 1);
	TextDrawSetProportional(MilestoneTD[5], 1);
	TextDrawSetSelectable(MilestoneTD[5], true);

	MilestoneTD[6] = TextDrawCreate(370.000000, 175.000000, "");
	TextDrawTextSize(MilestoneTD[6], 90.000000, 90.000000);
	TextDrawAlignment(MilestoneTD[6], 1);
	TextDrawColor(MilestoneTD[6], -1);
	TextDrawSetShadow(MilestoneTD[6], 0);
	TextDrawFont(MilestoneTD[6], 5);
	TextDrawSetProportional(MilestoneTD[6], 0);
	TextDrawSetPreviewModel(MilestoneTD[6], 1895);
	TextDrawSetPreviewRot(MilestoneTD[6], 0.000000, 0.000000, 0.000000, 1.000000);

	MilestoneTD[7] = TextDrawCreate(415.000000, 210.000000, "500 Spin Points");
	TextDrawLetterSize(MilestoneTD[7], 0.400000, 1.600000);
	TextDrawTextSize(MilestoneTD[7], 25.000000, 100.000000);
	TextDrawAlignment(MilestoneTD[7], 2);
	TextDrawColor(MilestoneTD[7], -1);
	TextDrawSetShadow(MilestoneTD[7], 0);
	TextDrawSetOutline(MilestoneTD[7], -1);
	TextDrawBackgroundColor(MilestoneTD[7], 255);
	TextDrawFont(MilestoneTD[7], 1);
	TextDrawSetProportional(MilestoneTD[7], 1);
	TextDrawSetSelectable(MilestoneTD[7], true);

	RuletaTD[0] = TextDrawCreate(315.000000, 150.000000, "box");
	TextDrawLetterSize(RuletaTD[0], 0.000000, 15.000000);
	TextDrawTextSize(RuletaTD[0], 0.000000, 400.000000);
	TextDrawAlignment(RuletaTD[0], 2);
	TextDrawColor(RuletaTD[0], -1);
	TextDrawUseBox(RuletaTD[0], 1);
	TextDrawBoxColor(RuletaTD[0], 150);
	TextDrawSetShadow(RuletaTD[0], 0);
	TextDrawBackgroundColor(RuletaTD[0], 255);
	TextDrawFont(RuletaTD[0], 1);
	TextDrawSetProportional(RuletaTD[0], 1);

	RuletaTD[1] = TextDrawCreate(500.000000, 150.000000, "X");
	TextDrawLetterSize(RuletaTD[1], 0.400000, 1.600000);
	TextDrawTextSize(RuletaTD[1], 25.000000, 25.000000);
	TextDrawAlignment(RuletaTD[1], 2);
	TextDrawColor(RuletaTD[1], -1);
	TextDrawSetShadow(RuletaTD[1], 0);
	TextDrawBackgroundColor(RuletaTD[1], 255);
	TextDrawFont(RuletaTD[1], 1);
	TextDrawSetProportional(RuletaTD[1], 1);
	TextDrawSetSelectable(RuletaTD[1], true);

	RuletaTD[2] = TextDrawCreate(165.000000, 270.000000, "Negru(x2)");
	TextDrawLetterSize(RuletaTD[2], 0.400000, 1.600000);
	TextDrawTextSize(RuletaTD[2], 25.000000, 100.000000);
	TextDrawAlignment(RuletaTD[2], 2);
	TextDrawColor(RuletaTD[2], -1);
	TextDrawUseBox(RuletaTD[2], 1);
	TextDrawBoxColor(RuletaTD[2], 255);
	TextDrawSetShadow(RuletaTD[2], 0);
	TextDrawBackgroundColor(RuletaTD[2], 255);
	TextDrawFont(RuletaTD[2], 1);
	TextDrawSetProportional(RuletaTD[2], 1);
	TextDrawSetSelectable(RuletaTD[2], true);

	RuletaTD[3] = TextDrawCreate(315.000000, 270.000000, "Rosu(x2)");
	TextDrawLetterSize(RuletaTD[3], 0.400000, 1.600000);
	TextDrawTextSize(RuletaTD[3], 25.000000, 100.000000);
	TextDrawAlignment(RuletaTD[3], 2);
	TextDrawColor(RuletaTD[3], -1);
	TextDrawUseBox(RuletaTD[3], 1);
	TextDrawBoxColor(RuletaTD[3], 1677721855);
	TextDrawSetShadow(RuletaTD[3], 0);
	TextDrawBackgroundColor(RuletaTD[3], 255);
	TextDrawFont(RuletaTD[3], 1);
	TextDrawSetProportional(RuletaTD[3], 1);
	TextDrawSetSelectable(RuletaTD[3], true);

	RuletaTD[4] = TextDrawCreate(465.000000, 270.000000, "Verde(x6)");
	TextDrawLetterSize(RuletaTD[4], 0.400000, 1.600000);
	TextDrawTextSize(RuletaTD[4], 25.000000, 100.000000);
	TextDrawAlignment(RuletaTD[4], 2);
	TextDrawColor(RuletaTD[4], -1);
	TextDrawUseBox(RuletaTD[4], 1);
	TextDrawBoxColor(RuletaTD[4], 6553855);
	TextDrawSetShadow(RuletaTD[4], 0);
	TextDrawBackgroundColor(RuletaTD[4], 255);
	TextDrawFont(RuletaTD[4], 1);
	TextDrawSetProportional(RuletaTD[4], 1);
	TextDrawSetSelectable(RuletaTD[4], true);

	RuletaTD[5] = TextDrawCreate(130.000000, 165.000000, "box");
	TextDrawLetterSize(RuletaTD[5], 0.000000, 7.000000);
	TextDrawTextSize(RuletaTD[5], 191.583282, 0.000000);
	TextDrawAlignment(RuletaTD[5], 1);
	TextDrawColor(RuletaTD[5], -1);
	TextDrawUseBox(RuletaTD[5], 1);
	TextDrawBoxColor(RuletaTD[5], 255);
	TextDrawSetShadow(RuletaTD[5], 0);
	TextDrawBackgroundColor(RuletaTD[5], 255);
	TextDrawFont(RuletaTD[5], 1);
	TextDrawSetProportional(RuletaTD[5], 1);

	RuletaTD[6] = TextDrawCreate(205.000000, 165.000000, "box");
	TextDrawLetterSize(RuletaTD[6], 0.000000, 7.000000);
	TextDrawTextSize(RuletaTD[6], 266.166656, 0.000000);
	TextDrawAlignment(RuletaTD[6], 1);
	TextDrawColor(RuletaTD[6], -1);
	TextDrawUseBox(RuletaTD[6], 1);
	TextDrawBoxColor(RuletaTD[6], 255);
	TextDrawSetShadow(RuletaTD[6], 0);
	TextDrawBackgroundColor(RuletaTD[6], 255);
	TextDrawFont(RuletaTD[6], 1);
	TextDrawSetProportional(RuletaTD[6], 1);

	RuletaTD[7] = TextDrawCreate(280.000000, 165.000000, "box");
	TextDrawLetterSize(RuletaTD[7], 0.000000, 7.000000);
	TextDrawTextSize(RuletaTD[7], 341.166656, 0.000000);
	TextDrawAlignment(RuletaTD[7], 1);
	TextDrawColor(RuletaTD[7], -1);
	TextDrawUseBox(RuletaTD[7], 1);
	TextDrawBoxColor(RuletaTD[7], 255);
	TextDrawSetShadow(RuletaTD[7], 0);
	TextDrawBackgroundColor(RuletaTD[7], 255);
	TextDrawFont(RuletaTD[7], 1);
	TextDrawSetProportional(RuletaTD[7], 1);

	RuletaTD[8] = TextDrawCreate(355.000000, 165.000000, "box");
	TextDrawLetterSize(RuletaTD[8], 0.000000, 7.000000);
	TextDrawTextSize(RuletaTD[8], 416.166656, 0.000000);
	TextDrawAlignment(RuletaTD[8], 1);
	TextDrawColor(RuletaTD[8], -1);
	TextDrawUseBox(RuletaTD[8], 1);
	TextDrawBoxColor(RuletaTD[8], 255);
	TextDrawSetShadow(RuletaTD[8], 0);
	TextDrawBackgroundColor(RuletaTD[8], 255);
	TextDrawFont(RuletaTD[8], 1);
	TextDrawSetProportional(RuletaTD[8], 1);

	RuletaTD[9] = TextDrawCreate(430.000000, 165.000000, "box");
	TextDrawLetterSize(RuletaTD[9], 0.000000, 7.000000);
	TextDrawTextSize(RuletaTD[9], 491.166656, 0.000000);
	TextDrawAlignment(RuletaTD[9], 1);
	TextDrawColor(RuletaTD[9], -1);
	TextDrawUseBox(RuletaTD[9], 1);
	TextDrawBoxColor(RuletaTD[9], 255);
	TextDrawSetShadow(RuletaTD[9], 0);
	TextDrawBackgroundColor(RuletaTD[9], 255);
	TextDrawFont(RuletaTD[9], 1);
	TextDrawSetProportional(RuletaTD[9], 1);

	RuletaTD[10] = TextDrawCreate(310.000000, 150.000000, "box");
	TextDrawLetterSize(RuletaTD[10], 0.000000, 10.000000);
	TextDrawTextSize(RuletaTD[10], 0.000000, 1.000000);
	TextDrawAlignment(RuletaTD[10], 2);
	TextDrawColor(RuletaTD[10], -1);
	TextDrawUseBox(RuletaTD[10], 1);
	TextDrawBoxColor(RuletaTD[10], -1);
	TextDrawSetShadow(RuletaTD[10], 0);
	TextDrawBackgroundColor(RuletaTD[10], 255);
	TextDrawFont(RuletaTD[10], 1);
	TextDrawSetProportional(RuletaTD[10], 1);

	RuletaTD[11] = TextDrawCreate(315.833282, 250.666702, "Se asteapta pariuri...");
	TextDrawLetterSize(RuletaTD[11], 0.400000, 1.600000);
	TextDrawTextSize(RuletaTD[11], 0.000000, 200.000000);
	TextDrawAlignment(RuletaTD[11], 2);
	TextDrawColor(RuletaTD[11], -1);
	TextDrawSetShadow(RuletaTD[11], 0);
	TextDrawSetOutline(RuletaTD[11], -1);
	TextDrawBackgroundColor(RuletaTD[11], 255);
	TextDrawFont(RuletaTD[11], 1);
	TextDrawSetProportional(RuletaTD[11], 1);

	GlobalGoalTD = TextDrawCreate(323.000000, 425.000000, "0$ / 1,000,000,000$");
	TextDrawFont(GlobalGoalTD, 1);
	TextDrawLetterSize(GlobalGoalTD, 0.204166, 1.000000);
	TextDrawTextSize(GlobalGoalTD, 400.000000, 150.000000);
	TextDrawSetOutline(GlobalGoalTD, 1);
	TextDrawSetShadow(GlobalGoalTD, 0);
	TextDrawAlignment(GlobalGoalTD, 2);
	TextDrawColor(GlobalGoalTD, -1);
	TextDrawBackgroundColor(GlobalGoalTD, 255);
	TextDrawBoxColor(GlobalGoalTD, 50);
	TextDrawUseBox(GlobalGoalTD, 0);
	TextDrawSetProportional(GlobalGoalTD, 1);
	TextDrawSetSelectable(GlobalGoalTD, 0);

	BGTD[0] = TextDrawCreate(315.300140, 282.750091, "box");
	TextDrawLetterSize(BGTD[0], 0.000000, 14.122985);
	TextDrawTextSize(BGTD[0], 0.000000, 238.000000);
	TextDrawAlignment(BGTD[0], 2);
	TextDrawColor(BGTD[0], -1);
	TextDrawUseBox(BGTD[0], 1);
	TextDrawBoxColor(BGTD[0], 8388708);
	TextDrawSetShadow(BGTD[0], 0);
	TextDrawSetOutline(BGTD[0], 0);
	TextDrawBackgroundColor(BGTD[0], 255);
	TextDrawFont(BGTD[0], 1);
	TextDrawSetProportional(BGTD[0], 1);
	TextDrawSetShadow(BGTD[0], 0);

	BGTD[1] = TextDrawCreate(421.654510, 279.833435, "X");
	TextDrawLetterSize(BGTD[1], 0.654406, 2.317499);
	TextDrawTextSize(BGTD[1], 438.000000, 25.000000);
	TextDrawAlignment(BGTD[1], 1);
	TextDrawColor(BGTD[1], -1);
	TextDrawSetShadow(BGTD[1], 0);
	TextDrawSetOutline(BGTD[1], 1);
	TextDrawBackgroundColor(BGTD[1], 255);
	TextDrawFont(BGTD[1], 3);
	TextDrawSetProportional(BGTD[1], 1);
	TextDrawSetShadow(BGTD[1], 0);
	TextDrawSetSelectable(BGTD[1], true);

	BGTD[2] = TextDrawCreate(190.000000, 265.000000, "");
	TextDrawLetterSize(BGTD[2], 0.000000, 0.000000);
	TextDrawTextSize(BGTD[2], 125.000000, 125.000000);
	TextDrawAlignment(BGTD[2], 1);
	TextDrawColor(BGTD[2], -1);
	TextDrawSetShadow(BGTD[2], 0);
	TextDrawSetOutline(BGTD[2], 0);
	TextDrawBackgroundColor(BGTD[2], 0);
	TextDrawFont(BGTD[2], 5);
	TextDrawSetProportional(BGTD[2], 0);
	TextDrawSetShadow(BGTD[2], 0);
	TextDrawSetSelectable(BGTD[2], true);
	TextDrawSetPreviewModel(BGTD[2], 2703);
	TextDrawSetPreviewRot(BGTD[2], -90.000000, 0.000000, -10.000000, 1.000000);

	BGTD[3] = TextDrawCreate(300.000000, 275.000000, "");
	TextDrawLetterSize(BGTD[3], 0.000000, 0.000000);
	TextDrawTextSize(BGTD[3], 125.000000, 101.000000);
	TextDrawAlignment(BGTD[3], 1);
	TextDrawColor(BGTD[3], -1);
	TextDrawSetShadow(BGTD[3], 0);
	TextDrawSetOutline(BGTD[3], 0);
	TextDrawBackgroundColor(BGTD[3], 0);
	TextDrawFont(BGTD[3], 5);
	TextDrawSetProportional(BGTD[3], 0);
	TextDrawSetShadow(BGTD[3], 0);
	TextDrawSetSelectable(BGTD[3], true);
	TextDrawSetPreviewModel(BGTD[3], 1509);
	TextDrawSetPreviewRot(BGTD[3], 0.000000, 0.000000, 0.000000, 1.000000);

	BGTD[4] = TextDrawCreate(315.000000, 390.000000, "Cumpara");
	TextDrawLetterSize(BGTD[4], 0.592093, 2.130833);
	TextDrawTextSize(BGTD[4], 20.000000, 89.000000);
	TextDrawAlignment(BGTD[4], 2);
	TextDrawColor(BGTD[4], -1);
	TextDrawSetShadow(BGTD[4], 0);
	TextDrawSetOutline(BGTD[4], 1);
	TextDrawBackgroundColor(BGTD[4], 255);
	TextDrawFont(BGTD[4], 3);
	TextDrawSetProportional(BGTD[4], 1);
	TextDrawSetShadow(BGTD[4], 0);
	TextDrawSetSelectable(BGTD[4], true);

	GunTD[0] = TextDrawCreate(320.000000, 320.000000, "box");
	TextDrawLetterSize(GunTD[0], 0.000000, 9.578331);
	TextDrawTextSize(GunTD[0], 0.000000, 233.000000);
	TextDrawAlignment(GunTD[0], 2);
	TextDrawColor(GunTD[0], -1);
	TextDrawUseBox(GunTD[0], 1);
	TextDrawBoxColor(GunTD[0], 8388716);
	TextDrawSetShadow(GunTD[0], 0);
	TextDrawSetOutline(GunTD[0], 0);
	TextDrawBackgroundColor(GunTD[0], 255);
	TextDrawFont(GunTD[0], 1);
	TextDrawSetProportional(GunTD[0], 1);
	TextDrawSetShadow(GunTD[0], 0);

	GunTD[1] = TextDrawCreate(325.000000, 325.000000, "Close");
	TextDrawLetterSize(GunTD[1], 0.633322, 1.891667);
	TextDrawTextSize(GunTD[1], 30.000000, 73.000000);
	TextDrawAlignment(GunTD[1], 2);
	TextDrawColor(GunTD[1], -1);
	TextDrawSetShadow(GunTD[1], 0);
	TextDrawSetOutline(GunTD[1], 1);
	TextDrawBackgroundColor(GunTD[1], 255);
	TextDrawFont(GunTD[1], 3);
	TextDrawSetProportional(GunTD[1], 1);
	TextDrawSetShadow(GunTD[1], 0);
	TextDrawSetSelectable(GunTD[1], true);

	GunTD[2] = TextDrawCreate(230.000000, 350.000000, "<<<");
	TextDrawLetterSize(GunTD[2], 0.400000, 1.600000);
	TextDrawTextSize(GunTD[2], 30.000000, 30.000000);
	TextDrawAlignment(GunTD[2], 2);
	TextDrawColor(GunTD[2], -1);
	TextDrawSetShadow(GunTD[2], 0);
	TextDrawSetOutline(GunTD[2], 1);
	TextDrawBackgroundColor(GunTD[2], 255);
	TextDrawFont(GunTD[2], 3);
	TextDrawSetProportional(GunTD[2], 1);
	TextDrawSetShadow(GunTD[2], 0);
	TextDrawSetSelectable(GunTD[2], true);

	GunTD[3] = TextDrawCreate(405.000000, 350.000000, ">>>");
	TextDrawLetterSize(GunTD[3], 0.400000, 1.600000);
	TextDrawTextSize(GunTD[3], 30.000000, 30.000000);
	TextDrawAlignment(GunTD[3], 2);
	TextDrawColor(GunTD[3], -1);
	TextDrawSetShadow(GunTD[3], 0);
	TextDrawSetOutline(GunTD[3], 1);
	TextDrawBackgroundColor(GunTD[3], 255);
	TextDrawFont(GunTD[3], 3);
	TextDrawSetProportional(GunTD[3], 1);
	TextDrawSetShadow(GunTD[3], 0);
	TextDrawSetSelectable(GunTD[3], true);

	TriviaTD = TextDrawCreate(317.174346, 156.750000, "box");
	TextDrawLetterSize(TriviaTD, 0.000000, 13.139090);
	TextDrawTextSize(TriviaTD, 0.000000, 455.000000);
	TextDrawAlignment(TriviaTD, 2);
	TextDrawColor(TriviaTD, -1);
	TextDrawUseBox(TriviaTD, 1);
	TextDrawBoxColor(TriviaTD, 8388688);
	TextDrawSetShadow(TriviaTD, 0);
	TextDrawSetOutline(TriviaTD, 0);
	TextDrawBackgroundColor(TriviaTD, 255);
	TextDrawFont(TriviaTD, 1);
	TextDrawSetProportional(TriviaTD, 1);
	TextDrawSetShadow(TriviaTD, 0);

	GiftTD = TextDrawCreate(217.203536, 110.333328, "LD_BEAT:chit");
	TextDrawLetterSize(GiftTD, 0.000000, 0.000000);
	TextDrawTextSize(GiftTD, 200.000000, 200.000000);
	TextDrawAlignment(GiftTD, 1);
	TextDrawColor(GiftTD, 11534426);
	TextDrawSetShadow(GiftTD, 0);
	TextDrawSetOutline(GiftTD, 0);
	TextDrawBackgroundColor(GiftTD, 255);
	TextDrawFont(GiftTD, 4);
	TextDrawSetProportional(GiftTD, 0);
	TextDrawSetShadow(GiftTD, 0);

	SpinnTD[0] = TextDrawCreate(315.490539, 134.000061, "box");
	TextDrawLetterSize(SpinnTD[0], 0.000000, 14.872619);
	TextDrawTextSize(SpinnTD[0], 0.000000, 391.000000);
	TextDrawAlignment(SpinnTD[0], 2);
	TextDrawColor(SpinnTD[0], 84215045);
	TextDrawUseBox(SpinnTD[0], 1);
	TextDrawBoxColor(SpinnTD[0], 143);
	TextDrawSetShadow(SpinnTD[0], 0);
	TextDrawSetOutline(SpinnTD[0], 0);
	TextDrawBackgroundColor(SpinnTD[0], -2139062017);
	TextDrawFont(SpinnTD[0], 1);
	TextDrawSetProportional(SpinnTD[0], 1);
	TextDrawSetShadow(SpinnTD[0], 0);

	SpinnTD[1] = TextDrawCreate(311.216400, 131.666702, "Spin");
	TextDrawLetterSize(SpinnTD[1], 0.878829, 2.463333);
	TextDrawAlignment(SpinnTD[1], 2);
	TextDrawColor(SpinnTD[1], -1);
	TextDrawSetShadow(SpinnTD[1], 0);
	TextDrawSetOutline(SpinnTD[1], 2);
	TextDrawBackgroundColor(SpinnTD[1], 255);
	TextDrawFont(SpinnTD[1], 1);
	TextDrawSetProportional(SpinnTD[1], 1);
	TextDrawSetShadow(SpinnTD[1], 0);

	SpinnTD[2] = TextDrawCreate(312.589141, 165.716674, "box");
	TextDrawLetterSize(SpinnTD[2], 0.000000, 8.781845);
	TextDrawTextSize(SpinnTD[2], 0.000000, 1.859999);
	TextDrawAlignment(SpinnTD[2], 2);
	TextDrawColor(SpinnTD[2], -1);
	TextDrawUseBox(SpinnTD[2], 1);
	TextDrawBoxColor(SpinnTD[2], 65389);
	TextDrawSetShadow(SpinnTD[2], 0);
	TextDrawSetOutline(SpinnTD[2], 0);
	TextDrawBackgroundColor(SpinnTD[2], 255);
	TextDrawFont(SpinnTD[2], 1);
	TextDrawSetProportional(SpinnTD[2], 1);
	TextDrawSetShadow(SpinnTD[2], 0);

	FishTD[0] = TextDrawCreate(254.000000, 141.000000, "LD_POOL:ball");
	TextDrawLetterSize(FishTD[0], 0.000000, 0.000000);
	TextDrawTextSize(FishTD[0], 127.000000, 134.000000);
	TextDrawAlignment(FishTD[0], 1);
	TextDrawColor(FishTD[0], 65535);
	TextDrawSetShadow(FishTD[0], 0);
	TextDrawSetOutline(FishTD[0], 0);
	TextDrawBackgroundColor(FishTD[0], 255);
	TextDrawFont(FishTD[0], 4);
	TextDrawSetProportional(FishTD[0], 0);
	TextDrawSetShadow(FishTD[0], 0);

	FishTD[1] = TextDrawCreate(294.800109, 136.000000, "Pescar");
	TextDrawLetterSize(FishTD[1], 0.167144, 1.191665);
	TextDrawAlignment(FishTD[1], 1);
	TextDrawColor(FishTD[1], -1);
	TextDrawSetShadow(FishTD[1], 0);
	TextDrawSetOutline(FishTD[1], 1);
	TextDrawBackgroundColor(FishTD[1], 255);
	TextDrawFont(FishTD[1], 3);
	TextDrawSetProportional(FishTD[1], 1);
	TextDrawSetShadow(FishTD[1], 0);

	FoodTD[0] = TextDrawCreate(230.000000, 422.000000, "HUD:radar_datefood");
	TextDrawFont(FoodTD[0], 5);
	TextDrawLetterSize(FoodTD[0], 0.600000, 2.000000);
	TextDrawTextSize(FoodTD[0], 25.000000, 25.000000);
	TextDrawSetOutline(FoodTD[0], 1);
	TextDrawSetShadow(FoodTD[0], 0);
	TextDrawAlignment(FoodTD[0], 1);
	TextDrawColor(FoodTD[0], -1);
	TextDrawBackgroundColor(FoodTD[0], 0);
	TextDrawBoxColor(FoodTD[0], 0);
	TextDrawUseBox(FoodTD[0], 1);
	TextDrawSetProportional(FoodTD[0], 1);
	TextDrawSetSelectable(FoodTD[0], 0);
	TextDrawSetPreviewModel(FoodTD[0], 2703);
	TextDrawSetPreviewRot(FoodTD[0], -90.000000, 0.000000, -10.000000, 0.750000);
	TextDrawSetPreviewVehCol(FoodTD[0], 1, 1);

	FoodTD[1] = TextDrawCreate(395.000000, 422.000000, "HUD:radar_datedrink");
	TextDrawFont(FoodTD[1], 5);
	TextDrawLetterSize(FoodTD[1], 0.600000, 2.000000);
	TextDrawTextSize(FoodTD[1], 25.000000, 25.000000);
	TextDrawSetOutline(FoodTD[1], 1);
	TextDrawSetShadow(FoodTD[1], 0);
	TextDrawAlignment(FoodTD[1], 1);
	TextDrawColor(FoodTD[1], -1);
	TextDrawBackgroundColor(FoodTD[1], 0);
	TextDrawBoxColor(FoodTD[1], 50);
	TextDrawUseBox(FoodTD[1], 1);
	TextDrawSetProportional(FoodTD[1], 1);
	TextDrawSetSelectable(FoodTD[1], 0);
	TextDrawSetPreviewModel(FoodTD[1], 1509);
	TextDrawSetPreviewRot(FoodTD[1], 0.000000, 0.000000, 0.000000, 0.850000);
	TextDrawSetPreviewVehCol(FoodTD[1], 1, 1);

	DateTD = TextDrawCreate(577.000000, 10.000000, "00:00:00~n~~w~~h~00/00/0000");
	TextDrawFont(DateTD, 1);
	TextDrawLetterSize(DateTD, 0.300000, 1.500000);
	TextDrawTextSize(DateTD, 400.000000, 125.000000);
	TextDrawSetOutline(DateTD, 1);
	TextDrawSetShadow(DateTD, 0);
	TextDrawAlignment(DateTD, 2);
	TextDrawColor(DateTD, 10692351);
	TextDrawBackgroundColor(DateTD, 255);
	TextDrawBoxColor(DateTD, 50);
	TextDrawUseBox(DateTD, 0);
	TextDrawSetProportional(DateTD, 1);
	TextDrawSetSelectable(DateTD, 0);

	DateATD = TextDrawCreate(535.000000, 10.000000, "00:00:00~n~~w~~h~00/00/0000");
	TextDrawFont(DateATD, 1);
	TextDrawLetterSize(DateATD, 0.300000, 1.500000);
	TextDrawTextSize(DateATD, 400.000000, 125.000000);
	TextDrawSetOutline(DateATD, 1);
	TextDrawSetShadow(DateATD, 0);
	TextDrawAlignment(DateATD, 2);
	TextDrawColor(DateATD, 10692351);
	TextDrawBackgroundColor(DateATD, 255);
	TextDrawBoxColor(DateATD, 50);
	TextDrawUseBox(DateATD, 0);
	TextDrawSetProportional(DateATD, 1);
	TextDrawSetSelectable(DateATD, 0);

	TradeTD[0] = TextDrawCreate(132.666702, 131.925888, "box");
	TextDrawLetterSize(TradeTD[0], 0.000000, 27.133333);
	TextDrawTextSize(TradeTD[0], 512.000000, 0.000000);
	TextDrawAlignment(TradeTD[0], 1);
	TextDrawColor(TradeTD[0], -1);
	TextDrawUseBox(TradeTD[0], 1);
	TextDrawBoxColor(TradeTD[0], 155);
	TextDrawSetShadow(TradeTD[0], 0);
	TextDrawSetOutline(TradeTD[0], 0);
	TextDrawBackgroundColor(TradeTD[0], 255);
	TextDrawFont(TradeTD[0], 1);
	TextDrawSetProportional(TradeTD[0], 1);
	TextDrawSetShadow(TradeTD[0], 0);

	TradeTD[1] = TextDrawCreate(132.666687, 114.918548, "box");
	TextDrawLetterSize(TradeTD[1], 0.000000, 1.566666);
	TextDrawTextSize(TradeTD[1], 512.000000, 0.000000);
	TextDrawAlignment(TradeTD[1], 1);
	TextDrawColor(TradeTD[1], -1);
	TextDrawUseBox(TradeTD[1], 1);
	TextDrawBoxColor(TradeTD[1], 255);
	TextDrawSetShadow(TradeTD[1], 0);
	TextDrawSetOutline(TradeTD[1], 0);
	TextDrawBackgroundColor(TradeTD[1], 255);
	TextDrawFont(TradeTD[1], 1);
	TextDrawSetProportional(TradeTD[1], 0);
	TextDrawSetShadow(TradeTD[1], 0);

	TradeTD[2] = TextDrawCreate(319.999877, 117.822219, "box");
	TextDrawLetterSize(TradeTD[2], 0.000000, 28.699993);
	TextDrawTextSize(TradeTD[2], 318.000000, 0.000000);
	TextDrawAlignment(TradeTD[2], 1);
	TextDrawColor(TradeTD[2], -1);
	TextDrawUseBox(TradeTD[2], 1);
	TextDrawBoxColor(TradeTD[2], 255);
	TextDrawSetShadow(TradeTD[2], 0);
	TextDrawSetOutline(TradeTD[2], 0);
	TextDrawBackgroundColor(TradeTD[2], 255);
	TextDrawFont(TradeTD[2], 1);
	TextDrawSetProportional(TradeTD[2], 1);
	TextDrawSetShadow(TradeTD[2], 0);

	TradeTD[3] = TextDrawCreate(140.666809, 155.155532, "box");
	TextDrawLetterSize(TradeTD[3], 0.000000, 21.633325);
	TextDrawTextSize(TradeTD[3], 310.000000, 0.000000);
	TextDrawAlignment(TradeTD[3], 1);
	TextDrawColor(TradeTD[3], -1);
	TextDrawUseBox(TradeTD[3], 1);
	TextDrawBoxColor(TradeTD[3], -250);
	TextDrawSetShadow(TradeTD[3], 0);
	TextDrawSetOutline(TradeTD[3], 0);
	TextDrawBackgroundColor(TradeTD[3], 255);
	TextDrawFont(TradeTD[3], 1);
	TextDrawSetProportional(TradeTD[3], 1);
	TextDrawSetShadow(TradeTD[3], 0);

	TradeTD[4] = TextDrawCreate(329.333557, 154.325988, "box");
	TextDrawLetterSize(TradeTD[4], 0.000000, 21.733324);
	TextDrawTextSize(TradeTD[4], 504.000000, 0.000000);
	TextDrawAlignment(TradeTD[4], 1);
	TextDrawColor(TradeTD[4], -1);
	TextDrawUseBox(TradeTD[4], 1);
	TextDrawBoxColor(TradeTD[4], -252);
	TextDrawSetShadow(TradeTD[4], 0);
	TextDrawSetOutline(TradeTD[4], 0);
	TextDrawBackgroundColor(TradeTD[4], 255);
	TextDrawFont(TradeTD[4], 1);
	TextDrawSetProportional(TradeTD[4], 1);
	TextDrawSetShadow(TradeTD[4], 0);

	TradeTD[5] = TextDrawCreate(140.666671, 352.607391, "box");
	TextDrawLetterSize(TradeTD[5], 0.000000, 1.733332);
	TextDrawTextSize(TradeTD[5], 310.000000, 0.000000);
	TextDrawAlignment(TradeTD[5], 1);
	TextDrawColor(TradeTD[5], -1);
	TextDrawUseBox(TradeTD[5], 1);
	TextDrawBoxColor(TradeTD[5], -251);
	TextDrawSetShadow(TradeTD[5], 0);
	TextDrawSetOutline(TradeTD[5], 0);
	TextDrawBackgroundColor(TradeTD[5], 255);
	TextDrawFont(TradeTD[5], 1);
	TextDrawSetProportional(TradeTD[5], 1);
	TextDrawSetShadow(TradeTD[5], 0);

	TradeTD[6] = TextDrawCreate(140.666656, 136.903656, "box");
	TextDrawLetterSize(TradeTD[6], 0.000000, 1.733332);
	TextDrawTextSize(TradeTD[6], 310.000000, 0.000000);
	TextDrawAlignment(TradeTD[6], 1);
	TextDrawColor(TradeTD[6], -1);
	TextDrawUseBox(TradeTD[6], 1);
	TextDrawBoxColor(TradeTD[6], -251);
	TextDrawSetShadow(TradeTD[6], 0);
	TextDrawSetOutline(TradeTD[6], 0);
	TextDrawBackgroundColor(TradeTD[6], 255);
	TextDrawFont(TradeTD[6], 1);
	TextDrawSetProportional(TradeTD[6], 1);
	TextDrawSetShadow(TradeTD[6], 0);

	TradeTD[7] = TextDrawCreate(329.333190, 352.607269, "box");
	TextDrawLetterSize(TradeTD[7], 0.000000, 1.666666);
	TextDrawTextSize(TradeTD[7], 504.000000, 0.000000);
	TextDrawAlignment(TradeTD[7], 1);
	TextDrawColor(TradeTD[7], -1);
	TextDrawUseBox(TradeTD[7], 1);
	TextDrawBoxColor(TradeTD[7], -251);
	TextDrawSetShadow(TradeTD[7], 0);
	TextDrawSetOutline(TradeTD[7], 0);
	TextDrawBackgroundColor(TradeTD[7], 255);
	TextDrawFont(TradeTD[7], 1);
	TextDrawSetProportional(TradeTD[7], 1);
	TextDrawSetShadow(TradeTD[7], 0);

	TradeTD[8] = TextDrawCreate(328.666473, 137.733154, "box");
	TextDrawLetterSize(TradeTD[8], 0.000000, 1.533332);
	TextDrawTextSize(TradeTD[8], 504.000000, 0.000000);
	TextDrawAlignment(TradeTD[8], 1);
	TextDrawColor(TradeTD[8], -1);
	TextDrawUseBox(TradeTD[8], 1);
	TextDrawBoxColor(TradeTD[8], -251);
	TextDrawSetShadow(TradeTD[8], 0);
	TextDrawSetOutline(TradeTD[8], 0);
	TextDrawBackgroundColor(TradeTD[8], 255);
	TextDrawFont(TradeTD[8], 1);
	TextDrawSetProportional(TradeTD[8], 1);
	TextDrawSetShadow(TradeTD[8], 0);

	TradeTD[9] = TextDrawCreate(382.000183, 355.096252, "Adauga");
	TextDrawLetterSize(TradeTD[9], 0.246665, 1.122962);
	TextDrawTextSize(TradeTD[9], 10.000000, 37.000000);
	TextDrawAlignment(TradeTD[9], 2);
	TextDrawColor(TradeTD[9], -65281);
	TextDrawBoxColor(TradeTD[9], 255);
	TextDrawSetShadow(TradeTD[9], 0);
	TextDrawSetOutline(TradeTD[9], 1);
	TextDrawBackgroundColor(TradeTD[9], 47);
	TextDrawFont(TradeTD[9], 1);
	TextDrawSetProportional(TradeTD[9], 1);
	TextDrawSetShadow(TradeTD[9], 0);
	TextDrawSetSelectable(TradeTD[9], true);

	TradeTD[10] = TextDrawCreate(455.666687, 355.096374, "Sterge");
	TextDrawLetterSize(TradeTD[10], 0.246665, 1.122962);
	TextDrawTextSize(TradeTD[10], 10.000000, 31.000000);
	TextDrawAlignment(TradeTD[10], 2);
	TextDrawColor(TradeTD[10], -16776961);
	TextDrawBoxColor(TradeTD[10], 255);
	TextDrawSetShadow(TradeTD[10], 0);
	TextDrawSetOutline(TradeTD[10], 1);
	TextDrawBackgroundColor(TradeTD[10], 47);
	TextDrawFont(TradeTD[10], 1);
	TextDrawSetProportional(TradeTD[10], 1);
	TextDrawSetShadow(TradeTD[10], 0);
	TextDrawSetSelectable(TradeTD[10], true);

	TradeTD[11] = TextDrawCreate(142.666809, 166.355468, "box");
	TextDrawLetterSize(TradeTD[11], 0.000000, 3.166666);
	TextDrawTextSize(TradeTD[11], 307.000000, 0.000000);
	TextDrawAlignment(TradeTD[11], 1);
	TextDrawColor(TradeTD[11], -1);
	TextDrawUseBox(TradeTD[11], 1);
	TextDrawBoxColor(TradeTD[11], -238);
	TextDrawSetShadow(TradeTD[11], 0);
	TextDrawSetOutline(TradeTD[11], 0);
	TextDrawBackgroundColor(TradeTD[11], 255);
	TextDrawFont(TradeTD[11], 1);
	TextDrawSetProportional(TradeTD[11], 1);
	TextDrawSetShadow(TradeTD[11], 0);

	TradeTD[12] = TextDrawCreate(143.000137, 199.540725, "box");
	TextDrawLetterSize(TradeTD[12], 0.000000, 3.166666);
	TextDrawTextSize(TradeTD[12], 307.000000, 0.000000);
	TextDrawAlignment(TradeTD[12], 1);
	TextDrawColor(TradeTD[12], -1);
	TextDrawUseBox(TradeTD[12], 1);
	TextDrawBoxColor(TradeTD[12], -236);
	TextDrawSetShadow(TradeTD[12], 0);
	TextDrawSetOutline(TradeTD[12], 0);
	TextDrawBackgroundColor(TradeTD[12], 255);
	TextDrawFont(TradeTD[12], 1);
	TextDrawSetProportional(TradeTD[12], 1);
	TextDrawSetShadow(TradeTD[12], 0);

	TradeTD[13] = TextDrawCreate(143.000106, 232.725921, "box");
	TextDrawLetterSize(TradeTD[13], 0.000000, 3.166666);
	TextDrawTextSize(TradeTD[13], 307.000000, 0.000000);
	TextDrawAlignment(TradeTD[13], 1);
	TextDrawColor(TradeTD[13], -1);
	TextDrawUseBox(TradeTD[13], 1);
	TextDrawBoxColor(TradeTD[13], -236);
	TextDrawSetShadow(TradeTD[13], 0);
	TextDrawSetOutline(TradeTD[13], 0);
	TextDrawBackgroundColor(TradeTD[13], 255);
	TextDrawFont(TradeTD[13], 1);
	TextDrawSetProportional(TradeTD[13], 1);
	TextDrawSetShadow(TradeTD[13], 0);

	TradeTD[14] = TextDrawCreate(142.666778, 266.325988, "box");
	TextDrawLetterSize(TradeTD[14], 0.000000, 3.166666);
	TextDrawTextSize(TradeTD[14], 307.000000, 0.000000);
	TextDrawAlignment(TradeTD[14], 1);
	TextDrawColor(TradeTD[14], -1);
	TextDrawUseBox(TradeTD[14], 1);
	TextDrawBoxColor(TradeTD[14], -236);
	TextDrawSetShadow(TradeTD[14], 0);
	TextDrawSetOutline(TradeTD[14], 0);
	TextDrawBackgroundColor(TradeTD[14], 255);
	TextDrawFont(TradeTD[14], 1);
	TextDrawSetProportional(TradeTD[14], 1);
	TextDrawSetShadow(TradeTD[14], 0);

	TradeTD[15] = TextDrawCreate(142.333465, 299.926025, "box");
	TextDrawLetterSize(TradeTD[15], 0.000000, 3.166666);
	TextDrawTextSize(TradeTD[15], 307.000000, 0.000000);
	TextDrawAlignment(TradeTD[15], 1);
	TextDrawColor(TradeTD[15], -1);
	TextDrawUseBox(TradeTD[15], 1);
	TextDrawBoxColor(TradeTD[15], -236);
	TextDrawSetShadow(TradeTD[15], 0);
	TextDrawSetOutline(TradeTD[15], 0);
	TextDrawBackgroundColor(TradeTD[15], 255);
	TextDrawFont(TradeTD[15], 1);
	TextDrawSetProportional(TradeTD[15], 1);
	TextDrawSetShadow(TradeTD[15], 0);

	TradeTD[16] = TextDrawCreate(333.000488, 166.355560, "box");
	TextDrawLetterSize(TradeTD[16], 0.000000, 3.166666);
	TextDrawTextSize(TradeTD[16], 500.000000, 0.000000);
	TextDrawAlignment(TradeTD[16], 1);
	TextDrawColor(TradeTD[16], -1);
	TextDrawUseBox(TradeTD[16], 1);
	TextDrawBoxColor(TradeTD[16], -236);
	TextDrawSetShadow(TradeTD[16], 0);
	TextDrawSetOutline(TradeTD[16], 0);
	TextDrawBackgroundColor(TradeTD[16], 255);
	TextDrawFont(TradeTD[16], 1);
	TextDrawSetProportional(TradeTD[16], 1);
	TextDrawSetShadow(TradeTD[16], 0);

	TradeTD[17] = TextDrawCreate(333.000701, 199.540756, "box");
	TextDrawLetterSize(TradeTD[17], 0.000000, 3.099998);
	TextDrawTextSize(TradeTD[17], 500.000000, 0.000000);
	TextDrawAlignment(TradeTD[17], 1);
	TextDrawColor(TradeTD[17], -1);
	TextDrawUseBox(TradeTD[17], 1);
	TextDrawBoxColor(TradeTD[17], -236);
	TextDrawSetShadow(TradeTD[17], 0);
	TextDrawSetOutline(TradeTD[17], 0);
	TextDrawBackgroundColor(TradeTD[17], 255);
	TextDrawFont(TradeTD[17], 1);
	TextDrawSetProportional(TradeTD[17], 1);
	TextDrawSetShadow(TradeTD[17], 0);

	TradeTD[18] = TextDrawCreate(333.000701, 232.311096, "box");
	TextDrawLetterSize(TradeTD[18], 0.000000, 3.166666);
	TextDrawTextSize(TradeTD[18], 501.000000, 0.000000);
	TextDrawAlignment(TradeTD[18], 1);
	TextDrawColor(TradeTD[18], -1);
	TextDrawUseBox(TradeTD[18], 1);
	TextDrawBoxColor(TradeTD[18], -236);
	TextDrawSetShadow(TradeTD[18], 0);
	TextDrawSetOutline(TradeTD[18], 0);
	TextDrawBackgroundColor(TradeTD[18], 255);
	TextDrawFont(TradeTD[18], 1);
	TextDrawSetProportional(TradeTD[18], 1);
	TextDrawSetShadow(TradeTD[18], 0);

	TradeTD[19] = TextDrawCreate(333.333984, 265.911102, "box");
	TextDrawLetterSize(TradeTD[19], 0.000000, 3.166666);
	TextDrawTextSize(TradeTD[19], 501.000000, 0.000000);
	TextDrawAlignment(TradeTD[19], 1);
	TextDrawColor(TradeTD[19], -1);
	TextDrawUseBox(TradeTD[19], 1);
	TextDrawBoxColor(TradeTD[19], -236);
	TextDrawSetShadow(TradeTD[19], 0);
	TextDrawSetOutline(TradeTD[19], 0);
	TextDrawBackgroundColor(TradeTD[19], 255);
	TextDrawFont(TradeTD[19], 1);
	TextDrawSetProportional(TradeTD[19], 1);
	TextDrawSetShadow(TradeTD[19], 0);

	TradeTD[20] = TextDrawCreate(332.667358, 299.511260, "box");
	TextDrawLetterSize(TradeTD[20], 0.000000, 3.199999);
	TextDrawTextSize(TradeTD[20], 501.000000, 0.000000);
	TextDrawAlignment(TradeTD[20], 1);
	TextDrawColor(TradeTD[20], -1);
	TextDrawUseBox(TradeTD[20], 1);
	TextDrawBoxColor(TradeTD[20], -236);
	TextDrawSetShadow(TradeTD[20], 0);
	TextDrawSetOutline(TradeTD[20], 0);
	TextDrawBackgroundColor(TradeTD[20], 255);
	TextDrawFont(TradeTD[20], 1);
	TextDrawSetProportional(TradeTD[20], 1);
	TextDrawSetShadow(TradeTD[20], 0);
	return true;
}
function punecpfireman(playerid){
	new Float: x, Float: y, Float: z, Float: xx, Float: yy, Float: zz, rand;
	GetPlayerPos(playerid, x, y, z);
	rand = randEx(1, Bizuri);
	xx = BEnX(rand);
	yy = BEnY(rand);
	zz = BEnZ(rand);
	SetPVarInt(playerid, "randomu", rand);
	while(GetDistanceBetweenPoints(x,y,z,xx,yy,zz) > 750 || GetDistanceBetweenPoints(x,y,z,xx,yy,zz) < 250){
		rand = randEx(1, Bizuri);
		xx = BEnX(rand);
		yy = BEnY(rand);
		zz = BEnZ(rand);
		SetPVarInt(playerid, "randomu", rand);
	}
	SetPlayerCheckpointEx(playerid, xx, yy, zz, 5);
	CP[playerid] = 315;
	Info(playerid, "Urmeaza checkpoint-ul pentru a stinge incendiul.");
	return true;
}
function punecppizza(playerid){
	new Float: x, Float: y, Float: z, Float: xx, Float: yy, Float: zz, rand; GetPlayerPos(playerid, x, y, z);
	rand = randEx(1, CaseJ);
	xx = HouseInfo[rand][hEntranceX];
	yy = HouseInfo[rand][hEntranceY];
	zz = HouseInfo[rand][hEntranceZ];
	SetPVarInt(playerid, "randomu", rand);
	while(GetDistanceBetweenPoints(x,y,z,xx,yy,zz) > 1000 || GetDistanceBetweenPoints(x,y,z,xx,yy,zz) < 100){
		rand = randEx(1, CaseJ);
		xx = HouseInfo[rand][hEntranceX];
		yy = HouseInfo[rand][hEntranceY];
		zz = HouseInfo[rand][hEntranceZ];
		SetPVarInt(playerid, "randomu", rand);
	}
	SetPlayerCheckpointEx(playerid, xx, yy, zz, 5);
	CP[playerid] = 303;
	Info(playerid, "Urmeaza checkpoint-ul pentru a livra pizza.");
	return true;
}
function Engine(playerid)
{
	new
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective,
		vehicleid = GetPlayerVehicleID(playerid),
		Model = GetVehicleModel(vehicleid),
		bool: nEngine = !VehicleEngine[vehicleid]
	;
	if(IsABike(vehicleid) || !Gas[vehicleid] || !vehicleid || FreezedPlayer[playerid]) return true;
	VehicleEngine[vehicleid] = nEngine;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, nEngine, lights, alarm, doors, bonnet, boot, objective);
	SendMsg(playerid, COLOR_SERVER, "Engine >> {ffffff}Ai %s motorul unui %s.", (nEngine) ? ("pornit") : ("oprit"), GetVehicleName(Model));
	return true;
}
function Lights(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new
			vehicleid = GetPlayerVehicleID(playerid),
			engine,
			lights,
			alarm,
			doors,
			bonnet,
			boot,
			objective
		;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, !lights, alarm, doors, bonnet, boot, objective);
	}
	return true;
}
function Lock(playerid)
{
	new
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective,
		carid,
		vehid = GetClosestVehicle(playerid),
		vehid2 = 0
	;

	if(vehid == -1 || GetDistancePlayerVeh(playerid, vehid) > 5)
		return true;

	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(vehid == PlayerInfo[playerid][pVehID][v])
		{
			vehid2 = PlayerInfo[playerid][pVehID][v];
			break;
		}
	}

	if(vehid2 == vehid || RentVeh[playerid] == vehid || JobVeh[playerid] == vehid || QuestVeh[playerid] == vehid || pfVehicle[playerid] == vehid || pcVehicle[playerid] == vehid)
	{
		carid = vehid;
	}

	if(carid == 0)
		return true;

	VehicleLocked[carid] = !VehicleLocked[carid];

	va_GameTextForPlayer(playerid, "~g~%s~n~%s", 5000, 4, GetVehicleName(GetVehicleModel(carid)), (VehicleLocked[carid]) ? ("~r~Inchis") : ("~g~Deschis"));

	GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot ,objective);
	SetVehicleParamsEx(carid, engine, lights, alarm, VehicleLocked[carid], bonnet, boot, objective);

	if(VehicleLocked[carid])
	{
		SetVehicleParamsForPlayer(carid, playerid, 0, 0);
	}
	return true;
}
function FinishTutorial(playerid)
{
	PlayerInfo[playerid][pTutorial] = false;
	pUpdateInt(playerid, "Tutorial", PlayerInfo[playerid][pTutorial]);

	defer Spawn(playerid, PlayerInfo[playerid][pSession]);

	return true;
}
function Intrari(playerid){
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT){
		if(PlayerInfo[playerid][pTutorial])
		{
			if(InBusinessZone[playerid] != 0)
			{
				new
					i = InBusinessZone[playerid]
				;

				if(BExX(i) == 0 || BExY(i) == 0 || BExZ(i) == 0) return true;
				if(BizzInfo[i][bType] != 5) return SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Poti intra doar in Non-Stop-uri pana termini Tutorialul.");
				if(FishPrice[playerid] < 1) return SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Trebuie sa prinzi un Peste.");
				GiveJobMoney(playerid, FishPrice[playerid]);
				SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Felicitari, ai vandut pestele pentru $%s.", FormatNumber(FishPrice[playerid]));
				FishPrice[playerid] = 0;
				InBiz[playerid] = i;
				SetPlayerInterior(playerid, BInt(i));
				SetPlayerPosEx(playerid, BExX(i), BExY(i), BExZ(i));
				SetPlayerVirtualWorld(playerid, playerid + 1);

				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;

				SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Locatia in care esti se numeste non-stop.");
				SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Din aceasta locatie poti cumpara diverse lucruri.");
				SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Pentru inceput, mergi la tejghea, apasa Y si cumpara un 'Walkie Talkie'");
			}
		}
		else
		{
			if(InLocationZone[playerid] == 4){
				if(PlayerInfo[playerid][pPC] < 1) return Info(playerid, "Nu ai un PC.");
				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, 1000);
				SetPlayerPosEx(playerid, 834.0693, 7.2953, 1004.1870);
				Info(playerid, "Apasa tasta Y pentru a mina bitcoin.");
			}
			if(IsPlayerInRangeOfPoint(playerid, 2, 834.0693, 7.2953, 1004.1870) && (GetPlayerVirtualWorld(playerid) == 1000 || GetPlayerVirtualWorld(playerid) == 1024)){
				if(ServerWars && OnDuty[playerid] && IsAGangMember(playerid))
				{
					SetPlayerVirtualWorld(playerid, 1024);
				}
				else
				{
					SetPlayerVirtualWorld(playerid, 0);
				}
				SetPlayerInterior(playerid, 0);
				SetPlayerPosEx(playerid, LocationPos[4][0], LocationPos[4][1], LocationPos[4][2]);
			}
			if(InHouseZone[playerid] != 0)
			{
				new
					i = InHouseZone[playerid]
				;
				if(PlayerInfo[playerid][pRented] == i || PlayerInfo[playerid][pHouse] == i){
					SetPlayerInterior(playerid, HouseInfo[i][hInterior]);
					SetPlayerPosEx(playerid, HouseInfo[i][hExitX],HouseInfo[i][hExitY],HouseInfo[i][hExitZ]);
					SetPlayerVirtualWorld(playerid, HouseInfo[i][hID]);
					InHouse[playerid] = i;						
				}
				else {
					Info(playerid, "Nu esti chirias la casa %d.", i);
					if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 5){
						BreachID[playerid] = i;
						SPD(playerid, DIALOG_RAMHOUSE, DIALOG_STYLE_MSGBOX, "Casa", "Casa este incuiata.\nVrei sa spargi usa?", "Da", "Nu");
					}
				}
			}
			if(InHouse[playerid] != 0)
			{
				new
					i = InHouse[playerid]
				;

				if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ])){
					if(ServerWars && OnDuty[playerid] && IsAGangMember(playerid))
					{
						SetPlayerVirtualWorld(playerid, 1024);
					}
					else
					{
						SetPlayerVirtualWorld(playerid, 0);
					}
					SetPlayerInterior(playerid, 0);
					SetPlayerPosEx(playerid,HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ]);
					InHouse[playerid] = 0;
					FreezePlayer(playerid, true);
					defer UnfreezeTimer(playerid, PlayerInfo[playerid][pSession]);
				}
			}
			if(InBusinessZone[playerid] != 0)
			{
				new
					i = InBusinessZone[playerid]
				;

				if(GetPlayerVirtualWorld(playerid) != 0 && PlayerInfo[playerid][pTutorial]) return true;
				if(BExX(i) == 0 || BExY(i) == 0 || BExZ(i) == 0) return true;
				if(GetPlayerCash(playerid) < BizzInfo[i][bEntranceCost]) return Info(playerid, "Nu ai bani.");
				GivePlayerCash(playerid, -BizzInfo[i][bEntranceCost]);
				BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
				Query_Mysql("UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'", BizzInfo[i][bTill],i);
				switch(BizzInfo[i][bType])
				{
					case 1: Info(playerid, "Comenzi disponibile: /deposit, /withdraw, /transfer");
					case 4: Info(playerid, "Comenzi disponibile: /dice");
					case 5:
					{
						if(CP[playerid] == 331 || CP[playerid] == 333)
						{
							SetPlayerCheckpointEx(playerid, -26.9003, -91.6185, 1003.5469, 1);
							CP[playerid] ++;
						}
						if(FishPrice[playerid])
						{
							GiveJobMoney(playerid, FishPrice[playerid]);
							Info(playerid, "Ai vandut pestele pentru $%s.", FormatNumber(FishPrice[playerid]));
							FishPrice[playerid] = 0;
							ProgressToTask(playerid, 2, 1);
							ProgressToPerkMissions(playerid, 0, 1);
							if(PerkActive[playerid][7])
							{
								new
									rand = random(100)
								;

								switch(rand)
								{
									case 0..5:
									{
										GivePlayerPP(playerid, 1);

										SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit un punct premium. #7");
									}
								}
							}
							if(PerkActive[playerid][8])
							{
								GivePlayerCash(playerid, 30_000);
								SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit $30,000 in plus. #8");

								new
									rand = random(100)
								;

								switch(rand)
								{
									case 0..10:
									{
										GivePlayerRP(playerid, 1);

										SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit un punct de respect. #8");
									}
								}
							}
						}
						if(FarmerApples[playerid])
						{
							new
								rand = 80_000 + random(10_000)
							;
							GiveJobMoney(playerid, rand);
							SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Ai primit $%s pentru mere.", FormatNumber(rand));
							FarmerApples[playerid] = false;
						}
						if(FarmerMilk[playerid])
						{
							new
								rand = 80_000 + random(10_000)
							;
							GiveJobMoney(playerid, rand);
							SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Ai primit $%s pentru lapte.", FormatNumber(rand));
							FarmerMilk[playerid] = false;
						}
					}
					case 6: {
						Info(playerid, "Comenzi disponibile: /eat");
					}
				}
				InBiz[playerid] = i;
				SetPlayerInterior(playerid, BInt(i));
				SetPlayerPosEx(playerid, BExX(i), BExY(i), BExZ(i));
				SetPlayerVirtualWorld(playerid, BizzInfo[i][bID]);
			}
			if(InBiz[playerid] != 0)
			{
				new
					i = InBiz[playerid]
				;
				if(IsPlayerInRangeOfPoint(playerid, 2, BExX(i), BExY(i), BExZ(i)))
				{
					InBiz[playerid] = 0;
					SetPlayerInterior(playerid, 0);
					SetPlayerPosEx(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
					if(ServerWars && OnDuty[playerid] && IsAGangMember(playerid))
					{
						SetPlayerVirtualWorld(playerid, 1024);
					}
					else
					{
						SetPlayerVirtualWorld(playerid, 0);
					}
					FreezePlayer(playerid, true);
					defer UnfreezeTimer(playerid, PlayerInfo[playerid][pSession]);
				}
			}
			if(InFactionZone[playerid] != 0)
			{
				new
					fid = InFactionZone[playerid]
				;
				if(PlayerInfo[playerid][pMember] == fid){
					if(GetPlayerVirtualWorld(playerid) == 0 || GetPlayerVirtualWorld(playerid) == 1024){
						SetPlayerPosEx(playerid, FacInfo[fid][fcX], FacInfo[fid][fcY], FacInfo[fid][fcZ]);
						SetPlayerInterior(playerid, FacInfo[fid][fInterior]);
						SetPlayerVirtualWorld(playerid, FacInfo[fid][fID]);
						InHQ[playerid] = fid;
					}
				}
				else { 
					Info(playerid, "Nu faci parte din %s.", FactionName(fid));
					if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 5){
						BreachID[playerid] = fid;
						SPD(playerid, DIALOG_RAMHQ, DIALOG_STYLE_MSGBOX, "Sediul Factiunii", "Acest sediu este incuiat.\nVrei sa spargi usa?", "Da", "Nu");
					}
				}
			}
			if(InHQ[playerid] != 0)
			{
				new
					fid = InHQ[playerid]
				;
				if(IsPlayerInRangeOfPoint(playerid, 2, FacInfo[fid][fcX], FacInfo[fid][fcY], FacInfo[fid][fcZ]))
				{
					SetPlayerPosEx(playerid, FacInfo[fid][fceX], FacInfo[fid][fceY], FacInfo[fid][fceZ]);
					SetPlayerInterior(playerid, 0);
					if(ServerWars && OnDuty[playerid] && IsAGangMember(playerid))
					{
						SetPlayerVirtualWorld(playerid, 1024);
					}
					else
					{
						SetPlayerVirtualWorld(playerid, 0);
					}
					InHQ[playerid] = 0;
				}
			}
			if(InGarageZone[playerid] != 0)
			{
				new
					casa = InGarageZone[playerid]
				;

				if(IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[casa][hGarageX], HouseInfo[casa][hGarageY], HouseInfo[casa][hGarageZ]))
				{
					if((PlayerInfo[playerid][pRented] == casa && HouseInfo[casa][hGarageLocked] == false) || PlayerInfo[playerid][pHouse] == casa)
					{
						new
							count = 0
						;

						for(new i = 0; i < 20; i ++)
						{
							if(PlayerInfo[playerid][pVehInGarage][i] != false)
							{
								GarageSpawn[playerid][count] = i;

								count ++;
							}
							else
							{							
								GarageSpawn[playerid][i] = 0;
							}
						}

						if(count == 0)
						{
							SendMsg(playerid, COLOR_SERVER, "Garage >> {ffffff}Nu ai vehicule in garaj.");
						}
						else
						{						
							gString[0] = (EOS);

							for(new i = 0; i < count; i ++)
							{
								new
									slot = GarageSpawn[playerid][i]
								;

								format(gString, sizeof(gString), "%s\n%s", gString, GetVehicleName(PlayerInfo[playerid][pVehModel][slot]));
							}

							SPD(playerid, DIALOG_GARAGESPAWN, DIALOG_STYLE_LIST, "Garage", gString, "Alege", "Anuleaza");
						}

					}
					else
					{
						SendMsg(playerid, COLOR_SERVER, "Garage >> {ffffff}Acest garaj este incuiat.");
					}
				}
			}
			if(InClanHQZone[playerid] != 0)
			{
				new
					chq = InClanHQZone[playerid],
					clan = PlayerInfo[playerid][pClan],
					clan1 = ClanHQs[chq][cOwnerID],
					type = ClanHQs[chq][cType],
					clanhqid = ClanToHQ[clan]
				;

				if(clan1 == clan)
				{
					SetPlayerPosEx(playerid, ClanHQInteriors[type][1], ClanHQInteriors[type][2], ClanHQInteriors[type][3]);
					SetPlayerInterior(playerid, floatround(ClanHQInteriors[type][0]));
					SetPlayerVirtualWorld(playerid, clan1);
					InClanHQ[playerid] = clanhqid;
				}
				else
				{
					SendMsg(playerid, COLOR_SERVER, "Clan HQ >> {ffffff}Acest Clan HQ este detinut de %s.", ClanInfo[clan1][clanName]);
					if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 5)
					{
						BreachID[playerid] = chq;
						SPD(playerid, DIALOG_RAMCLANHQ, DIALOG_STYLE_MSGBOX, "Clan HQ", "Vrei sa spargi usa?", "Da", "Nu");
					}
				}
			}
			if(InClanHQ[playerid] != 0)
			{
				new
					chq = InClanHQ[playerid],
					type = ClanHQs[chq][cType]
				;
				if(IsPlayerInRangeOfPoint(playerid, 3, ClanHQInteriors[type][1], ClanHQInteriors[type][2], ClanHQInteriors[type][3]))
				{
					SetPlayerPosEx(playerid, ClanHQs[chq][cX], ClanHQs[chq][cY], ClanHQs[chq][cZ]);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					InClanHQ[playerid] = 0;
				}
			}
		}
	} 
	return true;
}

function SetJob(playerid, Job)
{
	new
		ActualJob = PlayerInfo[playerid][pJob]
	;
	if(Job == 0)
	{
		Iter_Remove(WithJob[ActualJob], playerid);
		Info(playerid, "Ti-ai parasit locul de munca.");
	}
	else
	{
		Iter_Add(WithJob[Job], playerid);
		Info(playerid, "Jobul tau este acum %s.", JobInfo[Job][jName]);
	}
	PlayerInfo[playerid][pJob] = Job;
	pUpdateInt(playerid, "Job", PlayerInfo[playerid][pJob]);
	return true;
}

timer BackToPns[5000](playerid, Float: X, Float: Y, Float: Z, Float: A, Vw, Session)
{
	if(PlayerInfo[playerid][pSession] != Session)
		return true;

	new
		vehicleid = GetPlayerVehicleID(playerid)
	;

	SetVehiclePos(vehicleid, X, Y, Z);
	SetVehicleZAngle(vehicleid, A);
	SetVehicleVirtualWorld(vehicleid, Vw);
	SetPlayerVirtualWorld(playerid, Vw);
	OnPlayerGoto(playerid, 0, 0);

	FreezePlayer(playerid, false);

	ChangeVehicleColor(vehicleid, LastColor1[vehicleid], LastColor2[vehicleid]);

	return true;
}

timer EscapeTimer[5000](playerid, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	escapeprogress[playerid] += 10;
	switch(escapeprogress[playerid]){
		case 0..90:{
			Info(playerid, "Gardul este acum %d distrus.", escapeprogress[playerid]); 
			escapedat[playerid] = 0; 
			ResetPlayerWeapons(playerid);
		}
		case 100: {
			Info(playerid, "Gardul a fost doborat cu succes.");
			Info(playerid, "Cauta cel mai apropiat magazin de haine pentru a scapa de politie.");
			WantedPoints[playerid] = 12;
			SetPlayerCriminal(playerid, -1, "escape prison");
			SetPlayerPosEx(playerid, 1824.7350, -1538.1074, 13.5469);
			escapeprogress[playerid] = 0;
			escapedat[playerid] = 2;
			ClearAnimations(playerid);
			ResetPlayerWeapons(playerid);
			PlayerInfo[playerid][pJailed] = 0;
			PlayerInfo[playerid][pJailTime] = 0;
			pUpdateInt(playerid, "Jailed", 0);
			PlayerTextDrawHide(playerid, Jailtime);
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pEscapePoints] -= 10;
			pUpdateInt(playerid, "EscapePoints", PlayerInfo[playerid][pEscapePoints]);
		}
	}
	FreezePlayer(playerid, false);
	return true;
}

stock HuntRamase()
{
	new
		ramase = 0
	;

	for(new i = 0; i < 100; i ++)
	{
		if(GiftHuntCollected[i] != true)
		{
			ramase ++;
		}
	}

	return ramase;
}

function ActionWithKeyY(playerid)
{
	if(InHuntArea[playerid] != -1)
	{
		if(IsPlayerInAnyVehicle(playerid))
			return SendMsg(playerid, COLOR_SERVER, "Gift Hunt >> {ffffff}Trebuie sa cobori din vehicul.");

		if(PlayerInfo[playerid][pLevel] < 3)
			return SendMsg(playerid, COLOR_SERVER, "Gift Hunt >> {ffffff}Ai nevoie de nivel 3 pentru a colecta cadourile.");

		new
			i = InHuntArea[playerid]
		;

		if(GiftHuntCollected[i] != true)
		{
			GiftHuntCollected[i] = true;

			gString[0] = (EOS);
			format(gString, 200, "%d", GiftHuntCollected[0]);
			for(new j = 1; j < 100; j++)
			{
				format(gString, 200, "%s|%d", gString, GiftHuntCollected[j]);
			}

			new
				Query[300]
			;

			mysql_format(SQL, Query, sizeof(Query), "update server_vars set GiftHunt = '%s'", gString);
			mysql_tquery(SQL, Query);

			DestroyDynamicObject(GiftHuntObject[i]);
			GiftHuntObject[i] = 0;

			DestroyDynamicArea2(AreaGiftHunt[i]);
			AreaGiftHunt[i] = 0;

			PlayerInfo[playerid][pHuntCollected] ++;
			pUpdateInt(playerid, "HuntCollected", PlayerInfo[playerid][pHuntCollected]);

			GivePlayerCash(playerid, 5_000_000);

			SendMsg(playerid, COLOR_SERVER, "Gift Hunt >> {ffffff}Ai primit $5,000,000.");

			SendMsg(playerid, COLOR_SERVER, "Gift Hunt >> {ffffff}Ai gasit %d cadouri, mai sunt %d pe harta, grabeste-te.",
				PlayerInfo[playerid][pHuntCollected], HuntRamase());

			va_SendClientMessageToAll(COLOR_SERVER, "Gift Hunt >> {ffffff}%s a gasit un obiect si a fost recompensat, au mai ramas %d.",
				GetName(playerid), HuntRamase());

			if(HuntRamase() < 1)
			{
				va_SendClientMessageToAll(COLOR_SERVER, "Gift Hunt >> {ffffff}S-au gasit toate cadourile, urmeaza premierea.");

				mysql_tquery(SQL, "SELECT * FROM `users` WHERE HuntCollected <> 0 ORDER BY `users`.`HuntCollected` DESC limit 3", "GiveHuntPrizes");
			}
		}
	}
	if(InLocationZone[playerid] != -1)
	{
		if(IsPlayerInAnyVehicle(playerid))
			return true;

		switch(InLocationZone[playerid])
		{
			case 0:
			{
				if(FreezedPlayer[playerid] != false)
					return true;

				if(PlayerInfo[playerid][pVehLicSuspend] != 0)
					return Info(playerid, "Trebuie sa mai astepti %d PayDay-uri pentru a face asta.", PlayerInfo[playerid][pVehLicSuspend]);

				if(PlayerInfo[playerid][pVehLic] >= 1)
					return Info(playerid, "Ai deja licenta de condus.");

				if(ExamVeh[playerid] != -1)
					return Info(playerid, "Ai inceput deja Examenul.");

				if(HaveCheckpoint(playerid))
					return true;
				
				SetPlayerVirtualWorld(playerid, playerid + 1);
				ExamVeh[playerid] = CreateVehicleEx(516, 347.8841, -1521.8834, 33.0115, 140.0539, 12, 12, -1, false, true);
				SetVehicleVirtualWorld(ExamVeh[playerid], playerid + 1);
				PutPlayerInVehicleEx(playerid, ExamVeh[playerid], 0);
				Info(playerid, "Examenul auto a inceput, urmeaza checkpoint-urile.");
				SetPlayerCheckpointEx(playerid, 321.4730, -1568.8324, 32.9393, 4.0);
				CP[playerid] = 46;
			}
			case 1:
			{
				if(PlayerInfo[playerid][pLevel] < 3)
					return Info(playerid, "Ai nevoie de nivel 3 pentru a-ti cumpara un vehicul.");

				if(HaveCheckpoint(playerid) || PlayerInfo[playerid][pWantedLevel])
					return true;

				DealerShipSelected[playerid] = 1;
				DealerShipRotation[playerid] = 0;
				SelectTextDraw(playerid, HOVER_COLOR); 

				for(new i; i < sizeof(DealerShipTD); i++)
				{
					TextDrawShowForPlayer(playerid, DealerShipTD[i]); 
				}

				for(new i; i < sizeof(DealerShipPTD); i++)
				{
					PlayerTextDrawShow(playerid, DealerShipPTD[i]); 
				}

				InTextdrawMenu[playerid] = 7;
				ShowDS(playerid);

				if(PerkActive[playerid][33])
				{
					SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Preturile sunt afisate cu o reducere de 5%. #33");
				}
				else if(PerkActive[playerid][32])
				{
					SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Preturile sunt afisate cu o reducere de 3%. #32");
				}
			}
			case 2:
			{
				Crates(playerid);
			}
			case 3:
			{
				if(PlayerInfo[playerid][pPC] < 1)
					return Info(playerid, "Nu ai un PC, foloseste tasta N pentru a-ti cumpara unul.");

				if(GetPVarInt(playerid, "bitcoin") < 1)
					return Info(playerid, "Nu ai bitcoin, mergi la Bitcoin House pentru a mina.");

				new rand = 200000 + random(5000), rand1 = rand * GetPVarInt(playerid, "bitcoin");
				GivePlayerCash(playerid, rand1);
				GiveGoal(rand1);
				Info(playerid, "Ai vandut bitcoin-ul minat pentru $%s", FormatNumber(rand1));
				ProgressToPerkMissions(playerid, 4, GetPVarInt(playerid, "bitcoin"));
				SetPVarInt(playerid, "bitcoin", 0);
			}
			case 6:
			{
				if(PlayerInfo[playerid][pWantedLevel] != 0)
					return Info(playerid, "Ai wanted.");

				if(HaveCheckpoint(playerid))
					return true;

				SPD(playerid, DIALOG_ARENA, DIALOG_STYLE_LIST, "Arena", "Parkour\nPaintball\nBox\nDuel\nSky Wars\nStunt", "Alege", "Iesi");
			}
			case 7:
			{
				if(PlayerInfo[playerid][pTaskActual] != 0)
					return Info(playerid, "Ai deja un Task.");

				if(PlayerInfo[playerid][pTaskuri] >= 3)
					return Info(playerid, "Poti face maxim 3 Task-uri pe zi.");

				new
					Iterator: PossibleTasks<5>
				;

				for(new i = 1; i < 6; i++)
				{
					if(PlayerInfo[playerid][pTodayTasks][0] == i || PlayerInfo[playerid][pTodayTasks][1] == i)
					{
						continue;
					}
					Iter_Add(PossibleTasks, i);
				}

				new
					RandomTask = Iter_Random(PossibleTasks),
					LastTask = PlayerInfo[playerid][pTaskuri]
				;

				PlayerInfo[playerid][pTaskActual] = RandomTask;
				pUpdateInt(playerid, "TaskActual", RandomTask);

				PlayerInfo[playerid][pTaskuri] ++;
				pUpdateInt(playerid, "Taskuri", PlayerInfo[playerid][pTaskuri]);

				PlayerInfo[playerid][pTaskProgress] = 0;
				pUpdateInt(playerid, "TaskProgress", 0);

				PlayerInfo[playerid][pTodayTasks][LastTask] = RandomTask;

				CheckTask(playerid);
			}
			case 8:
			{
				if(GetPVarInt(playerid, "InSpin")) return true;
				if(PlayerInfo[playerid][pSpin] < 500) return Info(playerid, "Nu ai 500 Spin.");
				PlayerInfo[playerid][pSpin] -= 500;
				pUpdateInt(playerid, "Spin", PlayerInfo[playerid][pSpin]);
				ShowSpin(playerid);
				ProgressToBattlepass(playerid, 12, 1);
			}
			case 9:
			{
				if(PlayerInfo[playerid][pTrivia]) return Info(playerid, "Ai facut deja Trivia-ul azi.");
				Info(playerid, "Te-ai inscris la Trivia.");
				SetPVarInt(playerid, "TimpTrivia", 10);
				SetPVarInt(playerid, "GresiteTrivia", 0);
				SetPVarInt(playerid, "InTrivia", 1);
				SetPVarInt(playerid, "IntrebareTrivia", 0);
				TextDrawShowForPlayer(playerid, TriviaTD);

				new
					Iterator: IntrebariPosibile<50>
				;

				for(new i = 0; i < 50; i++)
				{
					Iter_Add(IntrebariPosibile, i);
				}

				for(new i = 0; i < 10; i++)
				{
					new
						RandomQuestion = Iter_Random(IntrebariPosibile)
					;

					PlayerQuestionsTrivia[playerid][i] = RandomQuestion;

					Iter_Remove(IntrebariPosibile, RandomQuestion);
				}

				Iter_Clear(IntrebariPosibile);

				CurrentQuestion[playerid] = PlayerQuestionsTrivia[playerid][GetPVarInt(playerid, "IntrebareTrivia")];

				va_PlayerTextDrawSetString(playerid, TriviaPTD[0], TriviaQuestions[CurrentQuestion[playerid]][0]);
				va_PlayerTextDrawSetString(playerid, TriviaPTD[1], TriviaQuestions[CurrentQuestion[playerid]][1]);
				va_PlayerTextDrawSetString(playerid, TriviaPTD[2], TriviaQuestions[CurrentQuestion[playerid]][2]);
				va_PlayerTextDrawSetString(playerid, TriviaPTD[3], TriviaQuestions[CurrentQuestion[playerid]][3]);
				for(new i; i < 5; i++) PlayerTextDrawShow(playerid, TriviaPTD[i]);
				SelectTextDraw(playerid, HOVER_COLOR);

				FreezePlayer(playerid, true);
			}
			case 10:
			{
				SPD(playerid, DIALOG_HEISTS, DIALOG_STYLE_LIST, "Heists", "Jefuirea unei afaceri\nJefuirea unor banci\nJefuirea unui port", "Alege", "Anuleaza");
			}
			case 11:
			{
				if(PlayerInfo[playerid][pConnectTime] < PlayerInfo[playerid][pMilestone])
					return Info(playerid, "Mai ai de asteaptat %0.2f ore.", PlayerInfo[playerid][pMilestone] - PlayerInfo[playerid][pConnectTime]);

				for(new i; i < 8; i++)
				{
					TextDrawShowForPlayer(playerid, MilestoneTD[i]);
				}

				SelectTextDraw(playerid, HOVER_COLOR);
				SetPVarInt(playerid, "InMilestone", 1);
			}
			case 12:
			{
				if(PlayerInfo[playerid][pLevel] < 3) return SendMsg(playerid, COLOR_SERVER, "Licenta de navigatie >> {ffffff}Ai nevoie de nivel 3.");
				if(PlayerInfo[playerid][pBoatLic] != 0) return SendMsg(playerid, COLOR_SERVER, "Licenta de navigatie >> {ffffff}Ai deja licenta de navigat.");
				SPD(playerid, DIALOG_SAILING, DIALOG_STYLE_MSGBOX, "Licenta de navigatie", "Esti sigur ca vrei sa cumperi licenta de navigat?\nCosta $300,000.", "Da", "Nu");
			}
			case 13:
			{
				if(PlayerInfo[playerid][pLevel] < 3) return SendMsg(playerid, COLOR_SERVER, "Licenta de aviatie >> {ffffff}Ai nevoie de nivel 3.");
				if(PlayerInfo[playerid][pFlyLic] != 0) return SendMsg(playerid, COLOR_SERVER, "Licenta de aviatie >> {ffffff}Ai deja licenta de avitatie.");
				SPD(playerid, DIALOG_FLY, DIALOG_STYLE_MSGBOX, "Licenta de avitatie", "Esti sigur ca vrei sa cumperi licenta de aviatie?\nCosta $300,000", "Da", "Nu");
			}
			case 14:
			{
				if(PlayerInfo[playerid][pLevel] < 3) return SendMsg(playerid, COLOR_SERVER, "Licenta de arme >> {ffffff}Ai nevoie de nivel 3.");
				if(PlayerInfo[playerid][pGunLic] != 0) return SendMsg(playerid, COLOR_SERVER, "Licenta de arme >> {ffffff}Ai deja licenta de arme.");
				SPD(playerid, DIALOG_WEAPON, DIALOG_STYLE_MSGBOX, "Licenta de arme", "Esti sigur ca vrei sa cumperi licenta de arme?\nCosta $300,000", "Da", "Nu");
			}
			case 15:
			{
				if(PlayerInfo[playerid][pLevel] < 5)
					return SendMsg(playerid, COLOR_SERVER, "Upgrader >> {ffffff}Ai nevoie de nivel 5.");

				if(LuckyType[playerid])
					return SendMsg(playerid, COLOR_SERVER, "Lucky >> {ffffff}Esti deja intr-un Lucky.");

				for(new i = 0; i < sizeof(UpgraderTD); i++)
				{
					TextDrawShowForPlayer(playerid, UpgraderTD[i]);
				}
				for(new i = 2; i < 4; i++)
				{
					PlayerTextDrawSetString(playerid, UpgraderPTD[i], "$0");
				}
				for(new i = 0; i < 2; i++)
				{
					PlayerTextDrawSetPreviewModel(playerid, UpgraderPTD[i], 1274);
				}
				for(new i = 0; i < sizeof(UpgraderPTD); i++)
				{
					PlayerTextDrawShow(playerid, UpgraderPTD[i]);
				}
				SelectTextDraw(playerid, HOVER_COLOR);
				InTextdrawMenu[playerid] = 5;
				UpgradeType[playerid] = 1;
				UpgradeAmount[playerid] = 0;
				UpgradePower[playerid] = 2;
			}
			case 16:
			{
				if(PlayerInfo[playerid][pLevel] >= 3)
					return Info(playerid, "Poti lua acest bonus pana la nivel 3.");

				if(PlayerInfo[playerid][pBonus])
					return Info(playerid, "Ai luat deja bonusul de inceput.");

				SetPVarInt(playerid, "InBonus", 1);
				SetPVarInt(playerid, "Step", 0);
				TextDrawShowForPlayer(playerid, GiftTD);
				PlayerTextDrawSetPreviewModel(playerid, GiftPTD[0], 18631);
				va_PlayerTextDrawSetString(playerid, GiftPTD[1], " "); 
				for(new i; i < 2; i++)
				{
					PlayerTextDrawShow(playerid, GiftPTD[i]);
				}
			}
		}
	}
	if(InRuletaZone[playerid] != -1)
	{
		ShowRoulette(playerid);
	}
	if(InSfvZone[playerid] != 0 && !IsPlayerInAnyVehicle(playerid))
	{
		new
			Member = PlayerInfo[playerid][pMember],
			Faction = InSfvZone[playerid]
		;

		if(InSfvZone[playerid] != Member)
			return Info(playerid, "Nu faci parte din %s.", FactionName(Faction));

		if(OnDuty[playerid] != true && Member != 8)
			return Info(playerid, "Nu esti la datorie.");

		gString[0] = (EOS);

		for(new i = 0; i < 5; i++)
		{
			if(fvVehicles[Faction][i])
			{
				format(gString, sizeof(gString), "%s\n%s", gString, GetVehicleName(fvVehicles[Faction][i]));
			}
		}
		SPD(playerid, DIALOG_SFV, DIALOG_STYLE_LIST, "Vehicul de Factiune", gString, "Alege", "Anuleaza");
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 1387.1040, -1219.1051, 202.4453) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerVirtualWorld(playerid) == (playerid + 1))
	{
		Iter_Remove(InParkour, playerid);
		new
			rand = 5_000_000 + random(5_000_000)
		;
		CP[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPosEx(playerid, LocationPos[6][0], LocationPos[6][1], LocationPos[6][2]);
		PlayerInfo[playerid][pOGPoints] += 50;
		pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
		PlayerInfo[playerid][pParkour] = true;
		pUpdateInt(playerid, "Parkour", PlayerInfo[playerid][pParkour]);
		Info(playerid, "Ai primit $%s, 50 OGPoints, 2PP si 3RP.", FormatNumber(rand));
		GivePlayerCash(playerid, rand);
		GivePlayerPP(playerid, 2);
		GivePlayerRP(playerid, 3);
		GiveGoal(rand);
		va_SendClientMessageToAll(COLOR_SERVER, "Arena >> %s a terminat Parkour-ul si a fost recompensat.", GetName(playerid));
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 161.5606, -83.2514, 1001.8047) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && BizzInfo[InBiz[playerid]][bType] == 8)
	{
		if(escapedat[playerid] == 2)
		{	
			SetPlayerWantedLevel(playerid, 0);
			PlayerTextDrawHide(playerid, WantedText);
			pUpdateInt(playerid, "WantedLevel", 0);
			escapedat[playerid] = 0;
			WantedPoints[playerid] = 0;
			PlayerInfo[playerid][pWantedLevel] = 0;
			Info(playerid, "Ai finalizat evadarea cu succes, politistii ti-au pierdut urmele.");
			return true;
		}

		if(PlayerInfo[playerid][pWantedLevel])
			return SendMsg(playerid, COLOR_SERVER, "Clothing Store >> {ffffff}Ai wanted.");

		new Skin = ServerSkins[0][0];
		SetPVarInt(playerid, "InClothing", 1);
		SkinClothing[playerid] = 0;
		for(new i; i < sizeof(ClothingStoreTD); i++)
		{
			TextDrawShowForPlayer(playerid, ClothingStoreTD[i]);
		}
		va_PlayerTextDrawSetString(playerid, ClothingStorePTD[0], "Skin %d~n~~n~%s", Skin, GetSkinRarity(Skin));
		for(new i; i < sizeof(ClothingStorePTD); i++)
		{
			PlayerTextDrawShow(playerid, ClothingStorePTD[i]);
		}
		va_PlayerTextDrawSetString(playerid, ClothingStorePTD[1], "%dPP", GetSkinPP(Skin));
		va_PlayerTextDrawSetString(playerid, ClothingStorePTD[2], "%dKK", GetSkinMoney(Skin) / 1000000);
		SelectTextDraw(playerid, HOVER_COLOR);
		SetPlayerSkin(playerid, Skin);
		FreezePlayer(playerid, true);
		SetPlayerPosEx(playerid, 181.7952, -88.6465, 1002.0234);
		SetPlayerFacingAngle(playerid, 53.2589);
		InterpolateCameraPos(playerid, 170.991195, -85.620498, 1004.253356, 179.005157, -87.667457, 1002.321289, 1000);
		InterpolateCameraLookAt(playerid, 175.688903, -87.032951, 1003.285644, 183.418029, -90.015251, 1002.441162, 1000);
		SetPlayerVirtualWorld(playerid, playerid + 1);
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1754.3385,-1581.8805,12.4487) || IsPlayerInRangeOfPoint(playerid, 5.0, 1812.1967,-1536.2157,13.0976) && GetPlayerVirtualWorld(playerid) == 305500 && GetPlayerInterior(playerid) == 0){
		if(PlayerInfo[playerid][pEscapePoints] < 10) return Info(playerid, "Nu ai 10 escape points.");
		if(escapedat[playerid]) return Info(playerid, "Asteapta cateva secunde pentru a sapa din nou.");
		GivePlayerWeapon(playerid, 6, 69);
		OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		defer EscapeTimer(playerid, PlayerInfo[playerid][pSession]);
		escapedat[playerid] = 1;
	} 
	if(GetPlayerInterior(playerid) && IsPlayerInRangeOfPoint(playerid, 5.0, 314.2594, -133.6906, 999.6016) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT){
		GunShopSelected[playerid] = 1;
		ShowGS(playerid);
	} 
	if(IsPlayerInRangeOfPoint(playerid, 2, -104.0322, -22.6779, 1000.7188) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && BizzInfo[InBiz[playerid]][bType] == 3){
		SPD(playerid, DIALOG_SEXSHOP,DIALOG_STYLE_LIST,"Magazin Erotic","Purple Dildo ($100)\nSmall White Vibrator ($100)\nSilver Vibrator ($100)\nLarge White Vibrator ($100)\nFlowers ($150)","Alege","Anuleaza");
	} 
	if(IsPlayerInRangeOfPoint(playerid, 2, -27.9863, -89.9510, 1003.5469) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && BizzInfo[InBiz[playerid]][bType] == 5)
	{
		SPD(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, "Non-Stop","Walkie Talkie ($2,500)\nGas Can ($2,500)", "Alege", "Anuleaza");
	} 
	if(IsPlayerInRangeOfPoint(playerid, 2, 377.5607, -67.4351, 1001.5078) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && BizzInfo[InBiz[playerid]][bType] == 6){
		for(new i; i < 5; i++) TextDrawShowForPlayer(playerid, BGTD[i]);
		SelectTextDraw(playerid, HOVER_COLOR);
		SetPVarInt(playerid, "InBurger", 1);
	} 
	if(NearbyRent(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		for(new i = 0; i < 4; i++)
		{
			TextDrawShowForPlayer(playerid, RentVehicleTD[i]);
		}

		PlayerTextDrawSetPreviewModel(playerid, RentVehiclePTD[0], RentVehicles[0][0]);

		va_PlayerTextDrawSetString(playerid, RentVehiclePTD[1], "%s~n~~n~~n~~n~~n~~n~$%s", GetVehicleName(RentVehicles[0][0]), FormatNumber(RentVehicles[0][1]));

		for(new i = 0; i < 2; i++)
		{
			PlayerTextDrawShow(playerid, RentVehiclePTD[i]);
		}

		SelectTextDraw(playerid, HOVER_COLOR);

		InTextdrawMenu[playerid] = 1;

		SelectedRentVehicle[playerid] = 0;

		AtRentBiz[playerid] = NearbyRent(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 539.8737, -1806.7468, 6.0625)) return SPD(playerid, DIALOG_BASIC, DIALOG_STYLE_LIST, "Basic Crate", "50 OGPoints", "Cumpara", "Anuleaza");
	if(IsPlayerInRangeOfPoint(playerid, 2, 543.3936, -1806.6151, 6.0625)) return SPD(playerid, DIALOG_NORMAL, DIALOG_STYLE_LIST, "Normal Crate", "100 OGPoints", "Cumpara", "Anuleaza");
	if(IsPlayerInRangeOfPoint(playerid, 2, 544.6931, -1807.6870, 6.0625)) return SPD(playerid, DIALOG_MEDIUM, DIALOG_STYLE_LIST, "Medium Crate", "150 OGPoints", "Cumpara", "Anuleaza");
	if(IsPlayerInRangeOfPoint(playerid, 2, 544.8458, -1811.1481, 6.0625)) return SPD(playerid, DIALOG_DIAMOND, DIALOG_STYLE_LIST, "Diamond Crate", "250 OGPoints", "Cumpara", "Anuleaza");
	if(IsPlayerInRangeOfPoint(playerid, 2, 544.8479, -1815.3947, 6.0625)) return SPD(playerid, DIALOG_VEHICLE, DIALOG_STYLE_LIST, "Vehicle Crate", "1000 OGPoints", "Cumpara", "Anuleaza");
	if(IsPlayerInRangeOfPoint(playerid, 2, 544.8452, -1819.1011, 6.0625)) return SPD(playerid, DIALOG_FRAGMENT, DIALOG_STYLE_LIST, "Fragment Crate", "200 OGPoints", "Cumpara", "Anuleaza");
	if(IsPlayerInRangeOfPoint(playerid, 2, 543.4644, -1820.6315, 6.0625)) return SPD(playerid, DIALOG_SKIN, DIALOG_STYLE_LIST, "Skin Crate", "$100,000,000\n50PP", "Cumpara", "Anuleaza");
	if(IsPlayerInRangeOfPoint(playerid, 2, 539.7991, -1820.6997, 6.0625)) return SPD(playerid, DIALOG_OGCRATE, DIALOG_STYLE_LIST, "OG Crate", "2,222 OGPoints", "Cumpara", "Anuleaza");


	if(IsPlayerInRangeOfPoint(playerid, 50, 834.0693, 7.2953, 1004.1870) && GetPlayerInterior(playerid) == 3 && PlayerInfo[playerid][pPC] && GetPVarInt(playerid, "bitcoin") < 1)
	{
		new
			rand = 1 + random(5) + (PlayerInfo[playerid][pPC] - 1)
		;
		SetPVarInt(playerid, "bitcoin", rand);
		Info(playerid, "In urma minarii, ai primit %d bitcoin.", rand);
		Info(playerid, "Mergi la PC Dealer pentru a vinde bitcoin-ul.");
	} 
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && ClosestJob(playerid) != 0){

		if(PlayerInfo[playerid][pJob] != 0 && ClosestJob(playerid) != PlayerInfo[playerid][pJob])
			return Info(playerid, "Ai deja un Job, foloseste comanda /quitjob.");

		if(ClosestJob(playerid) == PlayerInfo[playerid][pJob])
			return Work(playerid);

		new
			Job = ClosestJob(playerid)
		;

		if(PlayerInfo[playerid][pTutorial])
		{
			if(Job != 6)
				return SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Poti lua doar Jobul de Pescar deoarece esti in Tutorial.");

			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Felicitari, ti-ai luat Jobul de Pescar.");
			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Pentru a incepe sa muncesti, apasa tasta Y, apoi apasa pe fiecare Peste.");
		}

		SetJob(playerid, Job);
	}
	if(InClanGarageZone[playerid] != 0 && !IsPlayerInAnyVehicle(playerid))
	{
		new
			PlayerClan = PlayerInfo[playerid][pClan],
			GarageClan = InClanGarageZone[playerid]
		;

		if(PlayerClan != GarageClan)
			return Info(playerid, "Acest garaj apartine clanului %s.", ClanInfo[GarageClan][clanName]);

		SPD(playerid, DIALOG_SCV, DIALOG_STYLE_LIST, "Vehicul de Clan", "Infernus\nBullet\nSultan\nTurismo\nBanshee\nSandking\nHuntley\nElegy\nComet", "Alege", "Anuleaza");
	}
	if(InSlotsZone[playerid] != -1)
	{
		for(new i = 0; i < 17; i++)
		{
			TextDrawShowForPlayer(playerid, SlotsTD[i]);
		}
		for(new i = 0; i < 3; i++)
		{
			for(new j = 0; j < 3; j++)
			{
				ObjectSlots[playerid][i][j] = 1239;
			}
		}
		for(new i = 0; i < 9; i++)
		{
			PlayerTextDrawSetPreviewModel(playerid, SlotsPTD[i], 1239);
			PlayerTextDrawShow(playerid, SlotsPTD[i]);
		}
		InTextdrawMenu[playerid] = 3;
		SelectTextDraw(playerid, HOVER_COLOR);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 1993.5016, 1005.5135, 994.4688))
	{
		if(LuckyType[playerid])
			return SendMsg(playerid, COLOR_SERVER, "Lucky >> {ffffff}Esti deja intr-un Lucky.");

		SPD(playerid, DIALOG_LUCKY, DIALOG_STYLE_INPUT, "Lucky", "Introdu suma de bani:", "Inainte", "Anuleaza");
	}
	return true;
}

function BuyPC(playerid)
{
	if(PlayerInfo[playerid][pPC] >= 3) return Info(playerid, "Ai nivelul maxim la PC.");
	if(InLocationZone[playerid] != 3) return Info(playerid, "Nu esti la PC Dealer.");
	new
		money = (PlayerInfo[playerid][pPC] + 1) * 300_000_000
	;
	if(GetPlayerCash(playerid) < money) return Info(playerid, "Ai nevoie de $%s pentru a achizitiona un PC!", FormatNumber(money));
	GivePlayerCash(playerid, -money);
	PlayerInfo[playerid][pPC] ++;
	pUpdateInt(playerid, "PC", PlayerInfo[playerid][pPC]);
	Info(playerid, "Ai achizitionat cu succes un PC de nivel %d.", PlayerInfo[playerid][pPC]);
	Info(playerid, "Acum poti merge la Bitcoin House pentru a mina Bitcoin.");
	return true;
}

function ActionWithKeyN(playerid)
{
	if(ClosestJob(playerid) != 0)
	{
		PC_EmulateCommand(playerid, "/quitjob");
	}
	else if(InLocationZone[playerid] == 3)
	{
		BuyPC(playerid);
	}
	else
	{
		if(PlayerInfo[playerid][pSettings][9] != false)
		{
			if(PlayerInfo[playerid][pTutorial] != true)
			{			
				PC_EmulateCommand(playerid, "/m");
			}
		}
		else
		{
			Lock(playerid);
		}
	}
	return true;
}

function ActionWithHorn(playerid)
{
	if(Iter_Contains(InStunt, playerid))
	{
		SetVehiclePos(StuntVehicle[playerid], 1429.0388, -2592.8960, 13.5469);
		SetVehicleZAngle(StuntVehicle[playerid], 270);
		RepairVehicleEx(StuntVehicle[playerid]);
		StuntTime[playerid] = 90;
		va_PlayerTextDrawSetString(playerid, StuntPTD, "Stunt System~n~~w~Mai ai %d de secunde.", StuntTime[playerid]);
	}
	if(NearbyPNS(playerid))
	{
		new
			Biz = NearbyPNS(playerid),
			EntranceCost = BizzInfo[Biz][bEntranceCost]
		;

		if(GetPlayerCash(playerid) < EntranceCost)
			return SendMsg(playerid, COLOR_SERVER, "Reparare Vehicul >> {ffffff}Nu-ti poti repara vehicului deoarece nu ai $%s.", FormatNumber(EntranceCost));

		new
			Float: PnsInterios[11][4] =
			{	
				{2065.2141, -1831.6058, 13.2739, 91.0345},
				{487.9566, -1740.7080, 10.8720, 174.8078},
				{1024.6099, -1024.4561, 31.8289, 3.4865},
				{719.7646, -458.1036, 16.0637, 1.3330},
				{2393.6670, 1489.1577, 10.5526, 1.3497},
				{1974.1426, 2162.6785, 10.7974, 273.9581},
				{-100.6313, 1117.8337, 19.4688, 1.3276},
				{-1420.5349, 2585.6631, 55.5706, 180.8814},
				{-1936.0715, 243.6312, 34.1866, 0.0143},
				{-1904.7494, 283.6280, 40.7743, 0.8136},
				{-2425.5066, 1022.5943, 50.1250, 179.4500}
			},
			ClosestInterior = 0
		;

		for(new i = 0; i < sizeof(PnsInterios); i++)
		{
			new
				Float: X = PnsInterios[i][0],
				Float: Y = PnsInterios[i][1],
				Float: Z = PnsInterios[i][2],
				Float: LastX = PnsInterios[ClosestInterior][0],
				Float: LastY = PnsInterios[ClosestInterior][1],
				Float: LastZ = PnsInterios[ClosestInterior][2]
			;
			if(GetPlayerDistanceFromPoint(playerid, X, Y, Z) < GetPlayerDistanceFromPoint(playerid, LastX, LastY, LastZ))
			{
				ClosestInterior = i;
			}
		}

		new
			Float: FinalX = PnsInterios[ClosestInterior][0],
			Float: FinalY = PnsInterios[ClosestInterior][1],
			Float: FinalZ = PnsInterios[ClosestInterior][2],
			Float: FinalA = PnsInterios[ClosestInterior][3],
			vehicleid = GetPlayerVehicleID(playerid),
			Float: X,
			Float: Y,
			Float: Z,
			Float: A,
			ActualVw = GetPlayerVirtualWorld(playerid)
		;

		GetVehiclePos(vehicleid, X, Y, Z);
		GetVehicleZAngle(vehicleid, A);

		SetVehicleVirtualWorld(vehicleid, playerid + 1);
		SetPlayerVirtualWorld(playerid, playerid + 1);
		OnPlayerGoto(playerid, 0, playerid + 1);
		SetVehiclePos(vehicleid, FinalX, FinalY, FinalZ);
		SetVehicleZAngle(vehicleid, FinalA);

		FreezePlayer(playerid, true);

		GivePlayerCash(playerid, -EntranceCost);
		BizzInfo[Biz][bTill] += EntranceCost;
		Query_Mysql("UPDATE `bizz` SET `Till` = '%d' WHERE `ID` = '%d'", BizzInfo[Biz][bTill], Biz);
		ProgressToTask(playerid, 1, 1);

		LastVehicleHealth[vehicleid] = 1000.0;

		defer BackToPns(playerid, X, Y, Z, A, ActualVw, PlayerInfo[playerid][pSession]);
	}
	if(NearbyTuning(playerid))
	{
		if(!IsPlayerInAnyVehicle(playerid))
			return SendMsg(playerid, COLOR_SERVER, "Tuning >> {ffffff}Trebuie sa fie intr-un vehicul.");

		if(!OwnableVehicle(GetPlayerVehicleID(playerid)))
			return SendMsg(playerid, COLOR_SERVER, "Tuning >> {ffffff}Poti tuna doar vehiculele personale.");

		SelectedModification[playerid] = 1;
		RotationModification[playerid] = 0;

		new
			vehicleid = GetPlayerVehicleID(playerid),
			model = GetVehicleModel(vehicleid)
		;

		if(model < 1)
			return SendMsg(playerid, COLOR_SERVER, "Tuning >> {ffffff}Trebuie sa fi intr-un vehicul.");

		if(ValidModifications[model - 400][1] == 0000)
			return SendMsg(playerid, COLOR_SERVER, "Tuning >> {ffffff}Acest vehicul nu suporta modificari.");

		for(new i = 0; i < 5; i++)
		{
			TextDrawShowForPlayer(playerid, TuningTD[i]);
		}

		InTextdrawMenu[playerid] = 2;

		ShowTuning(playerid);

		SelectTextDraw(playerid, HOVER_COLOR);
	}
	if(InGarageZone[playerid] != 0)
	{
		new
			casa = InGarageZone[playerid]
		;

		if((PlayerInfo[playerid][pRented] == casa && HouseInfo[casa][hGarageLocked] == false) || PlayerInfo[playerid][pHouse] == casa)
		{
			new
				vehicleid = GetPlayerVehicleID(playerid),
				slot = -1,
				Float: X,
				Float: Y,
				Float: Z,
				Float: Angle
			;

			if(!OwnableVehicle(vehicleid) || !IsPlayerInAnyVehicle(playerid))
				return SendMsg(playerid, COLOR_SERVER, "Garage >> {ffffff}Nu esti intr-un vehicul personal.");

			for(new v = 0; v < MAX_PERSONAL_VEHICLES; v++)
			{ 
				if(vehicleid == PlayerInfo[playerid][pVehID][v])
				{
					slot = v;
				}
			}

			if(slot == -1)
				return SendMsg(playerid, COLOR_SERVER, "Garage >> {ffffff}Nu esti in vehiculul tau.");

			if(PlayerInfo[playerid][pVehInGarage][slot] != true)
			{			
				PlayerInfo[playerid][pVehInGarage][slot] = true;

				gString[0] = (EOS);
				mysql_format(SQL, gString, 64, "update cars set InGarage = %d where id = %d", PlayerInfo[playerid][pVehInGarage][slot], PlayerInfo[playerid][pVeh][slot]);
				mysql_tquery(SQL, gString);
			}

			GetVehiclePos(vehicleid, X, Y, Z);
			GetVehicleZAngle(vehicleid, Angle);
			PlayerInfo[playerid][pVehLocX][slot] = X;
			PlayerInfo[playerid][pVehLocY][slot] = Y;
			PlayerInfo[playerid][pVehLocZ][slot] = Z;
			PlayerInfo[playerid][pVehAngle][slot] = Angle;
			cUpdate(playerid, slot, pVehLocX);
			cUpdate(playerid, slot, pVehLocY);
			cUpdate(playerid, slot, pVehLocZ);
			cUpdate(playerid, slot, pVehAngle);
			DestroyNeon(PlayerInfo[playerid][pVehID][slot]);
			DestroyVehicleEx(PlayerInfo[playerid][pVehID][slot]);


			SendMsg(playerid, COLOR_SERVER, "Garage >> {ffffff}Ti-ai parcat %s-ul in garaj.", GetVehicleName(PlayerInfo[playerid][pVehModel][slot]));
		}
		else
		{
			SendMsg(playerid, COLOR_SERVER, "Garage >> {ffffff}Acest garaj este incuiat.");
		}
	}
	return true;
}

function ActionWithKeyF(playerid)
{
	if(StopFly(playerid) != false)
	{
		SetPlayerHP(playerid, 100);
		SetPlayerArmour(playerid, 0);
	}

	Intrari(playerid);
	return true;
}

function ActionWithKeyALT(playerid)
{
	if(Spectate[playerid] != -1)
	{
		PC_EmulateCommand(playerid, "/specoff");
	}
	if(TradeID[playerid] != -1)
	{
		new id = TradeID[playerid];
		Info(playerid, "%s a anulat afacerea!", GetName(playerid)); 
		Info(id, "%s a anulat afacerea!", GetName(playerid)); 
		HideTradeItems(playerid);
		HideTradeItems(id);
		HideTradeTDs(id);
		HideTradeTDs(playerid);
		CancelSelectTextDraw(playerid);
		CancelSelectTextDraw(id);
	}
	if(GetPVarInt(playerid, "InTrivia"))
	{
		CloseTrivia(playerid);
	}
	if(GunShopSelected[playerid] != 0)
	{
		HideGS(playerid);
	}
	if(GetPVarInt(playerid, "InBurger"))
	{ 
		for(new i; i < 5; i++)
		{
			TextDrawHideForPlayer(playerid, BGTD[i]); 
		}
		CancelSelectTextDraw(playerid); 
		SetPVarInt(playerid, "InBurger", 0); 
	}
	if(Iter_Contains(InRuleta, playerid))
	{
		HideRoulette(playerid);
	}
	if(GetPVarInt(playerid, "InMilestone"))
	{
		HideMilestone(playerid);
	}
	if(GetPVarInt(playerid, "InTelefon"))
	{
		ClosePhone(playerid);
	}
	if(GetPVarInt(playerid, "InClothing"))
	{
		ExitClothing(playerid);
	}
	return true;
}

function ShowInventory(playerid, page)
{
	new
		OldPage = InventoryPage[playerid]
	;
	
	if(OldPage == page)
		return SendMsg(playerid, COLOR_SERVER, "Inventory >> {ffffff}Esti deja pe aceasta categorie.");

	InventoryPage[playerid] = page;

	if(OldPage == 0)
	{
		for(new i = 0; i < 9; i ++)
		{
			TextDrawShowForPlayer(playerid, InventoryTD[i]);
		}
		PlayerTextDrawSetPreviewModel(playerid, InventoryPTD[0], PlayerInfo[playerid][pModel]);
		PlayerTextDrawShow(playerid, InventoryPTD[0]);
	}

	switch(page)
	{
		case 1:
		{
			if(OldPage == 2 || OldPage == 3)
			{
				for(new i = 1; i < 7; i++)
				{
					if(PlayerInfo[playerid][pWeapons][i] != 0)
					{
						va_PlayerTextDrawSetString(playerid, InventoryPTD[i], "x%d", PlayerInfo[playerid][pWeapons][i]);
						PlayerTextDrawShow(playerid, InventoryPTD[i]);
					}
				}
				for(new i = 4; i < 23; i++)
				{
					if(i >= 11 && i <= 16)
					{
						if(PlayerInfo[playerid][pWeapons][i - 10] != 0)
						{
							TextDrawShowForPlayer(playerid, InventoryTD[i]);
						}
						continue;
					}
					TextDrawShowForPlayer(playerid, InventoryTD[i]);
				}
				for(new i = 7; i < 9; i++)
				{
					PlayerTextDrawHide(playerid, InventoryPTD[i]);
				}
			}
			for(new i = 1; i < 7; i++)
			{
				if(PlayerInfo[playerid][pWeapons][i] != 0)
				{
					va_PlayerTextDrawSetString(playerid, InventoryPTD[i], "x%d", PlayerInfo[playerid][pWeapons][i]);
					PlayerTextDrawShow(playerid, InventoryPTD[i]);
				}
			}
			for(new i = 9; i < sizeof(InventoryTD); i++)
			{
				if(i >= 11 && i <= 16)
				{
					if(PlayerInfo[playerid][pWeapons][i - 10] != 0)
					{
						TextDrawShowForPlayer(playerid, InventoryTD[i]);
					}
					continue;
				}
				TextDrawShowForPlayer(playerid, InventoryTD[i]);
			}
		}
		case 2:
		{
			if(OldPage == 1)
			{
				for(new i = 1; i < 7; i++)
				{
					PlayerTextDrawHide(playerid, InventoryPTD[i]);
				}
				for(new i = 4; i < 23; i++)
				{
					TextDrawHideForPlayer(playerid, InventoryTD[i]);
				}
			}
			PlayerTextDrawSetPreviewRot(playerid, InventoryPTD[7], -90.000000, 0.000000, -10.000000, 0.680000);
			PlayerTextDrawSetPreviewModel(playerid, InventoryPTD[7], 2703);
			va_PlayerTextDrawSetString(playerid, InventoryPTD[8], "x%d", PlayerInfo[playerid][pBurger]);
			for(new i = 7; i < 9; i++)
			{
				PlayerTextDrawShow(playerid, InventoryPTD[i]);
			}
		}
		case 3:
		{
			if(OldPage == 1)
			{
				for(new i = 1; i < 7; i++)
				{
					PlayerTextDrawHide(playerid, InventoryPTD[i]);
				}
				for(new i = 4; i < 23; i++)
				{
					TextDrawHideForPlayer(playerid, InventoryTD[i]);
				}
			}
			PlayerTextDrawSetPreviewRot(playerid, InventoryPTD[7], 0.000000, 0.000000, 0.000000, 0.850000);
			PlayerTextDrawSetPreviewModel(playerid, InventoryPTD[7], 1509);
			va_PlayerTextDrawSetString(playerid, InventoryPTD[8], "x%d", PlayerInfo[playerid][pSoda]);
			for(new i = 7; i < 9; i++)
			{
				PlayerTextDrawShow(playerid, InventoryPTD[i]);
			}
		}
	}
	return true;
}

function HideInventory(playerid)
{
	for(new i = 0; i < sizeof(InventoryTD); i ++)
	{
		TextDrawHideForPlayer(playerid, InventoryTD[i]);
	}
	for(new i = 0; i < sizeof(InventoryPTD); i ++)
	{
		PlayerTextDrawHide(playerid, InventoryPTD[i]);
	}
	InventoryPage[playerid] = 0;
	InTextdrawMenu[playerid] = 0;
	CancelSelectTextDraw(playerid);
	return true;
}

function ActionWithKeyH(playerid)
{
	if(InTextdrawMenu[playerid] < 1 && GetPVarInt(playerid, "aoponent") == -1 && !Iter_Contains(InSkyWars, playerid) && !Iter_Contains(InPaint, playerid) && InGarageZone[playerid] < 1)
	{
		InventoryPage[playerid] = 0;
		ShowInventory(playerid, 1);
		SelectTextDraw(playerid, HOVER_COLOR);
		InTextdrawMenu[playerid] = 6;
	}
	return true;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	switch(newkeys)
	{
		case KEY_SPRINT:
		{
			if(gPlayerUsingLoopingAnim[playerid])
			{
				StopLoopingAnim(playerid);
			}
		}
		case KEY_YES:
		{
			ActionWithKeyY(playerid);
		}
		case KEY_NO:
		{
			ActionWithKeyN(playerid);
		}
		case KEY_CROUCH:
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				ActionWithHorn(playerid);
			}
		}
		case KEY_SECONDARY_ATTACK:
		{
			ActionWithKeyF(playerid);
		}
		case KEY_WALK:
		{
			ActionWithKeyALT(playerid);
		}
		case KEY_LOOK_BEHIND:
		{
			if(GetPlayerState(playerid)	== PLAYER_STATE_DRIVER)
			{
				Engine(playerid);
			}
		}
		case KEY_ACTION:
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				Lights(playerid);
			}
		}
		case KEY_CTRL_BACK:
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				ActionWithKeyH(playerid);	
			}
		}
	}
	return true;
}
public OnVehicleSpawn(vehicleid){
	foreach(new i : Player){
		if(LastVeh[i] == vehicleid)
		{
			LastVeh[i] = 0;
		}
	}
	if(RainbowOn[vehicleid])
	{
		RainbowOn[vehicleid] = false;
		if(Iter_Contains(RainbowVehicles, vehicleid))
		{
			Iter_Remove(RainbowVehicles, vehicleid);
			RainbowStep[vehicleid] = 0;
		}
	}
	DestroyNeon(vehicleid);
	vehRadio[vehicleid] = 0;
	VehicleEngine[vehicleid] = false;
	if(!OwnableVehicle(vehicleid)){
		Gas[vehicleid] = 100;
		SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
		if(Iter_Contains(SpawnVehs, vehicleid)) DestroyVehicleEx(vehicleid), Iter_Remove(SpawnVehs, vehicleid);
		foreach(new i : Player){
			if(JobVeh[i] == vehicleid)
			{
				DestroyVehicleEx(JobVeh[i]);
				JobVeh[i] = -1;
				break;
			}
			if(RentVeh[i] == vehicleid){
				DestroyVehicleEx(RentVeh[i]);
				RentVeh[i] = -1;
				Info(i, "Vehiculul inchiriat a fost distrus.");
				break;
			}
			if(QuestVeh[i] == vehicleid){
				if(Iter_Contains(InRaceQuest, i))
				{
					ExitRace(i);

					Iter_Remove(InRaceQuest, i);
				}
				else
				{
					DestroyVehicleEx(QuestVeh[i]);
					QuestVeh[i] = -1;
					DisablePlayerCheckpoint(i);
					CP[i] = 0;
					Info(i, "Vehiculul de Quest a fost distrus.");
				}
				break;
			}
			if(pfVehicle[i] == vehicleid)
			{
				DestroyVehicleEx(pfVehicle[i]);
				Iter_Remove(fVehicles[PlayerInfo[i][pMember]], pfVehicle[i]);
				pfVehicle[i] = -1;
				break;
			}
			if(pcVehicle[i] == vehicleid)
			{
				DestroyVehicleEx(pcVehicle[i]);
				Iter_Remove(cVehicles[PlayerInfo[i][pClan]], pcVehicle[i]);
				pcVehicle[i] = -1;
				break;
			}
		}
	}
	else {
		foreach(new i : Player){
			for(new v; v < MAX_PERSONAL_VEHICLES; v++){
				if(PlayerInfo[i][pVehID][v] == vehicleid){
					DestroyVehicleEx(vehicleid);
					break;
				}
			}
		}
	}
	return true;
}
function IsPlayerInTurf(playerid, turfid)
{
	if(turfid == -1)
		return false;

	if(InTurfZone[playerid] == turfid)
		return true;

	return false;
}
function PayDay(playerid){
	if(!IsPlayerConnected(playerid) || !Logat[playerid]) return true;
	if(PlayerInfo[playerid][pVehLic]) PlayerInfo[playerid][pVehLic] --, pUpdateInt(playerid,"CarLic", PlayerInfo[playerid][pVehLic]);
	if(PlayerInfo[playerid][pVehLicSuspend]) PlayerInfo[playerid][pVehLicSuspend] --, pUpdateInt(playerid, "CarLicSuspend", PlayerInfo[playerid][pVehLicSuspend]);
	if(PlayerInfo[playerid][pFlyLic]) PlayerInfo[playerid][pFlyLic] --, pUpdateInt(playerid,"FlyLic", PlayerInfo[playerid][pFlyLic]);
	if(PlayerInfo[playerid][pBoatLic]) PlayerInfo[playerid][pBoatLic] --, pUpdateInt(playerid,"BoatLic", PlayerInfo[playerid][pBoatLic]);
	if(PlayerInfo[playerid][pGunLic]) PlayerInfo[playerid][pGunLic] --, pUpdateInt(playerid,"GunLic", PlayerInfo[playerid][pGunLic]);
	if(PlayerInfo[playerid][pFpunish]) PlayerInfo[playerid][pFpunish] --;
	if(PlayerInfo[playerid][pFpunish] && HaveVIP(playerid)) PlayerInfo[playerid][pFpunish] --;
	pUpdateInt(playerid,"FPunish", PlayerInfo[playerid][pFpunish]);
	if(PlayerInfo[playerid][pRented] != -1)
	{
		new
			renthouse = PlayerInfo[playerid][pRented],
			rent = HouseInfo[renthouse][hRent]
		;
		if(rent > GetPlayerBank(playerid))
		{
			PlayerInfo[playerid][pRented] = -1;
			pUpdateInt(playerid,"Rented", -1);
			PlayerInfo[playerid][pSpawnChange] = 0;
			pUpdateInt(playerid, "SpawnChange", PlayerInfo[playerid][pSpawnChange]);
		}
		if(rent <= GetPlayerBank(playerid)){
			GivePlayerBank(playerid, -rent);
			HouseInfo[renthouse][hTakings] += rent; 
			Query_Mysql("UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d'", HouseInfo[renthouse][hTakings], renthouse);
		}
	}
	PlayerInfo[playerid][pConnectTime] += PlayerInfo[playerid][pPayDay] / 3600.0;
	pUpdateFloat(playerid, "ConnectedTime", Float: PlayerInfo[playerid][pConnectTime]); 
	PlayerInfo[playerid][pActivity] += (PlayerInfo[playerid][pPayDay] / 36);
	pUpdateInt(playerid, "Activity", PlayerInfo[playerid][pActivity]);
	ProgressToPerkMissions(playerid, 11, PlayerInfo[playerid][pPayDay] / 3600);
	if(PlayerInfo[playerid][pEscapePoints] < 20) PlayerInfo[playerid][pEscapePoints] ++;
	if(HaveVIP(playerid) && PlayerInfo[playerid][pEscapePoints] < 20) PlayerInfo[playerid][pEscapePoints] ++;
	if(PlayerInfo[playerid][pRob] < 20) PlayerInfo[playerid][pRob] ++;
	if(HaveVIP(playerid) && PlayerInfo[playerid][pRob] < 20) PlayerInfo[playerid][pRob] ++;
	PlayerInfo[playerid][pPayDay] = 0;
	pUpdateInt(playerid,"PayDay", 0);
	PlayerInfo[playerid][pRespect] ++; 
	if(HavePremium(playerid)) PlayerInfo[playerid][pRespect] ++;
	new are;
	for(new i; i < PlayerInfo[playerid][pSkinSlots]; i++){
		if(PlayerInfo[playerid][pSkins][i] == PlayerInfo[playerid][pModel]){
			are = 1;
		}
	}
	if(SkinRarity(PlayerInfo[playerid][pModel]) && are){
		new rpp;
		if(SkinRarity(PlayerInfo[playerid][pModel]) == 3) rpp = 2;
		if(SkinRarity(PlayerInfo[playerid][pModel]) == 4) rpp = 3; 
		PlayerInfo[playerid][pRespect] += rpp;
		SendMsg(playerid, COLOR_SERVER, "PayDay >> {ffffff}Datorita Skin-ului pe care-l porti, ai primit %d RP in plus.", rpp);
	}
	if(PlayerInfo[playerid][pJobBoost]) PlayerInfo[playerid][pJobBoost] --, pUpdateInt(playerid,"JobBoost", PlayerInfo[playerid][pJobBoost]);
	if(HaveVIP(playerid)) GivePlayerBank(playerid, 150000), SendMsg(playerid, COLOR_SERVER, "PayDay >> {ffffff}Ai primit $150,000 in banca deoarece ai Cont VIP.");
	SendMsg(playerid, COLOR_SERVER, "PayDay >> {ffffff}Ai primit 10 Spin, 200 GiftPoints si 5 OGPoints.");
	PlayerInfo[playerid][pOGPoints] += 5;
	if(PlayerInfo[playerid][pPet]){ 
		SendMsg(playerid, COLOR_SERVER, "PayDay >> {ffffff}Deoarece pet-ul tau are nivel %d ai primit $%s si un rp.", PlayerInfo[playerid][pPetlevel], FormatNumber(PlayerInfo[playerid][pPetlevel] * 100000));
		GivePlayerCash(playerid, PlayerInfo[playerid][pPetlevel] * 100000);
		PlayerInfo[playerid][pRespect] ++;
		pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pRespect]);
		PlayerInfo[playerid][pPetPoints] ++; 
		pUpdateInt(playerid,"PetPoints", PlayerInfo[playerid][pPetPoints]); 
	}
	PlayerInfo[playerid][pGiftPoints] += 200; 
	PlayerInfo[playerid][pSpin] += 10; 
	pUpdateInt(playerid, "Spin", PlayerInfo[playerid][pSpin]);
	if(PlayerInfo[playerid][pConnectTime] >= 50 && !PlayerInfo[playerid][pAchievement][3]) FinishAchievement(playerid, 3); 
	if(!PlayerInfo[playerid][pZiuaColectat]){
		switch(PlayerInfo[playerid][pZiua]){
			case 1: GivePlayerCash(playerid, 1000000);
			case 2: PlayerInfo[playerid][pRespect] += 3;
			case 3: PlayerInfo[playerid][pPremiumPoints] += 3, pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
			case 4: PlayerInfo[playerid][pGiftPoints] += 500;
			case 5: PlayerInfo[playerid][pOGPoints] += 150;
			case 6: GivePlayerCash(playerid, 4000000);
			case 7: PlayerInfo[playerid][pRespect] += 7;
			case 8: PlayerInfo[playerid][pPremiumPoints] += 6, pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
			case 9: GivePlayerCash(playerid, 6000000);
			case 10: InsertVehicle(playerid, 18, true);
		}
		SendMsg(playerid, COLOR_SERVER, "PayDay >> {ffffff}Ai colectat recompensa Zilei %d.", PlayerInfo[playerid][pZiua]);
		PlayerInfo[playerid][pZiuaColectat] = true;
		pUpdateInt(playerid, "ZiuaColectat", PlayerInfo[playerid][pZiuaColectat]);
		if(HavePremium(playerid)){
			PlayerInfo[playerid][pPremiumPoints] ++;
			pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
			SendMsg(playerid, COLOR_SERVER, "PayDay >> {ffffff}Ai primit 1PP deoarece ai Cont Premium si ai luat primul PayDay.");
		}
	}
	if(PlayerInfo[playerid][pActivePotions][1] > gettime())
	{
		GivePlayerRP(playerid, 1);
		SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Ai primit un punct de respect deoarece folosesti epic potion.");
	}
	pUpdateInt(playerid, "EscapePoints", PlayerInfo[playerid][pEscapePoints]);
	pUpdateInt(playerid, "Rob", PlayerInfo[playerid][pRob]);
	pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pRespect]);
	pUpdateInt(playerid, "GiftPoints", PlayerInfo[playerid][pGiftPoints]);
	pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
	UpdateLevelBar(playerid);
	ProgressToPerkMissions(playerid, 8, 1);

	if(PlayerInfo[playerid][pPayDaysToday] % 2 == 0 && HavePremium(playerid))
	{
		GivePlayerRP(playerid, 1);

		SendMsg(playerid, COLOR_SERVER, "Premium >> {ffffff}Ai primit un punct de respect deoarece ai cont premium.");
	}

	PlayerInfo[playerid][pPayDaysToday] ++;
	pUpdateInt(playerid, "PayDaysToday", PlayerInfo[playerid][pPayDaysToday]);

	if(HaveSupreme(playerid))
	{
		GivePlayerRP(playerid, 1);

		SendMsg(playerid, COLOR_SERVER, "Supreme >> {ffffff}Ai primit un punct de respect deoarece ai cont supreme.");
	}

	return true;
}
stock weapName(id)
{
	new
		WeaponName[32]
	;
	format(WeaponName, sizeof(WeaponName), "%s", GunNames[id]);
	return WeaponName;
}
function InsertAccount(playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session)
	{
		return true;
	}
	SendAdmins(COLOR_SANCTION, "Cont nou >> %s, %d.", 1, GetName(playerid), playerid);
	OnPlayerLogin(playerid, PlayerInfo[playerid][pKey]);
	return true;
}
function SetPlayerClanTag(playerid, type)
{
	new c = PlayerInfo[playerid][pClan];
	switch(type)
	{
		case 0:
		{
			SetPlayerName(playerid, GetName(playerid));
		}
		case 1:
		{
			new
				stringname[25]
			;
			format(stringname, sizeof(stringname), "%s.%s", ClanInfo[c][cClanTag], GetName(playerid));
			SetPlayerName(playerid, stringname);
		}
		case 2:
		{
			new
				stringname[25]
			;
			format(stringname, sizeof(stringname), "%s.%s", GetName(playerid), ClanInfo[c][cClanTag]);
			SetPlayerName(playerid, stringname);
		}
	}
	pUpdateInt(playerid, "ClanTag", type);
	return true;
}
function LoadPlayerAccount(playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;

	printf("%s[%d] s-a logat.", GetName(playerid), playerid);

	new
		y,
		m,
		d,
		h,
		mi,
		s
	;

	cache_get_value_name_int(0, "MuteTime", PlayerInfo[playerid][pMuteTime]);
	cache_get_value_name_int(0, "GiftPoints", PlayerInfo[playerid][pGiftPoints]);
	cache_get_value_name_int(0, "Fuel", PlayerInfo[playerid][pFuel]);
	cache_get_value_name_int(0, "PetStatus", PlayerInfo[playerid][pPetStatus]);
	cache_get_value_name_int(0, "PetPoints", PlayerInfo[playerid][pPetPoints]);
	cache_get_value_name_int(0, "Petlevel", PlayerInfo[playerid][pPetlevel]);
	cache_get_value_name_int(0, "Pet", PlayerInfo[playerid][pPet]);
	cache_get_value_name_int(0, "JobBoost", PlayerInfo[playerid][pJobBoost]);
	cache_get_value_name_int(0, "BasicCrate", PlayerInfo[playerid][pBasicCrate]);
	cache_get_value_name_int(0, "NormalCrate", PlayerInfo[playerid][pNormalCrate]);
	cache_get_value_name_int(0, "MediumCrate", PlayerInfo[playerid][pMediumCrate]);
	cache_get_value_name_int(0, "VehicleCrate", PlayerInfo[playerid][pVehicleCrate]);
	cache_get_value_name_int(0, "DiamondCrate", PlayerInfo[playerid][pDiamondCrate]);
	cache_get_value_name_int(0, "FragmentCrate", PlayerInfo[playerid][pFragmentCrate]);
	cache_get_value_name_int(0, "Nmute", PlayerInfo[playerid][pNmute]);
	cache_get_value_name_int(0, "Rmute", PlayerInfo[playerid][pRmute]);
	cache_get_value_name_int(0, "EscapePoints", PlayerInfo[playerid][pEscapePoints]);
	cache_get_value_name_int(0, "VIP", PlayerInfo[playerid][pVIP]);	 
	cache_get_value_name_int(0, "Level", PlayerInfo[playerid][pLevel]);
	cache_get_value_name_int(0, "Rob", PlayerInfo[playerid][pRob]);
	cache_get_value_name_int(0, "Admin", PlayerInfo[playerid][pAdmin]);
	cache_get_value_name_int(0, "Helper", PlayerInfo[playerid][pHelper]);
	cache_get_value_name_int(0, "Premium", PlayerInfo[playerid][pPremium]);
	cache_get_value_name_int(0, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
	cache_get_value_name_int(0, "GasCan", PlayerInfo[playerid][pGasCan]);
	cache_get_value_name_int(0, "Respect", PlayerInfo[playerid][pRespect]);
	cache_get_value_name_int(0, "WantedLevel", PlayerInfo[playerid][pWantedLevel]);
	cache_get_value_name_int(0, "Job", PlayerInfo[playerid][pJob]);
	cache_get_value_name_int(0, "HeadValue", PlayerInfo[playerid][pHeadValue]);
	cache_get_value_name_int(0, "Jailed", PlayerInfo[playerid][pJailed]);
	cache_get_value_name_int(0, "JailTime", PlayerInfo[playerid][pJailTime]);
	cache_get_value_name_int(0, "Materials", PlayerInfo[playerid][pMats]);
	cache_get_value_name_int(0, "Clan", PlayerInfo[playerid][pClan]);
	cache_get_value_name_int(0, "CRank", PlayerInfo[playerid][pCRank]);
	cache_get_value_name_int(0, "ClanWarns", PlayerInfo[playerid][pCWarns]);
	cache_get_value_name_int(0, "Member", PlayerInfo[playerid][pMember]);
	cache_get_value_name_int(0, "Rank", PlayerInfo[playerid][pRank]);
	cache_get_value_name_int(0, "FWarn", PlayerInfo[playerid][pFACWarns]);
	cache_get_value_name_int(0, "FPunish", PlayerInfo[playerid][pFpunish]);
	cache_get_value_name_int(0, "SpawnChange", PlayerInfo[playerid][pSpawnChange]);
	cache_get_value_name_int(0, "Model", PlayerInfo[playerid][pModel]);
	cache_get_value_name_int(0, "House", PlayerInfo[playerid][pHouse]);
	cache_get_value_name_int(0, "Bizz", PlayerInfo[playerid][pBizz]);
	cache_get_value_name_int(0, "CarLic", PlayerInfo[playerid][pVehLic]);
	cache_get_value_name_int(0, "FlyLic", PlayerInfo[playerid][pFlyLic]);
	cache_get_value_name_int(0, "BoatLic", PlayerInfo[playerid][pBoatLic]);
	cache_get_value_name_int(0, "GunLic", PlayerInfo[playerid][pGunLic]);
	cache_get_value_name_int(0, "PayDay", PlayerInfo[playerid][pPayDay]);
	cache_get_value_name_int(0, "Warnings", PlayerInfo[playerid][pWarns]);
	cache_get_value_name_int(0, "Rented", PlayerInfo[playerid][pRented]);
	cache_get_value_name_int(0, "WTalkie", PlayerInfo[playerid][pWTalkie]);
	cache_get_value_name_int(0, "id", PlayerInfo[playerid][pSQLID]);
	cache_get_value_name_int(0, "FactionJoin", PlayerInfo[playerid][pFactionJoin]);
	cache_get_value_name_int(0, "CarSlots", PlayerInfo[playerid][pVehSlots]);
	cache_get_value_name_int(0, "WTChannel", WTChannel[playerid]);
	cache_get_value_name_int(0, "PC", PlayerInfo[playerid][pPC]);
	cache_get_value_name_int(0, "Raport", PlayerInfo[playerid][pRaport]);
	cache_get_value_name_int(0, "HelpedPlayers", PlayerInfo[playerid][pHelpedPlayers]);
	cache_get_value_name_int(0, "Mancare", PlayerInfo[playerid][pMancare]);
	cache_get_value_name_int(0, "Apa", PlayerInfo[playerid][pApa]);
	cache_get_value_name_int(0, "Burger", PlayerInfo[playerid][pBurger]);
	cache_get_value_name_int(0, "Soda", PlayerInfo[playerid][pSoda]);
	cache_get_value_name_int(0, "OGPoints", PlayerInfo[playerid][pOGPoints]);
	cache_get_value_name_int(0, "Parkour", PlayerInfo[playerid][pParkour]);
	cache_get_value_name_int(0, "Taskuri", PlayerInfo[playerid][pTaskuri]);
	cache_get_value_name_int(0, "TaskActual", PlayerInfo[playerid][pTaskActual]);
	cache_get_value_name_int(0, "TaskProgress", PlayerInfo[playerid][pTaskProgress]);
	cache_get_value_name_int(0, "Spin", PlayerInfo[playerid][pSpin]);
	cache_get_value_name_int(0, "Activity", PlayerInfo[playerid][pActivity]);
	cache_get_value_name_int(0, "StaffWarns", PlayerInfo[playerid][pStaffWarns]);
	cache_get_value_name_int(0, "Ziua", PlayerInfo[playerid][pZiua]);
	cache_get_value_name_int(0, "ZiuaColectat", PlayerInfo[playerid][pZiuaColectat]);
	cache_get_value_name_int(0, "Trivia", PlayerInfo[playerid][pTrivia]);
	cache_get_value_name_int(0, "SkinCrate", PlayerInfo[playerid][pSkinCrate]);
	cache_get_value_name_int(0, "Bonus", PlayerInfo[playerid][pBonus]);
	cache_get_value_name_int(0, "Milestone", PlayerInfo[playerid][pMilestone]);
	cache_get_value_name_int(0, "Pin", PlayerInfo[playerid][pPin]);
	cache_get_value_name_int(0, "YouTuber", PlayerInfo[playerid][pYouTuber]);
	cache_get_value_name_int(0, "OwnedJob", PlayerInfo[playerid][pOwnedJob]);
	cache_get_value_name_int(0, "Manager", PlayerInfo[playerid][pManager]);
	cache_get_value_name_int(0, "Tutorial", PlayerInfo[playerid][pTutorial]);
	cache_get_value_name_int(0, "SkinSlots", PlayerInfo[playerid][pSkinSlots]);
	cache_get_value_name_int(0, "CarLicSuspend", PlayerInfo[playerid][pVehLicSuspend]);
	cache_get_value_name_int(0, "GiftBoxSeconds", PlayerInfo[playerid][pGiftBoxSeconds]);
	cache_get_value_name_int(0, "GiftToCollect", PlayerInfo[playerid][pGiftToCollect]);
	cache_get_value_name_int(0, "Billboard", PlayerInfo[playerid][pBillboard]);
	cache_get_value_name_int(0, "DailyStunt", PlayerInfo[playerid][pDailyStunt]);
	cache_get_value_name_int(0, "RealMoney", PlayerInfo[playerid][pRealMoney]);
	cache_get_value_name_int(0, "OGCrate", PlayerInfo[playerid][pOGCrate]);
	cache_get_value_name_int(0, "Kills", PlayerInfo[playerid][pKills]);
	cache_get_value_name_int(0, "Deaths", PlayerInfo[playerid][pDeaths]);
	cache_get_value_name_int(0, "ClanTag", PlayerInfo[playerid][pClanTag]);
	cache_get_value_name_int(0, "MedKit", PlayerInfo[playerid][pMedKit]);

	cache_get_value_name_int(0, "BattlepassTier", PlayerInfo[playerid][pBattlepassTier]);
	cache_get_value_name_int(0, "BattlepassXP", PlayerInfo[playerid][pBattlepassXP]);
	cache_get_value_name_int(0, "BattlepassType", PlayerInfo[playerid][pBattlepassType]);
	cache_get_value_name_int(0, "BattlepassPremiums", PlayerInfo[playerid][pBattlepassPremiums]);

	cache_get_value_name_int(0, "PerkPoints", PlayerInfo[playerid][pPerkPoints]);
	cache_get_value_name_int(0, "SkyWarsWinToday", PlayerInfo[playerid][pSkyWarsWinToday]);
	cache_get_value_name_int(0, "GiftBoxOpenedToday", PlayerInfo[playerid][pGiftBoxOpenedToday]);

	cache_get_value_name_int(0, "TureJobToday", TureJobToday[playerid]);
	cache_get_value_name_int(0, "TureArmsToday", TureArmsToday[playerid]);
	cache_get_value_name_int(0, "TureDrugToday", TureDrugToday[playerid]);
	cache_get_value_name_int(0, "KPaintToday", KPaintToday[playerid]);
	cache_get_value_name_int(0, "GiftsToday", GiftsToday[playerid]);

	cache_get_value_name_int(0, "DailyQuestToday", PlayerInfo[playerid][pDailyQuestToday]);

	cache_get_value_name_int(0, "HuntCollected", PlayerInfo[playerid][pHuntCollected]);
	cache_get_value_name_int(0, "PrizeToCollect", PlayerInfo[playerid][pPrizeToCollect]);

	cache_get_value_name_int(0, "LoggedToday", PlayerInfo[playerid][pLoggedToday]);
	cache_get_value_name_int(0, "PayDaysToday", PlayerInfo[playerid][pPayDaysToday]);

	cache_get_value_name_int(0, "Supreme", PlayerInfo[playerid][pSupreme]);
	cache_get_value_name_int(0, "SupremeCrate", PlayerInfo[playerid][pSupremeCrate]);
	cache_get_value_name_int(0, "LastFeedme", PlayerInfo[playerid][pLastFeedme]);
	cache_get_value_name_int(0, "Hiddens", PlayerInfo[playerid][pHiddens]);

	switch(PlayerInfo[playerid][pSpawnChange])
	{
		case 1:
		{
			new
				house
			;

			if(PlayerInfo[playerid][pHouse] != 0)
			{
				house = PlayerInfo[playerid][pHouse];
			}
			else if(PlayerInfo[playerid][pRented] != -1)
			{
				house = PlayerInfo[playerid][pRented];
			}
			if(house == 0)
			{
				PlayerInfo[playerid][pSpawnChange] = 0;
				pUpdateInt(playerid, "SpawnChange", 0);
			}
		}
		case 2:
		{
			new
				clan = PlayerInfo[playerid][pClan]
			;

			if(clan < 1 || !HasClanHQ[clan])
			{
				PlayerInfo[playerid][pSpawnChange] = 0;
				pUpdateInt(playerid, "SpawnChange", 0);
			}
		}
	}

	if(PlayerInfo[playerid][pAdmin] > 6)
	{
		PlayerInfo[playerid][pAdmin] = 0;
		pUpdateInt(playerid, "Admin", PlayerInfo[playerid][pAdmin]);
	}

	cache_get_value_name_float(0, "ConnectedTime", PlayerInfo[playerid][pConnectTime]);
	cache_get_value_name_float(0, "Last7", PlayerInfo[playerid][pLast7]);
	cache_get_value_name_float(0, "LastMonth", PlayerInfo[playerid][pLastMonth]);

	cache_get_value_name(0, "name", PlayerInfo[playerid][pNormalName]);
	cache_get_value_name(0, "PetName", PlayerInfo[playerid][pPetName]);
	cache_get_value_name(0, "Color", PlayerInfo[playerid][pColor]);
	cache_get_value_name(0, "Victim", PlayerInfo[playerid][pVictim]);
	cache_get_value_name(0, "Accused", PlayerInfo[playerid][pAccused]);
	cache_get_value_name(0, "Crime1", PlayerInfo[playerid][pCrime1]);
	cache_get_value_name(0, "Crime2", PlayerInfo[playerid][pCrime2]);
	cache_get_value_name(0, "Crime3", PlayerInfo[playerid][pCrime3]);
	cache_get_value_name(0, "CreatorCode", PlayerInfo[playerid][pCreatorCode]);
	cache_get_value_name(0, "Discord", PlayerInfo[playerid][pDiscord]);

	cache_get_value_name_bigint(PlayerCash[playerid], 0, "Money");
	cache_get_value_name_bigint(PlayerBank[playerid], 0, "Bank");

	ResetPlayerMoney(playerid);
	if(OPByte(PlayerCash[playerid], <=, #999_999_999))
	{
		GivePlayerMoney(playerid, bytes32(PlayerCash[playerid]));
	}
	else
	{
		GivePlayerMoney(playerid, 999_999_999);
	}

	gString[0] = (EOS);
	cache_get_value_name(0, "Skills", gString);
	sscanf(gString, "p<|>iiiiiiiiiiiiiiii", 
		PlayerInfo[playerid][pSkills][1], PlayerInfo[playerid][pSkills][2], PlayerInfo[playerid][pSkills][3], PlayerInfo[playerid][pSkills][4], PlayerInfo[playerid][pSkills][5], PlayerInfo[playerid][pSkills][6], 
		PlayerInfo[playerid][pSkills][7], PlayerInfo[playerid][pSkills][8], PlayerInfo[playerid][pSkills][9], PlayerInfo[playerid][pSkills][10], PlayerInfo[playerid][pSkills][11], PlayerInfo[playerid][pSkills][12], 
		PlayerInfo[playerid][pSkills][13], PlayerInfo[playerid][pSkills][14], PlayerInfo[playerid][pSkills][15], PlayerInfo[playerid][pSkills][16]);
	for(new i = 1; i <= MAX_JOBS; i ++){
		if(PlayerInfo[playerid][pSkills][i] < 1) PlayerInfo[playerid][pSkills][i] = 1;
	}
	gString[0] = (EOS);
	cache_get_value_name(0, "Ture", gString);
	sscanf(gString, "p<|>iiiiiiiiiiiiiiii", 
		PlayerInfo[playerid][pTure][1], PlayerInfo[playerid][pTure][2], PlayerInfo[playerid][pTure][3], PlayerInfo[playerid][pTure][4], PlayerInfo[playerid][pTure][5], PlayerInfo[playerid][pTure][6], PlayerInfo[playerid][pTure][7],
		PlayerInfo[playerid][pTure][8], PlayerInfo[playerid][pTure][9], PlayerInfo[playerid][pTure][10], PlayerInfo[playerid][pTure][11], PlayerInfo[playerid][pTure][12], PlayerInfo[playerid][pTure][13], PlayerInfo[playerid][pTure][14],
		PlayerInfo[playerid][pTure][15], PlayerInfo[playerid][pTure][16]);

	gString[0] = (EOS);
	cache_get_value_name(0, "playerAchivStatus", gString);
	sscanf(gString, "p<|>a<i>[9]",
		PlayerInfo[playerid][pAchievement]);

	gString[0] = (EOS);
	cache_get_value_name(0, "Fragments", gString);
	sscanf(gString, "p<|>iiiiiiii",
		PlayerInfo[playerid][pFragments][1], PlayerInfo[playerid][pFragments][2], PlayerInfo[playerid][pFragments][3], PlayerInfo[playerid][pFragments][4], PlayerInfo[playerid][pFragments][5], PlayerInfo[playerid][pFragments][6],
		PlayerInfo[playerid][pFragments][7], PlayerInfo[playerid][pFragments][8]); 

	gString[0] = (EOS);
	cache_get_value_name(0, "Weapons", gString);
	sscanf(gString, "p<|>iiiiii",
		PlayerInfo[playerid][pWeapons][1], PlayerInfo[playerid][pWeapons][2], PlayerInfo[playerid][pWeapons][3], PlayerInfo[playerid][pWeapons][4], PlayerInfo[playerid][pWeapons][5], PlayerInfo[playerid][pWeapons][6]);

	gString[0] = (EOS);
	cache_get_value_name(0, "Skins", gString);
	sscanf(gString, "p<|>a<i>[10]", PlayerInfo[playerid][pSkins]);

	gString[0] = (EOS);
	cache_get_value_name(0, "SetGuns", gString);
	sscanf(gString, "p<|>a<i>[5]", PlayerInfo[playerid][pSetGuns]);

	gString[0] = (EOS);
	cache_get_value_name(0, "Settings", gString);
	sscanf(gString, "p<|>a<i>[13]", PlayerInfo[playerid][pSettings]);

	gString[0] = (EOS);
	cache_get_value_name(0, "BattlepassProgress", gString);
	sscanf(gString, "p<|>a<i>[18]", PlayerInfo[playerid][pBattlepassProgress]);

	gString[0] = (EOS);
	cache_get_value_name(0, "Drugs", gString);
	sscanf(gString, "p<|>a<i>[4]", PlayerInfo[playerid][pDrugs]);

	cache_get_value_name_int(0, "WarKills", PlayerKills[playerid]);
	cache_get_value_name_int(0, "WarDeaths", PlayerDeaths[playerid]);

	gString[0] = (EOS);
	cache_get_value_name(0, "Potions", gString);
	sscanf(gString, "p<|>a<i>[4]", PlayerInfo[playerid][pPotions]);

	gString[0] = (EOS);
	cache_get_value_name(0, "ActivePotions", gString);
	sscanf(gString, "p<|>a<i>[4]", PlayerInfo[playerid][pActivePotions]);

	gString[0] = (EOS);
	cache_get_value_name(0, "PerkProgress", gString);
	sscanf(gString, "p<|>a<i>[13]", PlayerInfo[playerid][pPerkProgress]);

	gString[0] = (EOS);
	cache_get_value_name(0, "PerkActive", gString);
	sscanf(gString, "p<|>a<i>[39]", PerkActive[playerid]);

	gString[0] = (EOS);
	cache_get_value_name(0, "Heists", gString);
	sscanf(gString, "p<|>a<i>[3]", PlayerInfo[playerid][pHeists]);

	gString[0] = (EOS);
	cache_get_value_name(0, "TodayTasks", gString);
	sscanf(gString, "p<|>a<i>[3]", PlayerInfo[playerid][pTodayTasks]);

	gString[0] = (EOS);
	cache_get_value_name(0, "Vouchers", gString);
	sscanf(gString, "p<|>a<i>[5]", PlayerInfo[playerid][pVouchers]);

	gString[0] = (EOS);
	cache_get_value_name(0, "ActiveStatus", gString);
	sscanf(gString, "p<|>a<i>[2]", PlayerInfo[playerid][pActiveStatus]);

	Logat[playerid] = true;
	ClearChat(playerid);

	if(PlayerInfo[playerid][pJob] != 0)
	{
		new
			Job = PlayerInfo[playerid][pJob]
		;

		Iter_Add(WithJob[Job], playerid);
	}

	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);

	if(PlayerInfo[playerid][pWantedLevel])
	{
		SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
		va_PlayerTextDrawSetString(playerid, WantedText, "WANTED SCADE IN: ~r~%d MINUTE", wantedlost[playerid]);
		PlayerTextDrawShow(playerid, WantedText);
		wantedlost[playerid] = 15;
		WantedPoints[playerid] = PlayerInfo[playerid][pWantedLevel] * 2;
	}

	getdate(y,m,d); 
	gettime(h,mi,s);
	Query_Mysql("UPDATE `users` SET `Status`='1',`LastIP`='%s',`lastOn`='%d-%02d-%02d %02d:%02d:%02d', `UserID` = '%d' WHERE `id` = '%d'", GetIp(playerid), y, m, d, h, mi, s, playerid, PlayerInfo[playerid][pSQLID]);
	
	gString[0] = (EOS);
	mysql_format(SQL, gString, 64, "SELECT * FROM `cars` WHERE `Owner`='%s'", GetName(playerid));
	mysql_tquery(SQL, gString, "LoadPlayerVehicles", "id", playerid, PlayerInfo[playerid][pSession]);

	if(PlayerInfo[playerid][pAdmin])
	{
		Iter_Add(Admins, playerid);
		PlayerInfo[playerid][pSettings][6] = true;
	}
	else
	{
		PlayerInfo[playerid][pSettings][6] = false;
	}
	if(PlayerInfo[playerid][pHelper])
	{
		Iter_Add(Helpers, playerid);
	}
	if(PlayerInfo[playerid][pHeadValue])
	{
		Iter_Add(Contracts, playerid);
	}
	if(CheckAcces(GetName(playerid)))
	{
		SetPVarInt(playerid, "Scripter", 1);
	}
	LevelBar = CreatePlayerProgressBar(playerid, 231.00, 19.00, 188.50, 5.50, COLOR_SERVER, 100.0);
	GlobalGoalBar = CreatePlayerProgressBar(playerid, 275.000000, 437.000000, 100.000000, 6.500000, 9109759, 1000000000.000000, 0);
	BattlepassBar = CreatePlayerProgressBar(playerid, 199.000000, 297.000000, 297.500000, 7.500000, 16711855, 10.000000, 0);
	if(PlayerInfo[playerid][pPin])
	{
		ShowPin(playerid);
		SetPVarInt(playerid, "InPin", 2);
	}
	if(Iter_Contains(InLogin, playerid))
	{
		Iter_Remove(InLogin, playerid);
	}
	if(PlayerInfo[playerid][pYouTuber])
	{
		Iter_Add(YouTubers, playerid);
	}
	if(PlayerInfo[playerid][pMember] != 0)
	{
		Iter_Add(FactionMembers[PlayerInfo[playerid][pMember]], playerid);
	}
	if(PlayerInfo[playerid][pRank] == 7)
	{
		Iter_Add(Leaders, playerid);
	}
	if(HavePremium(playerid))
	{
		Iter_Add(Premiums, playerid);
	}
	if(HaveVIP(playerid))
	{
		Iter_Add(Vips, playerid);
	}

	if(PlayerInfo[playerid][pArea])
	{
		DestroyDynamicArea2(PlayerInfo[playerid][pArea]);
	}

	PlayerInfo[playerid][pArea] = CreateDynamicSphere2(6, playerid, 0, 0, 0, 25);
	AttachDynamicAreaToPlayer(PlayerInfo[playerid][pArea], playerid);

	gString[0] = (EOS);
	format(gString, 32, "SQLID%d", PlayerInfo[playerid][pSQLID]);
	SetSVarInt(gString, playerid + 1);

	if(WTChannel[playerid] != 0)
	{
		Iter_Add(WithFreq[WTChannel[playerid]], playerid);
	}

	if(PlayerInfo[playerid][pClan])
	{
		SetPlayerClanTag(playerid, PlayerInfo[playerid][pClanTag]);
		Iter_Add(InClan[PlayerInfo[playerid][pClan]], playerid);
		ProgressToPerkMissions(playerid, 6, 1);
	}

	if(PerkActive[playerid][25] || PerkActive[playerid][26] || PerkActive[playerid][27] || PerkActive[playerid][28])
	{
		if(!Iter_Contains(RacePerk, playerid))
		{
			Iter_Add(RacePerk, playerid);
		}
	}

	SetSpawnInfo(playerid, NO_TEAM, PlayerInfo[playerid][pModel], 0, 0, 3, 0, 0, 0, 0, 0, 0, 0);

	if(PlayerInfo[playerid][pTutorial])
	{
		AfterCamera(playerid);
	}
	else
	{
		CameraConnect(playerid, 1, PlayerInfo[playerid][pSession]);
	}

	return true;
}
function OnPlayerLogin(playerid, password[]){
	if(!strmatch(password, PlayerInfo[playerid][pKey]))
	{
		if(LoginTries[playerid] > 2)
		{
			SendMsg(playerid, COLOR_SERVER, "Logare >> {ffffff}Ai fost dat afara deoarece ai gresit de prea multe ori parola.");
			defer KickEx(playerid, PlayerInfo[playerid][pSession]);
			return true;
		}
		SendMsg(playerid, COLOR_SERVER, "Logare >> {ffffff}Ti-ai gresit parola, mai ai %d incercari.", 3 - LoginTries[playerid]);
		LoginTries[playerid] ++;
		SPD(playerid, DIALOG_LOGIN2, DIALOG_STYLE_PASSWORD, "Logare", "Te rugam introdu-ti parola:", "Logare", "Anuleaza");
	}
	else
	{
		gString[0] = EOS;
		mysql_format(SQL, gString, 128, "SELECT * FROM users WHERE `name`='%s' LIMIT 1", GetName(playerid));
		mysql_tquery(SQL, gString, "LoadPlayerAccount", "id", playerid, PlayerInfo[playerid][pSession]);
	}
	return true;
}
function OOCNews(color, const string[], va_args<>)
{
	gString[0] = (EOS);
	va_format(gString, sizeof(gString), string, va_start<2>);
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pSettings][2] == false)
		{
			SendMsg(i, color, gString);
		}
	}
	return true;
}
OnePlayAnim(playerid,const animlib[], const animname[], Float:Speed, looping, lockx, locky, lockz, lp){
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}
LoopingAnim(playerid,const animlib[], const animname[], Float:Speed, looping, lockx, locky, lockz, lp){
	gPlayerUsingLoopingAnim[playerid] = true;
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}
StopLoopingAnim(playerid){
	gPlayerUsingLoopingAnim[playerid] = false;
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}
PreloadAnimLib(playerid, const animlib[]){
	ApplyAnimation(playerid,animlib,"null", 0.0, 0, 0, 0, 0, 0);
}
CMD:getip(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 5) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/getip [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	Info(playerid, "%s: %s", GetName(id), GetIp(id));
	return true;
}
CMD:cc(playerid){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	foreach(new i : Player){ 
		if(!PlayerInfo[i][pAdmin] && !PlayerInfo[i][pHelper]) ClearChat(i); 
	}
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a sters chat-ul.", 1,GetName(playerid));
	return true;
}	
CMD:cmc(playerid){ 
	ClearChat(playerid); 
	return true; 
}
CMD:goto(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return Info(playerid, "Nu poti folosi aceasta comanda deoarece ai wanted.");
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/goto [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(Spectate[id] != -1) return Info(playerid, "Acel jucator este spectate pe cineva.");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(id, x, y, z);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetVehiclePos(GetPlayerVehicleID(playerid), x, y + 4, z);
	else SetPlayerPosEx(playerid, x, y + 2, z);
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
	SetPlayerInterior(playerid, GetPlayerInterior(id));
	InHouse[playerid] = InHouse[id];
	InHQ[playerid] = InHQ[id];
	InBiz[playerid] = InBiz[id];
	InClanHQ[playerid] = InClanHQ[id];
	Info(id, "%s s-a teleportat la tine.", GetName(playerid));
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s s-a teleportat la %s (ID: %d).", 1, GetName(playerid), GetName(id), id);
	if(GetPlayerState(id) == PLAYER_STATE_DRIVER && !IsPlayerInAnyVehicle(playerid)) PutPlayerInVehicleEx(playerid, GetPlayerVehicleID(id), 1);
	return true;
}	
CMD:pcolor(playerid){
	if(!HavePremium(playerid) && !PlayerInfo[playerid][pHelper] && !PlayerInfo[playerid][pAdmin] && !HaveVIP(playerid)) return true;
	gString [0] = (EOS);
	strcat(gString, "{CECECE}White\n{0087FE}Blue\n{4700C2}Dark purple\n{EBFF00}Yellow\n{EF00FF}Purple\n{40FF00}Green\n{9CFF29}Lime green\n{0E7F03}Dark green\n{FF9A00}Orange\n{6E6E6E}Black\n{FF4C9D}Pink\n{F4FA58}Yellow 2\n{00BFFF}Blue 2\n{819FF7}Blue 3\n{FE9A2E}Orange 2\n{FA8258}Orange 3\n{00FF40}Green 2\n{D358F7}Purple 2\n");
	strcat(gString, "{4169E1}Royan Blue\n{9ACD32}YellowGreen\n{F0E68C}Khaki\n{BDB76B}DarkKhaki\n{FF1493}DeepPink\n{9966CC}Amethyst\n{F0B2B2}PinkOrange\n{DB7093}PaleVioletRed");
	if(PlayerInfo[playerid][pHelper] || PlayerInfo[playerid][pAdmin] || HaveVIP(playerid)) strcat(gString, "\n{E70031}Light Red\n{AB0000}Dark Red");
	SPD(playerid, DIALOG_PCOLOR, DIALOG_STYLE_LIST, "Nickname color", gString, "Choose", "Cancel");
	return true;
}
CMD:checkv(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, count;
	if(sscanf(params, "u", id)) return Info(playerid, "/checkv [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	for(new v; v < MAX_PERSONAL_VEHICLES; v++){
		if(PlayerInfo[id][pVehID][v]){
			Info(playerid, "[ID:%d] %s | age: %d | km: %0.2f | colors: %d, %d",PlayerInfo[id][pVehID][v],GetVehicleName(PlayerInfo[id][pVehModel][v]),GetDaysFromTimestamp(PlayerInfo[id][pVehBuyTime][v]),PlayerInfo[id][pVehKM][v],PlayerInfo[id][pVehColor1][v],PlayerInfo[id][pVehColor2][v]);
			count++;			
		}
	}
	if(!count) return Info(playerid, "Jucatorul nu are vehicule spawnate.");
	return true;
}	
CMD:removetuning(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Nu esti intr-un vehicul.");
	new
		bool: InPersonalVehicle,
		vehicleid = GetPlayerVehicleID(playerid)
	;
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(PlayerInfo[playerid][pVehID][v] == vehicleid)
		{
			PlayerInfo[playerid][pVehPaintJ][v] = 6;
			for(new s; s < 17; s++) CarMod[playerid][v][s] = 0;
			cUpdate(playerid, v, 2);
			cUpdate(playerid, v, pVehPaintJ);
			RemoveTuning(playerid, vehicleid, v);
			InPersonalVehicle = true;
			break;
		}
	}
	if(InPersonalVehicle != true) return Info(playerid, "Nu esti in vehiculul tau.");
	return true;
}
function EditStock(playerid, model, stocks, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(cache_num_rows()){
		new id;
		for(new i, j = cache_num_rows(); j != i; ++i) cache_get_value_name_int(i, "ID", id);
		Query_Mysql("UPDATE `stock` SET `Stock` = '%d' WHERE `Model` = '%d'", stocks, model);
		StockInfo[id][vStock] = stocks;
		SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a setat stock-ul %d in %d.", 1, GetName(playerid), model, stocks);
	}
	else Info(playerid, "Vehiculul nu exista in dealership.");
	return true;
}
CMD:editstock(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new model, stocks;
	if(sscanf(params, "dd", model, stocks)) return Info(playerid, "/editstock [model] [stock]");
	gString[0] = (EOS);
	mysql_format(SQL, gString, 64, "SELECT * FROM `stock` WHERE `Model`='%d'", model);
	mysql_tquery(SQL, gString, "EditStock", "iddd", playerid, model, stocks, PlayerInfo[playerid][pSession]);
	return true;
}
CMD:findhouse(playerid, params[]){
	if(HaveCheckpoint(playerid)) return true;
	new houseID, i = sizeof(HouseInfo) - 1;
	if(sscanf(params, "d", houseID)) return Info(playerid, "/findhouse [house id]");
	if(houseID > CaseJ) return Info(playerid, "ID-ul este invalid.");
	if(houseID > i || houseID < 0) return Info(playerid, "Invalid House ID.");
	SetPlayerCheckpointEx(playerid, HouseInfo[houseID][hEntranceX], HouseInfo[houseID][hEntranceY], HouseInfo[houseID][hEntranceZ], 4.0);
	CP[playerid] = 43;
	Info(playerid, "Checkpoint-ul a fost plasat catre casa aleasa.");
	return true;
}
CMD:admins(playerid){
	if(Iter_Count(Admins) < 1) return Info(playerid, "Nu sunt Admini online.");
	new admins;
	SendMsg(playerid, 0xffbe7dff, ">> {ffffff}Administratori Online {ffbe7d}<<");
	foreach(new x : Admins){
		SendMsg(playerid, 0xffbe7dff, ">> {ffffff}%s - Admin %d", GetName(x), PlayerInfo[x][pAdmin]);
		admins ++;
	}
	if(!admins) return Info(playerid, "Nu sunt Admini online.");
	return true;
}
CMD:helpers(playerid){
	if(Iter_Count(Helpers) < 1) return Info(playerid, "Nu sunt Helperi online."); 
	SendMsg(playerid, 0xffbe7dff, ">> {ffffff}Helperi Online {ffbe7d}<<");
 	foreach(new x : Helpers){
 	 	SendMsg(playerid, 0xffbe7dff, ">> {ffffff}%s - Helper %d", GetName(x), PlayerInfo[x][pHelper]);
 	}
 	return true;
}
CMD:carcolor(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return Info(playerid, "Nu te afli intr-un vehicul.");

	new
		carid = GetPlayerVehicleID(playerid),
		idcar = -1,
		color1,
		color2,
		hiddens,
		actualhiddens,
		neededhiddens
	;

	if(sscanf(params, "ii", color1, color2))
		return Info(playerid, "/carcolor [culoare1] [culoare2]");

	if(color1 < 0 || color1 > 255 || color2 < 0 || color2 > 255)
		return Info(playerid, "Culori invalide.");

	if(color1 > 127)
	{
		hiddens ++;
	}

	if(color2 > 127)
	{
		hiddens ++;
	}

	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{ 
		if(carid == PlayerInfo[playerid][pVehID][v])
		{
			idcar = v;
		}
	}

	if(idcar == -1)
		return Info(playerid, "Nu esti in vehiculul tau.");

	if(PlayerInfo[playerid][pVehColor1][idcar] > 127)
	{
		actualhiddens ++;
	}

	if(PlayerInfo[playerid][pVehColor2][idcar] > 127)
	{
		actualhiddens ++;
	}

	neededhiddens = hiddens - actualhiddens;

	if(actualhiddens != hiddens)
	{
		if(actualhiddens > hiddens)
		{
			Info(playerid, "Ai scos %d hiddens de pe vehicul.", actualhiddens - hiddens);

			GivePlayerHiddens(playerid, actualhiddens - hiddens);
		}
		else
		{
			if(PlayerInfo[playerid][pHiddens] < neededhiddens)
			{
				return Info(playerid, "Nu ai %d hiddens.", neededhiddens);
			}
			else
			{
				PlayerInfo[playerid][pHiddens] -= neededhiddens;
				pUpdateInt(playerid, "Hiddens", PlayerInfo[playerid][pHiddens]);

				Info(playerid, "Ai folosit %d hiddens pe acest vehicul.", PlayerInfo[playerid][pHiddens]);
			}
		}
	}

	PlayerInfo[playerid][pVehColor1][idcar] = color1;
	PlayerInfo[playerid][pVehColor2][idcar] = color2;

	ChangeVehicleColor(carid, color1, color2);

	LastColor1[carid] = color1;
	LastColor2[carid] = color2;

	cUpdate(playerid, idcar, pVehColor1);
	cUpdate(playerid, idcar, pVehColor2);

	Info(playerid, "Ti-ai setat culorile %d, %d la vehicul.", color1, color2);
	return true; 
}
CMD:park(playerid){
	if(InSpawnArea[playerid]) return Info(playerid, "Nu poti folosi aceasta comanda in zona spawnului.");
	if(!OwnableVehicle(GetPlayerVehicleID(playerid)) || !IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Nu esti intr-un vehicul personal.");
	new slot = -1;
	for(new v; v < MAX_PERSONAL_VEHICLES; v++){ 
		if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVehID][v]) slot = v; 
	}
	if(slot == -1) return Info(playerid, "Nu esti in vehiculul tau."); 
	if((VehicleEngine[GetPlayerVehicleID(playerid)] && !IsABike(GetPlayerVehicleID(playerid)))) return Info(playerid, "Trebuie sa opresti motorul.");
	if(PlayerInfo[playerid][pVehInGarage][slot] != false)
	{
		PlayerInfo[playerid][pVehInGarage][slot] = false;

		gString[0] = (EOS);
		mysql_format(SQL, gString, 64, "update cars set InGarage = %d where id = %d", PlayerInfo[playerid][pVehInGarage][slot], PlayerInfo[playerid][pVeh][slot]);
		mysql_tquery(SQL, gString);
	}
	new Float:x, Float:y, Float:z, Float:a;
	GetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
	GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	PlayerInfo[playerid][pVehLocX][slot] = x;
	PlayerInfo[playerid][pVehLocY][slot] = y;
	PlayerInfo[playerid][pVehLocZ][slot] = z;
	PlayerInfo[playerid][pVehAngle][slot] = a;
	cUpdate(playerid, slot, pVehLocX);
	cUpdate(playerid, slot, pVehLocY);
	cUpdate(playerid, slot, pVehLocZ);
	cUpdate(playerid, slot, pVehAngle);
	DestroyNeon(PlayerInfo[playerid][pVehID][slot]);
	DestroyVehicleEx(PlayerInfo[playerid][pVehID][slot]);
	Info(playerid, "Vehicul parcat.");
	return true;
}
function StartWars(attackers, turf)
{
	WarInfo[wTime] = 120;
	WarInfo[wAttacker] = attackers;
	WarInfo[wFaction] = TurfInfo[turf][zOwned];
	WarRounds = 1;
	for(new m = 2; m < 4; m++)
	{
		WarWinRounds[m] = 0;
		RoundScore[m] = 0;
	}
	ServerWars = true;
	WarOnTurf = turf;
	va_SendClientMessageToAll(COLOR_SERVER, "Server >> {ffffff}%s a pornit un razboi pe teritoriul #%d detinut de mafia %s.", FactionName(attackers), turf, FactionName(TurfInfo[turf][zOwned]));
	for(new m = 2; m < 4; m++)
	{		
		foreach(new x : FactionMembers[m])
		{
			if(OnDuty[x])
			{
				if(GetPlayerVirtualWorld(x) == 0)
				{
					if(IsPlayerInAnyVehicle(x))
					{
						SetVehicleVirtualWorld(GetPlayerVehicleID(x), 1024);
					}
					if(pfVehicle[x] != -1)
					{
						SetVehicleVirtualWorld(pfVehicle[x], 1024);
					}
					SetPlayerVirtualWorld(x, 1024);
					SendMsg(x, COLOR_SERVER, "War >> {ffffff}Ai fost transferat in virtual world 1024 cat timp sunt war-uri.");
				}
				PlayerTextDrawShow(x, WarPTD);
			}
		}
	}
	return true;
}
CMD:turfs(playerid)
{
	for(new i = 1; i <= turfss; i++)
	{
		if(!TurfsDisp[playerid])
		{
			if(TurfInfo[i][zOwned] == 2) GangZoneShowForPlayerEx(playerid, Turfs[i], 0x156314aa); 
			if(TurfInfo[i][zOwned] == 3) GangZoneShowForPlayerEx(playerid, Turfs[i], 0x8a1676aa); 
		}
		else GangZoneHideForPlayerEx(playerid, Turfs[i]);
	}
	TurfsDisp[playerid] = !TurfsDisp[playerid];
	return true;
}
CMD:gdeposit(playerid, params[]){
	if(!PlayerInfo[playerid][pMember]) return Info(playerid, "Nu esti intr-o factiune.");
	new x = PlayerInfo[playerid][pMember], suma, item[20];
	if(sscanf(params, "s[20]d", item, suma)){
		Info(playerid, "/gdeposit [materials / drugs] [amount]");
		Info(playerid, "Safe balance: %d materials, %d grams of drugs", FacInfo[x][fMats], FacInfo[x][fDrugs]);
		return true;
	}
	if(suma < 1 || suma > 50000) return true;
	gString[0] = (EOS);
	if(!strcmp(item, "materials", true)){
		if(suma > PlayerInfo[playerid][pMats]) return Info(playerid, "You don't have that amount of materials.");
		PlayerInfo[playerid][pMats] = PlayerInfo[playerid][pMats] - suma;
		pUpdateInt(playerid, "Materials", PlayerInfo[playerid][pMats]);
		FacInfo[x][fMats] += suma;
		Query_Mysql("UPDATE `factions` SET `Mats`='%d' WHERE `ID`='%d'", FacInfo[x][fMats], x);
	}
	/*else if(!strcmp(item, "drugs", true)){
		if(suma > PlayerInfo[playerid][pDrugs]) return Info(playerid, "You don't have that amount of drugs.");
		PlayerInfo[playerid][pDrugs] = PlayerInfo[playerid][pDrugs] - suma;
		pUpdateInt(playerid, "Drugs", PlayerInfo[playerid][pDrugs]);
		FacInfo[x][fDrugs] += suma;
		Query_Mysql("UPDATE `factions` SET `Drugs`='%d' WHERE `ID`='%d'", FacInfo[x][fDrugs], x);
	}*/
	else return Info(playerid, "Item invalid.");
	Info(playerid, "Ai depozitat %d %s.", suma, item);
	return true;
}
CMD:setguns(playerid)
{
	if(!IsAGangMember(playerid)) return Info(playerid, "Nu esti intr-o mafie.");
	new Weapons[128];
	format(Weapons, sizeof(Weapons), "Deagle - %s\nCombat - %s\nM4 - %s\nRifle - %s\nTec-9 - %s",
		DaSauNu(PlayerInfo[playerid][pSetGuns][0]), DaSauNu(PlayerInfo[playerid][pSetGuns][1]), DaSauNu(PlayerInfo[playerid][pSetGuns][2]), 
		DaSauNu(PlayerInfo[playerid][pSetGuns][3]), DaSauNu(PlayerInfo[playerid][pSetGuns][4]));
	SPD(playerid, DIALOG_SETGUNS, DIALOG_STYLE_LIST, "Setarea Armelor", Weapons, "Alege", "Anuleaza");
	return true;
}
function OrderGun(playerid, weapon, ammo, materials, money)
{
	new
		fid = PlayerInfo[playerid][pMember]
	;
	if(FacInfo[fid][fMats] < materials) return Info(playerid, "Mafia are nevoie de %d materiale pentru a crea un %s.", materials, weapName(weapon));
	if(GetPlayerCash(playerid) < money) return Info(playerid, "Nu ai $%s.", money);	
	GivePlayerWeapon(playerid, weapon, ammo);
	GivePlayerCash(playerid, -1_500);
	FacInfo[fid][fMats] -= materials;
	Query_Mysql("UPDATE `factions` SET `Mats`='%d' WHERE `ID`='%d'", FacInfo[fid][fMats], fid);
	Info(playerid, "Ai cumparat un %s pentru $%s, %d materiale luate din seiful factiunii.", weapName(weapon), FormatNumber(money), materials);
	return true;
}
CMD:order(playerid, params[]){
	if(!IsAGangMember(playerid) && PlayerInfo[playerid][pMember] != 5) return Info(playerid, "Factiunea ta nu dispune de aceasta comanda.");
	if(PlayerInfo[playerid][pGunLic] < 1) return Info(playerid, "Nu ai licenta de arme.");
	if(OnDuty[playerid] != true) return Info(playerid, "Nu esti la datorie.");
	new fid = PlayerInfo[playerid][pMember];
	if(InHQ[playerid] != fid) 
		return Info(playerid, "Nu esti in HQ-ul factiunii.");
	if(IsAGangMember(playerid)){
		new hour, minn, sec;
		gettime(hour, minn, sec);
		new Gol = 1;
		for(new i = 0; i < 5; i++)
		{
			if(PlayerInfo[playerid][pSetGuns][i])
			{
				switch(i)
				{
					case 0:
					{
						OrderGun(playerid, 24, 200, 120, 1_200);
					}
					case 1:
					{
						OrderGun(playerid, 27, 200, 200, 2_000);
					}
					case 2:
					{
						OrderGun(playerid, 31, 200, 150, 1_500);
					}
					case 3:
					{
						OrderGun(playerid, 33, 200, 175, 1_800);
					}
					case 4:
					{
						OrderGun(playerid, 32, 400, 200, 2_000);
					}
				}
				Gol = 0;
			}
		}
		if(Gol == 1) return Info(playerid, "Foloseste comanda /setguns pentru a-ti seta armele pentru order.");
	}
	else if(fid == 5){
		if(contract_get[playerid] == -1) return Info(playerid, "Nu ai un contract.");
		if(GetPlayerMoney(playerid) < 1000) return Info(playerid, "Nu ai $5,000.");
		GivePlayerWeapon(playerid, 4, 1);
		GivePlayerWeapon(playerid, 34, 50);
		GivePlayerCash(playerid, -5000);		
	}
	return true;
}
new PoliceRankNames[7 + 1][16 + 1] =
{
	"",
	"Newbie Officer",
	"Rookie Officer",
	"Police Officer",
	"Colonel",
	"Comandor",
	"General",
	"Department Chief"
};
new GangsRankNames[7 + 1][24 + 1] =
{
	"",
	"Newbie Mafia",
	"Rookie Mafia",
	"Advanced Shooter",
	"Mafia Coordinator",
	"Experienced Sharpshooter",
	"Mafia Director",
	"Mafia Leader"
};
new ReportersRankNames[7 + 1][19 + 1] =
{
	"",
	"Newbie Reporter",
	"Rookie Reporter",
	"Reporter",
	"Journalist",
	"Business Journalist",
	"Company Coordinator",
	"Company Boss"
};
new HitmanRankNames[7 + 1][24 + 1] =
{
	"",
	"Newbie Hitman",
	"Rookie Hitman",
	"Hitman",
	"Sharpshooter",
	"Skilled Sharpshooter",
	"Organization Coordinator",
	"Organization Chief"
};
new UberRankNames[7 + 1][17 + 1] =
{
	"",
	"Newbie Driver",
	"Rookie Driver",
	"Uber Driver",
	"Advanced Driver",
	"Dispatcher Driver",
	"Company Chief",
	"Company Owner"
};
stock GetRankName(Faction, Rank)
{
	new RankName[32];

	switch(Faction)
	{
		case 1:
		{
			format(RankName, 17, PoliceRankNames[Rank]);
		}
		case 2..3:
		{
			format(RankName, 25, GangsRankNames[Rank]);
		}
		case 4:
		{
			format(RankName, 20, ReportersRankNames[Rank]);
		}
		case 5:
		{
			format(RankName, 25, HitmanRankNames[Rank]);
		}
		case 6:
		{
			format(RankName, 18, UberRankNames[Rank]);
		}
	}

	return RankName;
}
CMD:f(playerid, params[])
{
	if(!PlayerInfo[playerid][pMember]) return Info(playerid, "Nu esti intr-o factiune.");
	if(PlayerInfo[playerid][pSettings][1]) return Info(playerid, "Ai dezactivat acest chat.");
	if(PlayerInfo[playerid][pMuteTime]) return SendMsg(playerid, COLOR_SERVER, "Mute >> {ffffff}Mai ai mute pentru %d minute.", PlayerInfo[playerid][pMuteTime]);
	new message[128];
	if(sscanf(params, "s[128]", message)) return Info(playerid, "/f [message]");
	new
		Rank = PlayerInfo[playerid][pRank],
		Faction = PlayerInfo[playerid][pMember]
	;
	SendFamilyMessage(Faction, GetFactionColor(Faction), "[%d] %s >> %s: %s", Rank, GetRankName(Faction, Rank), GetName(playerid), message);
	return true;
}
CMD:confiscate(playerid, params[]){
	if(!IsACop(playerid)) return Info(playerid, "Nu esti politist.");
	if(OnDuty[playerid] != true) return Info(playerid, "Nu esti la datorie.");
	new id, item[32];
	if(sscanf(params, "us[32]",id,item)) return Info(playerid, "/confiscate [name/playerid] [Armele / Materialele / Drogurile / Licenta]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(playerid == id) return Info(playerid, "Nu poti folosi aceasta comanda pe tine.");
	if(GetDistanceBetweenPlayers(playerid, id) > 15) return Info(playerid, "Trebuie sa fi langa acel jucator.");
	if(strmatch(item, "Armele"))
	{
		ResetPlayerWeapons(id);
	}
	else if(strmatch(item, "Materialele"))
	{
		if(PlayerInfo[id][pMats] < 1) return Info(playerid, "Acel jucator nu detine materiale.");
		PlayerInfo[id][pMats] = 0;
		pUpdateInt(id, "Materials", 0);	
	}
	else if(strmatch(item, "Drogurile"))
	{
		new
			bool: HaveDrugs
		;
		for(new i = 0; i < 4; i ++)
		{
			if(PlayerInfo[id][pDrugs][i] > 0)
			{
				HaveDrugs = true;
				break;
			}
		}
		if(HaveDrugs != true) return Info(playerid, "Acel jucator nu detine droguri.");
		for(new i = 0; i < 4; i++)
		{
			if(PlayerInfo[id][pDrugs][i] > 0)
			{
				PlayerInfo[id][pDrugs][i] = 0;
			}
		}
	}
	else if(strmatch(item, "Licenta"))
	{
		if(PlayerInfo[id][pVehLic] < 1) return Info(playerid, "Acel jucator nu detine licenta de condus.");
		if(PlayerInfo[id][pVehLicSuspend] != 0) return Info(playerid, "Acel jucator are deja licenta de condus suspendata.");
		PlayerInfo[playerid][pRaport] ++;
		pUpdateInt(playerid, "Raport", PlayerInfo[playerid][pRaport]);
		PlayerInfo[id][pVehLic] = 0;
		pUpdateInt(id, "CarLic", 0);
		PlayerInfo[id][pVehLicSuspend] = 2;
		pUpdateInt(id, "CarLicSuspend", 2);
	}
	else return Info(playerid, "Item invalid.");
	Info(playerid, "I-ai confiscat %s lui %s.", item, GetName(id));
	Info(id, "%s ti-a confiscat %s.", GetName(playerid), item);
	return true;
}
CMD:mdc(playerid, params[]){
	if(!IsACop(playerid) && !PlayerInfo[playerid][pAdmin]) return Info(playerid, "Nu esti politist.");
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/mdc [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(PlayerInfo[id][pWantedLevel] > 0) Info(playerid, "-- MDC [ID %d - %s][{FFFF00}W:%d{ffffff}][Wanted expires in %d mins]",id, GetName(id), PlayerInfo[id][pWantedLevel], wantedlost[id]);
	else if(PlayerInfo[id][pWantedLevel] < 1) Info(playerid, "-- MDC [ID %d - %s][not wanted]", id, GetName(id));
	if(!strmatch(PlayerInfo[id][pCrime1], "Fara Crima")) Info(playerid, "%s", PlayerInfo[id][pCrime1]);
	if(!strmatch(PlayerInfo[id][pCrime2], "Fara Crima")) Info(playerid, "%s", PlayerInfo[id][pCrime2]);
	if(!strmatch(PlayerInfo[id][pCrime3], "Fara Crima")) Info(playerid, "%s", PlayerInfo[id][pCrime3]); 
	return true;
}
CMD:su(playerid, params[]){
	if(!IsACop(playerid)) return Info(playerid, "Nu esti politist."); 
	new id, level, reason[64], reason2[64], ini, string[64];
	if(sscanf(params, "uis[64]", id, level, reason)) return Info(playerid, "/su [name/playerid] [level] [reason]");
	mysql_escape_string(reason, reason2);
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(level < 1 || level > 7) return Info(playerid, "Invalid wanted level (1-6).");
	if(OnDuty[playerid] != true) return Info(playerid, "Nu esti la datorie.");
	if(IsACop(id)) return Info(playerid, "You can't suspect a cop.");
	ini = PlayerInfo[id][pWantedLevel];
	if(PlayerInfo[id][pJailTime] && PlayerInfo[playerid][pJailed]) return Info(playerid, "You can't suspect an arrested player.");
	if(level + PlayerInfo[id][pWantedLevel] > 6) PlayerInfo[id][pWantedLevel] = 6;
	else PlayerInfo[id][pWantedLevel] = level+PlayerInfo[id][pWantedLevel];
	format(string, 64, "Unknown");
	format(PlayerInfo[id][pVictim], 25, string, 0);
	pUpdateStr(id, "Victim", PlayerInfo[id][pVictim]); format(PlayerInfo[id][pAccused], 25, GetName(playerid)); pUpdateStr(id, "Accused", PlayerInfo[id][pAccused]);
	if(strcmp(PlayerInfo[id][pCrime1], "Fara Crima", true) == 0){
		format(string, 64, "%s", reason2);
		format(PlayerInfo[id][pCrime1], 25, string); pUpdateStr(id, "Crime1", PlayerInfo[id][pCrime1]);
	} else if(strcmp(PlayerInfo[id][pCrime2], "Fara Crima", true) == 0){
		format(string, 64, "%s", reason2);
		format(PlayerInfo[id][pCrime2], 25, string); pUpdateStr(id, "Crime2", PlayerInfo[id][pCrime2]);
	} else if(strcmp(PlayerInfo[id][pCrime3], "Fara Crima", true) == 0){
		format(string, 64, "%s", reason2);
		format(PlayerInfo[id][pCrime3], 25, string); pUpdateStr(id, "Crime3", PlayerInfo[id][pCrime3]);
	} else if(strcmp(PlayerInfo[id][pCrime1], "Fara Crima", true) == 0 && strcmp(PlayerInfo[id][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[id][pCrime3], "Fara Crima", true) == 0){ }
	else {
		format(string, 64, "%s", reason2); format(PlayerInfo[id][pCrime1], 25, string); pUpdateStr(id, "Crime1", PlayerInfo[id][pCrime1]); format(string, 64, "Fara Crima");
		format(PlayerInfo[id][pCrime2], 25, string); format(PlayerInfo[id][pCrime3], 25, string); pUpdateStr(id, "Crime2", PlayerInfo[id][pCrime2]); pUpdateStr(id, "Crime3", PlayerInfo[id][pCrime3]);
	} SetPlayerWantedLevel(id, PlayerInfo[id][pWantedLevel]); ini = PlayerInfo[id][pWantedLevel]-ini;
	SendMsg(id, COLOR_RED, "Server >> {ffffff}Ai comis o crima: %s, raportat de: %s. W: +%d.",reason2,GetName(playerid),level);
	SendFamilyMessage(1, 0x2641FEAA, "Dispecerat >> {ffffff}%s [%d] a comis o crima: %s, raportat de: %s. W: +%d.", GetName(id), id, reason2, GetName(playerid), level);
	wantedlost[id] = 15;
	pUpdateInt(id, "WantedLevel", PlayerInfo[id][pWantedLevel]);
	WantedPoints[id] = PlayerInfo[id][pWantedLevel] * 2;
	playerTextDrawShow(id, WantedText, "WANTED SCADE IN: ~r~%d MINUTE", wantedlost[id]);
	return true;
}
CMD:wanted(playerid){
	if(!IsACop(playerid) && !PlayerInfo[playerid][pAdmin]) return Info(playerid, "Nu esti politist.");
	new count, string[128];
	gString[0] = EOS;
	foreach(new i : Player){
		if(PlayerInfo[i][pWantedLevel] >= 1){ 
			string[0] = EOS;
			format(string, sizeof(string), "%d: %s: %d\n",i,GetName(i),PlayerInfo[i][pWantedLevel]);
			strcat(gString, string);
			count++;
		}
	} 
	string[0] = EOS; format(string, 30,"Wanted online: %d",count);
	if(count == 0) return Info(playerid, "Nu sunt criminali!");
	SPD(playerid, DIALOG_GOL, DIALOG_STYLE_LIST, string, gString , "Exit", "");
	return true;
}	
CMD:members(playerid){
	if(PlayerInfo[playerid][pRank] < 6) return Info(playerid, "Nu esti lider sau colider.");
	gString[0] = EOS;
	mysql_format(SQL, gString, sizeof gString, "SELECT * FROM `users` WHERE `users`.`Member` = '%d' ORDER BY `users`.`Rank` DESC", PlayerInfo[playerid][pMember]);
	mysql_tquery(SQL, gString, "ShowMembers", "id", playerid, PlayerInfo[playerid][pSession]);
	return true;
}
function ShowMembers(playerid, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new test[32], test1, test2[32], test3, test4, idd, mid=0, on;
	gString[0] = (EOS);
	if(!cache_num_rows()) return Info(playerid, "Nu poti face asta.");
	for(new i, j = cache_num_rows(); i != j; ++i){
		cache_get_value_name(i, "name", test);
		cache_get_value_name_int(i, "Rank", test1);
		cache_get_value_name(i, "lastOn", test2);
		cache_get_value_name_int(i, "FWarn", test3);
		cache_get_value_name_int(i, "FactionJoin", test4);
		cache_get_value_name_int(i, "id", idd);
		cache_get_value_name_int(i, "Status", on);
		Selected[playerid][mid] = idd;
		if(on) format(gString, sizeof gString, "%s%d - %s: online right now: %d/3 fw: %d days\n", gString, test1, test, test3, GetDaysFromTimestamp(test4));
		else format(gString, sizeof gString, "%s%d - %s: %s: %d/3 fw: %d days\n", gString, test1, test, test2, test3, GetDaysFromTimestamp(test4));
		mid++;		
	}
	SPD(playerid, DIALOG_MEMBERS, DIALOG_STYLE_LIST, "Membrii Factiunii", gString, "Alege", "Anuleaza");
	return true;
}
function ShowMember(playerid, listitem, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new name[30], rank, string[32];
	if(!cache_num_rows()) return Info(playerid, "Nu poti face asta.");
	for(new i, j = cache_num_rows(); i != j; ++i){
		cache_get_value_name(i, "name", name);
		cache_get_value_name_int(i, "Rank", rank);
	}
	Selected2[playerid] = Selected[playerid][listitem];
	format(string, sizeof(string), "%d - %s", rank, name);
	SPD(playerid, DIALOG_MEMBERS2, DIALOG_STYLE_LIST, string, "Change Rank\nFaction Warn\nClear FW\nUninvite - 20 FP\nUninvite - 0 FP", "Ok", "Exit");
	return true;
}
function FwMember(playerid, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(!cache_num_rows()) return Info(playerid, "Nu poti face asta.");
	new rank;
	for(new i, j = cache_num_rows(); i != j; ++i) cache_get_value_name_int(i, "Rank", rank);
	if(PlayerInfo[playerid][pRank] == 6 && rank == 6 || PlayerInfo[playerid][pRank] == 6 && rank == 7) return Info(playerid, "You can't give a FW to a member with rank 6-7.");
	SPD(playerid, DIALOG_FWARN, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca vrei sa-i dai FW acelui membru?", "Da", "Nu");
	return true;
}
function CheckPrivateFreq(playerid, numb, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(cache_num_rows()) return Info(playerid, "This frequency number exist.");
	BuyFromShop(playerid, 5);
	Query_Mysql("INSERT INTO `frequencies` (`freqid`,`ownerid`) VALUES ('%d','%d')", numb, PlayerInfo[playerid][pSQLID]);
	Info(playerid, "You bought frequency #%d for 50 PP.", numb);
	Info(playerid, "You are now broadcasting at the frequency of #%d khz.", numb);
	if(WTChannel[playerid] != 0)
	{
		if(Iter_Contains(WithFreq[WTChannel[playerid]], playerid))
		{
			Iter_Remove(WithFreq[WTChannel[playerid]], playerid);
		}
	}
	Iter_Add(WithFreq[numb], playerid);
	WTChannel[playerid] = numb;
	pUpdateInt(playerid, "WTChannel", numb);
	return true;
}
new
	RealShopInfo[9][2][32] =
	{
		{"Casa Interior Small", "5"},
		{"Casa Interior Medium", "10"},
		{"Casa Interior Big", "15"},
		{"Infernus VIP", "10"},
		{"Bullet VIP", "8"},
		{"50PP", "2"},
		{"$50,000,000", "2"},
		{"Clear LP", "7"},
		{"Premium Battlepass", "7"}
	}
;
CMD:shop(playerid)
{
	gString[0] = (EOS);

	format(gString, sizeof(gString), "Premium Shop - %d PP\nActivity Shop - %d AP\nReal Shop - %d RM",
		PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pActivity], PlayerInfo[playerid][pRealMoney]);

	SPD(playerid, DIALOG_SHOP, DIALOG_STYLE_LIST, "Shop", gString, "Alege", "Anuleaza");

	return true;
}
function BuyBusiness(playerid, b, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	new ownerid;
	for(new i, j = cache_num_rows(); i != j; ++i) cache_get_value_name_int(i, "id", ownerid);
	format(BizzInfo[b][bOwner], 25, GetName(playerid));
	GivePlayerCash(playerid, -BizzInfo[b][bPrice]);
	Query_Mysql("UPDATE users SET `Bizz`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pBizz], GetName(playerid));
	Query_Mysql("UPDATE `bizz` SET `Owner`='%s',`Prices`='0' WHERE `ID`='%d'", BizzInfo[b][bOwner], b);
	Query_Mysql("UPDATE `users` SET `Bizz` = '0', `Money` = `Money` + '%d' WHERE `id`='%d'", BizzInfo[b][bPrice], ownerid);
	gString[0] = (EOS);
	format(gString, 32, "SQLID%d", ownerid);
	new
		id = GetSVarInt(gString) - 1
	;
	if(id != -1)
	{
		PlayerInfo[id][pBizz] = 0;
		GivePlayerCash(id, BizzInfo[b][bPrice]);
	}
	BizzInfo[b][bPrice] = 0;
	UpdateLabel(2,b);
	FinishAchievement(playerid, 6);	
	return true;
}
CMD:buybusiness(playerid){
	if(PlayerInfo[playerid][pBizz] != 0) return Info(playerid, "You already own a business.");
	new query[64];
	if(InBusinessZone[playerid] == 0)
		return Info(playerid, "Nu esti langa o afacere.");
	new
		b = InBusinessZone[playerid]
	;

	if(BizzInfo[b][bPrice] < 1) return Info(playerid, "Afacerea nu este de vanzare.");
	if(GetPlayerCash(playerid) < BizzInfo[b][bPrice]) return Info(playerid, "Nu ai suficienti bani.");
	PlayerInfo[playerid][pBizz] = b;
	mysql_format(SQL, query, 64, "SELECT * FROM `users` WHERE `name`='%s'", BizzInfo[b][bOwner]);
	mysql_tquery(SQL, query, "BuyBusiness", "idd", playerid, b, PlayerInfo[playerid][pSession]);
	return true;
}
function BuyHouse(playerid, h, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	new ownerid;
	for(new i, j = cache_num_rows(); i != j; ++i) cache_get_value_name_int(i, "id", ownerid);
	format(HouseInfo[h][hOwner], 25, GetName(playerid));
	GivePlayerCash(playerid, -HouseInfo[h][hPrice]);
	pUpdateInt(playerid, "House", PlayerInfo[playerid][pHouse]);
	Query_Mysql("UPDATE `houses` SET `Owner`='%s',`Prices`='0' WHERE `ID`='%d'", GetName(playerid), HouseInfo[h][hID]);
	gString[0] = (EOS);
	format(gString, 32, "SQLID%d", ownerid);
	new
		id = GetSVarInt(gString) - 1
	;
	if(id != -1)
	{
		GivePlayerCash(id, HouseInfo[h][hPrice]); 
		PlayerInfo[id][pHouse] = 0;
		pUpdateInt(id, "House", PlayerInfo[id][pHouse]); 
		PlayerInfo[id][pSpawnChange] = 0;
		pUpdateInt(id, "SpawnChange", PlayerInfo[id][pSpawnChange]);
		PlayerInfo[id][pRented] = -1;
		pUpdateInt(id, "Rented", -1);
	} 
	Query_Mysql("UPDATE users SET House = 0, SpawnChange = 0, Money = Money+%d WHERE `id`='%d'",HouseInfo[h][hPrice], ownerid);
	HouseInfo[h][hPrice] = 0;
	UpdateLabel(1,h);
	FinishAchievement(playerid, 5);
	return true;
}
CMD:buyhouse(playerid){
	if(PlayerInfo[playerid][pHouse] != 0) return Info(playerid, "You already own a house."); 
	new query[64];
	if(InHouseZone[playerid] == 0)
		return Info(playerid, "Nu esti langa o casa.");
	new
		h = InHouseZone[playerid]
	;

	if(HouseInfo[h][hPrice] < 1) return Info(playerid, "Casa nu este de vanzare.");
	if(GetPlayerCash(playerid) < HouseInfo[h][hPrice]) return Info(playerid, "Nu ai suficienti bani.");
	InHouse[playerid] = h;
	PlayerInfo[playerid][pHouse] = h;
	PlayerInfo[playerid][pRented] = -1;
	pUpdateInt(playerid, "Rented", -1);
	mysql_format(SQL, query, 64, "SELECT * FROM `users` WHERE `name`='%s'", HouseInfo[h][hOwner]);
	mysql_tquery(SQL, query, "BuyHouse", "idd", playerid, h, PlayerInfo[playerid][pSession]);
	return true;
}
CMD:rentroom(playerid){
	if(PlayerInfo[playerid][pHouse] != 0) return Info(playerid, "Ai deja o casa.");
	new Float: oldposx, Float: oldposy, Float: oldposz; GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	if(InHouseZone[playerid] == 0)
		return Info(playerid, "Nu esti langa o casa.");
	new
		h = InHouseZone[playerid]
	;

	if(PlayerInfo[playerid][pRented] == h) return Info(playerid, "Ai deja chirie la aceasta casa.");
	if(HouseInfo[h][hRent] == 0) return Info(playerid, "Detinatorul casei nu accepta chiriasi.");
	if(GetPlayerBank(playerid) < HouseInfo[h][hRent]) return Info(playerid, "Ai nevoie de $%s in banca.", FormatNumber(HouseInfo[h][hRent]));
	PlayerInfo[playerid][pRented] = h; 
	pUpdateInt(playerid, "Rented", h); 
	PlayerInfo[playerid][pSpawnChange] = 1; 
	pUpdateInt(playerid, "SpawnChange", PlayerInfo[playerid][pSpawnChange]);
	Info(playerid, "Ai inchiriat casa cu succes.");
	return true;
}
CMD:fpk(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pManager] < 1) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, reason[64], fpunish, string2[256], escape[256];
	if(sscanf(params, "uds[64]", id, fpunish, reason)) return Info(playerid, "/fpk [name/playerid] [fp] [reason]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(!PlayerInfo[id][pMember]) return Info(playerid, "This player is not in a group.");
	new Member = PlayerInfo[id][pMember];
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pManager] > 0)
	{
		switch(PlayerInfo[playerid][pManager]){
			case 1:{
				if(Member != 1) return Info(playerid, "Nu poti scoate acel lider.");
			}
			case 2: {
				if(Member != 2 && Member != 3) return Info(playerid, "Nu poti scoate acel lider.");
			}
			case 3: {
				if(Member != 4 && Member != 6 && Member != 7 && Member != 8) return Info(playerid, "Nu poti scoate acel lider.");
			}
			case 4: {
				if(Member != 5) return Info(playerid, "Nu poti scoate acel lider.");
			}
		}
	}
	if(fpunish > 0){
		format(string2, sizeof(string2), "%s was uninvited by %s from %s (R%d) after %d days, with %d FP. Reason: %s.", GetName(id), GetName(playerid), FacInfo[Member][fName], PlayerInfo[id][pRank], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), fpunish, reason);
		mysql_escape_string(string2, escape);
		SendAdmins(COLOR_RED, escape, 1);
		SendFamilyMessage(Member, GetFactionColor(Member), escape);
		Query_Mysql("INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escape, PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID]);
		SendMsg(id, COLOR_RED, "You were uninvited by %s from your faction after %d days, with %d FP. Reason: %s.", GetName(playerid), GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), fpunish, reason);
	}
	else if(fpunish < 1){
		format(string2, sizeof(string2), "%s was uninvited by %s from %s (R%d) after %d days, without FP. Reason: %s.", GetName(id), GetName(playerid), FacInfo[Member][fName], PlayerInfo[id][pRank], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), reason);
		mysql_escape_string(string2, escape);
		SendAdmins(COLOR_RED, escape, 1);
		SendFamilyMessage(Member, GetFactionColor(Member), escape);
		Query_Mysql("INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escape, PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID]);
		SendMsg(id, COLOR_RED, "You were uninvited by %s from your faction after %d days, without FP. Reason: %s.", GetName(playerid), GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), reason);
	}
	if(pfVehicle[id] != -1) DestroyVehicleEx(pfVehicle[id]), Iter_Remove(fVehicles[Member], pfVehicle[id]), pfVehicle[id] = -1;
	PlayerInfo[id][pFpunish] = fpunish;
	Iter_Remove(FactionMembers[Member], id);
	PlayerInfo[id][pMember] = 0;
	PlayerInfo[id][pRank] = 0;
	PlayerInfo[id][pFACWarns] = 0;
	tazer[id] = false;
	PlayerInfo[id][pFactionJoin] = 0;
	OnDuty[id] = false;
	SetPlayerArm(id, 0);
	SetPlayerSkin(id, PlayerInfo[id][pModel]);
	SetPlayerFactionColor(id);
	PlayerInfo[id][pRaport] = 0;
	Query_Mysql("UPDATE users SET `Member`='0',`Rank`='0',`FWarn`='0',`FPunish`='%d',`FactionTime` = '0', `FactionJoin`='0', `Raport` = '0' WHERE `name`='%s'", PlayerInfo[id][pFpunish],GetName(id));
	ResetSetGuns(id);
	return true;
}
function FpkOff2(playerid, escape[30], fp, reason[64], session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new idd, rank, ftime, faction, escapee[256];
	for(new i, j = cache_num_rows(); i != j; ++i){
		cache_get_value_name_int(i, "id", idd);
		cache_get_value_name_int(i, "Rank", rank);
		cache_get_value_name_int(i, "FactionJoin", ftime);
		cache_get_value_name_int(i, "Member", faction);
	}
	Query_Mysql("UPDATE users SET `Member`='0',`Rank`='0',`FPunish`='%d',`FWarn`='0',`FactionJoin`='0',`FactionTime` = '0' WHERE `name`='%s'", fp, escape); 
	format(gString, 256, "%s was uninvited by %s from %s (R%d) after %d days, with %d FP. Reason: %s.",escape,GetName(playerid),FacInfo[faction][fName],rank,GetDaysFromTimestamp(ftime),fp,reason);
	mysql_escape_string(gString, escapee);
	SendAdmins(COLOR_RED, escapee, 1);
	SendFamilyMessage(faction, COLOR_SERVER, escapee);
	Query_Mysql("INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escapee, idd, PlayerInfo[playerid][pSQLID]);
	Query_Mysql("update users set SetGuns = '0|0|0|0|0', Kills = 0, Deaths = 0 where `name`='%s'", escape);
	return true;
}
function FpkOff(playerid, escape[30], fp, reason[64], session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(cache_num_rows()){
		if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pManager] > 0)
		{
			new Member;
			cache_get_value_name_int(0, "Member", Member);
			switch(PlayerInfo[playerid][pManager]){
				case 1: {
					if(Member != 1) return Info(playerid, "Nu poti scoate acel lider.");
				}
				case 2: {
					if(Member != 2 && Member != 3) return Info(playerid, "Nu poti scoate acel lider.");
				}
				case 3: {
					if(Member != 4 && Member != 6 && Member != 7 && Member != 8) return Info(playerid, "Nu poti scoate acel lider.");
				}
				case 4: {
					if(Member != 5) return Info(playerid, "Nu poti scoate acel lider.");
				}
			}
		}
		gString[0] = (EOS);
		mysql_format(SQL, gString, 128, "SELECT * FROM `users` WHERE `name`='%s'", escape);
		mysql_tquery(SQL, gString, "FpkOff2", "isdsd", playerid, escape, fp, reason, PlayerInfo[playerid][pSession]);
	}
	return true;
}
CMD:fpkoff(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pManager] < 1) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new name[30], fp, reason[64], escape[30];
	if(sscanf(params, "s[30]ds[64]", name, fp, reason)) return Info(playerid, "/fpkoff [name] [fp] [reason]");
	mysql_escape_string(name, escape);
	gString[0] = (EOS);
	mysql_format(SQL, gString, 128, "SELECT `Member` FROM `users` WHERE `name` = '%s'", escape);
	mysql_tquery(SQL, gString, "FpkOff", "isdsd", playerid, escape, fp, reason, PlayerInfo[playerid][pSession]);
	return true;
}	
CMD:spec(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pHelper]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return Info(playerid, "Nu poti folosi aceasta comanda deoarece ai wanted.");
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/spec [name/playerid]");
	if(id == INVALID_PLAYER_ID || Logat[id] == false) return Info(playerid, "ID-ul este invalid.");
	if(id == playerid) return Info(playerid, "Nu poti folosi aceasta comanda pe tine.");
	if(Spectate[id] != -1) return Info(playerid, "Acel jucator este deja spectator pe cineva.");
	if(PlayerInfo[playerid][pHelper] >= 1 && PlayerInfo[id][pAdmin] >= 1) return Info(playerid, "Nu poti folosi aceasta comanda pe un admin.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[id][pAdmin]) return Info(playerid, "Nu poti folosi aceasta comanda pe un admin mai mare ca tine.");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) Info(id, "Adminul %s este spectator pe tine.", GetName(playerid));
	if(Spectate[playerid] == -1)
	{
		SpecInfo[playerid][sSpectate] = 1;
		new Float: X, Float: Y, Float: Z;
		GetPlayerPos(playerid, X, Y, Z);
		SpecInfo[playerid][sPosX] = X;
		SpecInfo[playerid][sPosY] = Y;
		SpecInfo[playerid][sPosZ] = Z;
		SpecInfo[playerid][sState] = GetPlayerState(playerid);
		SpecInfo[playerid][sWorld] = GetPlayerVirtualWorld(playerid);
		SpecInfo[playerid][sInterior] = GetPlayerInterior(playerid);
		if(IsPlayerInAnyVehicle(playerid))
		{
			SpecInfo[playerid][sVehicle] = GetPlayerVehicleID(playerid);
			SpecInfo[playerid][sSeat] = GetPlayerVehicleSeat(playerid);	
		}
		SpecInfo[playerid][sHouse] = InHouse[playerid];
		SpecInfo[playerid][sHQ] = InHQ[playerid];
		SpecInfo[playerid][sBizz] = InBiz[playerid];
	}	
	Spectate[playerid] = id;
	if(reportstuck[id] && PlayerInfo[playerid][pAdmin] != 0)
	{
		SendAdmins(COLOR_RED, "Admin >> {ffffff}Admin %s (ID: %d) e spec pe %s (ID: %d) - blocat.", 1, GetName(playerid), playerid, GetName(id), id); 
		PlayerInfo[playerid][pHelpedPlayers] ++;
		pUpdateInt(playerid, "HelpedPlayers", PlayerInfo[playerid][pHelpedPlayers]);
		reportstuck[id] = false;
		Iter_Remove(Reports, id);
		DeletePVar(id, "Report");
	}
	SendMsg(playerid, COLOR_SERVER, "Spec >> (%d) %s | L: %d | HP: %.0f | AFK: %d | Duty: %d | Ping: %d | VW: %d",
		id, GetName(id), PlayerInfo[id][pLevel], GetPlayerHP(id), IsPlayerAFK[id], OnDuty[id], GetPlayerPing(id), GetPlayerVirtualWorld(id));
	TogglePlayerSpectating(playerid, 1);
	if(IsPlayerInAnyVehicle(id))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));
		SpectateState[playerid] = 2;
	}
	else
	{
		PlayerSpectatePlayer(playerid, id);
		SpectateState[playerid] = 1;
	}
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s (ID: %d) e spec pe %s (ID: %d).", 1, GetName(playerid),playerid, GetName(id), id);
	Iter_Add(Spectators, playerid);
	PlayerTextDrawSetString(playerid, SpecPTD, "Se incarca...");
	PlayerTextDrawShow(playerid, SpecPTD);
	return true;
}
CMD:fnc(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/fnc [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s l-a fortat pe %s sa-si schimbe numele.", 1, GetName(playerid), GetName(id));
	fnc[id] = true;
	Info(id, "%s te-a fortat sa-ti schimbi numele.", GetName(playerid));
	SPD(id, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Schimbare fortata a numelui", "Intordu noul nume:", "Ok", "Cancel");	
	return true;
}
CMD:cn(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/cn [playerid/name]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "Acest jucator nu este conectat."); 
	if(!strcmp(WantName[id], "NULL", true)) return Info(playerid, "Acest jucator nu a cerut schimbarea numelui.");
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a respins cererea lui %s de schimbare a numelui.", 1,GetName(playerid), GetName(id));
	Info(id, "%s ti-a respins cererea de schimbare a numelui.", GetName(playerid));
	format(WantName[id], MAX_PLAYER_NAME, "NULL");
	return true;
}
CMD:an(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly); 
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/an [playerid/name]"); 
	if(id == INVALID_PLAYER_ID) return Info(playerid, "Acest jucator nu este conectat.");
	if(!strcmp(WantName[id], "NULL", true)) return Info(playerid, "Acest player nu a cerut sa-si schimbe numele.");
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof gString, "SELECT * FROM `users` WHERE `name` = '%s'", WantName[id]);
	mysql_tquery(SQL, gString, "ChangeName", "ddd",playerid, id, PlayerInfo[playerid][pSession]);
	return true;
}
function ChangeName(playerid, id, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(cache_num_rows())
	{
		format(WantName[id], MAX_PLAYER_NAME, "NULL");
		Info(playerid, "Acest nume exista deja.");
		Info(id, "Numele cerut de tine exista deja.");
		return true;
	}
	if(PlayerInfo[id][pPremiumPoints] < GetShopPrice(id, 1) && fnc[id] != true)
	{
		Info(id, "Nu ai suficiente PP.");
		Info(playerid, "Nu are suficiente PP.");
		format(WantName[id], MAX_PLAYER_NAME, "NULL");
		return true;
	}
	if(PlayerInfo[id][pHouse] != 0)
	{
		format(HouseInfo[PlayerInfo[id][pHouse]][hOwner], MAX_PLAYER_NAME, "%s", WantName[id]);
		UpdateLabel(1, PlayerInfo[id][pHouse]);
		Query_Mysql("UPDATE `houses` SET `Owner` = '%s' WHERE `Owner` = '%s'", WantName[id], GetName(id));
	}
	if(PlayerInfo[id][pBizz] != 0)
	{
		format(BizzInfo[PlayerInfo[id][pBizz]][bOwner], MAX_PLAYER_NAME, "%s", WantName[id]);
		UpdateLabel(2, PlayerInfo[id][pBizz]);
		Query_Mysql("UPDATE `bizz` SET `Owner` = '%s' WHERE `Owner` = '%s'", WantName[id], GetName(id));
	}
	if(PlayerInfo[id][pOwnedJob] != 0)
	{
		format(JobInfo[PlayerInfo[id][pOwnedJob]][jOwner], MAX_PLAYER_NAME, "%s", WantName[id]);
		UpdateLabel(3, PlayerInfo[id][pOwnedJob]);
		Query_Mysql("UPDATE `bizz` SET `Owner` = '%s' WHERE `Owner` = '%s'", WantName[id], GetName(id));
	}
	for(new i; i < MAX_PERSONAL_VEHICLES; i++)
	{
		if(PlayerInfo[id][pVeh][i] != -1)
		{
			format(CarOwner[id][i], MAX_PLAYER_NAME, "%s", WantName[id]);
			Query_Mysql("UPDATE `cars` SET `Owner` = '%s' WHERE `ID` = '%d'", WantName[id], PlayerInfo[id][pVeh][i]);
		}
	}
	if(fnc[id] != true)
	{
		BuyFromShop(id, 1);
	}
	pUpdateStr(id, "name", WantName[id]);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a schimbat numele lui %s in %s.", 1, GetName(playerid), GetName(id), WantName[id]);
	format(PlayerInfo[id][pNormalName], MAX_PLAYER_NAME, "%s", WantName[id]);
	SetPlayerName(id, WantName[id]);
	format(WantName[id], MAX_PLAYER_NAME, "NULL");
	va_PlayerTextDrawSetString(id, NamePTD, "%s(~g~~h~%d~w~~h~)", GetName(id), id);
	PlayerTextDrawShow(id, NamePTD);
	Info(id, "Cererea de schimbare a numelui ti-a fost acceptata.");
	fnc[id] = false;
	return true;
}
CMD:rangefreeze(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 2) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new range;
	if(sscanf(params, "i", range)) return Info(playerid, "/rangefreeze [range]");
	if(range < 1 || range > 250) return Info(playerid, "Range minim 1, maxim 250.");
	foreach(new i : Player){ if(GetDistanceBetweenPlayers(playerid, i) < range) FreezePlayer(i, true); }
	sendNearbyMessage(playerid, range, COLOR_SERVER, "Admin >> {ffffff}%s a inghetat jucatorii din raza %d.", GetName(playerid), range);
	return true;
}	
CMD:rangeunfreeze(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 2) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new range;
	if(sscanf(params, "i", range)) return Info(playerid, "/rangeunfreeze [range]");
	if(range < 1 || range > 250) return Info(playerid, "Range minim 1, maxim 250.");
	foreach(new i : Player){ if(GetDistanceBetweenPlayers(playerid, i) < range) FreezePlayer(i, false); }	
	sendNearbyMessage(playerid, range, COLOR_SERVER, "Admin >> {ffffff}%s a dezghetat jucatorii din raza %d.", GetName(playerid), range);
	return true;
}	
CMD:rangedisarm(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 2) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new range;
	if(sscanf(params, "i", range)) return Info(playerid, "/rangedisarm [range]");
	if(range < 1 || range > 250) return Info(playerid, "Range minim 1, maxim 250.");
	foreach(new i : Player){ if(GetDistanceBetweenPlayers(playerid, i) < range) ResetPlayerWeapons(i); }
	sendNearbyMessage(playerid, range, COLOR_SERVER, "Admin >> {ffffff}%s a dezarmat jucatorii din raza %d.", GetName(playerid), range);
	return true;
}	
CMD:rangegun(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 2) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new range, gunid;
	if(sscanf(params, "ii", range, gunid)) return Info(playerid, "/rangegun [range] [gun id]");
	if(range < 1 || range > 250) return Info(playerid, "Range minim 1, maxim 250.");
	if(gunid < 1||gunid > 46||gunid==19||gunid==20||gunid==21||gunid==45) return Info(playerid, "Invalid weapond id.");
	foreach(new i : Player){ if(GetDistanceBetweenPlayers(playerid, i) < range && PlayerInfo[playerid][pGunLic]) GivePlayerWeapon(i, gunid, 9999); }
	sendNearbyMessage(playerid, range, COLOR_SERVER, "Admin >> {ffffff}%s a oferit arma %d tuturor jucatorilor aflati in raza lui.", GetName(playerid), gunid);
	return true;
}	
CMD:rangeheal(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 2) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new range; if(sscanf(params, "i", range)) return Info(playerid, "/rangeheal [range]");
	if(range < 1 || range > 250) return Info(playerid, "Range minim 1, maxim 250.");
	foreach(new i : Player){ if(GetDistanceBetweenPlayers(playerid, i) < range) SetPlayerHP(i, 100); }	
	sendNearbyMessage(playerid, range, COLOR_SERVER, "Admin >> {ffffff}%s a vindecat jucatorii din raza %d.", GetName(playerid), range);
	return true;
}
CMD:rangeskin(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
		return SendMsg(playerid, COLOR_SERVER, AdminOnly);

	new
		range, skin
	;

	if(sscanf(params, "ii", range, skin))
		return Info(playerid, "/rangeskin [range] [skin]");

	if(range < 1 || range > 250)
		return Info(playerid, "Range minim 1, maxim 250.");

	foreach(new i : Player)
	{
		if(GetDistanceBetweenPlayers(playerid, i) < range)
		{
			SetPlayerSkin(i, skin);
		}
	}

	sendNearbyMessage(playerid, range, COLOR_SERVER, "Admin >> {ffffff}%s a setat skin-ul %d jucatorilor din raza %d.", GetName(playerid), skin, range);

	return true;
}
CMD:giveall(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new item[20], amount;
	if(sscanf(params, "s[20]i", item, amount)){ 
		Info(playerid, "/giveall [item] [amount]"); 
		Info(playerid, "Items: money, pp, rp, jobboost, giftpoints, ogpoints, spin");
		return true;
	}
	if(amount < 1) return Info(playerid, "Valorea nu poate fi mai mica decat 1.");
	if(strcmp(item, "money", true) == 0){
		if(amount > 10000000) return Info(playerid, "Max $10, 000, 000."); 
		foreach(new i : Player) GivePlayerCash(i, amount);
	}
	else if(strcmp(item, "pp", true) == 0){
		if(amount > 10) return Info(playerid, "Max 10 PP.");
		foreach(new i : Player){
			PlayerInfo[i][pPremiumPoints] += amount;
			pUpdateInt(i, "PremiumPoints", PlayerInfo[i][pPremiumPoints]);
		}
	}
	else if(strcmp(item, "rp", true) == 0){
		if(amount > 10) return Info(playerid, "Max 10 RP.");
		foreach(new i : Player){
			GivePlayerRP(i, amount);
		}
	}
	else if(strcmp(item, "jobboost", true) == 0){
		if(amount > 5) return Info(playerid, "Max 5 hours job boost.");
		foreach(new i : Player){
			PlayerInfo[i][pJobBoost] += amount;
			pUpdateInt(i, "JobBoost", PlayerInfo[i][pJobBoost]);
		}
	}
	else if(strcmp(item, "giftpoints", true) == 0){
		if(amount > 1000) return Info(playerid, "Max 1000 GiftPoints.");
		foreach(new i : Player){
			PlayerInfo[i][pGiftPoints] += amount;
			pUpdateInt(i, "GiftPoints", PlayerInfo[i][pGiftPoints]);
		}
	} 
	else if(strcmp(item, "ogpoints", true) == 0){
		if(amount > 500) return Info(playerid, "Max 500 ogpoints.");
		foreach(new i : Player){
			PlayerInfo[i][pOGPoints] += amount;
			pUpdateInt(i, "OGPoints", PlayerInfo[i][pOGPoints]);
		}
	}
	else if(strcmp(item, "spin", true) == 0){
		if(amount > 500) return Info(playerid, "Max 500 spin.");
		foreach(new i : Player){
			PlayerInfo[i][pSpin] += amount;
			pUpdateInt(i, "Spin", PlayerInfo[i][pSpin]);
		}
		
	}
	else return Info(playerid, "Item invalid.");
	va_SendClientMessageToAll(COLOR_SERVER, "Bonus >> {ffffff}%s a dat %s %s jucatorilor conectati.", GetName(playerid), FormatNumber(amount), item);
	return true;
}		
CMD:kick(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin] && PlayerInfo[playerid][pHelper] < 2) return SendMsg(playerid, COLOR_SERVER, AdminOnly); 
	new id, reason[64];
	if(sscanf(params, "us[64]", id, reason)) return Info(playerid, "/kick [name/playerid] [reason]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(PlayerInfo[id][pAdmin] >= 1 && PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return Info(playerid, "Nu poti face asta.");
	if(PlayerInfo[playerid][pHelper] >= 1 && PlayerInfo[id][pAdmin] >= 1) return Info(playerid, "Nu poti folosi aceasta comanda pe un administrator.");
	if(PlayerInfo[playerid][pHelper] <= PlayerInfo[id][pHelper] && !Scripter(playerid) && !PlayerInfo[playerid][pAdmin] && PlayerInfo[id][pHelper] >= 1) return Info(playerid, "Nu poti face asta..");
	va_SendClientMessageToAll(COLOR_SANCTION, "Kick >> %s a fost dat afara de %s, motiv: %s.", GetName(id), GetName(playerid), reason);
	defer KickEx(id, PlayerInfo[id][pSession]);
	return true;
}
CMD:closestveh(playerid){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Trebuie sa cobori din vehicul.");
	if(!doesVehicleExist(GetClosestVehicle(playerid))) return Info(playerid, "Nu exista niciun vehicul in zona.");
	PutPlayerInVehicleEx(playerid, GetClosestVehicle(playerid), 0);
	Info(playerid, "Ai fost teleportat in cel mai apropiat vehicul.");
	return true;
}
CMD:vre(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new vid;
	if(sscanf(params, "d", vid) && !IsPlayerInAnyVehicle(playerid)) return Info(playerid, "/vre [id]");
	if(!vid && IsPlayerInAnyVehicle(playerid)) vid = GetPlayerVehicleID(playerid);
	if(!IsValidVehicle(vid)) return Info(playerid, "Vehicul invalid.");
	if(Iter_Contains(SpawnVehs, vid)) DestroyVehicleEx(vid), Iter_Remove(SpawnVehs, vid);
	SetVehicleToRespawn(vid);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a respawnat vehiculul %d.", 1, GetName(playerid), vid);
	return true;
}
CMD:rac(playerid){
	if(PlayerInfo[playerid][pAdmin] < 3) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	SendClientMessageToAll(COLOR_SERVER, "Server >> {ffffff}Toate vehiculele nefolosite vor fi respawnate in 15 secunde.");
	defer RespawnCars();
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a folosit comanda /rac.", 1, GetName(playerid));
	return true;
}
CMD:va(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new Float: Distance, Float: posX, Float: posY, Float: posZ,range,Distance2; 
	if(sscanf(params, "d", range)) return Info(playerid, "/va [range]");
	if(range <= 0 || range > 200) return Info(playerid, "Range must be between 1 and 200.");
	GetPlayerPos(playerid, posX, posY, posZ); 
	for(new x = 1; x < MAX_VEHICLES; x++){
		if(!IsVehicleOccupied(x)){
			Distance = GetVehicleDistanceFromPoint(x, posX, posY, posZ); Distance2 = floatround(Distance, floatround_round); 
			if(Distance2 <= range){
				if(Iter_Contains(SpawnVehs, x)) DestroyVehicleEx(x), Iter_Remove(SpawnVehs, x);
				SetVehicleToRespawn(x);
			}
		}
	} SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a respawnat vehiculele din raza %d.", 1, GetName(playerid), range);
	return true;
}	
CMD:gun(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 2) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, idweapon;
	if(sscanf(params, "ui", id, idweapon)) return Info(playerid, "/gun [name/playerid] [weapon id]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(PlayerInfo[id][pGunLic] < 1) return Info(playerid, "Acel jucator nu are licenta de arme.");
	if(idweapon < 1||idweapon > 46||idweapon==19||idweapon==20||idweapon==21||idweapon==45) return Info(playerid, "Invalid weapond id.");
	GivePlayerWeapon(id, idweapon, 9999);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s i-a dat lui %s arma %s.", 1,GetName(playerid),GetName(id),weapName(idweapon));
	return true;
}	
CMD:spawn(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/spawn [name/playerid]");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return Info(playerid, "Jucatorul nu este conectat.");
	defer Spawn(id, PlayerInfo[id][pSession]);
	Info(id, "Ai fost spawnat de catre %s.", GetName(playerid));
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s l-a spawnat pe %s.", 1, GetName(playerid), GetName(id));
	return true;
}
alias:spawn("respawn");
CMD:vc(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin] && !HaveVIP(playerid)) return Info(playerid, "Nu esti un VIP.");
	if(PlayerInfo[playerid][pSettings][5]) return Info(playerid, "Acest chat este dezactivat.");
	if(PlayerInfo[playerid][pMuteTime]) return SendMsg(playerid, COLOR_SERVER, "Mute >> {ffffff}Mai ai mute pentru %d minute.", PlayerInfo[playerid][pMuteTime]);
	new mesaj[128];
	if(sscanf(params, "s[128]", mesaj)) return Info(playerid, "/vc [message]");
	format(String, 144, "Vip User %s: %s", GetGameName(playerid), mesaj);
	SendVip(0xC2A2DAAA, String);
	return true;
}	
CMD:l(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin] && PlayerInfo[playerid][pRank] < 7) return Info(playerid, "Nu esti lider sau admin.");
	if(PlayerInfo[playerid][pSettings][3]) return Info(playerid, "You have disabled leader chat.");
	new mesajelc[126], string[144];
	if(sscanf(params, "s[126]",mesajelc)) return Info(playerid, "/l [message]");
	format(string, sizeof(string), "L >> %s: %s", GetName(playerid), mesajelc);
	LeaderChat(0xa8a631ff, string);
	return true;
}		
CMD:quitgroup(playerid){
	if(!PlayerInfo[playerid][pMember]) return Info(playerid, "Nu faci parte dintr-o factiune.");
	if(PlayerInfo[playerid][pRank] >= 7) return Info(playerid, "Nu poti folosi aceasta comanda deoarece esti lider.");
	SPD(playerid, DIALOG_QUITGROUP, DIALOG_STYLE_MSGBOX, "Quit Faction", "Esti sigur ca vrei sa parasesti factiunea ta? O sa primesti 20 faction punish.", "Yes", "No");
	return true;
}
function WarnUser(UserName[MAX_PLAYER_NAME], Reason[64], AdminName[MAX_PLAYER_NAME], AdminID){
	gString[0] = (EOS);
	mysql_format(SQL, gString, 64, "SELECT * FROM `users` WHERE `name`='%s'", UserName);
	mysql_tquery(SQL, gString, "WarnPlayer", "sssd", UserName, Reason, AdminName, AdminID);
	return true;
}
function WarnPlayer(UserName[MAX_PLAYER_NAME], Reason[64], AdminName[MAX_PLAYER_NAME], AdminID){
	if(!cache_num_rows()) return false;
	new id, warns, reasone[64];
	cache_get_value_name_int(0, "id", id);
	cache_get_value_name_int(0, "Warnings", warns);
	mysql_escape_string(Reason, reasone);
	Query_Mysql("UPDATE `users` SET `Warnings` = '%d' WHERE `id` = '%d'", warns + 1, id);
	va_SendClientMessageToAll(COLOR_SANCTION, "Warn >> %s has been warned by %s, reason: %s", UserName, AdminName, reasone);
	Query_Mysql("INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','5','%s','%s','%s','%d')", id, AdminID, reasone, UserName, AdminName, gettime());
	if(warns >= 2){
		Query_Mysql("UPDATE `users` SET `Warnings` = '0' WHERE `id` = '%d'", id);
		Query_Mysql("INSERT INTO bans (Name, AdminName, Reason, Days, Permanent, Active) VALUES('%s', 'Server', '3/3 warns', '3', 0, 1)", UserName);
		va_SendClientMessageToAll(COLOR_SANCTION, "Ban >> %s a fost banat pentru 3 zile, motiv: 3/3 warns.", UserName);
	}
	gString[0] = (EOS);
	format(gString, 32, "SQLID%d", id);
	new
		playerid = GetSVarInt(gString) - 1
	;
	if(playerid != -1)
	{
		defer KickEx(playerid, PlayerInfo[playerid][pSession]);
	}
	return true;
}
CMD:warn(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, reason[64], name[MAX_PLAYER_NAME], adminname[MAX_PLAYER_NAME];
	if(sscanf(params, "us[64]", id, reason)) return Info(playerid, "/warn [id] [reason]");
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return Info(playerid, "ID invalid.");
	if(CheckAcces(GetName(id))) return Info(playerid, "Nu poti sa-l sanctionezi pe acel jucator.");
	format(name, sizeof(name), GetName(id));
	format(adminname, sizeof(adminname), GetName(playerid));
	WarnUser(name, reason, adminname, PlayerInfo[playerid][pSQLID]);
	return true;
}
CMD:warnoff(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new name[MAX_PLAYER_NAME], reason[64], adminname[MAX_PLAYER_NAME];
	if(sscanf(params, "s[25]s[64]", name, reason)) return Info(playerid, "/warn [exact name] [reason]");
	if(CheckAcces(name)) return Info(playerid, "Nu poti sanctiona acel jucator.");
	format(adminname, sizeof(adminname), GetName(playerid));
	WarnUser(name, reason, adminname, PlayerInfo[playerid][pSQLID]);
	return true;
}
function SetLeader(id, amount, playerid){
	if(amount < 0 || amount > 8) return Info(playerid, "ID-ul este invalid.");
	if(PlayerInfo[id][pMember]) return Info(playerid, "This player is in a faction.");
	if(pfVehicle[id] != -1) DestroyVehicleEx(pfVehicle[id]), Iter_Remove(fVehicles[PlayerInfo[id][pMember]], pfVehicle[id]), pfVehicle[id] = -1;
	PlayerInfo[id][pMember] = amount;
	Iter_Add(FactionMembers[amount], id);
	FinishAchievement(id, 0);
	new string[128];
	format(string, sizeof(string), "%s is now the leader of faction %s.", GetName(id), FactionName(amount));
	Query_Mysql("INSERT INTO faction_logs (`text`, `player`,`leader`) VALUES ('%s','%d','%d')", string, PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID]);
	PlayerInfo[id][pRank] = 7;
	PlayerInfo[id][pFactionJoin] = gettime();
	if(amount != 1)
	{
		SetPlayerFactionColor(id);
	}
	defer Spawn(id, PlayerInfo[id][pSession]);
	pUpdateInt(id, "Member", PlayerInfo[id][pMember]);
	pUpdateInt(id, "Rank", PlayerInfo[id][pRank]);
	pUpdateInt(id, "FactionJoin", PlayerInfo[id][pFactionJoin]);
	PlayerInfo[id][pRaport] = 0;
	pUpdateInt(id, "Raport", 0);
	ResetSetGuns(id);
	Iter_Add(Leaders, id);
	return true;
}
CMD:set(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 5 && !Scripter(playerid) && !PlayerInfo[playerid][pManager]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, item[20], amount;
	if(sscanf(params, "us[20]d", id, item, amount)){
		Info(playerid, "/set [playerid] [item] [amount]");
		if(PlayerInfo[playerid][pAdmin] >= 5 || Scripter(playerid)){
			SendMsg(playerid, COLOR_SERVER, "Optiuni >> {ffffff}premium, vip, hp, armour, money, bank, int, vw, mats, fp, pp, flic, wlic, dlic, slic, hours");
			SendMsg(playerid, COLOR_SERVER, "Optiuni >> {ffffff}rank, member, admin, helper, leader, staffwarns, skin, ogpoints, spin, youtuber, manager");
			SendMsg(playerid, COLOR_SERVER, "Optiuni >> {ffffff}ap, clan, crank, alic, job, tutorial, giftpoints, robpoints, escapepoints, realmoney, perkpoints");
		}
		else SendMsg(playerid, COLOR_SERVER, "Optiuni >> {ffffff}Leader");
		return true;
	}
	if(PlayerInfo[playerid][pAdmin] < 5 && !Scripter(playerid) && !strmatch(item, "Leader")){
		Info(playerid, "/set [playerid] [item] [amount]");
		SendMsg(playerid, COLOR_SERVER, "Optiuni >> {ffffff}Leader");
		return true;
	}
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(strmatch(item, "hp")) SetPlayerHP(id, amount);
	else if(strmatch(item, "armour")) SetPlayerArm(id, amount);
	else if(strmatch(item, "money")){
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		ResetPlayerCash(id);
		GivePlayerCash(id, amount);
	}
	else if(strmatch(item, "bank")){
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		ResetPlayerBank(id);
		GivePlayerBank(id, amount);
	}
	else if(strmatch(item, "int")) SetPlayerInterior(id, amount);
	else if(strmatch(item, "vw")) SetPlayerVirtualWorld(id, amount);
	else if(strmatch(item, "mats")) PlayerInfo[id][pMats] = amount, pUpdateInt(id, "Materials", PlayerInfo[id][pMats]);
	else if(strmatch(item, "level")){
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 1 || amount > 100) return Info(playerid, "Nivel invalid(1 - 100).");
		PlayerInfo[id][pLevel] = amount;
		pUpdateInt(id, "Level", PlayerInfo[id][pLevel]);
		SetPlayerScore(id, amount);
		UpdateLevelBar(id);
	}
	else if(strmatch(item, "rp"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		PlayerInfo[id][pRespect] = amount;
		pUpdateInt(id, "Respect", PlayerInfo[id][pRespect]);
		UpdateLevelBar(id);
	}
	else if(strmatch(item, "fp")) PlayerInfo[id][pFpunish] = amount, pUpdateInt(id, "FPunish", PlayerInfo[id][pFpunish]);
	else if(strmatch(item, "pp"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		PlayerInfo[id][pPremiumPoints] = amount;
		pUpdateInt(id, "PremiumPoints", PlayerInfo[id][pPremiumPoints]);
	}
	else if(strmatch(item, "dlic")) PlayerInfo[id][pVehLic] = amount, pUpdateInt(id, "CarLic", PlayerInfo[id][pVehLic]);
	else if(strmatch(item, "flic")) PlayerInfo[id][pFlyLic] = amount, pUpdateInt(id, "FlyLic", PlayerInfo[id][pFlyLic]);
	else if(strmatch(item, "slic")) PlayerInfo[id][pBoatLic] = amount, pUpdateInt(id, "BoatLic", PlayerInfo[id][pBoatLic]);
	else if(strmatch(item, "wlic")) PlayerInfo[id][pGunLic] = amount, pUpdateInt(id, "GunLic", PlayerInfo[id][pGunLic]);
	else if(strmatch(item, "rank")){
		if(amount < 0 || amount > 7) return Info(playerid, "Rank-ul este invalid.");
		PlayerInfo[id][pRank] = amount;
		pUpdateInt(id, "Rank", amount);
		ResetSetGuns(id);
	}
	else if(strmatch(item, "member")){
		if(amount < 0 || amount > 8) return Info(playerid, "ID-ul este invalid.");
		if(PlayerInfo[id][pMember] != 0) return Info(playerid, "Jucatorul face parte dintr-o factiune.");
		if(pfVehicle[id] != -1) DestroyVehicleEx(pfVehicle[id]), Iter_Remove(fVehicles[PlayerInfo[id][pMember]], pfVehicle[id]), pfVehicle[id] = -1;
		Iter_Add(FactionMembers[amount], id);
		PlayerInfo[id][pMember] = amount;
		pUpdateInt(id, "Member", amount);
		PlayerInfo[id][pRank] = 1;
		pUpdateInt(id, "Rank", 1);
		PlayerInfo[id][pFactionJoin] = gettime();
		pUpdateInt(id, "FactionJoin", PlayerInfo[id][pFactionJoin]);
		PlayerInfo[id][pRaport] = 0;
		pUpdateInt(id, "Raport", 0);
		ResetSetGuns(id);
	}
	else if(strmatch(item, "admin")){
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(id == playerid && !Scripter(playerid)) return Info(playerid, "Nu poti folosi aceasta comanda pe tine.");
		if(amount < 0 || amount > 6) return Info(playerid, "Invalid admin level.");
		if(amount >= PlayerInfo[playerid][pAdmin] && !Scripter(playerid)) return Info(playerid, "Nu poti seta acel nivel de admin.");
		if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[id][pAdmin] && !Scripter(playerid)) return Info(playerid, "Nu poti seta admin level-ul acelui player.");
		if(amount == 0) Iter_Remove(Admins, id), format(PlayerInfo[id][pColor], 7, "CECECE"), pUpdateStr(id, "Color", PlayerInfo[id][pColor]);
		if(amount && !Iter_Contains(Admins, id)) Iter_Add(Admins, id), FinishAchievement(id, 1), PlayerInfo[id][pSettings][6] = true;
		PlayerInfo[id][pAdmin] = amount;
		pUpdateInt(id, "Admin", amount);
	}
	else if(strmatch(item, "helper")){
		if(amount < 0 || amount > 3) return Info(playerid, "Invalid helper level.");
		if(amount == 0) Iter_Remove(Helpers, id), format(PlayerInfo[id][pColor], 7, "CECECE"), pUpdateStr(id, "Color", PlayerInfo[id][pColor]);
		if(amount && !Iter_Contains(Helpers, id)) Iter_Add(Helpers, id), FinishAchievement(id, 2);
		PlayerInfo[id][pHelper] = amount;
		pUpdateInt(id, "Helper", amount);
	}
	else if(strmatch(item, "leader")) {
		if(PlayerInfo[id][pMember] != 0) return Info(playerid, "Acel jucator este deja intr-o factiune.");
		if(PlayerInfo[playerid][pAdmin] >= 6 || Scripter(playerid))
		{
			SetLeader(id, amount, playerid);
		}
		else
		{
			switch(PlayerInfo[playerid][pManager])
			{
				case 1:
				{
					if(amount != 1) return Info(playerid, "Nu poti seta Lider in aceasta factiune.");
				}
				case 2:
				{
					if(amount != 2 && amount != 3) return Info(playerid, "Nu poti seta Lider in aceasta factiune.");
				}
				case 3:
				{
					if(amount != 4 && amount != 6 && amount != 7 && amount != 8) return Info(playerid, "Nu poti seta Lider in aceasta factiune.");
				}
				case 4:
				{
					if(amount != 5) return Info(playerid, "Nu poti seta Lider in aceasta factiune.");
				}
				default:
				{
					return Info(playerid, "Factiune invalide.");
				}
			}
			SetLeader(id, amount, playerid);
		}
	}
	else if(strmatch(item, "staffwarns")){
		if(!PlayerInfo[id][pHelper] && !PlayerInfo[id][pAdmin] && PlayerInfo[id][pRank] < 7) return Info(playerid, "Acel jucator nu este Admin / Helper / Leader.");
		if(amount < 0 || amount > 3) return Info(playerid, "Invalid staffwarns.");
		PlayerInfo[id][pStaffWarns] = amount;
		pUpdateInt(id, "StaffWarns", amount);
	}
	else if(strmatch(item, "skin")){
		if(amount < 0 || amount > 311 || amount == 74) return Info(playerid, "Skin-ul este invalid.");
		PlayerInfo[id][pModel] = amount;
		pUpdateInt(id, "Model", amount);
		SetPlayerSkin(id, amount);
	}
	else if(strmatch(item, "ogpoints")){
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 0) return Info(playerid, "Numar invalid.");
		PlayerInfo[id][pOGPoints] = amount;
		pUpdateInt(id, "OGPoints", amount);
	}
	else if(strmatch(item, "spin")){
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 0) return Info(playerid, "Numar invalid.");
		PlayerInfo[id][pSpin] = amount;
		pUpdateInt(id, "Spin", amount);
	}
	else if(strmatch(item, "youtuber")){
		if(amount != 0 && amount != 1) return Info(playerid, "Numar invalid.");
		if(amount)
		{
			if(PlayerInfo[id][pYouTuber] == true) return Info(playerid, "Jucatorul are deja acel nivel de YouTuber.");
			PlayerInfo[id][pYouTuber] = true;
			Iter_Add(YouTubers, id);
		}
		else
		{
			if(PlayerInfo[id][pYouTuber] == false) return Info(playerid, "Jucatorul are deja acel nivel de YouTuber.");
			PlayerInfo[id][pYouTuber] = false;
			Iter_Remove(YouTubers, id);
		}
		pUpdateInt(id, "YouTuber", amount);
	}
	else if(strmatch(item, "hours")){
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 0) return Info(playerid, "Numar invalid.");
		PlayerInfo[id][pConnectTime] = amount;
		pUpdateInt(id, "ConnectedTime", amount);
	}
	else if(strmatch(item, "ap")){
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 0) return Info(playerid, "Numar invalid.");
		PlayerInfo[id][pActivity] = amount;
		pUpdateInt(id, "Activity", amount);
	}
	else if(strmatch(item, "manager")){
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 0 || amount > 4) return Info(playerid, "Numar invalid.");
		PlayerInfo[id][pManager] = amount;
		pUpdateInt(id, "Manager", amount);
	}
	else if(strmatch(item, "premium")){
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 0 || amount > 1) return Info(playerid, "Numar invalid(0 - 1).");
		if(amount)
		{
			if(!Iter_Contains(Premiums, id))
			{
				Iter_Add(Premiums, id);
			}
			PlayerInfo[id][pPremium] = true;
		}
		else
		{
			if(Iter_Contains(Premiums, id))
			{
				Iter_Remove(Premiums, id);
			}
			PlayerInfo[id][pPremium] = false;
		}
		pUpdateInt(id, "Premium", PlayerInfo[id][pPremium]);
	}
	else if(strmatch(item, "vip")){
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 0 || amount > 1) return Info(playerid, "Numar invalid(0 - 1).");
		if(amount)
		{
			if(!Iter_Contains(Vips, id))
			{
				Iter_Add(Vips, id);
			}
			PlayerInfo[id][pVIP] = true;
		}
		else
		{
			if(Iter_Contains(Vips, id))
			{
				Iter_Remove(Vips, id);
			}
			PlayerInfo[id][pVIP] = false;
		}
		pUpdateInt(id, "VIP", PlayerInfo[id][pVIP]);
	}
	else if(strmatch(item, "alic"))
	{
		if(amount < 0 || amount > 25) return Info(playerid, "Numar invalid.");
		PlayerInfo[id][pVehLic] = amount;
		pUpdateInt(id, "CarLic", PlayerInfo[id][pVehLic]);
		PlayerInfo[id][pFlyLic] = amount;
		pUpdateInt(id, "FlyLic", PlayerInfo[id][pFlyLic]);
		PlayerInfo[id][pBoatLic] = amount;
		pUpdateInt(id, "BoatLic", PlayerInfo[id][pBoatLic]);
		PlayerInfo[id][pGunLic] = amount;
		pUpdateInt(id, "GunLic", PlayerInfo[id][pGunLic]);
	}
	else if(strmatch(item, "job"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 0 || amount > MAX_JOBS) return Info(playerid, "Job invalid");
		SetJob(id, amount);
	}
	else if(strmatch(item, "tutorial"))
	{
		if(amount != 1) return Info(playerid, "Numar invalid.");
		if(!PlayerInfo[id][pTutorial]) return Info(playerid, "Jucatorul nu se afla in Tutorial.");
		FinishTutorial(id);
		PlayerInfo[playerid][pBonus] = true;
		pUpdateInt(playerid, "Bonus", PlayerInfo[playerid][pBonus]);
	}
	else if(strmatch(item, "clan"))
	{
		if(amount < 0 || amount > serverClans) return Info(playerid, "Clan invalid.");
		if(PlayerInfo[id][pClan] != 0)
		{
			if(Iter_Contains(InClan[PlayerInfo[id][pClan]], id))
			{
				Iter_Remove(InClan[PlayerInfo[id][pClan]], id);
			}	
		}
		if(!Iter_Contains(InClan[amount], id))
		{
			Iter_Add(InClan[amount], id);
		}
		PlayerInfo[id][pClan] = amount;
		pUpdateInt(id, "Clan", amount);
		PlayerInfo[id][pCRank] = 1;
		pUpdateInt(id, "CRank", 1);
		pUpdateInt(id, "ClanTime", 0);
	}
	else if(strmatch(item, "crank"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 1 || amount > 7) return Info(playerid, "Rank invalid.");
		if(PlayerInfo[id][pClan] < 1) return Info(playerid, "Acel jucator nu este intr-un clan.");
		gString[0] = (EOS);
		mysql_format(SQL, gString, sizeof gString, "select * from users where Clan = %d and CRank = 7", PlayerInfo[id][pClan]);
		mysql_tquery(SQL, gString, "CheckClanLeader", "iii", playerid, id, amount);
	}
	else if(strmatch(item, "giftpoints"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 0)
			return Info(playerid, "Suma de giftpoints este invalida.");

		PlayerInfo[id][pGiftPoints] = amount;
		pUpdateInt(id, "GiftPoints", PlayerInfo[id][pGiftPoints]);
	}
	else if(strmatch(item, "robpoints"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 0)
			return Info(playerid, "Suma de robpoints este invalida.");

		PlayerInfo[id][pRob] = amount;
		pUpdateInt(id, "Rob", PlayerInfo[id][pRob]);
	}
	else if(strmatch(item, "escapepoints"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 0)
			return Info(playerid, "Suma de escapepoints este invalida.");

		PlayerInfo[id][pEscapePoints] = amount;
		pUpdateInt(id, "EscapePoints", PlayerInfo[id][pEscapePoints]);
	}
	else if(strmatch(item, "realmoney"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 0)
			return Info(playerid, "Suma este invalida.");

		PlayerInfo[id][pRealMoney] = amount;
		pUpdateInt(id, "RealMoney", PlayerInfo[id][pRealMoney]);
	}
	else if(strmatch(item, "perkpoints"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6 && !Scripter(playerid)) return Info(playerid, "Nu ai admin 6.");
		if(amount < 0 || amount > 105)
			return Info(playerid, "Suma este invalida.");

		PlayerInfo[id][pPerkPoints] = amount;
	}
	else return Info(playerid, "Item invalid.");
	SendMsg(id, COLOR_SERVER, "SET >> %s ti-a setat %s la %s.", GetName(playerid), item, FormatNumber(amount));
	SendAdmins(COLOR_RED, "SET >> %s i-a setat lui %s %s la %s.", 1, GetName(playerid), GetName(id), item, FormatNumber(amount));
	return true;
}
function CheckClanLeader(playerid, id, amount)
{
	if(cache_num_rows() && amount >= 7)
	{
		SendMsg(playerid, COLOR_SERVER, "Change Clan Rank >> {ffffff}Acel clan are deja un Leader.");
	}
	else
	{
		PlayerInfo[id][pCRank] = amount;
		pUpdateInt(id, "CRank", amount);
	}
	return true;
}
CMD:colors(playerid)
{
	new
		str[3250]
	;

	strcat(str, "{FFFFFF}Culori normale:\n");
	strcat(str,	"{000000}000 {F5F5F5}001 {2A77A1}002 {840410}003 {263739}004 {86446E}005 {D78E10}006 {4C75B7}007 {BDBEC6}008 {5E7072}009 {46597A}010 {656A79}011 {5D7E8D}012 {58595A}013 {D6DAD6}014 {9CA1A3}015 {335F3F}016 {730E1A}017 {7B0A2A}018 {9F9D94}019\n");
	strcat(str, "{3B4E78}020 {732E3E}021 {691E3B}022 {96918C}023 {515459}024 {3F3E45}025 {A5A9A7}026 {635C5A}027 {3D4A68}028 {979592}029 {421F21}030 {5F272B}031 {8494AB}032 {767B7C}033 {646464}034 {5A5752}035 {252527}036 {2D3A35}037 {93A396}038 {6D7A88}039\n");
	strcat(str, "{221918}040 {6F675F}041 {7C1C2A}042 {5F0A15}043 {193826}044 {5D1B20}045 {9D9872}046 {7A7560}047 {989586}048 {ADB0B0}049 {848988}050 {304F45}051 {4D6268}052 {162248}053 {272F4B}054 {7D6256}055 {9EA4AB}056 {9C8D71}057 {6D1822}058 {4E6881}059\n");
	strcat(str, "{9C9C98}060 {917347}061 {661C26}062 {949D9F}063 {A4A7A5}064 {8E8C46}065 {341A1E}066 {6A7A8C}067 {AAAD8E}068 {AB988F}069 {851F2E}070 {6F8297}071 {585853}072 {9AA790}073 {601A23}074 {20202C}075 {A4A096}076 {AA9D84}077 {78222B}078 {0E316D}079\n");
	strcat(str, "{722A3F}080 {7B715E}081 {741D28}082 {1E2E32}083 {4D322F}084 {7C1B44}085 {2E5B20}086 {395A83}087 {6D2837}088 {A7A28F}089 {AFB1B1}090 {364155}091 {6D6C6E}092 {0F6A89}093 {204B6B}094 {2B3E57}095 {9B9F9D}096 {6C8495}097 {4D8495}098 {AE9B7F}099\n");
	strcat(str, "{406C8F}100 {1F253B}101 {AB9276}102 {134573}103 {96816C}104 {64686A}105 {105082}106 {A19983}107 {385694}108 {525661}109 {7F6956}110 {8C929A}111 {596E87}112 {473532}113 {44624F}114 {730A27}115 {223457}116 {640D1B}117 {A3ADC6}118 {695853}119\n");
	strcat(str, "{9B8B80}120 {620B1C}121 {5B5D5E}122 {624428}123 {731827}124 {1B376D}125 {EC6AAE}126 {000000}127\n");

	strcat(str, "{FFFFFF}Culori hidden:\n");
	strcat(str, "{177517}128 {210606}129 {125478}130 {452A0D}131 {571E1E}132 {010701}133 {25225A}134 {2C89AA}135 {8A4DBD}136 {35963A}137 {B7B7B7}138 {464C8D}139 {84888C}140 {817867}141 {817A26}142 {6A506F}143 {583E6F}144 {8CB972}145 {824F78}146 {6D276A}147\n");
	strcat(str, "{1E1D13}148 {1E1306}149 {1F2518}150 {2C4531}151 {1E4C99}152 {2E5F43}153 {1E9948}154 {1E9999}155 {999976}156 {7C8499}157 {992E1E}158 {2C1E08}159 {142407}160 {993E4D}161 {1E4C99}162 {198181}163 {1A292A}164 {16616F}165 {1B6687}166 {6C3F99}167\n");
	strcat(str, "{481A0E}168 {7A7399}169 {746D99}170 {53387E}171 {222407}172 {3E190C}173 {46210E}174 {991E1E}175 {8D4C8D}176 {805B80}177 {7B3E7E}178 {3C1737}179 {733517}180 {781818}181 {83341A}182 {8E2F1C}183 {7E3E53}184 {7C6D7C}185 {020C02}186 {072407}187\n");
	strcat(str, "{163012}188 {16301B}189 {642B4F}190 {368452}191 {999590}192 {818D96}193 {99991E}194 {7F994C}195 {839292}196 {788222}197 {2B3C99}198 {3A3A0B}199 {8A794E}200 {0E1F49}201 {15371C}202 {15273A}203 {375775}204 {060820}205 {071326}206 {20394B}207\n");
	strcat(str, "{2C5089}208 {15426C}209 {103250}210 {241663}211 {692015}212 {8C8D94}213 {516013}214 {090F02}215 {8C573A}216 {52888E}217 {995C52}218 {99581E}219 {993A63}220 {998F4E}221 {99311E}222 {0D1842}223 {521E1E}224 {42420D}225 {4C991E}226 {082A1D}227\n");
	strcat(str, "{96821D}228 {197F19}229 {3B141F}230 {745217}231 {893F8D}232 {7E1A6C}233 {0B370B}234 {27450D}235 {071F24}236 {784573}237 {8A653A}238 {732617}239 {319490}240 {56941D}241 {59163D}242 {1B8A2F}243 {38160B}244 {041804}245 {355D8E}246 {2E3F5B}247\n");
	strcat(str, "{561A28}248 {4E0E27}249 {706C67}250 {3B3E42}251 {2E2D33}252 {7B7E7D}253 {4A4442}254 {28344E}255\n");

	SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Culori vehicule", str, "Inchide","");

	return true;
}
CMD:re(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pHelper]) return SendMsg(playerid, COLOR_SERVER, AdminOnly); new id, mesaj[128];
	if(sscanf(params, "us[128]", id, mesaj)) return Info(playerid, "/re [name/playerid] [text]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	SendAdmins(COLOR_RED, "Admin >> {ffffff}(/re) %s->%s: %s", 1, GetName(playerid), GetName(id), mesaj);
	SendHelpers(COLOR_YELLOW, "Helper >> {ffffff}(/re) %s->%s: %s", 1, GetName(playerid), GetName(id), mesaj);
	SendMsg(id, COLOR_YELLOW, "((PM from %s: %s))", GetName(playerid), mesaj);
	return true;
}			
CMD:sstats(playerid){
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new
		TickRate = GetServerTickRate(),
		Queries = mysql_unprocessed_queries(),
		Clans = serverClans,
		InLogin = Iter_Count(InLogin),
		StageVehicles = Iter_Count(StageVehicles),
		RainbowVehicles = Iter_Count(RainbowVehicles),
		InPaint = Iter_Count(InPaint),
		Contracts = Iter_Count(Contracts),
		AndroidPlayers = Iter_Count(AndroidPlayers),
		PcPlayers = Iter_Count(PcPlayers)
	;
	Info(playerid, "Tick rate: %d | Queries: %d | Clans: %d | InLogin: %d | Stage Vehicles: %d | Rainbow Vehicles: %d", TickRate, Queries, Clans, InLogin, StageVehicles, RainbowVehicles);
	Info(playerid, "Vehicles: models: %d | PaintBall Players: %d | Contracts: %d | Dynamic Areas: %d", stockss, InPaint, Contracts, Areas);
	Info(playerid, "%d Mobile Players and %d PC Players.", AndroidPlayers, PcPlayers);
	Info(playerid, "Serverul a pornit in %d secunde.", FinishTime - StartTime);
	return true;
}
CMD:vehname(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	Info(playerid, "Vehicule:"); new rcount, string[128];
	if(isnull(params)) return true;
	if(strlen(params) < 3) return Info(playerid, "Cautare prea scurta.");
	for(new v; v < sizeof(aVehicleNames); v++){
		if(strfind(aVehicleNames[v], params, true) != -1){
			if(rcount == 0) format(string, sizeof(string), "%s (ID %d)", aVehicleNames[v], v+400);
			else format(string, sizeof(string), "%s | %s (ID %d)", string, aVehicleNames[v], v+400);
			rcount++;
		}
	}
	if(rcount == 0) Info(playerid, "Fara rezultate.");
	else if(strlen(string) >= 128) Info(playerid, "Prea multe rezultate.");
	else SendMsg(playerid, -1, string);
	return true;
}
CMD:gunname(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	Info(playerid, "Arme:");
	new rcount, string[128];
	if(isnull(params)) return true;
	if(strlen(params) < 3) return Info(playerid, "Cautare prea scurta.");
	for(new v; v < 47; v++){
		if(strfind(GunNames[v], params, true) != -1){
			if(rcount == 0) format(string, sizeof(string), "%s (ID %d)", GunNames[v], v);
			else format(string, sizeof(string), "%s | %s (ID %d)", string, GunNames[v], v);
			rcount++;
		}
	}
	if(rcount == 0) Info(playerid, "Fara rezultate.");
	else if(strlen(string) >= 128) Info(playerid, "Prea multe rezultate.");
	else SendMsg(playerid, -1, string);
	return true;
}
CMD:find(playerid, params[]){
	if(GetPlayerCash(playerid) < 5_000) return Info(playerid, "Nu ai $5, 000.");
	if(HaveCheckpoint(playerid)) return true;
	if(PlayerInfo[playerid][pJob] != 1 && !IsACop(playerid) && PlayerInfo[playerid][pMember] != 5 && !HaveVIP(playerid)) return Info(playerid, "You are not a detective.");
	new id, Float: x, Float: y, Float: z;
	if(sscanf(params, "u", id)) return Info(playerid, "/find [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(id == playerid) return Info(playerid, "You can't find yourself.");
	if(Undercover[id] == true || PlayerInfo[id][pSettings][6] == true || PlayerInfo[id][pTutorial] != false) return Info(playerid, "Nu poti localiza acel player.");
	GetPlayerPos(id, x, y, z);
	DisablePlayerCheckpoint(playerid);
	SetPlayerCheckpointEx(playerid, x, y, z, 3.5);
	targetfind[playerid] = id;
	GivePlayerCash(playerid, -5_000);
	GiveJobBalance(1, 5_000);
	Info(playerid, "Un checkpoint ti-a fost setat pe jucatorul ales.");
	return true;
}
CMD:get(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(sscanf(params, "u", id)) return Info(playerid, "/get [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[id][pAdmin]) return Info(playerid, "Nu poti folosi aceasta comanda pe un admin mai mare ca tine.");
	if(IsPlayerInAnyVehicle(id)){
		new plo = GetPlayerVehicleID(id), Float:plocx, Float:plocy, Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz); 
		SetVehiclePos(plo, plocx, plocy + 4, plocz); 
		GetVehiclePos(plo, old_veh_pos[plo][0], old_veh_pos[plo][1], old_veh_pos[plo][2]);
		SetPlayerVirtualWorld(id, GetPlayerVirtualWorld(playerid));
		SetPlayerInterior(id, GetPlayerInterior(playerid));
		LinkVehicleToInterior(plo, GetPlayerInterior(playerid)); 
		SetVehicleVirtualWorld(plo, GetPlayerVirtualWorld(playerid)); 
	}
	else {
		SetPlayerPosEx(id, X + 2.0, Y, Z);
		SetPlayerVirtualWorld(id, GetPlayerVirtualWorld(playerid));
		SetPlayerInterior(id, GetPlayerInterior(playerid));
	}
	Info(id, "%s te-a teleportat la el.", GetName(playerid));
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s l-a teleportat pe %s(%d) la el.", 1, GetName(playerid), GetName(id), id);
	return true;
}
CMD:gotoxyz(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
		return SendMsg(playerid, COLOR_SERVER, AdminOnly);

	new
		interior,
		vw,
		Float:x,
		Float:y,
		Float:z
	;

	if(sscanf(params, "fffii", x,y,z,interior,vw))
		return Info(playerid, "/gotoxyz [x] [y] [z] [interior] [virtual]");

	Info(playerid, "Ai fost teleportat.");
	SetPlayerVirtualWorld(playerid, vw);
	SetPlayerPosEx(playerid, x, y, z);
	SetPlayerInterior(playerid,interior);
	return true;
}
CMD:so(playerid, params[]){
	if(!IsACop(playerid)) return Info(playerid, "Nu esti politist.");
	if(OnDuty[playerid] != true) return Info(playerid, "Nu esti la datorie.");
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/so [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(id == playerid) return Info(playerid, "Nu poti folosi aceasta comanda pe tine.");
	if(GetDistanceBetweenPlayers(playerid, id) > 75) return Info(playerid, "Acel player nu se afla langa tine.");
	sendNearbyMessage(playerid, 75.0, 0xe3ce10ff, "Politist %s >> {1a10cc}%s{e3ce10}, trage pe dreapta imediat!", GetName(playerid), GetName(id));
	somated[id] = playerid;
	soexpire[id] = 1;
	return true;
}
CMD:mark(playerid){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	GetPlayerPos(playerid, TeleportDest[playerid][0], TeleportDest[playerid][1], TeleportDest[playerid][2]);
	Info(playerid, "Ti-ai setat un marker.");
	return true;
}
CMD:gotomark(playerid){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
		new tmpVeh = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpVeh, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]); 
		GetVehiclePos(tmpVeh, old_veh_pos[tmpVeh][0], old_veh_pos[tmpVeh][1], old_veh_pos[tmpVeh][2]);
		LinkVehicleToInterior(tmpVeh, GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(tmpVeh, GetPlayerVirtualWorld(playerid));
		OnPlayerGoto(playerid, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));	
	}
	else SetPlayerPosEx(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
	Info(playerid, "Ai fost teleportat la marker.");
	return true;
}	
CMD:gotoveh(playerid, parmas[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new testcar, Float: cwx2, Float: cwy2, Float: cwz2;
	if(sscanf(parmas, "d", testcar)) return Info(playerid, "/gotoveh [car id]");
	if(testcar == INVALID_VEHICLE_ID || !IsValidVehicle(testcar)) return SendMsg(playerid, COLOR_SERVER, "Goto Vehicle >> {ffffff}ID-ul vehicului este invalid.");
	GetVehiclePos(testcar, cwx2, cwy2, cwz2);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
		new tmpVeh = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpVeh, cwx2, cwy2, cwz2);
		GetVehiclePos(tmpVeh, old_veh_pos[tmpVeh][0], old_veh_pos[tmpVeh][1], old_veh_pos[tmpVeh][2]);
		SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(tmpVeh));
		OnPlayerGoto(playerid, 0, 0);
	}
	else SetPlayerPosEx(playerid, cwx2, cwy2, cwz2);
	Info(playerid, "Ai fost teleportat.");
	SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(testcar));
	return true;
}
CMD:check(playerid, params[]){
	new id;
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly); if(sscanf(params, "u", id)) return Info(playerid, "/check [name/playerid]");
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return Info(playerid, "ID-ul este invalid.");
	ShowStats(playerid, id);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a folosit /check pe %s.", 1, GetName(playerid), GetName(id));
	return true;
}	
CMD:pm(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, message[128]; if(sscanf(params, "us[128]", id, message)) return Info(playerid, "/pm [name/playerid] [message]");
 	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
 	SendMsg(id, 0xFFFF00AA, "PM from %s: %s", GetName(playerid), message);
 	SendMsg(playerid, 0xFFFF00AA, "PM sent to %s: %s", GetName(id), message);
	return true;
}
function IdUser(playerid, id[25]){
	new status[32];
	if(IsNumeric(id)){
		new idd = strval(id);
		if(!IsPlayerConnected(idd) || !Logat[idd]) return Info(playerid, "Acel jucator nu este conectat.");
		if(IsAndroidPlayer(idd)) status = "Android"; 
		else status = "Pc";	
 		if(PlayerInfo[idd][pMember]) Info(playerid, "(%d) %s | Nivel: %d | Factiune: %s (R%d) | %s", idd, GetName(idd), PlayerInfo[idd][pLevel], FactionName(PlayerInfo[idd][pMember]), PlayerInfo[idd][pRank], status);
 		else Info(playerid, "(%d) %s | Nivel: %d | Factiune: - | %s", idd, GetName(idd), PlayerInfo[idd][pLevel], status);
	} 
	else {
		new find = 0;
		foreach(new i : Player){ 
			if(find < 10){ 
				if(strfind(GetName(i), id, true) != -1 && IsPlayerConnected(i) && Logat[i]){
					if(!IsPlayerConnected(i) || !Logat[i]) return Info(playerid, "Acel jucator nu este conectat.");
					if(IsAndroidPlayer(i)) status = "Android"; 
					else status = "Pc";						
					if(PlayerInfo[i][pMember]) Info(playerid, "(%d) %s | Nivel: %d | Factiune: %s (R%d) | %s", i, GetName(i), PlayerInfo[i][pLevel], FactionName(PlayerInfo[i][pMember]), PlayerInfo[i][pRank], status);
					else Info(playerid, "(%d) %s | Nivel: %d | Factiune: - | %s", i, GetName(i), PlayerInfo[i][pLevel], status);
					find ++; 
				}
			}
		} 
		if(!find) return Info(playerid, "Jucatorul nu este conectat.");
	}
	return true;
}
CMD:id(playerid, params[]){
	new id[25]; 
	if(sscanf(params, "s[25]", id)) return Info(playerid, "/id [name/playerid]");
	IdUser(playerid, id);
	return true;
}
CMD:dav(playerid){
	if(PlayerInfo[playerid][pAdmin] < 2) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	if(Iter_Count(SpawnVehs) < 1) return Info(playerid, "Nu sunt vehicule create.");
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a distrus %d vehicule create.", 1, GetName(playerid), Iter_Count(SpawnVehs));
	foreach(new i : SpawnVehs) DestroyVehicleEx(i);
	Iter_Clear(SpawnVehs);
	return true;
}
CMD:veh(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	if(PlayerInfo[playerid][pWantedLevel]) return Info(playerid, "Nu poti folosi aceasta comanda deoarece ai wanted.");
	new Float: X, Float: Y, Float: Z, Float: Angle, model, vehid;
	if(sscanf(params, "i", model)) return Info(playerid, "/veh [model]");
	if(model < 400 || model > 611) return Info(playerid, "Vehicul invalid.");
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);
	vehid = CreateVehicleEx(model, X, Y, Z, Angle, random(256), random(256), -1);
	LinkVehicleToInterior(vehid, GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(vehid, GetPlayerVirtualWorld(playerid));
	PutPlayerInVehicleEx(playerid, vehid, 0);
	Iter_Add(SpawnVehs, vehid);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a creat un %s, id: %d, vehicule create: %d", 1, GetName(playerid), GetVehicleName(model), vehid, Iter_Count(SpawnVehs));
	return true;
}	
CMD:fv(playerid)
{
	if(!PlayerInfo[playerid][pAdmin] && !HaveVIP(playerid) && !HaveSupreme(playerid)) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	if(Iter_Contains(AtEvent, playerid) && PlayerInfo[playerid][pAdmin] < 1) return Info(playerid, "Nu poti folosi aceasta comanda la eveniment.");
	if(Iter_Contains(InRaceQuest, playerid) && PlayerInfo[playerid][pAdmin] < 1) return Info(playerid, "Nu poti folosi aceasta comanda la quest.");
	if(PlayerInfo[playerid][pWantedLevel] != 0) return Info(playerid, "Nu poti face asta deoarece ai Wanted.");
	if(!GetPVarInt(playerid, "PoateFV")) return Info(playerid, "Poti folosi comanda o data pe minut.");
	if(!IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Nu te afli intr-un vehicul.");
	new
		vehicleid = GetPlayerVehicleID(playerid)
	;
	if((HaveVIP(playerid) || HaveSupreme(playerid)) && !PlayerInfo[playerid][pAdmin]) SetPVarInt(playerid, "PoateFV", 0);
	RepairVehicleEx(vehicleid);
	Info(playerid, "Ai reparat vehiculul %d.", vehicleid);
	return true;
}	
CMD:nos(playerid){
	new
		vehicleid = GetPlayerVehicleID(playerid),
		bool: InVipVehicle
	;

	for(new Vehicle = 0; Vehicle < MAX_PERSONAL_VEHICLES; Vehicle ++)
	{
		if(PlayerInfo[playerid][pVehID][Vehicle] == vehicleid && PlayerInfo[playerid][pVehVip][Vehicle] == true)
		{
			InVipVehicle = true;
		}
	}

	if(!PlayerInfo[playerid][pAdmin] && !HaveVIP(playerid) && !InVipVehicle) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	if(Iter_Contains(AtEvent, playerid) && PlayerInfo[playerid][pAdmin] < 1) return Info(playerid, "Nu poti folosi aceasta comanda la eveniment.");
	if(Iter_Contains(InRaceQuest, playerid) && PlayerInfo[playerid][pAdmin] < 1) return Info(playerid, "Nu poti folosi aceasta comanda la quest.");
	if(PlayerInfo[playerid][pWantedLevel] != 0) return Info(playerid, "Nu poti face asta deoarece ai Wanted.");
	if(!GetPVarInt(playerid, "PoateNos") && InVipVehicle == false) return Info(playerid, "Poti folosi comanda o data pe minut.");
	if(!IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Nu te afli intr-un vehicul.");
	if(HaveVIP(playerid) && !PlayerInfo[playerid][pAdmin]) SetPVarInt(playerid, "PoateNos", 0);
	AddVehicleComponent(vehicleid, 1010);
	Info(playerid, "Ai pus NOS pe vehiculul %d.", vehicleid);
	return true;
}	
CMD:flip(playerid){
	if(!PlayerInfo[playerid][pAdmin] && !HaveVIP(playerid)) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	if(Iter_Contains(AtEvent, playerid) && PlayerInfo[playerid][pAdmin] < 1) return Info(playerid, "Nu poti folosi aceasta comanda la eveniment.");
	if(Iter_Contains(InRaceQuest, playerid) && PlayerInfo[playerid][pAdmin] < 1) return Info(playerid, "Nu poti folosi aceasta comanda la quest.");
	if(PlayerInfo[playerid][pWantedLevel] != 0) return Info(playerid, "Nu poti face asta deoarece ai Wanted.");
	if(!GetPVarInt(playerid, "PoateFlip")) return Info(playerid, "Poti folosi comanda o data pe minut.");
	if(!IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Nu te afli intr-un vehicul.");
	if(HaveVIP(playerid) && !PlayerInfo[playerid][pAdmin]) SetPVarInt(playerid, "PoateFlip", 0);
	new Float:angle, vid = GetPlayerVehicleID(playerid);
	GetVehicleZAngle(vid, angle); 
	SetVehicleZAngle(vid, angle);
	Info(playerid, "Ai intors vehiculul %d.", vid);
	return true;
}
CMD:fare(playerid){
	if(PlayerInfo[playerid][pMember] != 6) return Info(playerid, "Nu esti Uber.");
	if(OnDuty[playerid] != true) return Info(playerid, "Nu esti la datorie.");
	if(UberFare[playerid]){ 
		UberFare[playerid] = 0; 
		UberMoneyEarned[playerid] = 0; 
		Info(playerid, "Nu mai esti la datorie."); 
		PlayerTextDrawHide(playerid, RentCarText[playerid]);
	} 
	else {
		if(!IsAnUber(GetPlayerVehicleID(playerid))) return true;
		UberFare[playerid] = 2500; 
		va_SendClientMessageToAll(0x00FF00AA, "Uber >> %s este la datorie ($%s). [/service]", GetName(playerid), FormatNumber(UberFare[playerid]));
	} 
	return true;
}	
CMD:placegotoevent(playerid){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	if(!eventenabled){
		pickup_event = CreateDynamicPickup(1314, 1, x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerVirtualWorld(playerid));
		evex = x;
		evey = y;
		evez = z;
		eventenabled = true;
		interiorevent = GetPlayerInterior(playerid);
		virtuallevent = GetPlayerVirtualWorld(playerid);
		va_SendClientMessageToAll(COLOR_SERVER, "Admin >> {ffffff}%s a deschis teleportarile catre eveniment (/gotoevent).", GetName(playerid));
	}
	else {
		DestroyDynamicPickup(pickup_event);
		evex = 0.0;
		evey = 0.0;
		evez = 0.0;
		eventenabled = false;
		interiorevent = 0;
		virtuallevent = 0;
		va_SendClientMessageToAll(COLOR_SERVER, "Admin >> {ffffff}%s a inchis teleportarile catre eveniment.", GetName(playerid));
	}
	return true; }	
CMD:gotoevent(playerid){
	if(Iter_Contains(AtEvent, playerid)) return Info(playerid, "Esti deja la eveniment.");
	if(PlayerInfo[playerid][pJailed]) return Info(playerid, "Nu poti face asta, esti la inchisoare.");
	if(PlayerInfo[playerid][pWantedLevel]) return Info(playerid, "Nu poti face asta, ai wanted.");
	if(!eventenabled) return Info(playerid, "Nu este niciun eveniment activ.");
	SetPlayerPosEx(playerid, evex, evey, evez);
	SetPlayerInterior(playerid, interiorevent);
	SetPlayerVirtualWorld(playerid, virtuallevent);
	Info(playerid, "Ai fost teleportat la event.");
	Iter_Add(AtEvent, playerid);
	return true;
}	
CMD:cancel(playerid, params[]){
	new option[64];
	if(sscanf(params, "s[64]",option)) Info(playerid, "/cancel [service]");
	if(strcmp(option,"drugs",true) == 0){
		if(DrugOffer[playerid] == -1) return true;
		DrugOffer[playerid] = -1; DrugPrice[playerid] = 0; DrugGram[playerid] = 0; 
	}
	else if(!strcmp(option,"materials",true)){
		if(MatsOffer[playerid] == -1) return true;
		MatsOffer[playerid] = -1; MatsPrice[playerid] = 0; MatsAmmo[playerid] = 0; 
	}
	else if(!strcmp(option,"gun",true)){
		if(SellgunOffer[playerid] == -1) return true;
		SellgunOffer[playerid] = -1; SellgunPrice[playerid] = 0; SellgunMats[playerid] = 0;
		SellgunAmmo[playerid] = 0; SellgunID[playerid] = 0; 
	}
	else if(!strcmp(option,"live",true)){
		if(LiveOffer[playerid] == -1) return true;
		LiveOffer[playerid] = -1; 
	}
	else if(!strcmp(option,"ticket",true)){
		if(TicketOffer[playerid] == -1) return true;
		TicketOffer[playerid] = -1; TicketMoney[playerid] = 0; 
	}
	else if(!strcmp(option,"uber",true)){
		if(!Iter_Contains(UberCalls, playerid)) return true;
		Iter_Remove(UberCalls, playerid);
		Info(playerid, "Ti-ai anulat apelul.");
		SendFamilyMessage(6, GetFactionColor(6), "%s [%d] si-a anulat apelul.", GetName(playerid), playerid); 
	}
	else if(!strcmp(option,"paramedic",true)){
		if(!Iter_Contains(ParamedicCalls, playerid)) return true;
		Iter_Remove(ParamedicCalls, playerid);
		Info(playerid, "Ti-ai anulat apelul.");
		SendFamilyMessage(7, GetFactionColor(7), "%s [%d] si-a anulat apelul.", GetName(playerid), playerid); 
	}
	else if(!strcmp(option,"glovo",true)){
		if(!Iter_Contains(GlovoCalls, playerid)) return true;
		Iter_Remove(GlovoCalls, playerid);
		Info(playerid, "Ti-ai anulat apelul.");
		SendFamilyMessage(8, GetFactionColor(8), "%s [%d] si-a anulat apelul.", GetName(playerid), playerid); 
	}
	return true;
}
CMD:dice(playerid, params[]){
	if(BizzInfo[InBiz[playerid]][bType] != 4) return Info(playerid, "You can use this command only in casinos.");
	new id, money;
	if(PlayerInfo[playerid][pConnectTime] < 5) return Info(playerid, "Nu ai 5 ore.");	
	if(sscanf(params, "ud", id, money)) return Info(playerid, "/dice [name/playerid] [money]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(id == playerid) return Info(playerid, "Nu te poti provoca singur.");
	if(GetDistanceBetweenPlayers(playerid, id) > 10) return Info(playerid, "Nu esti langa acel player.");
	if(money < 1 || money > 999999999) return Info(playerid, "Poti juca pe maxim $999, 999, 999 si minim $1.");
	if(GetPlayerCash(playerid) < money) return Info(playerid, "Nu ai suficienti bani.");
	if(GetPlayerCash(id) < money) return Info(playerid, "Acel jucator nu are suficienti bani.");
	Info(playerid, "Cerere de barbut trimisa.");
	Info(id, "%s te-a invitat sa joci barbut cu el pe %s$. Scrie [/accept dice %d] pentru a accepta.", GetName(playerid), FormatNumber(money), playerid);
	DiceRequest[id] = playerid;
	DiceMoney[id] = money;
	return true;
}	
CMD:invite(playerid, params[]){
	if(!PlayerInfo[playerid][pMember]) return Info(playerid, "Nu esti intr-o factiune.");
	if(PlayerInfo[playerid][pRank] < 6) return Info(playerid, "Nu poti folosi aceasta comanda.");
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/invite [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(PlayerInfo[id][pFpunish]) return Info(playerid, "Acel jucator are FP.");
	if(PlayerInfo[id][pMember]) return Info(playerid, "Acel player se afla intr-o factiune.");
	Info(id, "%s te-a invitat in %s (/accept invite %d).", GetName(playerid), FacInfo[PlayerInfo[playerid][pMember]][fName], playerid);
	Info(playerid, "L-ai invitat pe %s in factiune.", GetName(id));
	FactionOffer[id] = playerid;
	FinishAchievement(id, 0);
	return true;
}
CMD:changerank(playerid, params[]){
	if(PlayerInfo[playerid][pRank] < 7) return Info(playerid, "Nu esti lider.");
	new id, level;
	if(sscanf(params, "ui", id, level)) return Info(playerid, "/changerank [name/playerid] [rank]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(id == playerid) return Info(playerid, "Nu poti folosi aceasta comanda pe tine.");
	if(level > 6 || level < 1) return Info(playerid, "Invalid rank.");
	if(PlayerInfo[id][pMember] != PlayerInfo[playerid][pMember]) return Info(playerid, "This member is not in your faction.");
	PlayerInfo[id][pRank] = level; pUpdateInt(id, "Rank", level);
	Info(id, "%s has promoted you to the rank %d.", GetName(playerid), level);
	Info(playerid, "You have promoted %s to the rank %d.", GetName(id), level);
	ResetSetGuns(id);
	return true;
}
stock IsAtBank(playerid){
	if(InBiz[playerid] != 0 && BizzInfo[InBiz[playerid]][bType] == 1)
		return true;

	if(InAtmZone[playerid] != -1 && AtmHealth[InAtmZone[playerid]] > 0)
		return true;

	return false;
}
CMD:withdraw(playerid, params[]){
	if(!IsAtBank(playerid)) return Info(playerid, "Nu te afli in banca sau la un atm functional.");
	new money;
	if(sscanf(params, "i", money)) return Info(playerid, "/withdraw [amount]");
	if(BizzInfo[InBiz[playerid]][bType] != 1 && money > 500000) return Info(playerid, "Doar la banca poti scoate mai mult de $500,000.");
	if(money < 1 || money > 999999999) return Info(playerid, "Minim $1, maxim $999, 999, 999.");
	if(money > GetPlayerBank(playerid)) return Info(playerid, "Nu ai suficienti bani.");
	GivePlayerCash(playerid, money);
	GivePlayerBank(playerid, -money);
	Info(playerid, "Ai scos $%s.", FormatNumber(money));
	return true;
}
CMD:deposit(playerid, params[])	{
	if(!IsAtBank(playerid)) return Info(playerid, "Nu te afli in banca sau la un atm functional.");
	new money;
	if(sscanf(params, "i", money)) return Info(playerid, "/deposit [amount]");
	if(BizzInfo[InBiz[playerid]][bType] != 1 && money > 5000000) return Info(playerid, "Doar la banca poti depozita mai mult de $5,000,000.");
	if(money < 1 || money > 999999999) return Info(playerid, "Minim $1, maxim $999,999,999.");
	if(money > GetPlayerCash(playerid)) return Info(playerid, "Nu ai suficienti bani.");
	GivePlayerCash(playerid, -money);
	GivePlayerBank(playerid, money);
	Info(playerid, "Ai depozitat $%s.", FormatNumber(money));
	return true;
}

CMD:transfer(playerid, params[])
{
	if(PlayerInfo[playerid][pConnectTime] < 5)
		return SendMsg(playerid, COLOR_SERVER, "Transfer >> {ffffff} Nu ai 5 ore jucate.");

	if(!IsAtBank(playerid))
		return SendMsg(playerid, COLOR_SERVER, "Transfer >> {ffffff}Nu esti la banca.");

	new
		id,
		amount
	;

	if(sscanf(params, "ud", id, amount))
		return SendMsg(playerid, COLOR_SERVER, "Transfer >> {ffffff}/transfer [playerid/name] [amount]");

	if(id == INVALID_PLAYER_ID)
		return SendMsg(playerid, COLOR_SERVER, "Transfer >> {ffffff}Acest jucator nu este conectat.");

	if(id ==playerid)
		return SendMsg(playerid, COLOR_SERVER, "Transfer >> {ffffff}Nu iti poti transfera singur bani.");

	if(amount < 1 || amount > 999_999_999)
		return SendMsg(playerid, COLOR_SERVER, "Transfer >> {ffffff}Minim $1, maxim $999,999,999.");

	if(GetPlayerBank(playerid) < amount)
		return SendMsg(playerid, COLOR_SERVER, "Transfer >> {ffffff}Nu ai aceasta suma de bani.");

	if(PlayerInfo[id][pSettings][12])
		return SendMsg(playerid, COLOR_SERVER, "Transfer >> {ffffff}Acel jucator are tranzactiile dezactivate.");

	PlayerInfo[playerid][pTaxa] = amount / 20;

	TransferOffer[playerid] = id;
	TransferMoney[playerid] = amount;

	gString[0] = (EOS);
	format(gString, sizeof gString, "Vrei sa transferi suma de %s$ lui %s(taxa: %s)?\n(Taxa se va plati din banii transferati)", FormatNumber(amount), GetName(id), FormatNumber(PlayerInfo[playerid][pTaxa]));
	SPD(playerid, DIALOG_TRANSFER, DIALOG_STYLE_MSGBOX, "Transfer", gString, "Ok", "Cancel");

	return true;
}

CMD:healme(playerid)
{
	if(!PlayerInfo[playerid][pAdmin] && !HaveSupreme(playerid))
		return SendMsg(playerid, COLOR_SERVER, AdminOnly);

	if(LastHealme[playerid] + 600 > gettime())
		return SendMsg(playerid, COLOR_SERVER, "Heal Me >> {ffffff}Trebuie sa astepti %d minute.", floatround(((LastHealme[playerid] + 600) - gettime()) / 60));

	if(HaveSupreme(playerid) && !PlayerInfo[playerid][pAdmin])
	{
		LastHealme[playerid] = gettime();
	}

	SetPlayerHP(playerid, 100.0);

	if(PlayerInfo[playerid][pAdmin])
	{
		SendAdmins(COLOR_RED, "Admin >> {ffffff}%s s-a vindecat.", 1, GetName(playerid));		
	}
	else
	{
		SendMsg(playerid, COLOR_SERVER, "Heal Me >> {ffffff}Te-ai vindecat.");
	}

	return true;
}
CMD:block(playerid, params[]){
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/block [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(PlayerInfo[playerid][pPhoneBlocked][id]) return Info(playerid, "Jucatorul este deja blocat.");
	PlayerInfo[playerid][pPhoneBlocked][id] = true;
	Info(playerid, "Jucatorul a fost blocat.");
	return true;
}
function HaveCheckpoint(playerid)
{

	if(CP[playerid] || targetfind[playerid] != -1)
	{
		if(PlayerInfo[playerid][pTutorial])
		{
			return true;
		}
		else
		{
			return SPD(playerid, DIALOG_KILLCP, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Vrei sa-ti anulezi checkpoint-ul?", "Da", "Nu");
		}
	}

	return false;
}	
CMD:unblock(playerid, params[]){
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/unblock [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(!PlayerInfo[playerid][pPhoneBlocked][id] == false) return Info(playerid, "Jucatorul nu este blocat.");
	PlayerInfo[playerid][pPhoneBlocked][id] = false;
	Info(playerid, "Jucatorul a fost deblocat.");
	return true;
}
CMD:reply(playerid, params[]){
	if(LastPlayer[playerid] < 0) return Info(playerid, "Nobody has sent you an SMS.");
	if(!IsPlayerConnected(LastPlayer[playerid]) || LastPlayer[playerid] == INVALID_PLAYER_ID || !Logat[LastPlayer[playerid]]) return Info(playerid, "Jucator invalid.");
	if(PlayerInfo[playerid][pMuteTime]) return SendMsg(playerid, COLOR_SERVER, "Mute >> {ffffff}Mai ai mute pentru %d minute.", PlayerInfo[playerid][pMuteTime]);
	new message[128];
	if(sscanf(params, "s[128]", message)) return Info(playerid, "/reply [text]");
	if(PlayerInfo[LastPlayer[playerid]][pSettings][11] == true) return Info(playerid, "Juatorul are telefonul oprit.");
	if(PlayerInfo[LastPlayer[playerid]][pPhoneBlocked][playerid]) return Info(playerid, "Acel jucator te-a blocat.");
	SendMsg(LastPlayer[playerid], 0xFFFF00AA, "SMS de la %s (%d): %s", GetName(playerid),playerid, message);
	LastPlayer[LastPlayer[playerid]] = playerid;
	SendMsg(playerid, 0xD5EAFFFF, "SMS catre %s (%d): %s", GetName(LastPlayer[playerid]), LastPlayer[playerid], message);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0); PlayerPlaySound(LastPlayer[playerid], 1139, 0.0, 0.0, 0.0);
	return true;
}
CMD:dm(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/dm [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(PlayerInfo[id][pJailTime]) return Info(playerid, "Jucatorul este deja in Jail.");
	WantedPoints[id] = 0;
	PlayerInfo[id][pJailed] = 2;
	pUpdateInt(id, "Jailed", 2);
	PlayerInfo[id][pJailTime] = 30;
	PlayerInfo[id][pGunLic] = 0;
	pUpdateInt(id, "GunLic", 0);
	defer Spawn(id, PlayerInfo[id][pSession]);
	va_SendClientMessageToAll(COLOR_SERVER, "Jail >> {ffffff}%s a fost inchis de %s, motiv: DM.", GetName(id), GetName(playerid));
	Query_Mysql("INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`actiontime`,`unixtime`) VALUES ('%d','%d','6','DM','%s','%s','%d','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],GetName(id),GetName(playerid),PlayerInfo[id][pJailTime],gettime());
	return true;
}
CMD:release(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/release [name/playerid]");
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return Info(playerid, "ID-ul este invalid.");
	if(!PlayerInfo[id][pJailed] && !PlayerInfo[id][pJailTime]) return Info(playerid, "Acel player nu se afla in jail.");
	WantedPoints[id] = 0;
	PlayerInfo[id][pJailed] = 0;
	pUpdateInt(id, "Jailed", 0);
	PlayerInfo[id][pJailTime] = 0;
	ClearCrime(playerid);
	PlayerTextDrawHide(id, Jailtime);
	defer Spawn(id, PlayerInfo[id][pSession]);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s l-a eliberat pe %s.", 1, GetName(playerid), GetName(id));
	Info(id, "%s te-a eliberat.", GetName(playerid));
	return true;
}	
CMD:clear(playerid, params[]){
	if(!IsACop(playerid) && !PlayerInfo[playerid][pAdmin]) return Info(playerid, "Nu esti Politist.");
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/clear [name/playerid]");
	if(!IsPlayerConnected(id)) return Info(playerid, "ID-ul este invalid.");
	Info(id, "%s ti-a sters Wanted-ul.", GetName(playerid));
	SendFamilyMessage(1, COLOR_SERVER, "Dispecerat >> %s i-a sters Wanted-ul lui %s.", GetName(playerid), GetName(id));			
	PlayerInfo[id][pWantedLevel] = 0;
	WantedPoints[id] = 0;
	PlayerTextDrawHide(id, WantedText);
	ClearCrime(id);
	SetPlayerWantedLevel(id, 0);
	pUpdateInt(id, "WantedLevel", 0);
	Info(playerid, "I-ai sters wanted-ul lui %s.", GetName(id));
	return true;
}
function CheckFreq(playerid, freq, password[20], session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new password2[20], ownerid;
	if(!cache_num_rows()) return Info(playerid, "Frecventa invalida.");
	cache_get_value_name(0, "password", password2);
	cache_get_value_name_int(0, "ownerid", ownerid);
	if(ownerid == PlayerInfo[playerid][pSQLID]){
		Info(playerid, "Esti acum conectat la frecventa %d.",freq);
		if(WTChannel[playerid] != 0)
		{
			if(Iter_Contains(WithFreq[WTChannel[playerid]], playerid))
			{
				Iter_Remove(WithFreq[WTChannel[playerid]], playerid);
			} 	
		}
		Iter_Add(WithFreq[freq], playerid);
		WTChannel[playerid] = freq;
		pUpdateInt(playerid, "WTChannel", freq);
	} 
	else {
		if(!strmatch(password, password2)) return Info(playerid, "Parola invalida.");
		Info(playerid, "Esti acum conectat la frecventa %d.",freq);
		if(WTChannel[playerid] != 0)
		{
			if(Iter_Contains(WithFreq[WTChannel[playerid]], playerid))
			{
				Iter_Remove(WithFreq[WTChannel[playerid]], playerid);
			}
		}
		Iter_Add(WithFreq[freq], playerid);
		WTChannel[playerid] = freq; 
		pUpdateInt(playerid, "WTChannel", freq);
	}
	return true;
}
CMD:setfreq(playerid, params[])
{
	if(!PlayerInfo[playerid][pWTalkie])
		return Info(playerid, "You don't have a walkie talkie.");

	new
		password[20],
		freq
	;

	if(sscanf(params, "dS(q)[20]",freq,password))
		return Info(playerid, "/setfreq [frequency] (0 to switch off).");

	if(freq < 0 || freq > 9999)
		return Info(playerid, "Invalid frequency specified. Valid frequencies: 1 - 9999.");

	if(freq == 0)
	{
		if(WTChannel[playerid] != 0)
		{
			if(Iter_Contains(WithFreq[WTChannel[playerid]], playerid))
			{
				Iter_Remove(WithFreq[WTChannel[playerid]], playerid);
			}
		}

		WTChannel[playerid] = 0; 
		pUpdateInt(playerid, "WTChannel", 0);
		Info(playerid, "Ti-ai deconectat Walkie Talkie-ul.");

		return true; 
	}

	if(freq < 100)
		return Info(playerid, "Frecventa invalida.");

	if(freq >= 1000)
	{
		if(TutorialStep[playerid] == 3)
		{
			if(freq != 1234)
				return SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Tasteaza comanda /setfreq 1234");
		}

		if(WTChannel[playerid] != 0)
		{
			if(Iter_Contains(WithFreq[WTChannel[playerid]], playerid))
			{
				Iter_Remove(WithFreq[WTChannel[playerid]], playerid);
			}
		}

		Iter_Add(WithFreq[freq], playerid);

		Info(playerid, "Esti acum conectat la frecventa %d.",freq);

		WTChannel[playerid] = freq; 
		pUpdateInt(playerid, "WTChannel", freq);

		if(TutorialStep[playerid] == 3)
		{
			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Acum, ca sa vorbesti pe frecventa cu comanda /wt.");
			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Incearca sa fii rescpectuos si sa pastrezi un limbaj decent.");
			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}In caz contrar, vei fi sanctionat.");

			GivePlayerCrate(playerid, 0);

			SetPlayerPosEx(playerid, LocationPos[2][0], LocationPos[2][1], LocationPos[2][2]);

			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Aici este locatia crate-urilor.");
			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Ti-am oferit un basic crate de inceput.");
			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Apasa tasta Y pentru a il deschide.");

			TutorialStep[playerid] ++;

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, playerid + 1);
		}
	} 
	else
	{
		gString[0] = (EOS);
		mysql_format(SQL, gString, 64, "SELECT * FROM `frequencies` WHERE `freqid`='%d'", freq);
		mysql_tquery(SQL, gString, "CheckFreq", "idsd", playerid, freq, password, PlayerInfo[playerid][pSession]);
	}
	return true;
}
function ChangeFreqPass(playerid, freq, password[20], session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new xx;
	for(new i, j = cache_num_rows(); i != j; ++i){
		cache_get_value_name_int(i, "freqid", freq);
		if(WTChannel[playerid] == freq){
			xx = 1;
			break;
		}
	}
	if(!xx) return Info(playerid, "Nu deti frecventa.");
	Query_Mysql("UPDATE `frequencies` SET `password`='%s' WHERE `freqid`='%d'", password, WTChannel[playerid]);
	Info(playerid, "Noua parola: %s", password);
	foreach(new i : WithFreq[freq])
	{
		WTChannel[i] = 0;
	}
	Iter_Clear(WithFreq[freq]);
	return true;
}
CMD:freq(playerid, params[]){
	if(WTChannel[playerid] == 0) return Info(playerid, "Nu esti intr-o frecventa.");
	new action[10],password[20],freq; 
	if(sscanf(params, "s[10]S(q)[20]", action, password)){
		Info(playerid, "/freq [action] [value]");
		Info(playerid, "Actions: password, members");
		return true;
	}
	if(strcmp(action,"members",true) == 0){
		Info(playerid, "---- Broadcasting on frequency %d ----", WTChannel[playerid]);
		foreach(new i : WithFreq[freq])
		{
			Info(playerid, "(%d) %s", i, GetName(i));
		}
	} 
	else if(strcmp(action,"password",true) == 0){
		gString[0] = (EOS);
		mysql_format(SQL, gString, 128, "SELECT * FROM `frequencies` WHERE `ownerid`='%d'", PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gString, "ChangeFreqPass", "idsd", playerid, freq, password, PlayerInfo[playerid][pSession]);
	} 
	return true;
}
CMD:wt(playerid, params[]){
	if(!PlayerInfo[playerid][pWTalkie]) return Info(playerid, "Nu ai un Walkie Talkie.");
	if(WTChannel[playerid] == 0) return Info(playerid, "Nu esti intr-o frecventa.");
	if(PlayerInfo[playerid][pMuteTime]) return SendMsg(playerid, COLOR_SERVER, "Mute >> {ffffff}Mai ai mute pentru %d minute.", PlayerInfo[playerid][pMuteTime]);
	if(LastWT[playerid] + 3 > gettime()) return SendMsg(playerid, COLOR_SERVER, "WT >> {ffffff}Asteapta %d secunde.", (LastWT[playerid] + 3) - gettime());
	new msg[128];
	if(sscanf(params, "s[128]", msg)) return Info(playerid, "/wt [message]");
	foreach(new i : WithFreq[WTChannel[playerid]])
	{
		SendMsg(i, 0x00b503ff, "[freq %d] %s: %s", WTChannel[playerid], GetGameName(playerid), msg); 
	}
	LastWT[playerid] = gettime();
	return true;
}
CMD:arrest(playerid, params[])
{
	if(!IsACop(playerid)) return Info(playerid, "Nu esti Politist.");
	if(OnDuty[playerid] != true) return Info(playerid, "Nu esti la datorie.");
	new id, time;
	if(sscanf(params, "u", id)) return Info(playerid, "/arrest [name/playerid]");
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return Info(playerid, "ID-ul este invalid.");
	if(PlayerInfo[id][pWantedLevel] < 1) return Info(playerid, "This player don't have wanted.");
	if(GetDistanceBetweenPlayers(playerid, id) > 5) return Info(playerid, "This player is not near you.");
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(playerid) == GetPlayerVehicleID(id) && (IsPlayerInRangeOfPoint(playerid, 10.0, 1525.2217, -1677.8744, 5.8906) || IsPlayerInRangeOfPoint(playerid, 6.0, 268.9264, 81.9687, 1001.0391)))
	{
		PlayerInfo[playerid][pRaport] ++;
		pUpdateInt(playerid, "Raport", PlayerInfo[playerid][pRaport]);
		time = PlayerInfo[id][pWantedLevel] * 4;
		ResetPlayerWeapons(id);
		PlayerInfo[id][pJailTime] = time;
		SetPlayerWantedLevel(id, 0);
		PlayerTextDrawHide(id, WantedText);
		SetPlayerInterior(id, 6);
		SetPlayerPosEx(id, 263.8704, 77.0021, 1001.0391);
		SendMsg(id, COLOR_SERVER, ">> {fffff}%s te-a arestat pentru %d minute.", GetName(playerid), time);
		if(CP[id] > 0) DisablePlayerCheckpoint(id), CP[id] = 0;
		pUpdateInt(id, "Jailed", 1);
		pUpdateInt(id, "WantedLevel", 0);
		if(PlayerCuffed2[id]) PlayerCuffed2[id] = false, SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE), RemovePlayerAttachedObject(id, 1);
		SetPlayerVirtualWorld(id, 1);
		va_SendClientMessageToAll(COLOR_SERVER, "Jail >> {ffffff}%s l-a arestat pe %s pentru %d minute.", GetName(playerid), GetName(id), time);
		PlayerInfo[id][pJailed] = 1;
		PlayerInfo[id][pWantedLevel] = 0;
		WantedPoints[id] = 0;
		FreezePlayer(id, true);
		defer UnfreezeTimer(id, PlayerInfo[id][pSession]);
	}
	return true;
}
CMD:slapveh(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new Float: x, Float: y, Float: z, id;
	if(sscanf(params, "d", id)) return Info(playerid, "/slapveh [car id]");
	GetVehiclePos(id, x, y, z);
	SetVehiclePos(id, x, y, z + 5);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a folosit /slapveh pe vehiculul %d.", 1, GetName(playerid), id);
	return true;
}
CMD:slap(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pHelper]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, Float:slx, Float:sly, Float:slz;
	if(sscanf(params, "u", id)) return Info(playerid, "/slap [name/playerid]");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID || !Logat[id]) return Info(playerid, "ID-ul este invalid.");
	if(PlayerInfo[playerid][pAdmin] == 0 && PlayerInfo[id][pAdmin] >= 1) return SendMsg(playerid, COLOR_SERVER, "Eroare >> {ffffff}Nu poti folosi aceasta comanda pe acel jucator.");
	GetPlayerPos(id, slx, sly, slz);
	SetPlayerPosEx(id, slx, sly, slz + 5);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a folosit /slap pe %s.", 1, GetName(playerid), GetName(id));
	return true;
}		
CMD:rmute(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new time, id;
	if(sscanf(params, "ui", id, time)) return Info(playerid, "/rmute [name/playerid] [minutes]");
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return Info(playerid, "ID-ul este invalid.");
	PlayerInfo[id][pRmute] = time;
	pUpdateInt(id, "Rmute", PlayerInfo[id][pRmute]);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s has muted %s on /report for %d minutes.", 1, GetName(playerid), GetName(id), time);
	Info(id, "Ai primit mute pe /report timp de %d minute.", time);
	return true;
}	
CMD:nmute(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pHelper]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new time, id;
	if(sscanf(params, "ui", id, time)) return Info(playerid, "/nmute [name/playerid] [minutes]");
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return Info(playerid, "ID-ul este invalid.");
	PlayerInfo[id][pNmute] = time;
	pUpdateInt(id, "Nmute", PlayerInfo[id][pNmute]);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s has muted %s on /n for %d minutes.", 1, GetName(playerid), GetName(id), time);
	SendHelpers(COLOR_YELLOW, "Helper >> {ffffff}%s has muted %s on /n for %d minutes.", 1, GetName(playerid), GetName(id), time);
	Info(id, "Ai primit mute pe /n timp de %d minute.", time);
	return true;
}	
CMD:eject(playerid, params[]){
	if(!IsPlayerInAnyVehicle(playerid)) return Info(playerid, "You need to be in a vehicle to use this command.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Info(playerid, "Trebuie sa fi soferul unui vehicul.");
	new id, vid = GetPlayerVehicleID(playerid);
	if(sscanf(params, "u", id)) return Info(playerid, "/eject [name/playerid]");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(id == playerid) return Info(playerid, "You can't eject yourself.");
	if(!IsPlayerInVehicle(id, vid) && (GetPlayerSurfingVehicleID(id) != vid)) return Info(playerid, "That player is not in your car.");
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(id, slx, sly, slz); SetPlayerPosEx(id, slx, sly, slz+5.0);
	Info(playerid, "L-ai dat afara pe %s din vehicul.", GetName(id));
	Info(id, "Ai fost dat afara din vehicul de %s.", GetName(playerid)); RemovePlayerFromVehicle(id);
	return true;
}
CMD:freeze(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/freeze [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	FreezePlayer(id, true);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s l-a inghetat pe %s.", 1, GetName(playerid), GetName(id));
	return true;
}
CMD:unfreeze(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/unfreeze [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	FreezePlayer(id, false);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s l-a dezghetat pe %s.", 1, GetName(playerid), GetName(id));
	return true;
}
CMD:getveh(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new plo,virtuall = GetPlayerVirtualWorld(playerid),interiorr = GetPlayerInterior(playerid),Float:plocx,Float:plocy,Float:plocz; 
	if(sscanf(params, "d",plo)) return Info(playerid, "/getveh [car id]");
	if(!IsValidVehicle(plo)) return Info(playerid, "Vehicul invalid.");
	GetPlayerPos(playerid, plocx, plocy, plocz); 
	SetVehiclePos(plo, plocx, plocy + 4, plocz); 
	GetVehiclePos(plo, old_veh_pos[plo][0], old_veh_pos[plo][1], old_veh_pos[plo][2]);
	LinkVehicleToInterior(plo, interiorr); 
	SetVehicleVirtualWorld(plo, virtuall); 
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a teleportat vehiculul %d la el.", 1, GetName(playerid), plo);
	return true;
}
CMD:fill(playerid){
	new vid = GetPlayerVehicleID(playerid);
	if(VehicleEngine[vid]) return Info(playerid, "Opreste motorul vehiculului pentru a-l putea alimenta.");
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
		if(NearbyGasStation(playerid)){
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			new VID = GetPlayerVehicleID(playerid), FillUp = (100 - Gas[VID]) * BizzInfo[NearbyGasStation(playerid)][bEntranceCost];
			if(GetPlayerCash(playerid) <= FillUp) return Info(playerid, "Nu ai $%s.", FormatNumber(FillUp));
			Info(playerid, "Ai platit $%s pentru a face plinul la vehicul.", FormatNumber(FillUp));
			Gas[VID] = 100;
			if(OwnableVehicle(VID)){
				foreach(new i : Player){
					for(new v; v < MAX_PERSONAL_VEHICLES; v++){
						if(PlayerInfo[i][pVehID][v] == VID && GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
							PlayerInfo[i][pVehGas][v] = Gas[VID];
							cUpdate(i, v, pVehGas);
							break;
						}
					}
				}
			}
			GivePlayerCash(playerid, -FillUp);
			BizzInfo[NearbyGasStation(playerid)][bTill] += FillUp;
			Query_Mysql("UPDATE `bizz` SET `Till` = '%d' WHERE `ID` = '%d'", BizzInfo[NearbyGasStation(playerid)][bTill], NearbyGasStation(playerid));
		} 
		else {
			if(!PlayerInfo[playerid][pGasCan]) return Info(playerid, "Nu ai o canistra.");
			if(PlayerInfo[playerid][pFuel] < 1) return Info(playerid, "Canistra ta este goala.");
			if(Gas[vid] > 80) return Info(playerid, "Ai suficient combustibil.");
			Info(playerid, "Ti-ai alimentat vehiculul cu +20 combustibil.");
			Gas[vid] += 20; 
			PlayerInfo[playerid][pFuel] = 0; 
			pUpdateInt(playerid, "Fuel", 0);
		}
	}
	return true;
}
CMD:fillgascan(playerid){
	if(!PlayerInfo[playerid][pGasCan]) return Info(playerid, "Nu ai o canistra.");
	if(PlayerInfo[playerid][pFuel] >= 20) return Info(playerid, "Deja ai canistra plina.");
	if(!NearbyGasStation(playerid)) return Info(playerid, "Nu esti la o Benzinarie.");
	new price = 20 * BizzInfo[NearbyGasStation(playerid)][bEntranceCost];
	if(GetPlayerCash(playerid) < price) return Info(playerid, "Nu ai $%s", FormatNumber(price));
	Info(playerid, "Ai platit $%s pentru a umple canistra cu benzina.", FormatNumber(price));
	GivePlayerCash(playerid, -price);
	PlayerInfo[playerid][pFuel] = 20;
	pUpdateInt(playerid, "Fuel", 20);
	BizzInfo[NearbyGasStation(playerid)][bTill] += price; 
	Query_Mysql("UPDATE `bizz` SET `Till` = '%d' WHERE `ID` = '%d'", BizzInfo[NearbyGasStation(playerid)][bTill], NearbyGasStation(playerid));
	return true;
}	
CMD:sellmaterials(playerid, params[]){
	if(PlayerInfo[playerid][pJob] != 5) return Info(playerid, "You are not an arms dealer.");
	new id,mats,price;
	if(sscanf(params, "uii",id,mats,price)) return Info(playerid, "/sellmaterials [name/playerid] [materials] [price]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "Acel player nu este conectat.");
	if(playerid == id) return Info(playerid, "You can not sell materials to yourself.");
	if(mats < 1 || mats > 500000) return Info(playerid, "Mats ammount can't be lower than 1, or above 500, 000.");
	if(mats > PlayerInfo[playerid][pMats]) return Info(playerid, "You don't have so many materials to sell.");
	if(price < 1 || price > 5000000) return Info(playerid, "Price can't be lower than $1, or above $5, 000, 000.");
	if(GetDistanceBetweenPlayers(playerid, id) > 10) return Info(playerid, "Trebuie sa fi langa acel jucator.");
	Info(playerid, "You offered %s, %d materials for $%s.",GetName(id),mats,FormatNumber(price));
	Info(id, "%s offered you %d materials for $%s, type /accept materials %d to accept the offer.",GetName(playerid),mats,FormatNumber(price),playerid);
	MatsOffer[id] = playerid;
	MatsPrice[id] = price;
	MatsAmmo[id] = mats;
	return true;
}
CMD:sellgun(playerid, params[]){
	if(PlayerInfo[playerid][pJob] != 5) return Info(playerid, "You are not an arms dealer.");
	if(Iter_Contains(InPaint, playerid)) return SendMsg(playerid, COLOR_SERVER, "Sellgun >> {ffffff}Nu poti folosi aceasta comanda in Paint.");
	new gun[16], weapon, ammo, price, price2, id;
	if(sscanf(params, "us[16]d", id, gun, price2)){
		Info(playerid, "/sellgun [name/playerid] [gun name] [price]");
		Info(playerid, "Arme: SDPistol(100) Deagle(120)");
		Info(playerid, "Arme: MP5(200) Combat(200) Tec-9(200)");
		Info(playerid, "Arme: AK47(150) M4(150) Rifle(175)");
		return true;
	}
	if(id == INVALID_PLAYER_ID) return Info(playerid, "Acel player nu este conectat.");
	if(playerid == id) return Info(playerid, "Nu iti poti vinde singur arme.");
	if(PlayerInfo[id][pJailed]) return Info(playerid, "Acel jucator este in inchisoare.");
	if(!PlayerInfo[id][pGunLic]) return Info(playerid, "Acel jucator nu are licenta de arme.");
	if(price2 < 1 || price2 > 100000) return Info(playerid, "Price must be between $1 and $100, 000.");
	if(GetDistanceBetweenPlayers(playerid, id) > 10) return Info(playerid, "Trebuie sa fi langa acel jucator.");
	if(strmatch(gun,"sdpistol")) weapon = 23, price = 100, ammo = 100;
	else if(strmatch(gun,"deagle")) weapon = 24, price = 120, ammo = 100;
	else if(strmatch(gun,"mp5")) weapon = 29, price = 200, ammo = 150;
	else if(strmatch(gun,"combat")) weapon = 27, price = 200, ammo = 50;
	else if(strmatch(gun,"ak47")) weapon = 30, price = 150, ammo = 250;
	else if(strmatch(gun,"m4")) weapon = 31, price = 150, ammo = 250;
	else if(strmatch(gun,"rifle")) weapon = 33, price = 175, ammo = 25;
	else if(strmatch(gun,"tec-9")) weapon = 32, price = 200, ammo = 400;
	else return Info(playerid, "Invalid weapon name.");
	if(PlayerInfo[playerid][pMats] < price) return Info(playerid, "Ai nevoie de %d materiale.", price);
	if(GetPlayerCash(id) < price2) return Info(playerid, "This player don't have money needed.");
	SellgunOffer[id] = playerid;
	SellgunPrice[id] = price2;
	SellgunMats[id] = price;
	SellgunAmmo[id] = ammo;
	SellgunID[id] = weapon;
	Info(playerid, "I-ai oferit lui %s un %s pentru $%s.", GetName(id), GunNames[weapon], FormatNumber(price2));
	Info(id, "%s ti-a oferit un %s pentru $%s, /accept gun %d pentru a accepta.", GetName(playerid), GunNames[weapon], FormatNumber(price2), playerid);
	return true;
}
CMD:creategun(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Nu poti face asta dintr-un vehicul.");
	if(PlayerInfo[playerid][pJob] != 5) return Info(playerid, "Nu esti dealer de arme.");
	if(PlayerInfo[playerid][pSkills][5] < 4) return Info(playerid, "Nu ai skill 4.");
	if(Iter_Contains(InPaint, playerid)) return Info(playerid, "Nu poti folosi aceasta comanda in Paint.");
	if(PlayerInfo[playerid][pJailed]) return Info(playerid, "Esti in inchisoare.");
	if(!PlayerInfo[playerid][pGunLic]) return Info(playerid, "Nu ai licenta de arme.");
	new
		gun[16],
		weapon,
		ammo,
		mats
	;
	if(sscanf(params, "s[16]", gun))
	{
		Info(playerid, "/creategun [gun name]");
		Info(playerid, "Arme: SDPistol(100) Deagle(120)");
		Info(playerid, "Arme: MP5(200) Combat(200) Tec-9(200)");
		Info(playerid, "Arme: AK47(150) M4(150) Rifle(175)");
		return true;
	}
	if(strmatch(gun,"sdpistol")) weapon = 23, mats = 100, ammo = 100;
	else if(strmatch(gun,"deagle")) weapon = 24, mats = 120, ammo = 100;
	else if(strmatch(gun,"mp5")) weapon = 29, mats = 200, ammo = 150;
	else if(strmatch(gun,"combat")) weapon = 27, mats = 200, ammo = 50;
	else if(strmatch(gun,"ak47")) weapon = 30, mats = 150, ammo = 250;
	else if(strmatch(gun,"m4")) weapon = 31, mats = 150, ammo = 250;
	else if(strmatch(gun,"rifle")) weapon = 33, mats = 175, ammo = 25;
	else if(strmatch(gun,"tec-9")) weapon = 32, mats = 200, ammo = 400;
	else return Info(playerid, "Invalid weapon name.");
	if(PlayerInfo[playerid][pMats] < mats) return Info(playerid, "Ai nevoie de %d materiale.", mats);
	GivePlayerWeapon(playerid, weapon, ammo);
	PlayerInfo[playerid][pMats] -= mats;
	pUpdateInt(playerid, "Materials", PlayerInfo[playerid][pMats]);
	Info(playerid, "Ti-ai asamblat un %s folosind %d materiale.", weapName(weapon), mats);
	return true;
}
CMD:disarm(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/disarm [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	ResetPlayerWeapons(id);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s l-a dezarmat pe %s.", 1, GetName(playerid), GetName(id));
	return true;
}	
CMD:anno(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly); 
	new text[128];
	if(sscanf(params, "s[128]",text)) return Info(playerid, "/anno [text]");
	va_SendClientMessageToAll(0xFF8080FF, "%s >> %s",GetName(playerid),text);
	return true;
}	
CMD:pay(playerid, params[]){
	if(PlayerInfo[playerid][pConnectTime] < 5) return Info(playerid, "Nu ai 5 ore jucate.");
	new id, money;
	if(sscanf(params, "ui",id,money)) return Info(playerid, "/pay [name/playerid] [money]");
	if(id == INVALID_PLAYER_ID || id == playerid) return Info(playerid, "Jucatorul nu este conectat.");
	if(money < 1 || money > 250000) return Info(playerid, "Suma transferata poate fi intre $1 si $250, 000.");
	if(GetPlayerCash(playerid) < money) return Info(playerid, "Nu ai $%s.", FormatNumber(money));
	if(GetDistanceBetweenPlayers(playerid, id) > 5.0) return Info(playerid, "Trebuie sa fi langa acel jucator.");
	if(PlayerInfo[id][pSettings][12]) return Info(playerid, "Acel jucator are tranzactiile dezactivate.");
	GivePlayerCash(playerid, -money);
	GivePlayerCash(id, money); 
	Info(id, "%s ti-a dat suma de $%s.",GetName(playerid),FormatNumber(money));
	Info(playerid, "I-ai dat lui %s suma de $%s.", GetName(id), FormatNumber(money));
	return true;
}
CMD:unrentroom(playerid){
	if(PlayerInfo[playerid][pHouse] != 0 || PlayerInfo[playerid][pRented] == -1) return Info(playerid, "Nu ai inchiriat nicio casa.");
	PlayerInfo[playerid][pRented] = -1; 
	pUpdateInt(playerid, "Rented", -1); 
	PlayerInfo[playerid][pSpawnChange] = 0; 
	pUpdateInt(playerid, "SpawnChange", PlayerInfo[playerid][pSpawnChange]);
	Info(playerid, "Ai renuntat la chirie.");
	return true;
}
CMD:up(playerid){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SetPlayerPosEx(playerid, slx, sly, slz+5.0);
	Info(playerid, "Pozitia ta a fost schimbata.");
	return true;
}
CMD:down(playerid){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SetPlayerPosEx(playerid, slx, sly, slz-3.0);
	Info(playerid, "Pozitia ta a fost schimbata.");
	return true;
}
CMD:ff(playerid){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SetPlayerPosEx(playerid, slx+6.0, sly+6.0, slz);
	Info(playerid, "Pozitia ta a fost schimbata.");
	return true;
}
CMD:bb(playerid){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SetPlayerPosEx(playerid, slx-6.0, sly-6.0, slz);
	Info(playerid, "Pozitia ta a fost schimbata.");
	return true;
}
/*CMD:getdrugs(playerid, params[])
{
	new
		dpoints = PlayerInfo[playerid][pDrugs],
		points,
		fid = PlayerInfo[playerid][pMember]
	;
	if(sscanf(params, "i", points)) return Info(playerid, "/getdrugs [amount]");
	if(points < 1 || points > 500) return Info(playerid, "Minim 1 drug, maxim 500 drugs.");
	if(dpoints + points > 500) return Info(playerid, "You can't have that amount of drugs.");
	if(PlayerInfo[playerid][pMember] < 1) return Info(playerid, "Poti folosi aceasta comanda doar in interiorul cladirii Jobului.");
	if(InHQ[playerid] != PlayerInfo[playerid][pMember]) return Info(playerid, "Nu esti in interiorul hq-ului tau.");
	new money = points * 5000;
	if(GetPlayerCash(playerid) < money) return Info(playerid, "Nu ai suficienti bani.");
	if(FacInfo[fid][fDrugs] < points) return Info(playerid, "Not enough drugs in faction safe.");
	FacInfo[fid][fDrugs] -= points;
	PlayerInfo[playerid][pDrugs] += points;
	pUpdateInt(playerid, "Drugs", PlayerInfo[playerid][pDrugs]);
	GivePlayerCash(playerid, -money);
	Info(playerid, "Ai cumparat %d gramde de droguri pentru $%s.", points, FormatNumber(money));
	Query_Mysql("UPDATE factions SET `Drugs`='%d' WHERE `ID`='%d'", FacInfo[fid][fDrugs], fid);
	return true;
}*/
/*CMD:selldrugs(playerid, params[]){
	if(PlayerInfo[playerid][pJob] != 3) return Info(playerid, "You are not a drugs dealer.");
	new id, drugs, money;
	if(sscanf(params, "uii", id, drugs, money)) return Info(playerid, "/selldrugs [name/playerid] [drugs] [price]");
	if(id == INVALID_PLAYER_ID || !Logat[id] || id == playerid) return Info(playerid, "Acel jucator nu este conectat.");
	if(drugs < 1 || drugs > 50) return Info(playerid, "Droguri invalide(1-50).");
	if(money < 1 || money > 500000) return Info(playerid, "Pret invalid($1-500).");
	if(PlayerInfo[playerid][pDrugs] < drugs) return Info(playerid, "You dont have that ammount of drugs with you.");
	if(GetDistanceBetweenPlayers(playerid, id) > 5.0) return Info(playerid, "This player is not near you.");
	Info(playerid, "I-ai oferit lui %s %d droguri pentru $%s.", GetName(id), drugs, FormatNumber(money));
	Info(id, "%s ti-a oferit %d droguri pentru $%s, foloseste /accept drugs %d.", GetName(playerid), drugs, FormatNumber(money),playerid);
 	DrugOffer[id] = playerid;
	DrugPrice[id] = money;
	DrugGram[id] = drugs;
	return true;
}*/
new
	DrugNames[4][14] =
	{
		"Iarba",
		"Metamfetamina",
		"Cocaina",
		"Ecstasy"
	}
;
CMD:mydrugs(playerid)
{
	new
		dString[128]
	;
	for(new i = 0; i < 4; i++)
	{
		format(dString, sizeof(dString), "%s\n%s - %d", dString, DrugNames[i], PlayerInfo[playerid][pDrugs][i]);
	}
	SPD(playerid, DIALOG_MYDRUGS, DIALOG_STYLE_LIST, "Drogurile Tale", dString, "Alege", "Anuleaza");
	return true;
}
CMD:gotohouse(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new hid;
	if(sscanf(params, "d",hid)) return Info(playerid, "/gotohouse [house id]");
	if(hid < 1 || hid > CaseJ) return Info(playerid, "Invalid house id.");
	SendAdmins(COLOR_RED,"Admin >> {ffffff}%s s-a teleportat in casa %d.", 1, GetName(playerid),hid);
	SetPlayerInterior(playerid,HouseInfo[hid][hInterior]);
	SetPlayerPosEx(playerid, HouseInfo[hid][hExitX], HouseInfo[hid][hExitY], HouseInfo[hid][hExitZ]);
	InHouse[playerid] = hid;
	SetPlayerVirtualWorld(playerid,HouseInfo[hid][hID]);
	return true;
}
CMD:gotobiz(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new bid;
	if(sscanf(params, "d",bid)) return Info(playerid, "/gotobiz [biz id]");
	if(bid < 1 || bid > Bizuri) return Info(playerid, "Invalid biz id.");
	if(BExX(bid) != 0){
		SetPlayerPosEx(playerid, BExX(bid), BExY(bid), BExZ(bid));
		SetPlayerInterior(playerid, BInt(bid));
		SetPlayerVirtualWorld(playerid, bid);
	}
	else {
		SetPlayerPosEx(playerid, BEnX(bid), BEnY(bid), BEnZ(bid));
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
	}
	InBiz[playerid] = bid;
	SendAdmins(COLOR_RED,"Admin >> {ffffff}%s s-a teleportat in afacerea %d.", 1, GetName(playerid),bid);
	return true;
}
CMD:buylevel(playerid){
	if(PlayerInfo[playerid][pLevel] * 2 > PlayerInfo[playerid][pConnectTime]) return Info(playerid, "Ai nevoie de %d ore jucate.", PlayerInfo[playerid][pLevel] * 2);
	new rp = PlayerInfo[playerid][pLevel] * 3;
	if(PlayerInfo[playerid][pRespect] < rp) return Info(playerid, "Nu ai suficiente puncte de respect.");
	PlayerInfo[playerid][pLevel] ++; 
	pUpdateInt(playerid, "Level", PlayerInfo[playerid][pLevel]);
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	PlayerInfo[playerid][pRespect] -= rp; 
	pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pRespect]);
	PlayerInfo[playerid][pOGPoints] += 10;
	pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
	Info(playerid, "Felicitari, acum ai nivel %d si ai primit 10 OGPoints!", PlayerInfo[playerid][pLevel]);
	UpdateLevelBar(playerid);
	return true;
}
CMD:aaa2(playerid){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	SetPlayerVirtualWorld(playerid, 1337);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosEx(playerid, 1477.1122, 1713.9915, 10.8125); 
	Info(playerid, "Ai fost teleportat pe aeroportul Las Venturas, virtual: 1337.");
	return true;
}
CMD:e(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pHelper]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new result[128];
	if(sscanf(params, "s[128]", result)) return Info(playerid, "/e [message]");
	if(PlayerInfo[playerid][pAdmin]){
		SendAdmins(0xc46500ff, "(%d) Admin %s: %s", 1, PlayerInfo[playerid][pAdmin], GetName(playerid), result);
		SendHelpers(0xc46500ff, "(%d) Admin %s: %s", 1, PlayerInfo[playerid][pAdmin], GetName(playerid), result);
	}
	else if(PlayerInfo[playerid][pHelper]){
		SendAdmins(0xc46500ff, "(%d) Helper %s: %s", 1, PlayerInfo[playerid][pHelper], GetName(playerid), result);
		SendHelpers(0xc46500ff, "(%d) Helper %s: %s", 1, PlayerInfo[playerid][pHelper], GetName(playerid), result);
	}
	return true;
}
CMD:a(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new result[128];
	if(sscanf(params, "s[128]",result)) return Info(playerid, "/a [message]");
	SendAdmins(0xebcc34ff, "(%d) %s: %s", 1, PlayerInfo[playerid][pAdmin], GetName(playerid), result);
	return true;
}
CMD:cw(playerid, params[]){
	if(PlayerInfo[playerid][pMuteTime]) return SendMsg(playerid, COLOR_SERVER, "Mute >> {ffffff}Mai ai mute pentru %d minute.", PlayerInfo[playerid][pMuteTime]);
	if(!IsPlayerInAnyVehicle(playerid)) return Info(playerid, "You need to be in vehicle.");
	new message[128], vid = GetPlayerVehicleID(playerid);
	gString[0] = (EOS);
	if(sscanf(params, "s[128]", message)) return Info(playerid, "/cw [message]");
	format(gString, 128, "CW >> %s: %s", GetName(playerid), message);
	for(new m = 2; m < 4; m ++)
	{
		foreach(new i : WithState[m])
		{
			if(IsPlayerInVehicle(i, vid))
			{
				SendMsg(i, COLOR_SERVER, gString);
			}
		}
	}
	return true;
}
CMD:live(playerid, params[]){
	new hour, minute, second, id; gettime(hour, minute, second);
	if(PlayerInfo[playerid][pMember] != 4) return Info(playerid, "You are not a news reporter.");
	if(OnDuty[playerid] != true) return Info(playerid, "Nu esti la datorie.");
	if(hour >= 01 && hour < 08) return Info(playerid, "Nu poti folosi aceasta comanda intre orele 01 - 09."); if(sscanf(params, "u", id)) return Info(playerid, "/live [name/playerid]");
	if(!IsPlayerConnected(id)) return Info(playerid, "Jucatorul nu este conectat.");
	if(!IsAReportersCar(GetPlayerVehicleID(playerid))) return Info(playerid, "You are not in a news van/news chopper.");
	if(!IsAReportersCar(GetPlayerVehicleID(id))) return Info(playerid, "That player is not in a news van/news chopper.");	
	if(id == playerid) return Info(playerid, "You can't invite yourself to a live interview.");
	if(TalkingLive[id]) return Info(playerid, "This player is already in a live interview.");
	if(GetDistanceBetweenPlayers(playerid, id) > 5.0) return Info(playerid, "This player is not near you.");
	Info(playerid, "You invited %s to take a live interview.", GetName(id));
	Info(id, "%s has invited you to take a live interview. (to accept the invitation, type '/accept live %d').", GetName(playerid), playerid);
	LiveOffer[id] = playerid;
	return true;
}
CMD:endlive(playerid, params[]){
	if(PlayerInfo[playerid][pMember] != 4) return Info(playerid, "You are not a news reporter.");
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/endlive [name/playerid]");
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id) || !Logat[id]) return Info(playerid, "ID Invalid");
	if(TalkingLive[id] != true) return Info(playerid, "This player don't have a live.");
	Info(playerid, "You have stopped %s live interview!", GetName(id));
	Info(id, "%s has stopped the live interview!", GetName(playerid));
	FreezePlayer(playerid, false); FreezePlayer(id, false); TalkingLive[id] = false; TalkingLive[playerid] = false;
	return true;
}
CMD:ticket(playerid, params[]){
	if(gettime() < GetPVarInt(playerid, "DeelayTicket")) return Info(playerid, "Trebuie sa astepti inca %d secunde.", GetPVarInt(playerid, "DeelayTicket") - gettime());
	if(!IsACop(playerid)) return Info(playerid, "Nu esti Politist.");
	if(OnDuty[playerid] != true) return Info(playerid, "Nu esti la datorie.");
	new id, money;
	if(sscanf(params, "ui", id, money)) return Info(playerid, "/ticket [name/playerid] [money]");
	if(!IsPlayerConnected(id)) return Info(playerid, "ID-ul este invalid.");
	if(id == playerid) return Info(playerid, "Nu poti folosi aceasta comanda pe tine.");
	if(money < 1 || money > 1000000) return Info(playerid, "Ticket money can't be below $1 or higher then $1, 000, 000.");
	if(GetDistanceBetweenPlayers(playerid, id) > 8.0) return Info(playerid, "This player is not near you.");
	if(GetPlayerCash(id) < money) return Info(playerid, "Acel acel jucator nu are $%s.", FormatNumber(money));
	Info(playerid, "I-ai dat lui %s o amenda de $%s.", GetName(id), FormatNumber(money));
	Info(id, "%s te-a amendat cu $%s - /accept ticket %d.", GetName(playerid), FormatNumber(money), playerid);
	SendFamilyMessage(1, GetFactionColor(1), "Dispecerat >> %s i-a acordat o amenda in valore de $%s lui %s.", GetName(playerid), FormatNumber(money), GetName(id));
	TicketOffer[id] = playerid;
	TicketMoney[id] = money;
	SetPVarInt(playerid, "DeelayTicket", gettime() + 60);
	return true;
}
CMD:help(playerid) return SPD(playerid, DIALOG_HELP,DIALOG_STYLE_LIST, "Comenzi", "General\nChat\nFactiuni\nCase\nAfaceri\nVehicule\nBanca\nHelperi\nPremium\nVIP\nLideri\nAdmini", "Alege","Anuleaza");
CMD:stopanim(playerid){
	if(GetPlayerAnimationIndex(playerid) == 1195 || GetPlayerAnimationIndex(playerid) == 1197 || GetPlayerAnimationIndex(playerid) == 1133 ||
		GetPlayerAnimationIndex(playerid) == 1130) return Info(playerid, "Nu poti face asta in timp ce cazi.");
	if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Nu poti face asta intr-un vehicul.");
	if(UsingDrugs[playerid] != -1) return Info(playerid, "Nu poti folosi aceasta comanda deoarece te droghezi.");
	ClearAnims(playerid);
	if(PlayerHandsup[playerid] != false)
	{
		PlayerHandsup[playerid] = false;
	}
	return true;
}
alias:stopanim("stop");
CMD:ta(playerid){ 
	if(!IsACop(playerid)) return Info(playerid, "Nu esti politist.");
	if(!OnDuty[playerid]) return Info(playerid, "Nu esti la datorie.");
	if(tazer[playerid]) tazer[playerid] = false, GivePlayerWeapon(playerid, 24, 999), SendMsg(playerid, COLOR_SERVER, "Ai renuntat la tazer.");
	else if(tazer[playerid] == false) tazer[playerid] = true, GivePlayerWeapon(playerid, 23, 999), SendMsg(playerid, COLOR_SERVER, "Ti-ai luat un tazer.");
	return true;
}
CMD:news(playerid, params[]){
 	if(PlayerInfo[playerid][pMember] != 4) return Info(playerid, "Nu faci parte din Reporters.");
	if(OnDuty[playerid] != true) return Info(playerid, "Nu esti la datorie."); 	
 	new message[128];
	if(PlayerInfo[playerid][pMuteTime]) return SendMsg(playerid, COLOR_SERVER, "Mute >> {ffffff}Mai ai mute pentru %d minute.", PlayerInfo[playerid][pMuteTime]);
	if(sscanf(params, "s[128]", message)) return Info(playerid, "/news [message]");
 	if(!IsAReportersCar(GetPlayerVehicleID(playerid))) return Info(playerid, "You are not in a news van/news chopper.");
 	OOCNews(0x8BBA2EAA, "NR >> %s: %s", GetName(playerid), message);
 	PlayerInfo[playerid][pRaport] ++;
 	pUpdateInt(playerid, "Raport", PlayerInfo[playerid][pRaport]);
	return true;
}	
CMD:startq(playerid){
	if(PlayerInfo[playerid][pMember] != 4) return Info(playerid, "Nu faci parte din Reporters.");
	if(TalkingLive[playerid] != true) return Info(playerid, "Nu esti in live.");
	if(LiveQuestionOn) return Info(playerid, "Deja sunt activate intrebarile.");
	LiveQuestionOn = 1; 
	Info(playerid, "Acum jucatorii pot pune intrebari folosind /question.");	
	return true;
}	
CMD:stopq(playerid){
	if(PlayerInfo[playerid][pMember] != 4) return Info(playerid, "Nu te afli in Reporters.");
	if(LiveQuestionOn == 0) return Info(playerid, "Intrebarile nu sunt activate.");
	LiveQuestionOn = 0;
	Info(playerid, "Ai dezactivat intrebarile.");
	return true;
}
CMD:question(playerid, params[]){
	new message[128];
	if(sscanf(params, "s[128]",message)) return Info(playerid, "/question [message]");
	if(LiveQuestionOn == 0) return Info(playerid, "Public questions are disabled.");
	if(strcmp(LiveQuestion[playerid], "NULL", true)) return Info(playerid, "You can use this command once per 5 minutes.");
	gString[0] = (EOS);
	format(gString, 144, "Q from %s (%d): %s", GetName(playerid),playerid, message);
	foreach(new i : FactionMembers[4])
	{
		if(TalkingLive[i])
		{
			SendMsg(i, 0xFFFF00AA, gString);
		}
	}
	format(gString, 144, "Intrebarea '%s' a fost trimisa reporterilor.",message);
	SendMsg(playerid, 0xFFFF00AA, gString);
	format(LiveQuestion[playerid], 128, message);
	return true;
}
CMD:aq(playerid, params[]){
	if(PlayerInfo[playerid][pMember] != 4) return Info(playerid, "Nu te afli in Reporters.");
	if(TalkingLive[playerid] != true) return Info(playerid, "Nu esti live.");
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/aq [name/playerid]");
	if(!IsPlayerConnected(id)) return Info(playerid, "Jucatorul nu este conectat.");
	if(!strcmp(LiveQuestion[id], "NULL", true)) return Info(playerid, "This player don't have a question.");
	va_SendClientMessageToAll(0x8BBA2EAA, "Intrebare de la %s: %s", GetName(id), LiveQuestion[id]);
	format(LiveQuestion[id], 128, "NULL");
	return true;
}	
CMD:frisk(playerid, params[]){
	if(!IsACop(playerid)) return Info(playerid, "Nu esti politist.");
	new id;
	if(sscanf(params, "u",id)) return Info(playerid, "/frisk [name/playerid]");
	if(id == INVALID_PLAYER_ID || id == playerid) return Info(playerid, "Jucatorul nu este conectat.");
	if(GetDistanceBetweenPlayers(playerid, id) > 10) return Info(playerid, "Trebuie sa fi langa acel jucator.");
	new
		HaveDrugs
	;
	for(new i = 0; i < 4; i ++)
	{
		if(PlayerInfo[id][pDrugs][i] > 0)
		{
			HaveDrugs += PlayerInfo[id][pDrugs][i];
		}
	}
	Info(playerid, "%s are %d Droguri si %d Materiale.", GetName(id), PlayerInfo[id][pDrugs], PlayerInfo[id][pMats]);
	Info(id, "%s te-a perchezitionat.", GetName(playerid));
	return true;
}
CMD:handsup(playerid){
	if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Trebuie sa cobori din vehicul.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP); PlayerHandsup[playerid] = true;
	return true;
}
CMD:wave(playerid, params[]){
	if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Trebuie sa cobori din vehicul.");
	new anim;
	if(sscanf(params,"d",anim)) return Info(playerid, "/wave [1-3]");
	switch(anim){
		case 1: LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "KISSING", "gfwave2", 4.0, 1, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "PED", "endchat_03", 4.0, 1, 0, 0, 0, 0);
		default: Info(playerid, "/wave [1-3]");
	}
	return true;
}
CMD:salute(playerid){
	if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Trebuie sa cobori din vehicul.");
	LoopingAnim(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0);
	return true;
}
CMD:gro(playerid){
	if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Trebuie sa cobori din vehicul.");
 	LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	return true;
}
CMD:sit(playerid, params[]){
	if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Trebuie sa cobori din vehicul.");
	new anim;
	if(sscanf(params,"d",anim)) return Info(playerid, "/sit [1-6]");
	switch(anim){
		case 1: ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
		case 5: ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
		case 6: ApplyAnimation(playerid, "PED", "SEAT_down", 4.0, 0, 1, 1, 1, 0);
		default: Info(playerid, "/sit [1-6]");
 	}
 	return true;
}
CMD:eat(playerid){
	if(!IsPlayerInRangeOfPoint(playerid, 30.0, 363.134, -74.8469, 1001.51) && !IsPlayerInRangeOfPoint(playerid, 30.0, 364.9539, -11.4784, 1001.8516) && !IsPlayerInRangeOfPoint(playerid, 30.0, 372.1959, -133.0945, 1001.4922)) return Info(playerid, "Nu esti intr-un business potrivit.");
	new bid = InBiz[playerid];
	if(GetPlayerCash(playerid) < 100) return Info(playerid, "Nu ai suficienti bani.");
	SetPlayerHP(playerid, 100.0);
	GivePlayerCash(playerid, -100);
	BizzInfo[bid][bTill] += 100;
	Query_Mysql("UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'", BizzInfo[bid][bTill], bid);
	return true;
}
public OnPlayerCommandReceived(playerid, cmd[], params[], flags){
	if(playerid == INVALID_PLAYER_ID || !IsPlayerConnected(playerid))
		return true;

	if(dialogID[playerid] != -1)
	{
		Info(playerid, "Nu poti folosi comenzi in timp ce ai un dialog deschis.");
		return false;
	}
	if(Logat[playerid] != true)
	{
		Info(playerid, "Nu poti folosi comenzi daca nu esti logat.");
		return false;
	}
	if(GetPVarInt(playerid, "InPin") != 0)
	{
		Info(playerid, "Nu poti folosi comenzi in timp ce ai PIN-ul deschis.");
		return false;
	}
	if(PlayerInfo[playerid][pTutorial] && !strmatch(cmd, "setfreq") && !strmatch(cmd, "engine") && !Scripter(playerid))
	{
		SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Nu poti folosi aceasta comanda in Tutorial.");
		return false;
	}
	printf("%s[%d] a folosit comanda /%s %s", GetName(playerid), playerid, cmd, params);
	return true;
}
public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags){
	printf("%s[%d] a primit raspunsul comenzii /%s %s, rezultat: %d", GetName(playerid), playerid, cmd, params, result);
	if(result == -1)
	{
		Info(playerid, "Comanda nu exista, foloseste /help sau intreaba pe /n!");
		return false;
	}
	return true;
}
function SendNearbyText(playerid, color, const text[], va_args<>)
{
	gString[0] = (EOS);
	va_format(gString, sizeof(gString), text, va_start<3>);

	foreach(new i : Nearby[playerid])
	{
		if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
		{
			SendMsg(i, color, gString);
		}
	}

	SendMsg(playerid, color, gString);
	return true;
}
function ChatMessage(playerid, string[])
{
	if(PlayerInfo[playerid][pAdmin]) SendNearbyText(playerid, -1, "{%s}(A) %s:{ffffff} %s", PlayerInfo[playerid][pColor], GetGameName(playerid), string);
	else if(PlayerInfo[playerid][pHelper]) SendNearbyText(playerid, -1, "{%s}(H) %s:{ffffff} %s", PlayerInfo[playerid][pColor], GetGameName(playerid), string);
	else if(PlayerInfo[playerid][pRank] == 7) SendNearbyText(playerid, -1, "{%s}(L) %s:{ffffff} %s", PlayerInfo[playerid][pColor], GetGameName(playerid), string);
	else if(HaveVIP(playerid)) SendNearbyText(playerid, -1, "{%s}(V) %s:{ffffff} %s", PlayerInfo[playerid][pColor], GetGameName(playerid), string);
	else if(HavePremium(playerid)) SendNearbyText(playerid, -1, "{%s}(P) %s:{ffffff} %s", PlayerInfo[playerid][pColor], GetGameName(playerid), string);
	else SendNearbyText(playerid, -1, "{%s}%s:{ffffff} %s", PlayerInfo[playerid][pColor], GetGameName(playerid), string);
	return true;
}
function UpdateLabel(update, h)
{
	gString[0] = (EOS);
	switch(update){
		case 1:
		{
			new selltext[64], renttext[64];
			if(HouseInfo[h][hPrice])
			{
				format(selltext, 64, "\n{ffffff}Pret: {00a326}$%s (/buyhouse)", FormatNumber(HouseInfo[h][hPrice]));
			}
			if(HouseInfo[h][hRent])
			{
				format(renttext, 64, "\n{ffffff}Chirie: {00a326}$%s (/rentroom)", FormatNumber(HouseInfo[h][hRent]));
			}
			format(gString, 256, "Casa {00a326}%d\n{ffffff}Proprietar: {00a326}%s%s%s", h, HouseInfo[h][hOwner], renttext, selltext);
			UpdateDynamic3DTextLabelText(HouseLabel[h], -1, " ");
			DestroyDynamic3DTextLabel(HouseLabel[h]);
			HouseLabel[h] = CreateStreamed3DTextLabel(gString, -1, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ], 15.0, 0, 0);
			DestroyDynamicPickup(HousePickup[h]);
			HousePickup[h] = CreateDynamicPickup(19134, 1, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ], 0, 0);
			if(HouseInfo[h][hArea])
			{
				DestroyDynamicArea2(HouseInfo[h][hArea]);
			}
			HouseInfo[h][hArea] = CreateDynamicSphere2(7, h, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ], 1, 0, 0);

			DestroyDynamicMapIcon(HouseIcon[h]);
			HouseIcon[h] = CreateDynamicMapIcon(HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ], 31, 0, 0, 0, -1, 750.0);
			UpdateDynamic3DTextLabelText(GarageLabel[h], -1, " ");
			DestroyDynamic3DTextLabel(GarageLabel[h]);
			DestroyDynamicPickup(GaragePickup[h]);
			if(HouseInfo[h][hGarageArea])
			{
				DestroyDynamicArea2(HouseInfo[h][hGarageArea]);
			}
			if(HouseInfo[h][hGarageX])
			{
				new
					LockedText[2][9] = {"Descuiat", "Incuiat"}
				;

				gString[0] = (EOS);
				format(gString, 128, "Garajul {00a326}%d\n{ffffff}Apasa tasta {00a326}F / Claxoneaza\n{ffffff}Stare: {00a326}%s", HouseInfo[h][hID], LockedText[HouseInfo[h][hGarageLocked]]);
				GarageLabel[h] = CreateStreamed3DTextLabel(gString, -1, HouseInfo[h][hGarageX], HouseInfo[h][hGarageY], HouseInfo[h][hGarageZ], 15.0, 0, 0);
				GaragePickup[h] = CreateDynamicPickup(19132, 1, HouseInfo[h][hGarageX], HouseInfo[h][hGarageY], HouseInfo[h][hGarageZ], 0, 0);
				HouseInfo[h][hGarageArea] = CreateDynamicSphere2(8, h, HouseInfo[h][hGarageX], HouseInfo[h][hGarageY], HouseInfo[h][hGarageZ], 3, 0, 0);
			}
		}
		case 2:
		{
			if(BizzInfo[h][bPrice] > 0)
			{
				format(gString, 256,"Afacerea {00a326}#%d \n{ffffff}Proprietar: {00a326}%s \n{ffffff}Intrare: {00a326}$%s \n{ffffff}Pret: {00a326}$%s", h, BizzInfo[h][bOwner], FormatNumber(BizzInfo[h][bEntranceCost]), FormatNumber(BizzInfo[h][bPrice]));
			}
			else
			{
				format(gString, 256,"Afacerea {00a326}#%d \n{ffffff}Proprietar: {00a326}%s \n{ffffff}Intrare: {00a326}$%s", h, BizzInfo[h][bOwner], FormatNumber(BizzInfo[h][bEntranceCost]));
			}
			UpdateDynamic3DTextLabelText(BizzLabel[h], -1, " ");
			DestroyDynamic3DTextLabel(BizzLabel[h]);
			BizzLabel[h] = CreateStreamed3DTextLabel(gString, -1, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ], 15.0, 0, -1);
			DestroyDynamicPickup(BizzPickup[h]);
			new
				PickupType[12] = {0, 1274, 2061, 18631, 1934, 19592, 2703, 1077, 2704, 1650, 19627, 1083}
			;
			BizzPickup[h] = CreateDynamicPickup(PickupType[BizzInfo[h][bType]], 1, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ], -1, 0);
			DestroyDynamicMapIcon(BizzIcon[h]);
			BizzIcon[h] = CreateDynamicMapIcon(BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ], IconitaA[(BizzInfo[h][bType])], 0, -1, 0, -1, 750.0);
			if(BizzInfo[h][bArea])
			{
				DestroyDynamicArea2(BizzInfo[h][bArea]);
			}
			new
				aRange
			;
			switch(BizzInfo[h][bType])
			{
				case 9, 10, 11:
				{
					aRange = 5;
				}
				default:
				{
					aRange = 1;
				}
			}
			BizzInfo[h][bArea] = CreateDynamicSphere2(9, h, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ], aRange, -1, -1);
		}
		case 3:
		{
			if(JobInfo[h][jPrice] > 0)
			{
				format(gString, 256, "{ffffff}Job: {00a326}%s(%d)\n{ffffff}Detinator: {00a326}%s\n{ffffff}Pret: {00a326}$%s\n{ffffff}Apasa tasta {00a326}Y", JobInfo[h][jName], h, JobInfo[h][jOwner], FormatNumber(JobInfo[h][jPrice]));
			}
			else
			{
				format(gString, 256, "{ffffff}Job: {00a326}%s(%d)\n{ffffff}Detinator: {00a326}%s\n{ffffff}Apasa tasta {00a326}Y", JobInfo[h][jName], h, JobInfo[h][jOwner]);
			}

			DestroyDynamicPickup(JobInfo[h][jPickup]);
			JobInfo[h][jPickup] = CreateDynamicPickup(19135, 1, JobInfo[h][jX], JobInfo[h][jY], JobInfo[h][jZ], -1);

			UpdateDynamic3DTextLabelText(JobInfo[h][jText], -1, " ");
			DestroyDynamic3DTextLabel(JobInfo[h][jText]);
			JobInfo[h][jText] = CreateStreamed3DTextLabel(gString, COLOR_SERVER, JobInfo[h][jX], JobInfo[h][jY], JobInfo[h][jZ], 20.0, -1, 0);
			
			if(JobInfo[h][jArea])
			{
				DestroyDynamicArea2(JobInfo[h][jArea]);
			}
			JobInfo[h][jArea] = CreateDynamicSphere2(10, h, JobInfo[h][jX], JobInfo[h][jY], JobInfo[h][jZ], 1);

			DestroyDynamicMapIcon(JobInfo[h][jMapIcon]);
			JobInfo[h][jMapIcon] = CreateDynamicMapIcon(JobInfo[h][jX], JobInfo[h][jY], JobInfo[h][jZ], 37, 0);
		}
		case 4:
		{
			if(Billboards[h][bPrice] > 0)
			{
				format(gString, 256, "{ffffff}Panou: {00a326}%d\n{ffffff}Detinator: {00a326}%s\n{ffffff}Pret: {00a326}$%s", h, Billboards[h][bOwner], FormatNumber(Billboards[h][bPrice]));
			}
			else
			{
				format(gString, 256, "{ffffff}Panou: {00a326}%d\n{ffffff}Detinator: {00a326}%s", h, Billboards[h][bOwner]);
			}

			DestroyDynamicPickup(Billboards[h][bPickup]);
			Billboards[h][bPickup] = CreateDynamicPickup(1239, 1, Billboards[h][bPX], Billboards[h][bPY], Billboards[h][bPZ], -1);

			UpdateDynamic3DTextLabelText(Billboards[h][bTextLabel], -1, " ");
			DestroyDynamic3DTextLabel(Billboards[h][bTextLabel]);
			Billboards[h][bTextLabel] = CreateStreamed3DTextLabel(gString, COLOR_SERVER, Billboards[h][bPX], Billboards[h][bPY], Billboards[h][bPZ], 20.0, -1, 0);
			
			if(Billboards[h][bArea])
			{
				DestroyDynamicArea2(Billboards[h][bArea]);
			}
			Billboards[h][bArea] = CreateDynamicSphere2(17, h, Billboards[h][bPX], Billboards[h][bPY], Billboards[h][bPZ], 2);

			if(Billboards[h][bObject])
			{
				DestroyDynamicObject(Billboards[h][bObject]);
			}
			Billboards[h][bObject] = CreateDynamicObject(4237, Billboards[h][bX], Billboards[h][bY], Billboards[h][bZ], Billboards[h][bRX], Billboards[h][bRY], Billboards[h][bRZ]);
			SetDynamicObjectMaterialText(Billboards[h][bObject], 0, Billboards[h][bText], OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0xFF000000, 1);
		}
		case 5:
		{
			new
				cOwner = ClanHQs[h][cOwnerID],
				chType[8]
			;

			switch(ClanHQs[h][cType])
			{
				case 1:
				{
					format(chType, sizeof(chType), "Mic");
				}
				case 2:
				{
					format(chType, sizeof(chType), "Mediu");
				}
				case 3:
				{
					format(chType, sizeof(chType), "Mare");
				}
			}

			format(gString, 256, "{ffffff}Sediul clanului: {00a326}%s\n{ffffff}Tip: {00a326}%s", ClanInfo[cOwner][clanName], chType);

			DestroyDynamicPickup(ClanHQs[h][cPickup]);
			ClanHQs[h][cPickup] = CreateDynamicPickup(1314, 1, ClanHQs[h][cX], ClanHQs[h][cY], ClanHQs[h][cZ], -1);

			UpdateDynamic3DTextLabelText(ClanHQs[h][cText], -1, " ");
			DestroyDynamic3DTextLabel(ClanHQs[h][cText]);
			ClanHQs[h][cText] = CreateStreamed3DTextLabel(gString, COLOR_SERVER, ClanHQs[h][cX], ClanHQs[h][cY], ClanHQs[h][cZ], 20.0, -1, 0);
			
			if(ClanHQs[h][cArea])
			{
				DestroyDynamicArea2(ClanHQs[h][cArea]);
			}
			ClanHQs[h][cArea] = CreateDynamicSphere2(18, h, ClanHQs[h][cX], ClanHQs[h][cY], ClanHQs[h][cZ], 1);

			DestroyDynamicMapIcon(ClanHQs[h][cMapIcon]);
			ClanHQs[h][cMapIcon] = CreateDynamicMapIcon(ClanHQs[h][cX], ClanHQs[h][cY], ClanHQs[h][cZ], 62, 0);
		}
	}
	return true;
}
stock Scripter(playerid)
{
	if(GetPVarInt(playerid, "Scripter"))
	{
		return true;
	}
	return false;
}
stock VehSpeed(vehicleid)
{
	new
		Float: VelX,
		Float: VelY,
		Float: VelZ,
		Speed
	; 
	GetVehicleVelocity(vehicleid, VelX, VelY, VelZ);
	Speed = floatround(1.61 * floatsqroot(floatpower(floatabs(VelX), 2.0) + floatpower(floatabs(VelY), 2.0) + floatpower(floatabs(VelZ), 2.0)) * 99.38);
	return Speed;
}
function RemoveTuning(playerid, carid, v)
{
	new
		Float: PosX,
		Float: PosY,
		Float: PosZ,
		Model = PlayerInfo[playerid][pVehModel][v],
		Float: Angle = PlayerInfo[playerid][pVehAngle][v],
		VehColor1 = PlayerInfo[playerid][pVehColor1][v],
		VehColor2 = PlayerInfo[playerid][pVehColor2][v],
		VehGas = PlayerInfo[playerid][pVehGas][v]
	;
	GetVehiclePos(carid, PosX, PosY, PosZ);
	DestroyNeon(PlayerInfo[playerid][pVehID][v]);
	DestroyVehicleEx(PlayerInfo[playerid][pVehID][v]);
	PlayerInfo[playerid][pVehID][v] = CreateVehicleEx(Model, PosX, PosY, PosZ, Angle, VehColor1, VehColor2, -1, false, true, VehGas);
	for(new ModSlot = 0; ModSlot < 17; ModSlot++)
	{
		if(CarMod[playerid][v][ModSlot])
		{
			AddVehicleComponent(PlayerInfo[playerid][pVehID][v],CarMod[playerid][v][ModSlot]);
		}
	}
	ChangeVehiclePaintjob(PlayerInfo[playerid][pVehID][v], PlayerInfo[playerid][pVehPaintJ][v]);
	if(PlayerInfo[playerid][pVehNeon][v])
	{
		CreateNeon(PlayerInfo[playerid][pVehID][v], PlayerInfo[playerid][pVehNeon][v]);
	}
	if(PlayerInfo[playerid][pVehStage][v])
	{
		AddToStageVehicles(playerid, v);
	}
	if(PlayerInfo[playerid][pVehVip][v])
	{
		new FormatedText[64];
		format(FormatedText, sizeof(FormatedText), "{%s}%s", VipTextColor[playerid][v], VipText[playerid][v]);
		CreateAndAttachVipText(PlayerInfo[playerid][pVehID][v], FormatedText, VipTextPos[0][playerid][v], VipTextPos[1][playerid][v], VipTextPos[2][playerid][v], VipTextPos[3][playerid][v], VipTextPos[4][playerid][v], VipTextPos[5][playerid][v]);
	}
	return true;
}
public OnPlayerText(playerid, text[])
{
	if(dialogID[playerid] != -1 || !Logat[playerid] || GetPVarInt(playerid, "InPin") != 0) return false;
	if(GetPVarInt(playerid, "EditVipText") != 0)
	{
		if(strmatch(text, "stop"))
		{
			Info(playerid, "Te-ai oprit din a-ti edita pozitia textului vip.");
			DeletePVar(playerid, "EditVipText");
			return false;
		}

		new
			EditVipText = GetPVarInt(playerid, "EditVipText") - 1
		;

		switch(EditVipText)
		{
			case 0..5:
			{

				new
					Float: Pos
				;

				if(sscanf(text, "f", Pos))
				{
					Info(playerid, "Introdu noua coordonata:");
					return false;
				}

				new
					s = SelectedCar[playerid],
					vehicleid = PlayerInfo[playerid][pVehID][s],
					FormatedText[64]
				;

				VipTextPos[EditVipText][playerid][s] = Pos;
				Query_Mysql("update cars set VipTextPos = '%0.2f|%0.2f|%0.2f|%0.2f|%0.2f|%0.2f' where id = %d",
					VipTextPos[0][playerid][s], VipTextPos[1][playerid][s], VipTextPos[2][playerid][s], VipTextPos[3][playerid][s], VipTextPos[4][playerid][s], VipTextPos[5][playerid][s], PlayerInfo[playerid][pVeh][s]);

				format(FormatedText, 64, "{%s}%s", VipTextColor[playerid][s], VipText[playerid][s]);

				CreateAndAttachVipText(vehicleid, FormatedText, VipTextPos[0][playerid][s], VipTextPos[1][playerid][s], VipTextPos[2][playerid][s], VipTextPos[3][playerid][s], VipTextPos[4][playerid][s], VipTextPos[5][playerid][s]);
			}
		}

		return false;
	}
	if(strcmp(text, fastevent, true) == 0 && fasteventpremiu != -1)
	{ 
		va_SendClientMessageToAll(COLOR_SERVER, "Event >> {ffffff}%s a primit $%s pentru cuvant.", GetName(playerid), FormatNumber(fasteventpremiu)); 
		GivePlayerCash(playerid, fasteventpremiu); 
		format(fastevent, 64, "None"); 
		fasteventpremiu = -1; 
		return false; 
	}
	if(PlayerInfo[playerid][pMuteTime])
	{
		SendMsg(playerid, COLOR_SERVER, "Mute >> {ffffff}Mai ai mute pentru %d minute.", PlayerInfo[playerid][pMuteTime]);
		return false;
	}
	if(GetPVarInt(playerid, "InCall") != -1)
	{
		SendMsg(GetPVarInt(playerid, "InCall"), COLOR_SERVER, "Call >> %s: %s", GetName(playerid), text);
		SendMsg(playerid, COLOR_SERVER, "Call >> %s: %s", GetName(playerid), text);
		return false;
	}
	if(Iter_Contains(InPaint, playerid))
	{ 
		format(String, 128, "{d062fc}%s[%d kills]{ffffff}: %s", GetName(playerid), paintkills[playerid], text);
		SendPaintMessage(-1, String);
		return false;
	}
	if(TalkingLive[playerid])
	{
		if(PlayerInfo[playerid][pMember] == 4)
		{
			OOCNews(0x8BBA2EAA, "NR %s: %s", GetName(playerid), text);
		}
		else
		{ 
			OOCNews(0x8BBA2EAA, "LivePlayer %s: %s", GetName(playerid), text);
		}
		return false;
	}
	ChatMessage(playerid, text);
	SetPlayerChatBubble(playerid, text, 0xffffffCC, 25.0, 5000);
	return false;
}
public OnVehicleDeath(vehicleid, killerid)
{
	SetVehicleToRespawn(vehicleid);
 	return true;
}
function CheckAccount(playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(cache_num_rows())
	{
		cache_get_value_name(0, "password", PlayerInfo[playerid][pKey]);
		SendMsg(playerid, COLOR_SERVER, "Logare >> {ffffff}Bine ai revenit pe server, te rugam introdu-ti parola in casuta.");
		SPD(playerid, DIALOG_LOGIN2, DIALOG_STYLE_PASSWORD, "Logare", "Te rugam introdu-ti parola:", "Logare", "Anuleaza");
	}
	else
	{
		SendMsg(playerid, COLOR_SERVER, "Inregistrare >> {ffffff}Bine ai venit pe server, te rugam parola dorita in casuta.");
		SPD(playerid, DIALOG_LOGIN1, DIALOG_STYLE_PASSWORD, "Inregistrare", "Te rugam introdu o parola:", "Inregistrare", "Anuleaza");
	}
	SetPlayerVirtualWorld(playerid, playerid + 1);
	SetPlayerInterior(playerid, 0);
	InterpolateCameraPos(playerid, 1142.365722, -1052.819335, 188.920471, 1154.703369, -1735.546386, 32.680225, 30000);
	InterpolateCameraLookAt(playerid, 1142.509277, -1057.621948, 187.536743, 1154.690429, -1739.949340, 30.310853, 30000);
	return true;
}
function CheckNewName(playerid, name[26], session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(cache_num_rows()) return Info(playerid, "Acest nume este deja folosit.");
	if(strlen(name) < 3 || strlen(name) > 24) return Info(playerid, "Numele tau trebuie sa fie intre 3 caractere si 20 de caractere.");	
	switch(SetPlayerName(playerid, name)){
		case 0: Info(playerid, "This name already exist.");
		case 1:{
			SetPlayerName(playerid, GetName(playerid));
			format(WantName[playerid], MAX_PLAYER_NAME, name);
			SendAdmins(COLOR_RED, "Admin >> {ffffff}%s [%d] vrea sa-si schimbe numele in %s.", 1, GetName(playerid), playerid, name);
			Info(playerid, "Asteapta pentru a-ti accepta adminii cererea.");
		}
		default: Info(playerid, "Caractere invalide!");
	}
	return true;
}
function CheckBan(playerid, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(!cache_num_rows())
	{
		gString[0] = (EOS);
		mysql_format(SQL, gString, 128, "SELECT * FROM `users` WHERE `name` = '%e' limit 1", GetName(playerid));
		mysql_tquery(SQL, gString, "CheckAccount", "id", playerid, PlayerInfo[playerid][pSession]);
	}
	else
	{
		new admin[30], reason[64], days;
		cache_get_value_name(0, "AdminName", admin);
		cache_get_value_name(0, "Reason", reason);
		cache_get_value_name_int(0, "Days", days);
		Info(playerid, "Banat de: %s, motiv: %s, zile ramase: %d.", admin, reason, days);
		defer KickEx(playerid, PlayerInfo[playerid][pSession]);
	}
	return true;
}
function FreezePlayer(playerid, bool: toggle)
{
	FreezedPlayer[playerid] = toggle;
	return TogglePlayerControllable(playerid, !toggle);
}
function FWarnPlayer(playerid, fw, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(!cache_num_rows()) return true;
	new fwarn;
	for(new i, j = cache_num_rows(); i != j; ++i) cache_get_value_name_int(i, "FWarn", fwarn);
	if((fwarn + fw) >= 3 || (fwarn + fw) < 0) return Info(playerid, "Nu poti face asta.");
	Query_Mysql("UPDATE users SET FWarn = FWarn + '%d' WHERE id = %d", fw, Selected2[playerid]);
	Info(playerid, "Acel player a primit %d FW.", fw);
	gString[0] = (EOS);
	format(gString, 32, "SQLID%d", Selected2[playerid]);
	new
		i = GetSVarInt(gString) - 1
	;
	if(i != -1)
	{
		PlayerInfo[i][pFACWarns] ++;
		Info(i, "%s ti-a dat %d FW.", GetName(playerid), fw);
	}
	return true;
}
function UninvitePlayer(playerid, fp, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new ftime, frank, name[25];
	for(new i, j = cache_num_rows(); i != j; ++i){
		cache_get_value_name_int(i, "FactionJoin", ftime);
		cache_get_value_name_int(i, "Rank", frank);
		cache_get_value_name(i, "name", name);
	}
	if(frank == 7) return Info(playerid, "Nu poti face asta.");
	SetPVarInt(playerid, "FPUninvite", fp);
	gString[0] = (EOS);
	format(gString, 256, "Esti pe cale sa-i dai uninvite lui %s cu %d fp.\nAcesta are %d zile in factiune.\nScrie motivul pentru uninvite mai jos:", name, fp, GetDaysFromTimestamp(ftime));
	SPD(playerid, DIALOG_UNINVITE, DIALOG_STYLE_INPUT, "Uninvite", gString, "Uninvite", "Exit");
	return true;
}
function UninvitePlayer2(playerid, reason[64], session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new name[25], rank, ftime, idd, fp = GetPVarInt(playerid, "FPUninvite");
	DeletePVar(playerid, "FPUninvite");
	for(new i, j = cache_num_rows(); i != j; ++i){
		cache_get_value_name(i, "name", name);
		cache_get_value_name_int(i, "FactionJoin", ftime);
		cache_get_value_name_int(i, "Rank", rank);
		cache_get_value_name_int(i, "id", idd);
	}
	gString[0] = (EOS);
	new string[256];
	format(gString, 256, "%s was uninvited by %s from %s (R%d) after %d days, with %d fp. Reason: %s.", name, GetName(playerid), FacInfo[PlayerInfo[playerid][pMember]][fName], rank, GetDaysFromTimestamp(ftime), fp, reason);
	mysql_escape_string(gString, string);
	Query_Mysql("INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string, idd, PlayerInfo[playerid][pSQLID]);
	Query_Mysql("UPDATE users SET `Member`='0',`Rank`='0',`FPunish`='%d',`FWarn`='0',`FactionJoin`='0' WHERE `id`='%d'", fp, Selected2[playerid]);
	Query_Mysql("update users set SetGuns = '0|0|0|0|0' where id = %d", Selected2[playerid]);
	Info(playerid, "Acel player a primit uninvite.");
	gString[0] = (EOS);
	format(gString, 32, "SQLID%d", idd);
	new
		i = GetSVarInt(gString) - 1
	;
	if(i != -1)
	{
		if(pfVehicle[i] != -1) DestroyVehicleEx(pfVehicle[i]), Iter_Remove(fVehicles[PlayerInfo[i][pMember]], pfVehicle[i]), pfVehicle[i] = -1;
		Iter_Remove(FactionMembers[PlayerInfo[i][pMember]], i);
		PlayerInfo[i][pMember] = 0;
		PlayerInfo[i][pRank] = 0;
		PlayerInfo[i][pFACWarns] = 0;
		PlayerInfo[i][pFpunish] = fp;
		PlayerInfo[i][pFactionJoin] = 0;
		SetPlayerArm(i, 0);
		tazer[i] = false;
		OnDuty[i] = false;
		SetPlayerSkin(i, PlayerInfo[i][pModel]);
		defer Spawn(i, PlayerInfo[i][pSession]);
		SendMsg(i, COLOR_RED, "Ai fost demis de %s din factiune dupa %d zile, cu %d FP. Motiv: %s.", GetName(playerid), GetDaysFromTimestamp(ftime), fp, reason);
		ResetSetGuns(i);
	}
	return true;
}
function SellVehicle(playerid, i, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new idds = -1;
	for(new s = 0; s <= stockss; s++)
	{
		if(StockInfo[s][vModel] == PlayerInfo[playerid][pVehModel][i])
		{
			idds = s;
		}
	}
	if(idds == -1)
	{
		format(gString, 256, "Vrei sa-ti vinzi vehiculul la stat pentru $0?");
	}
	else
	{	
		if(PlayerInfo[playerid][pBoughtMethod][i] == 0)
		{
			if(PerkActive[playerid][34])
			{
				SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Primesti 100% din pretul vehicului. #34");

				format(gString, 256, "Vrei sa-ti vinzi vehiculul la stat pentru $%s?", formatBytes(DealerShipPrice[idds]));
			}
			else if(PerkActive[playerid][31])
			{
				SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Primesti 75% din pretul vehicului. #31");

				format(gString, 256, "Vrei sa-ti vinzi vehiculul la stat pentru $%s?", formatBytes(DealerShip75Sell[idds]));
			}
			else
			{
				format(gString, 256, "Vrei sa-ti vinzi vehiculul la stat pentru $%s?", formatBytes(DealerShipSell[idds]));
			}
		}
		else
		{
			format(gString, 256, "Vrei sa-ti vinzi vehiculul la stat pentru $%s?", formatBytes(DealerShipSell[idds]));
		}
	}
	CarID[playerid] = PlayerInfo[playerid][pVehID][i];
	SPD(playerid, DIALOG_SELLVEHICLE, DIALOG_STYLE_MSGBOX, "Vanzarea Vehiculului la Stat", gString, "Yes", "No");
	return true;
}
function SellVehicle2(playerid, v, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new idds = -1;
	for(new i = 0; i <= stockss; i++)
	{
		if(StockInfo[i][vModel] == PlayerInfo[playerid][pVehModel][v])
		{
			idds = i;
		}
	}
	if(idds == -1)
	{
		SendMsg(playerid, COLOR_SERVER, "Dealership >> {ffffff}Ti-ai vandut %s-ul la stat pentru $0!", GetVehicleName(PlayerInfo[playerid][pVehModel][v]));
	}
	else
	{	
		if(PlayerInfo[playerid][pBoughtMethod][v] == 0)
		{	
			if(PerkActive[playerid][34])
			{
				if(OPByte(DealerShipPrice[idds], >, #999999999))
			    {
			        addBytes64(PlayerCash[playerid], valueBigInt(DealerShipPrice[idds]));
			    }
			    else
			    {
			        GivePlayerCash(playerid, bytes32(DealerShipPrice[idds]));
			    }

		    	SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ti-ai vandut %s-ul la stat pentru $%s! #34",
		    		GetVehicleName(PlayerInfo[playerid][pVehModel][v]), formatBytes(DealerShipPrice[idds]));
			}
			else if(PerkActive[playerid][31])
			{
				if(OPByte(DealerShip75Sell[idds], >, #999999999))
			    {
			        addBytes64(PlayerCash[playerid], valueBigInt(DealerShip75Sell[idds]));
			    }
			    else
			    {
			        GivePlayerCash(playerid, bytes32(DealerShip75Sell[idds]));
			    }

			    SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ti-ai vandut %s-ul la stat pentru $%s! #31",
		    		GetVehicleName(PlayerInfo[playerid][pVehModel][v]), formatBytes(DealerShip75Sell[idds]));
			}
			else
			{
				if(OPByte(DealerShipSell[idds], >, #999999999))
			    {
			        addBytes64(PlayerCash[playerid], valueBigInt(DealerShipSell[idds]));
			    }
			    else
			    {
			        GivePlayerCash(playerid, bytes32(DealerShipSell[idds]));
			    }

			    SendMsg(playerid, COLOR_SERVER, "Dealpership >> {ffffff}Ti-ai vandut %s-ul la stat pentru $%s!",
		    		GetVehicleName(PlayerInfo[playerid][pVehModel][v]), formatBytes(DealerShipSell[idds]));
			}
		}
		else
		{
			if(OPByte(DealerShipSell[idds], >, #999999999))
		    {
		        addBytes64(PlayerCash[playerid], valueBigInt(DealerShipSell[idds]));
		    }
		    else
		    {
		        GivePlayerCash(playerid, bytes32(DealerShipSell[idds]));
		    }

		    SendMsg(playerid, COLOR_SERVER, "Dealership >> {ffffff}Ti-ai vandut %s-ul la stat pentru $%s!",
	    		GetVehicleName(PlayerInfo[playerid][pVehModel][v]), formatBytes(DealerShipSell[idds]));
		}
	}

	Query_Mysql("DELETE FROM `cars` WHERE `ID`='%d'", PlayerInfo[playerid][pVeh][v]);
	PlayerInfo[playerid][pVeh][v] = -1;
	DestroyNeon(PlayerInfo[playerid][pVehID][v]);
	DestroyVehicleEx(CarID[playerid]);

	CarID[playerid] = -1;
	resetVehicle(playerid, v);
	LoadVehicle(playerid);
	return true;
}
function CallUser(playerid, id){
	if(PlayerInfo[playerid][pMuteTime]) return SendMsg(playerid, COLOR_SERVER, "Mute >> {ffffff}Mai ai mute pentru %d minute.", PlayerInfo[playerid][pMuteTime]);
	if(GetPVarInt(playerid, "InCall") != -1) return Info(playerid, "Esti deja intr-un apel.");
	if(GetPVarInt(playerid, "Call") != -1) return Info(playerid, "Deja suni pe cineva.");
	if(PlayerInfo[playerid][pSettings][11] == true) return Info(playerid, "Ai telefonul inchis.");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "Acel jucator nu exista.");
	if(PlayerInfo[id][pSettings][11] == true) return Info(playerid, "Acel jucator are telefonul inchis");
	if(PlayerInfo[id][pPhoneBlocked][playerid]) return Info(playerid, "Acel jucator te-a blocat.");
	if(GetPVarInt(playerid, "Called") == id) return Info(playerid, "Acel jucator te suna deja.");
	if(id == playerid) return Info(playerid, "Nu te poti suna singur.");
	if(GetPVarInt(id, "InCall") != -1) return Info(playerid, "Acel jucator este deja intr-un apel.");
	Info(playerid, "Il suni pe %s, asteapta sa-ti raspunda...", GetName(id));
	Info(id, "%s te suna, foloseste comanda [/p] pentru a raspunde.", GetName(playerid));
	SetPVarInt(id, "Called", playerid);
	SetPVarInt(playerid, "Call", id); 
	return true;
}
function SmsUser(playerid, id, message[]){
	if(PlayerInfo[playerid][pMuteTime]) return SendMsg(playerid, COLOR_SERVER, "Mute >> {ffffff}Mai ai mute pentru %d minute.", PlayerInfo[playerid][pMuteTime]);
	if(PlayerInfo[playerid][pSettings][11] == true) return Info(playerid, "Your phone turned is off.");
 	if(id == INVALID_PLAYER_ID || id == playerid) return Info(playerid, "ID-ul este invalid.");
 	if(PlayerInfo[id][pSettings][11] == true) return Info(playerid, "This player have his phone turned off.");
	if(PlayerInfo[id][pPhoneBlocked][playerid]) return Info(playerid, "Acel jucator te-a blocat.");
 	SendMsg(id, 0xFFFF00AA, "SMS de la %s (%d): %s", GetName(playerid),playerid, message);
 	SendMsg(playerid, 0xD5EAFFFF, "SMS catre %s (%d): %s", GetName(id), id, message); 
 	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0); PlayerPlaySound(id, 1139, 0.0, 0.0, 0.0);
	LastPlayer[id] = playerid;
	return true;
}
function ValidClanTag(string[])
{
  	new
  		len = strlen(string)
  	;
  	if(len < 1 || len > 3)
  	{
  		return false;
  	}
  	for(new i = 0; i < len; i++)
  	{
	    if(!((string[i] >= 'A' && string[i] <= 'Z') || (string[i] >= '0' && string[i] <= '9') || (string[i] >= 'a' && string[i] <= 'z')))
		{
			return false;
		}
	}
  	return true;
}

function ShowStaffPlayers(playerid, session, type)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	new
		Names[3][8] = {"Admini", "Helperi", "Lideri"}
	;

	if(cache_num_rows())
	{
		gString[0] = (EOS);

		for(new i = 0; i < cache_num_rows(); i++)
		{
			new
				Name[MAX_PLAYER_NAME],
				Float: Hours,
				Float: Last7,
				Raport
			;

			cache_get_value_name(i, "name", Name);
			cache_get_value_name_float(i, "ConnectedTime", Hours);
			cache_get_value_name_float(i, "Last7", Last7);
			cache_get_value_name_int(i, "HelpedPlayers", Raport);

			if(type != 2)
			{
				format(gString, sizeof(gString), "%s\n%s - %0.2f - %d", gString, Name, Hours - Last7, Raport);
			}
			else
			{
				format(gString, sizeof(gString), "%s\n%s - %0.2f", gString, Name, Hours - Last7);
			}
		}

		SPD(playerid, DIALOG_GOL, DIALOG_STYLE_LIST, Names[type], gString, "Alege", "Anuleaza");
	}
	else
	{
		SendMsg(playerid, COLOR_SERVER, "Staff >> {ffffff}Nu s-au gasit %s.", Names[type]);
	}

	return true;
}

function SpawnLoadedVehicle(playerid, i, bool: free, bool: reset, bool: putplayerinvehicle, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(cache_num_rows()){
		cache_get_value_name_int(0, "Model", PlayerInfo[playerid][pVehModel][i]);
		cache_get_value_name_float(0, "Locationx", PlayerInfo[playerid][pVehLocX][i]);
		cache_get_value_name_float(0, "Locationy", PlayerInfo[playerid][pVehLocY][i]);
		cache_get_value_name_float(0, "Locationz", PlayerInfo[playerid][pVehLocZ][i]);
		cache_get_value_name_float(0, "Angle", PlayerInfo[playerid][pVehAngle][i]);
		cache_get_value_name_int(0, "BuyTime", PlayerInfo[playerid][pVehBuyTime][i]);
		cache_get_value_name_int(0, "ColorOne", PlayerInfo[playerid][pVehColor1][i]);
		cache_get_value_name_int(0, "ColorTwo", PlayerInfo[playerid][pVehColor2][i]);
		cache_get_value_name_float(0, "KM", PlayerInfo[playerid][pVehKM][i]);
		cache_get_value_name_int(0, "Gas", PlayerInfo[playerid][pVehGas][i]);
		cache_get_value_name_int(0, "PaintJ", PlayerInfo[playerid][pVehPaintJ][i]);
		cache_get_value_name_int(0, "Stage", PlayerInfo[playerid][pVehStage][i]);
		cache_get_value_name_int(0, "Neon", PlayerInfo[playerid][pVehNeon][i]);
		cache_get_value_name_int(0, "NeonCustom", PlayerInfo[playerid][pVehNeonCustom][i]);
		cache_get_value_name_int(0, "Working", PlayerInfo[playerid][pVehWorking][i]);
		cache_get_value_name_int(0, "VipVehicle", PlayerInfo[playerid][pVehVip][i]);
		cache_get_value_name(0, "Owner", CarOwner[playerid][i]);

		cache_get_value_name(0, "VipText", VipText[playerid][i]);
		cache_get_value_name(0, "VipTextColor", VipTextColor[playerid][i]);

		new viptextpos[64];
		cache_get_value_name(0, "VipTextPos", viptextpos);
		sscanf(viptextpos, "p<|>ffffff", VipTextPos[0][playerid][i], VipTextPos[1][playerid][i], VipTextPos[2][playerid][i], VipTextPos[3][playerid][i], VipTextPos[4][playerid][i], VipTextPos[5][playerid][i]);

		for(new s = 1; s <= 17; s++){
			new string[8];
			format(string, sizeof string, "mod%d",s);
			new ids = s - 1;
			cache_get_value_name_int(0, string, CarMod[playerid][i][ids]);
		}

		cache_get_value_name_int(0, "Rainbow", PlayerInfo[playerid][pVehRainbow][i]);

		cache_get_value_name_int(0, "RainbowOn", PlayerInfo[playerid][pVehRainbowOn][i]);

		cache_get_value_name_int(0, "BoughtMethod", PlayerInfo[playerid][pBoughtMethod][i]);

		cache_get_value_name_int(0, "InGarage", PlayerInfo[playerid][pVehInGarage][i]);

		if(reset != false)
		{
			new
				Float: gRandomVehicles[8][4] =
				{
					{523.1566, -1288.7944, 16.9699, 285.7405},
					{533.0040, -1279.1887, 16.9695, 222.4635},
					{540.0106, -1273.4564, 16.9693, 221.8032},
					{546.7054, -1268.2214, 16.9708, 222.3633},
					{552.6017, -1263.7153, 16.9698, 219.5970},
					{562.7086, -1278.3401, 16.9712, 104.7959},
					{564.5198, -1288.6240, 16.9758, 41.3149},
					{553.9013, -1290.0325, 16.9753, 40.0195}
				},
				rand = random(sizeof(gRandomVehicles))
			;

			PlayerInfo[playerid][pVehLocX][i] = gRandomVehicles[rand][0]; 
			PlayerInfo[playerid][pVehLocY][i] = gRandomVehicles[rand][1]; 
			PlayerInfo[playerid][pVehLocZ][i] = gRandomVehicles[rand][2] + 1;
			PlayerInfo[playerid][pVehAngle][i] = gRandomVehicles[rand][3];

			cUpdate(playerid, i, pVehLocX);
			cUpdate(playerid, i, pVehLocY);
			cUpdate(playerid, i, pVehLocZ);
			cUpdate(playerid, i, pVehAngle);

			PlayerInfo[playerid][pVehInGarage][i] = false;

			gString[0] = (EOS);
			mysql_format(SQL, gString, 64, "update cars set InGarage = %d where id = %d", PlayerInfo[playerid][pVehInGarage][i], PlayerInfo[playerid][pVeh][i]);
			mysql_tquery(SQL, gString);

			SetPlayerCheckpointEx(playerid, PlayerInfo[playerid][pVehLocX][i], PlayerInfo[playerid][pVehLocY][i], PlayerInfo[playerid][pVehLocZ][i], 4);

			CP[playerid] = 43;

			SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}%s-ul a fost deblocat, urmeaza punctul rosu pentru a-l gasi.", GetVehicleName(PlayerInfo[playerid][pVehModel][i]));
		}

		PlayerInfo[playerid][pVehID][i] = CreateVehicleEx(PlayerInfo[playerid][pVehModel][i], PlayerInfo[playerid][pVehLocX][i], PlayerInfo[playerid][pVehLocY][i], PlayerInfo[playerid][pVehLocZ][i], PlayerInfo[playerid][pVehAngle][i], PlayerInfo[playerid][pVehColor1][i], PlayerInfo[playerid][pVehColor2][i], -1, false, true, PlayerInfo[playerid][pVehGas][i]);
		
		for(new d = 0; d < 17; d++)
		{
			if(CarMod[playerid][i][d])
			{
				AddVehicleComponent(PlayerInfo[playerid][pVehID][i], CarMod[playerid][i][d]);
			}
		}

		ChangeVehiclePaintjob(PlayerInfo[playerid][pVehID][i], PlayerInfo[playerid][pVehPaintJ][i]);

		SetVehicleParamsForPlayer(PlayerInfo[playerid][pVehID][i], playerid, 0, 0);

		if(PlayerInfo[playerid][pVehNeon][i] != 0)
		{
			CreateNeon(PlayerInfo[playerid][pVehID][i], PlayerInfo[playerid][pVehNeon][i]);
		}

		if(PlayerInfo[playerid][pVehStage][i] != false)
		{
			AddToStageVehicles(playerid, i);
		}

		if(PlayerInfo[playerid][pVehVip][i] != false)
		{
			new
				FormatedText[64]
			;

			format(FormatedText, sizeof(FormatedText), "{%s}%s", VipTextColor[playerid][i], VipText[playerid][i]);
			CreateAndAttachVipText(PlayerInfo[playerid][pVehID][i], FormatedText, VipTextPos[0][playerid][i], VipTextPos[1][playerid][i], VipTextPos[2][playerid][i], VipTextPos[3][playerid][i], VipTextPos[4][playerid][i], VipTextPos[5][playerid][i]);
		}

		RainbowOn[PlayerInfo[playerid][pVehID][i]] = PlayerInfo[playerid][pVehRainbowOn][i];

		LastVehKM[PlayerInfo[playerid][pVehID][i]] = PlayerInfo[playerid][pVehKM][i];

		if(free != true)
		{
			SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}%s-ul a fost spawnat.", GetVehicleName(PlayerInfo[playerid][pVehModel][i]));
			GivePlayerCash(playerid, -10_000);
		}

		if(PlayerInfo[playerid][pVehLocZ][i] > 2500 && PlayerInfo[playerid][pVehInGarage][i] != false)
		{
			new
				Float: X,
				Float: Y,
				Float: Z,
				Float: Angle
			;

			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, Angle);

			PlayerInfo[playerid][pVehLocX][i] = X; 
			PlayerInfo[playerid][pVehLocY][i] = Y; 
			PlayerInfo[playerid][pVehLocZ][i] = Z;
			PlayerInfo[playerid][pVehAngle][i] = Angle;

			cUpdate(playerid, i, pVehLocX);
			cUpdate(playerid, i, pVehLocY);
			cUpdate(playerid, i, pVehLocZ);
			cUpdate(playerid, i, pVehAngle);
		}

		if(putplayerinvehicle != false)
		{
			PutPlayerInVehicleEx(playerid, PlayerInfo[playerid][pVehID][i], 0);
		}
	}
	return true;
}

stock SpawnPlayerVehicle(playerid, i, bool: free = false, bool: reset = false, bool: putplayerinvehicle = false)
{
	if(PlayerInfo[playerid][pVehID][i])
	{
		DestroyVehicleEx(PlayerInfo[playerid][pVehID][i]);
		DestroyNeon(PlayerInfo[playerid][pVehID][i]);
	}

	gString[0] = EOS;
	mysql_format(SQL, gString, 64, "SELECT * FROM `cars` WHERE `ID`='%d'", PlayerInfo[playerid][pVeh][i]);
	mysql_tquery(SQL, gString, "SpawnLoadedVehicle", "idbbbd", playerid, i, free, reset, putplayerinvehicle, PlayerInfo[playerid][pSession]);

	return true;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{

	if(dialogID[playerid] == -1)
		return AKick(playerid, "dialog spoofer");

	dialogID[playerid] = -1;

	new
		vehicleid = GetPlayerVehicleID(playerid),
		string[300]
	;

	for (new i = 0; i < strlen(inputtext); i ++)
	{
		if(inputtext[i] == '%')
		{
			inputtext[i] = '#';
		}
	}

	switch(dialogid)
	{	
		case DIALOG_JOBMASTER:
		{
			if(!response || listitem < 0)
				return true;

			new
				StatusId = Selected2[playerid],
				StatusesNames[2][10] = {"Primary", "Secondary"},
				StatusName[10],
				JobID = StatusDialog[playerid][listitem],
				ToSet = JobID + 15
			;

			if(ToSet == 15)
				return true;

			format(StatusName, sizeof(StatusName), "%s", StatusesNames[StatusId]);

			switch(StatusId)
			{
				case 0:
				{
					if(PlayerInfo[playerid][pActiveStatus][1] == ToSet)
						return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ai acest status ca Secondary Status deja.");
				}
				case 1:
				{
					if(PlayerInfo[playerid][pActiveStatus][0] == ToSet)
						return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ai acest status ca Primary Status deja.");
				}
			}

			PlayerInfo[playerid][pActiveStatus][StatusId] = ToSet;

			UpdateStatusLabel(playerid);

			SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ti-ai setat '%s Master' ca %s Status.", JobInfo[JobID][jName], StatusName);
		}
		case DIALOG_SELECTSTATUS:
		{
			if(!response || listitem < 0 || listitem > 11)
				return true;

			new
				StatusId = Selected2[playerid],
				StatusesNames[2][10] = {"Primary", "Secondary"},
				StatusName[10]
			;

			format(StatusName, sizeof(StatusName), "%s", StatusesNames[StatusId]);

			if(StatusId == 1 && PlayerInfo[playerid][pActiveStatus][0] == 0)
				return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ai nevoie de un Primary Status pentru a-ti pune un Secondary Status.");

			if(listitem != 0 && listitem != 11)
			{
				switch(StatusId)
				{
					case 0:
					{
						if(PlayerInfo[playerid][pActiveStatus][1] == listitem)
							return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ai acest status ca Secondary Status deja.");
					}
					case 1:
					{
						if(PlayerInfo[playerid][pActiveStatus][0] == listitem)
							return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ai acest status ca Primary Status deja.");
					}
				}
			}

			switch(listitem)
			{
				case 0:
				{
					if(StatusId == 0)
					{
						PlayerInfo[playerid][pActiveStatus][1] = 0;
						SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ti s-au sters toate status-urile.");
					}
					else
					{
						SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ti-ai sters Secondary Status-ul.");
					}
				}
				case 1:
				{
					if(PlayerInfo[playerid][pAdmin] < 1)
						return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Nu ai admin.");

					SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ti-ai setat 'Admin %d' ca %s Status.", PlayerInfo[playerid][pAdmin], StatusName);
				}
				case 2:
				{
					if(PlayerInfo[playerid][pHelper] < 1)
						return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Nu ai helper.");

					SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ti-ai setat 'Helper %d' ca %s Status.", PlayerInfo[playerid][pHelper], StatusName);
				}
				case 3:
				{
					if(PlayerInfo[playerid][pMember] < 1)
						return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Nu ai factiune.");

					if(PlayerInfo[playerid][pRank] < 7)
						return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Nu esti lider.");

					SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ti-ai setat 'Leader %s' ca %s Status.", FactionName(PlayerInfo[playerid][pMember]), StatusName);
				}
				case 4:
				{
					if(PlayerInfo[playerid][pMember] < 1)
						return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Nu ai factiune.");

					SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ti-ai setat '%s Rank %d' ca %s Status.", FactionName(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank], StatusName);
				}
				case 5:
				{
					SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ti-ai setat 'Level %d' ca %s Status", PlayerInfo[playerid][pLevel], StatusName);
				}
				case 6:
				{
					if(PlayerInfo[playerid][pConnectTime] < 500)
						return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Nu ai 500 de ore jucate.");

					SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ti-ai setat 'Veteran' ca %s Status", StatusName);
				}
				case 7:
				{
					if(PlayerInfo[playerid][pBizz] < 1)
						return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Nu ai o afacere.");

					SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ti-ai setat 'Businessmen' ca %s Status", StatusName);
				}
				case 8:
				{
					if(PlayerInfo[playerid][pPremium] != true)
						return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Nu ai cont premium.");

					SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ti-ai setat 'Premium User' ca %s Status", StatusName);
				}
				case 9:
				{
					if(PlayerInfo[playerid][pVIP] != true)
						return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Nu ai cont vip.");

					SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ti-ai setat 'VIP User' ca %s Status", StatusName);
				}
				case 10:
				{
					if(!HaveSupreme(playerid))
						return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Nu ai cont supreme.");

					SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Ti-ai setat 'Supreme User' ca %s Status", StatusName);
				}
				case 11:
				{
					new
						Current,
						TempString[320]
					;

					for(new i = 0; i <= MAX_JOBS; i++)
					{
						StatusDialog[playerid][i] = 0;
					}

					for(new i = 0; i <= MAX_JOBS; i++)
					{
						if(PlayerInfo[playerid][pSkills][i] == 6)
						{
							StatusDialog[playerid][Current] = i;

							format(TempString, sizeof(TempString), "%s\n%s", TempString, JobInfo[i][jName]);

							Current ++;
						}
					}

					if(Current < 1)
						return SendMsg(playerid, COLOR_SERVER, "Statuses >> {ffffff}Nu ai skill 6 la niciun job.");

					SPD(playerid, DIALOG_JOBMASTER, DIALOG_STYLE_LIST, "Job Master", TempString, "Alege", "Anuleaza");
				}
			}

			if(listitem != 11)
			{			
				PlayerInfo[playerid][pActiveStatus][StatusId] = listitem;

				if(listitem == 0 && StatusId == 0)
				{
					Delete3DTextLabel(StatusLabel[playerid]);
					StatusLabel[playerid] = INVALID_3DTEXT_ID;
				}
				else
				{			
					UpdateStatusLabel(playerid);
				}
			}

		}
		case DIALOG_STATUSES:
		{
			if(!response)
				return true;

			/*
				-Admin x
				-Helper x
				-Leader x
				-Faction (x) Rank y
				-Level x
				-Veteran (il poti equipa doar daca ai 500 ore+ jucate) 
				-Businessmen (daca detii un biz)
				-Premium User (daca ai cont premium)
				-VIP User (daca ai VIP)
				-Supreme User (daca ai supreme)
				-Job Master
			*/

			Selected2[playerid] = listitem;

			gString[0] = (EOS);
			format(gString, 200, "Sterge\nAdmin %d\nHelper %d\nLeader %s\nFaction %s Rank %d\nLevel %d\nVeteran\nBusinessmen\nPremium User\nVIP User\nSupreme User\nJob Master",
				PlayerInfo[playerid][pAdmin], PlayerInfo[playerid][pHelper], FactionName(PlayerInfo[playerid][pMember]), FactionName(PlayerInfo[playerid][pMember]),
				PlayerInfo[playerid][pRank], PlayerInfo[playerid][pLevel]);

			SPD(playerid, DIALOG_SELECTSTATUS, DIALOG_STYLE_LIST, "Select status", gString, "Alege", "Anuleaza");
		}
		case DIALOG_HOUSESELL:
		{
			if(!response)
				return true;

			new
				hid = PlayerInfo[playerid][pHouse],
				money = strval(inputtext)
			;
			if(money < 0 || money > 999_999_999)
				return SendMsg(playerid, COLOR_SERVER, "House Sell >> {ffffff}Suma invalida ($0 - $999,999,999).");

			HouseInfo[hid][hPrice] = money;

			Query_Mysql("UPDATE `houses` SET `Prices`='%d' WHERE `ID`='%d'", money, hid);

			UpdateLabel(1, hid);

			SendMsg(playerid, COLOR_SERVER, "House Sell >> {ffffff}Ti-ai pus casa la vanzare pentru $%s.", FormatNumber(money));
		}
		case DIALOG_MOVEGARAGE:
		{
			if(!response)
				return true;

			if(GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid))
				return Info(playerid, "Nu-ti poti pune Garajul aici.");

			new
				House = PlayerInfo[playerid][pHouse],
				Float: X,
				Float: Y,
				Float: Z
			;

			if(HouseInfo[House][hGarageX] == 0)
				return Info(playerid, "Casa ta nu are garaj.");

			GetPlayerPos(playerid, X, Y, Z);

			HouseInfo[House][hGarageX] = X;
			HouseInfo[House][hGarageY] = Y;
			HouseInfo[House][hGarageZ] = Z;
			Query_Mysql("UPDATE `houses` SET `GarageX` = '%f', `GarageY` = '%f', `GarageZ` = '%f' WHERE `ID` = '%d'", X, Y, Z, House);
			UpdateLabel(1, House);
			Info(playerid, "Ti-ai mutat garajul casei in aceasta pozitie.", House);
		}
		case DIALOG_HOUSEEVICT:
		{
			if(!response)
				return true;

			Query_Mysql("UPDATE users SET `Rented`='-1', `SpawnChange` = '0' WHERE `Rented`='%d'", PlayerInfo[playerid][pHouse]);

			foreach(new i : Player)
			{
				if(PlayerInfo[i][pRented] == PlayerInfo[playerid][pHouse])
				{
					SendMsg(i, COLOR_SERVER, "House Evict >> {ffffff}Ai fost dat afara din chirie.");
					PlayerInfo[i][pRented] = -1;
					PlayerInfo[i][pSpawnChange] = 0;
				}
			}

			SendMsg(playerid, COLOR_SERVER, "House Evict >> {ffffff}Ai dat afara toti chiriasii.");
		}
		case DIALOG_HOUSERENT:
		{
			if(!response)
				return true;

			new
				bouse = PlayerInfo[playerid][pHouse],
				fee = strval(inputtext)
			;
			if(fee < 0 || fee > 100000)
				return SendMsg(playerid, COLOR_SERVER, "House Rent >> {ffffff}Minim $0, maxim $100,000.");

			HouseInfo[bouse][hRent] = fee;

			Query_Mysql("UPDATE `houses` SET `Rent`='%d' WHERE `ID`='%d'", fee, bouse);

			UpdateLabel(1, PlayerInfo[playerid][pHouse]);

			SendMsg(playerid, COLOR_SERVER, "House Rent >> {ffffff}Chirie setata la $%s.", FormatNumber(HouseInfo[bouse][hRent]));
		}
		case DIALOG_HOUSEWITHDRAW:
		{
			if(!response)
				return true;

			new
				bouse = PlayerInfo[playerid][pHouse],
				moneyhouse
			;

			if(moneyhouse < 1 || moneyhouse > HouseInfo[bouse][hTakings])
				return SendMsg(playerid, COLOR_SERVER, "House Withdraw >> {ffffff}Suma invalida.");

			GivePlayerCash(playerid,moneyhouse);

			HouseInfo[bouse][hTakings] -= moneyhouse;

			Query_Mysql("UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d'",HouseInfo[bouse][hTakings],HouseInfo[bouse][hID]);

			SendMsg(playerid, COLOR_SERVER, "House Withdraw >> {ffffff}Ai scos $%s din seiful casei.", FormatNumber(moneyhouse));
		}
		case DIALOG_HOUSEMENU:
		{
			if(!response)
				return true;

			new
				House = PlayerInfo[playerid][pHouse]
			;

			switch(listitem)
			{
				case 0:
				{
					new
						TempString[64]
					;

					format(TempString, sizeof(TempString), "Ai $%s in balanta casei.", FormatNumber(HouseInfo[House][hTakings]));

					SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "House Balance", TempString, "Iesi", "");
				}
				case 1:
				{
					SPD(playerid, DIALOG_HOUSEWITHDRAW, DIALOG_STYLE_INPUT, "House Withdraw", "Introdu suma pe care vrei sa o retragi:", "Inainte", "Anuleaza");
				}
				case 2:
				{
					new
						TempString[64]
					;

					format(TempString, sizeof(TempString), "Introdu noua chirie:\nChirie actuala: $%s", FormatNumber(HouseInfo[House][hRent]));

					SPD(playerid, DIALOG_HOUSERENT, DIALOG_STYLE_INPUT, "House Rent", TempString, "Inainte", "Anuleaza");
				}
				case 3:
				{
					gString[0] = (EOS);

					format(gString, sizeof(gString), "Chiriasi online:");

					foreach(new i : Player)
					{
						if(PlayerInfo[i][pRented] == PlayerInfo[playerid][pHouse])
						{
							format(gString, sizeof(gString), "%s\n(%d) %s", gString, i, GetName(i));
						}
					}

					SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "House Renters", gString, "Iesi", "");
				}
				case 4:
				{
					SPD(playerid, DIALOG_HOUSEEVICT, DIALOG_STYLE_MSGBOX, "House Evict", "Vrei sa dai afara toti chiriasii?", "Inainte", "Anuleaza");
				}
				case 5:
				{
					if(HouseInfo[House][hGarageX] != 0)
						return SendMsg(playerid, COLOR_SERVER, "Buy Garage >> {ffffff}Casa ta are deja garaj.");

					if(PlayerInfo[playerid][pPremiumPoints] < 500)
						return SendMsg(playerid, COLOR_SERVER, "Buy Garage >> {ffffff}Nu ai 500PP.");

					if(GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid))
						return SendMsg(playerid, COLOR_SERVER, "Buy Garage >> {ffffff}Nu-ti poti pune Garajul aici.");

					SPD(playerid, DIALOG_BUYGARAGE, DIALOG_STYLE_MSGBOX, "Buy Garage", "Vrei sa cumperi Garajul in aceasta pozitie?\nPretul garajului este de 500PP.", "Inainte", "Anuleaza");
				}
				case 6:
				{
					if(HouseInfo[House][hGarageX] == 0)
						return SendMsg(playerid, COLOR_SERVER, "Move Garage >> {ffffff}Casa ta nu are garaj.");

					if(GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid))
						return SendMsg(playerid, COLOR_SERVER, "Move Garage >> {ffffff}Nu-ti poti pune Garajul aici.");

					SPD(playerid, DIALOG_MOVEGARAGE, DIALOG_STYLE_MSGBOX, "Move Garage", "Vrei sa muti Garajul in aceasta pozitie?", "Inainte", "Anuleaza");
				}
				case 7:
				{
					if(HouseInfo[House][hGarageX] == 0)
						return SendMsg(playerid, COLOR_SERVER, "Lock Garage >> {ffffff}Casa ta nu are garaj.");

					HouseInfo[House][hGarageLocked] = !HouseInfo[House][hGarageLocked];

					switch(HouseInfo[House][hGarageLocked])
					{
						case false:
						{
							SendMsg(playerid, COLOR_SERVER, "Lock Garage >> {ffffff}Garajul casei tale este acum descuiat.");
						}
						case true:
						{
							SendMsg(playerid, COLOR_SERVER, "Lock Garage >> {ffffff}Garajul casei tale este acum incuiat..");
						}
					}

					Query_Mysql("update houses set GarageLocked = %d where id = %d", HouseInfo[House][hGarageLocked], House);

					UpdateLabel(1, House);
				}
				case 8:
				{
					new
						TempString[64]
					;

					format(TempString, sizeof(TempString), "Introdu noul pret:\nPretul actual: $%s", FormatNumber(HouseInfo[House][hPrice]));

					SPD(playerid, DIALOG_HOUSESELL, DIALOG_STYLE_INPUT, "House Sell", TempString, "Inainte", "Anuleaza");
				}
				case 9:
				{
					SellHouseID[playerid] = PlayerInfo[playerid][pHouse];
					SPD(playerid, DIALOG_SELLHOUSETOSTATE, DIALOG_STYLE_MSGBOX, "Vanzarea casei la stat", "Vrei sa-ti vinzi casa la stat pentru $0?", "Da", "Nu");
				}
			}
		}
		case DIALOG_BIZSELL:
		{
			if(!response)
				return true;

			new
				biz = PlayerInfo[playerid][pBizz],
				money = strval(inputtext)
			;

			if(money < 0 || money > 999999999)
				return SendMsg(playerid, COLOR_SERVER, "Biz Sell >> {ffffff}Suma invalida ($0 - $999,999,999).");

			BizzInfo[biz][bPrice] = money;

			Query_Mysql("update `bizz` SET `Prices`='%d' where `ID`='%d'", money, biz);

			UpdateLabel(2, biz);

			SendMsg(playerid, COLOR_SERVER, "Biz Sell >> {ffffff}Ti-ai pus afacerea la vanzare pentru $%s.", FormatNumber(money));
		}
		case DIALOG_BIZFEE:
		{
			if(!response)
				return true;

			new
				Biz = PlayerInfo[playerid][pBizz],
				fee = strval(inputtext)
			;

			if(fee < 1 || fee > 50_000)
				return SendMsg(playerid, COLOR_SERVER, "Biz Fee >> {ffffff}Suma invalida($1 - $50,000).");

			BizzInfo[Biz][bEntranceCost] = fee;

			Query_Mysql("update `bizz` SET `EntranceCost` = '%d' where `ID` = '%d'", BizzInfo[Biz][bEntranceCost], Biz);

			UpdateLabel(2, Biz);

			SendMsg(playerid, COLOR_SERVER, "Biz Fee >> {ffffff}Intrare setata la $%s.", FormatNumber(BizzInfo[Biz][bEntranceCost]));
		}
		case DIALOG_BIZWITHDRAW:
		{
			if(!response)
				return true;

			new
				Biz = PlayerInfo[playerid][pBizz],
				val = strval(inputtext)
			;

			if(val < 1 || val > BizzInfo[Biz][bTill])
				return SendMsg(playerid, COLOR_SERVER, "Biz Withdraw >> {ffffff}Suma invalida.");

			GivePlayerCash(playerid, val);

			BizzInfo[Biz][bTill] -= val;

			Query_Mysql("update `bizz` SET `Till` = '%d' where `ID` = '%d'", BizzInfo[Biz][bTill], Biz);

			SendMsg(playerid, COLOR_SERVER, "Biz Withdarw >> {ffffff}Ai retras $%s din afacerea ta, ti-a mai ramas $%s.", FormatNumber(val), FormatNumber(BizzInfo[Biz][bTill]));
		}
		case DIALOG_BIZMENU:
		{
			if(!response || listitem < 0)
				return true;

			new
				Biz = PlayerInfo[playerid][pBizz]
			;

			switch(listitem)
			{
				case 0:
				{
					new
						TempString[64]
					;

					format(TempString, sizeof(TempString), "Ai $%s in balanta afacerii.", FormatNumber(BizzInfo[Biz][bTill]));

					SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Biz Balance", TempString, "Iesi", "");
				}
				case 1:
				{
					SPD(playerid, DIALOG_BIZWITHDRAW, DIALOG_STYLE_INPUT, "Biz Withdraw", "Introdu suma pe care vrei sa o retragi:", "Inainte", "Anuleaza");
				}
				case 2:
				{
					new
						TempString[64]
					;

					format(TempString, sizeof(TempString), "Introdu noua intrare:\nIntrare actuala: $%s", FormatNumber(BizzInfo[Biz][bEntranceCost]));

					SPD(playerid, DIALOG_BIZFEE, DIALOG_STYLE_INPUT, "Biz Fee", TempString, "Inainte", "Anuleaza");
				}
				case 3:
				{
					new
						TempString[64]
					;

					format(TempString, sizeof(TempString), "Introdu noul pret:\nPret actual: $%s", FormatNumber(BizzInfo[Biz][bPrice]));

					SPD(playerid, DIALOG_BIZSELL, DIALOG_STYLE_INPUT, "Biz Price", TempString, "Inainte", "Anuleaza");
				}
				case 4:
				{
					SellHouseID[playerid] = PlayerInfo[playerid][pBizz];
				 	SPD(playerid, DIALOG_SELLBIZTOSTATE, DIALOG_STYLE_MSGBOX, "Vanzare afacere la stat", "Vrei sa-ti vinzi afacerea la stat pentru $0?", "Da", "Nu");
				}
			}
		}
		case DIALOG_BUYPOTIONS:
		{
			if(!response || listitem < 0 || listitem > 2)
				return true;

			new
				Prices[3] = {50, 60, 75},
				Names[3][10] = {"Common", "Epic", "Legendary"}
			;

			if(PlayerInfo[playerid][pPremiumPoints] < Prices[listitem])
				return SendMsg(playerid, COLOR_SERVER, "Cumparare Potiuni >> {ffffff}Nu ai %d puncte premium.", Prices[listitem]);

			GivePlayerPP(playerid, - Prices[listitem]);

			PlayerInfo[playerid][pPotions][listitem] ++;

			SendMsg(playerid, COLOR_SERVER, "Cumparare Potiuni >> {ffffff}Ai cumparat %s Potion pentru %dPP.", Names[listitem], Prices[listitem]);
		}
		case DIALOG_GARAGESPAWN:
		{
			if(!response || listitem < 0)
				return true;

			new
				slot = GarageSpawn[playerid][listitem]
			;

			SpawnPlayerVehicle(playerid, slot, true, false, true);
		}
		case DIALOG_STAFF:
		{
			if(!response || listitem < 0 || listitem > 2)
				return true;

			gString[0] = (EOS);

			switch(listitem)
			{
				case 0:
				{
					mysql_format(SQL, gString, 64, "select * from users where Admin <> 0");
					mysql_tquery(SQL, gString, "ShowStaffPlayers", "ddd", playerid, PlayerInfo[playerid][pSession], listitem);
				}
				case 1:
				{
					mysql_format(SQL, gString, 64, "select * from users where Helper <> 0");
					mysql_tquery(SQL, gString, "ShowStaffPlayers", "ddd", playerid, PlayerInfo[playerid][pSession], listitem);
				}
				case 2:
				{
					mysql_format(SQL, gString, 64, "select * from users where Rank = 7");
					mysql_tquery(SQL, gString, "ShowStaffPlayers", "ddd", playerid, PlayerInfo[playerid][pSession], listitem);
				}
			}
		}
		case DIALOG_TRADE_VOUCHER:
		{
			if(!response || listitem < 0 || listitem > 4)
				return true;

			new
				Names[5][10] = {"Normal", "Epic", "Premium", "Legendary", "OG"}
			;

			if(PlayerInfo[playerid][pVouchers][listitem] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Trade Voucher >> {ffffff}Nu ai un %s Voucher.", Names[listitem]);

			AddTradeItem(playerid, 7, listitem);
		}
		case DIALOG_BUYVOUCHERS2:
		{
			if(!response)
				return true;

			new
				item = Selected2[playerid],
				Names[5][10] = {"Normal", "Epic", "Premium", "Legendary", "OG"},
				SumaVoucher[5] = {50, 100, 250, 500, 1000},
				PretVoucher = floatround(SumaVoucher[item] + (0.2 * SumaVoucher[item]))
			;

			if(HavePremium(playerid))
			{
				PretVoucher = floatround(SumaVoucher[item] + (0.1 * SumaVoucher[item]));
			}

			if(PlayerInfo[playerid][pPremiumPoints] < PretVoucher)
				return SendMsg(playerid, COLOR_SERVER, "Cumparare Voucher >> {ffffff}Nu ai %dPP pentru a cumpara un %s Voucher.", PretVoucher, Names[item]);

			PlayerInfo[playerid][pVouchers][item] ++;

			GivePlayerPP(playerid, - PretVoucher);

			SendMsg(playerid, COLOR_SERVER, "Cumparare Voucher >> {ffffff}Ai cumparat un %s Voucher de %dPP pentru %dPP.", Names[item], SumaVoucher[item], PretVoucher);
		}
		case DIALOG_BUYVOUCHERS:
		{
			if(!response || listitem < 0 || listitem > 4)
				return true;

			new
				Names[5][10] = {"Normal", "Epic", "Premium", "Legendary", "OG"},
				SumaVoucher[5] = {50, 100, 250, 500, 1000},
				PretVoucher = floatround(SumaVoucher[listitem] + (0.2 * SumaVoucher[listitem]))
			;

			if(HavePremium(playerid))
			{
				PretVoucher = floatround(SumaVoucher[listitem] + (0.1 * SumaVoucher[listitem]));

				SendMsg(playerid, COLOR_SERVER, "Cumparare Voucher >> {ffffff}Ai primit o reducere de 10% deoarece ai cont premium.");
			}

			if(PlayerInfo[playerid][pPremiumPoints] < PretVoucher)
				return SendMsg(playerid, COLOR_SERVER, "Cumparare Voucher >> {ffffff}Nu ai %dPP pentru a cumpara un %s Voucher.", PretVoucher, Names[listitem]);

			gString[0] = (EOS);
			format(gString, 128, "Esti sigur ca doresti sa cumperi un %s Voucher de %dpp?\nAtentie, vei plati %d de pp-uri pentru acesta!",
				Names[listitem], SumaVoucher[listitem], PretVoucher);

			SPD(playerid, DIALOG_BUYVOUCHERS2, DIALOG_STYLE_MSGBOX, "Cumparare Voucher", gString, "Da", "Anuleaza");

			Selected2[playerid] = listitem;
		}
		case DIALOG_VOUCHERS:
		{
			if(!response || listitem < 0 || listitem > 4)
				return true;

			new
				Names[5][10] = {"Normal", "Epic", "Premium", "Legendary", "OG"},
				Pps[5] = {50, 100, 250, 500, 1000}
			;

			if(PlayerInfo[playerid][pVouchers][listitem] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Vouchers >> {ffffff}Nu ai un %s Voucher.", Names[listitem]);

			PlayerInfo[playerid][pVouchers][listitem] --;

			GivePlayerPP(playerid, Pps[listitem]);

			SendMsg(playerid, COLOR_SERVER, "Vouchers >> {ffffff}Ai folosit un %s Voucher si ai primit %d premium points.", Names[listitem], Pps[listitem]);
		}
		case DIALOG_UPDATES:
		{
			if(!response || listitem < 0)
				return true;

			switch(listitem)
			{
				case 0:
				{
					gString[0] = (EOS);

					strcat(gString, "1. Winter Quest\n");
					strcat(gString, "2. Unfreeze Crate\n");

					SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Februarie 2024", gString, "Iesi", "");
				}
			}
		}
		case DIALOG_POTIONS:
		{
			if(!response || listitem < 0)
				return true;

			new
				DialogText[3][95] =
				{
					"Primesti x2 la job pentru 24 de ore",
					"Primesti x2 la payday pentru 24 de ore",
					"Primesti x2 la quest, trivia, crates, spin, gift pentru 24 de ore"
				}
			;

			Selected2[playerid] = listitem;
			SPD(playerid, DIALOG_POTIONS2, DIALOG_STYLE_MSGBOX, "Potions", DialogText[listitem], "Inainte", "Anuleaza");
		}
		case DIALOG_POTIONS2:
		{
			if(!response)
				return true;

			new
				selected = Selected2[playerid],
				PotionText[3][10] = 
				{
					"Common",
					"Epic", 
					"Legendary"
				}
			;

			if(PlayerInfo[playerid][pPotions][selected] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Nu ai %s potion.", PotionText[selected]);

			if(PlayerInfo[playerid][pActivePotions][selected] > gettime())
				return SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Deja folosesti aceasta potiune.");

			PlayerInfo[playerid][pPotions][selected] --;
			PlayerInfo[playerid][pActivePotions][selected] = gettime() + 86400;

			SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Ai folosit %s potion.", PotionText[selected]);
		}
		case DIALOG_BUYECS:
		{
			if(!response)
				return true;

			new
				amount = strval(inputtext),
				price = amount * 50_000
			;

			if(amount < 1 || amount > 10)
				return SPD(playerid, DIALOG_BUYECS, DIALOG_STYLE_INPUT, "Ecstasy", "Introdu cantitatea de Ecstasy dorita: (1 - 10)\nVei plati $50,000 pentru fiecare bucata.", "Alege", "Anuleaza");

			if(GetPlayerCash(playerid) < price)
			{				
				SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Nu ai $%s.", FormatNumber(price));
				SPD(playerid, DIALOG_BUYECS, DIALOG_STYLE_INPUT, "Ecstasy", "Introdu cantitatea de Ecstasy dorita: (1 - 10)\nVei plati $50,000 pentru fiecare bucata.", "Alege", "Anuleaza");
				
				return true;
			}

			GivePlayerCash(playerid, - price);
			GiveJobBalance(3, price);
			PlayerInfo[playerid][pDrugs][3] += amount;

			SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Ai cumparat %dx Ecstasy pentru $%s.", amount, FormatNumber(price));
		}
		case DIALOG_BUYMETH:
		{
			if(!response)
				return true;

			new
				amount = strval(inputtext),
				price = amount * 200_000
			;

			if(amount < 1 || amount > 10)
				return SPD(playerid, DIALOG_BUYMETH, DIALOG_STYLE_INPUT, "Meth", "Introdu cantitatea de Meth dorita: (1 - 10)\nVei plati $200,000 pentru fiecare bucata.", "Alege", "Anuleaza");

			if(GetPlayerCash(playerid) < price)
			{				
				SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Nu ai $%s.", FormatNumber(price));
				SPD(playerid, DIALOG_BUYMETH, DIALOG_STYLE_INPUT, "Meth", "Introdu cantitatea de Meth dorita: (1 - 10)\nVei plati $200,000 pentru fiecare bucata.", "Alege", "Anuleaza");
				
				return true;
			}

			FreezePlayer(playerid, true);

			MethAmouth[playerid] = amount;

			SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Asteapta 10 secunde pentru prelucrare...");

			defer UnfreezeDDealer[10000](playerid, PlayerInfo[playerid][pSession], 3);
		}
		case DIALOG_GETDRUGS:
		{
			if(!response || listitem < 0 || listitem > 3)
				return true;

			if(HaveCheckpoint(playerid))
				return true;

			switch(listitem)
			{
				case 0:
				{
					DDActualCP[playerid] = 0;
					SetPlayerCheckpointEx(playerid, WeedTaskCPs[0][0], WeedTaskCPs[0][1], WeedTaskCPs[0][2], 2);
					CP[playerid] = 379;
					SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Urmeaza punctele rosii pentru a planta.");
				}
				case 1:
				{
					SetPlayerCheckpointEx(playerid, -49.9590, -269.3626, 6.6332, 2);
					CP[playerid] = 381;
					SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Urmeaza punctul rosu pentru a lua materialele necesare.");
				}
				case 2:
				{
					DDActualCP[playerid] = 0;
					SetPlayerCheckpointEx(playerid, CocaTaskCPs[0][0], CocaTaskCPs[0][1], CocaTaskCPs[0][2], 2);
					CP[playerid] = 383;
					SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Urmeaza punctele rosii pentru lua frunzele.");
				}
				case 3:
				{
					SetPlayerCheckpointEx(playerid, 2537.6443, -1436.1056, 24.0000, 2);
					CP[playerid] = 385;
					SendMsg(playerid, COLOR_SERVER, "Drug Dealer >> {ffffff}Urmeaza punctul rosu pentru a cumpara Ecstasy.");
				}
			}
		}
		case DIALOG_MYDRUGS:
		{
			if(!response || listitem < 0 || listitem > 3)
				return true;

			if(PlayerInfo[playerid][pDrugs][listitem] < 1)
				return SendMsg(playerid, COLOR_SERVER, "My Drugs >> {ffffff}Nu ai %s.", DrugNames[listitem]);

			if(GetPlayerHP(playerid) >= 100)
				return SendMsg(playerid, COLOR_SERVER, "My Drugs >> {ffffff}Ai viata plina.");

			new
				DrugTime[4] = {3, 10, 15, 5}
			;

			FreezePlayer(playerid, true);
			SetPlayerDrunkLevel(playerid, 4000);
			UsingDrugs[playerid] = listitem;
			PlayerInfo[playerid][pDrugs][listitem] --;
			defer DrugEffectGone[DrugTime[listitem] * 1000](playerid, PlayerInfo[playerid][pSession], listitem);
		}
		case DIALOG_PREMIUMSHOP:
		{
			if(!response || listitem < 0 || listitem > 14)
				return true;

			if(listitem < 13)
			{
				new
					ItemPrice = GetShopPrice(playerid, listitem)
				;

				if(PlayerInfo[playerid][pPremiumPoints] < ItemPrice)
					return SendMsg(playerid, COLOR_SERVER, "Premium Shop >> {ffffff}Nu ai %d puncte premium.", ItemPrice);
			}

			switch(listitem)
			{
				case 0:
				{
					if(HavePremium(playerid))
						return SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ai deja cont premium.");

					if(PlayerInfo[playerid][pVehSlots] <= MAX_PERSONAL_VEHICLES - 2)
					{
						PlayerInfo[playerid][pVehSlots] += 2;
					}
					if(PlayerInfo[playerid][pVehSlots] == MAX_PERSONAL_VEHICLES - 1)
					{
						PlayerInfo[playerid][pVehSlots] ++;
					}
					PlayerInfo[playerid][pPremium] = true;
					pUpdateInt(playerid, "Premium", PlayerInfo[playerid][pPremium]);
					pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pVehSlots]);
					FinishAchievement(playerid, 7);
					Iter_Add(Premiums, playerid);
					SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ti-ai cumparat cont premium.");
					SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ai primit un vehicul de tip Sandking.");
					InsertVehicle(playerid, 53, true);
					BuyFromShop(playerid, 0);
				}
				case 1:
				{
					SPD(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Change name:", "Please enter your desired name below:", "Ok", "Cancel");
				}
				case 2:
				{
					if(PlayerInfo[playerid][pFpunish] <= 0) return Info(playerid, "Nu ai FP.");
					PlayerInfo[playerid][pFpunish] = 0;
					pUpdateInt(playerid, "FPunish", 0);
					SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ti-ai cumparat clear fp.");
					BuyFromShop(playerid, 2);
				}
				case 3:
				{
					if(PlayerInfo[playerid][pWarns] <= 0) return Info(playerid, "Nu ai Warn.");
					PlayerInfo[playerid][pWarns] = 0;
					pUpdateInt(playerid, "Warnings", PlayerInfo[playerid][pWarns]);
					SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ti-ai cumparat clear warns.");
					BuyFromShop(playerid, 3);
				}
				case 4:
				{
					if(PlayerInfo[playerid][pVehSlots] >= MAX_PERSONAL_VEHICLES) return Info(playerid, "Nu poti avea mai mult de %d sloturi.", MAX_PERSONAL_VEHICLES);
					PlayerInfo[playerid][pVehSlots] ++;
					pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pVehSlots]);
					SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ti-ai cumparat un vehicle slot.");
					BuyFromShop(playerid, 4);
				}
				case 5:
				{
					SPD(playerid, DIALOG_BUYWALKIE, DIALOG_STYLE_INPUT, "Buy frequency", "Alege frecventa: (100-999)", "Buy", "Close");
				}
				case 6:
				{
					if(serverClans + 1 >= MAX_CLANS) return SendMsg(playerid, COLOR_SERVER, "Clans >> {ffffff}S-a atins numarul maxim de clanuri.");
					if(PlayerInfo[playerid][pClan]) return Info(playerid, "Deja esti intr-un clan.");
					SPD(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Scrie mai jos numele pe care il doresti clanului.", "Ok", "");
				}
				case 7:
				{
					if(HaveVIP(playerid))
						return SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ai deja cont vip.");

					SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ti-ai cumparat cont vip.");

					PlayerInfo[playerid][pVIP] = true;
					pUpdateInt(playerid, "VIP", PlayerInfo[playerid][pVIP]);

					Iter_Add(Vips, playerid);

					if(PlayerInfo[playerid][pVehSlots] < MAX_PERSONAL_VEHICLES)
					{
						PlayerInfo[playerid][pVehSlots] ++;
						SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ai primit un slot de vehicule.");
					}
					pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pVehSlots]);

					GivePlayerHiddens(playerid, 1);
					SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ai primit o culoare hidden.");

					BuyFromShop(playerid, 7);
				}
				case 8:
				{
					PlayerInfo[playerid][pJobBoost] += 10;
					pUpdateInt(playerid, "JobBoost", PlayerInfo[playerid][pJobBoost]);
					SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ti-ai cumparat 10 ore de JobBoost.");
					BuyFromShop(playerid, 8);
				}
				case 9:
				{
					if(PlayerInfo[playerid][pPet]) return Info(playerid, "Ai deja un pet."); 
					PlayerInfo[playerid][pPet] = true;
					pUpdateInt(playerid, "Pet", PlayerInfo[playerid][pPet]);
					PlayerInfo[playerid][pPetlevel] = 1;
					pUpdateInt(playerid, "Petlevel", 1);
					format(PlayerInfo[playerid][pPetName], 30, "Pet");
					pUpdateStr(playerid, "PetName", PlayerInfo[playerid][pPetName]);
					SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ti-ai cumparat Pet.");
					BuyFromShop(playerid, 9);
				}
				case 10:
				{
					if(PlayerInfo[playerid][pSkinSlots] >= MAX_SKINS) return Info(playerid, "Ai maximul de sloturi de skin-uri.");
					PlayerInfo[playerid][pSkins][PlayerInfo[playerid][pSkinSlots]] = DefaultSkin;
					PlayerInfo[playerid][pSkinSlots] ++;
					pUpdateInt(playerid, "SkinSlots", PlayerInfo[playerid][pSkinSlots]);
					SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ti-ai cumparat un skin slot.");
					BuyFromShop(playerid, 10);
				}
				case 11:
				{
					if(HaveSupreme(playerid))
					{
						PlayerInfo[playerid][pSupreme] += 2_592_000;
					}
					else
					{
						PlayerInfo[playerid][pSupreme] = gettime() + 2_592_000;
					}

					pUpdateInt(playerid, "Supreme", PlayerInfo[playerid][pSupreme]);

					GivePlayerCrate(playerid, 8);

					SendMsg(playerid, COLOR_SERVER, "Supreme >> {ffffff}Ai primit un Supreme Crate.");

					SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ti-ai cumparat cont supreme pentru 30 de zile.");

					BuyFromShop(playerid, 11);
				}
				case 12:
				{
					GivePlayerHiddens(playerid, 1);

					SendMsg(playerid, COLOR_SERVER, "Shop >> {ffffff}Ti-ai cumparat o culoare hidden.");

					BuyFromShop(playerid, 12);
				}
				case 13:
				{	
					SPD(playerid, DIALOG_BUYVOUCHERS, DIALOG_STYLE_LIST,
						"Cumparare voucher", "Normal - 60PP\nEpic - 120PP\nPremium - 300PP\nLegendary - 600PP\nOG - 1200PP", "Alege", "Anuleaza");
				}
				case 14:
				{	
					SPD(playerid, DIALOG_BUYPOTIONS	, DIALOG_STYLE_LIST,
						"Cumparare potiuni", "Common - 50PP\nEpic - 60PP\nLegendary - 75PP", "Alege", "Anuleaza");
				}
			}
		}
		case DIALOG_LESTER:
		{
			if(!response)
				return true;

			new
				price = PlayerInfo[playerid][pWantedLevel] * 20_000_000
			;

			if(GetPlayerCash(playerid) < price)
				return SendMsg(playerid, COLOR_SERVER, "Lester >> {ffffff}Ai nevoie de $%s.", FormatNumber(price));

			GivePlayerCash(playerid, -price);
			SendMsg(playerid, COLOR_SERVER, "Lester >> {ffffff}Ai platit $%s pentru a scapa de cele %d stele de wanted.", FormatNumber(price), PlayerInfo[playerid][pWantedLevel]);

			SendFamilyMessage(1, COLOR_SERVER, "Dispecerat >> %s si-a sters Wanted-ul.", GetName(playerid));			
			PlayerInfo[playerid][pWantedLevel] = 0;
			WantedPoints[playerid] = 0;
			PlayerTextDrawHide(playerid, WantedText);
			ClearCrime(playerid);
			SetPlayerWantedLevel(playerid, 0);
			pUpdateInt(playerid, "WantedLevel", 0);
		}
		case DIALOG_CLANHQS:
		{
			if(!response)
				return true;

			if(HaveCheckpoint(playerid))
				return true;

			new
				item = listitem + 1
			;

			SetPlayerCheckpointEx(playerid, ClanHQs[item][cX], ClanHQs[item][cY], ClanHQs[item][cZ], 3);
			CP[playerid] = 43;
			SendMsg(playerid, COLOR_SERVER, "Find Clan HQ >> {ffffff}Urmeaza punctul rosu pentru a ajunge la clan hq-ul %s.", ClanInfo[ClanHQs[item][cOwnerID]][clanName]);
		}
		case DIALOG_SETCLANTAG:
		{
			if(!response) return true;
			if(!ValidClanTag(inputtext))
				return SPD(playerid, DIALOG_SETCLANTAG, DIALOG_STYLE_INPUT, "Set Clan Tag", "Introdu clan tag-ul dorit:", "Inainte", "Anuleaza");

			new
				escaped[5]
			;

			gString[0] = (EOS);
			mysql_escape_string(inputtext, escaped);
			mysql_format(SQL, gString, sizeof gString, "SELECT * FROM `clans` WHERE `clanTag` = '%s'", escaped);
			mysql_tquery(SQL, gString, "checkClanTag", "dsdd", playerid, escaped, 2, PlayerInfo[playerid][pSession]);
		}
		case DIALOG_ACTIVATEBATTLEPASS:
		{
			if(!response)
				return true;

			PlayerInfo[playerid][pBattlepassType] = 1;
			pUpdateInt(playerid, "BattlepassType", PlayerInfo[playerid][pBattlepassType]);


			PlayerInfo[playerid][pBattlepassPremiums] --;
			pUpdateInt(playerid, "BattlepassPremiums", PlayerInfo[playerid][pBattlepassPremiums]);

			SendMsg(playerid, COLOR_SERVER, "Battlepass >> {ffffff}Ti-ai activat Premium Battlepass-ul.");
		}
		case DIALOG_DISCORD:
		{
			if(!response)
			{
				if(strmatch(PlayerInfo[playerid][pDiscord], "NoDiscord"))
				{
					return true;
				}
				else
				{
					format(PlayerInfo[playerid][pDiscord], 64, "NoDiscord");
					pUpdateStr(playerid, "Discord", PlayerInfo[playerid][pDiscord]);
					SendMsg(playerid, COLOR_SERVER, "Set Discord >> {ffffff}Ti-ai sters discord-ul.");
				}
			}
			else
			{
				if(strlen(inputtext) < 5 || strlen(inputtext) >= 63)
					return SendMsg(playerid, COLOR_SERVER, "Set Discord >> {ffffff}Discord-ul este invalid.(5-63 caractere)");

				format(PlayerInfo[playerid][pDiscord], 64, inputtext);
				pUpdateStr(playerid, "Discord", PlayerInfo[playerid][pDiscord]);
			}
		}
		case DIALOG_FARMER:
		{
			if(!response)
				return true;

			switch(listitem)
			{
				case 0:
				{
					FarmerCheckpoint[playerid] = 0;
					SetPlayerCheckpointEx(playerid, GrauFarmerObjects[0][0], GrauFarmerObjects[0][1], GrauFarmerObjects[0][2] - 2, 2);
					CP[playerid] = 372;
					SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Urmeaza punctele rosii pentru a planta graul.");
				}
				case 1:
				{
					if(FarmerApples[playerid])
						return SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Ai deja mere, vinde-le la un Non-Stop.");

					FarmerCheckpoint[playerid] = 0;
					SetPlayerCheckpointEx(playerid, MereFarmer[0][0], MereFarmer[0][1], MereFarmer[0][2], 2);
					CP[playerid] = 376;
					SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Urmeaza punctele rosii pentru a culege merele.");
				}
				case 2:
				{
					FarmerCheckpoint[playerid] = 0;
					SetPlayerCheckpointEx(playerid, 1931.8022, 147.6382, 37.2813, 2);
					CP[playerid] = 377;
					SendMsg(playerid, COLOR_SERVER, "Farmer >> {ffffff}Urmeaza punctul rosu pentru a lua o galeata.");
				}
			}
		}
		case DIALOG_ATEVENT:
		{
			if(!response)
				return true;

			new
				Comanda
			;

			foreach(new i : AtEvent)
			{
				if(listitem == Comanda)
				{
					if(!Iter_Contains(AtEvent, i))
						return SendMsg(playerid, COLOR_SERVER, "AtEvent >> {ffffff}Acel jucator nu mai este la eveniment.");

					va_SendClientMessageToAll(0xFF8080FF, "%s >> %s este castigatorul evenimentului.", GetName(playerid), GetName(i));

					Iter_Remove(AtEvent, i);

					break;
				}
				Comanda ++;
			}
		}
		case DIALOG_CREATORCODE1:
		{
			if(!response) return true;
			switch(listitem)
			{
				case 0:
				{
					SPD(playerid, DIALOG_CREATORCODE2, DIALOG_STYLE_INPUT, "Creator Code", "Intordu un Creator Code:", "Inainte", "Anuleaza");
				}
				case 1:
				{
					if(!strmatch(PlayerInfo[playerid][pCreatorCode], "NoCreatorCode"))
					{
						format(PlayerInfo[playerid][pCreatorCode], strlen("NoCreatorCode") + 1, "NoCreatorCode");
						pUpdateStr(playerid, "CreatorCode", PlayerInfo[playerid][pCreatorCode]);
						SendMsg(playerid, COLOR_SERVER, "Remove Creator Code >> {ffffff}Ti-ai sters Creator Code-ul adaugat.");
					}
					else
					{
						SendMsg(playerid, COLOR_SERVER, "Remove Creator Code >> {ffffff}Nu ai un Creator Code adaugat.");
					}
				}
			}
		}
		case DIALOG_CREATORCODE2:
		{
			if(!response) return true;
			if(strlen(inputtext) < 1 || strlen(inputtext) >= 32) return SendMsg(playerid, COLOR_SERVER, "Add Creator Code >> {ffffff}Codul este prea scurt / lung.");
			gString[0] = (EOS);
			mysql_format(SQL, gString, sizeof(gString), "select * from creatorcodes where CodeName = '%e'", inputtext);
			mysql_tquery(SQL, gString, "CheckCreatorCode", "isii", playerid, inputtext, 0, 3);
		}
		case DIALOG_UPGRADER1:
		{
			if(!response || listitem < 0) return true;
			new
				Icon[2] = {1274, 1240}
			;
			UpgradeType[playerid] = listitem + 1;
			UpgradeAmount[playerid] = 0;
			for(new i = 0; i < 2; i ++)
			{
				PlayerTextDrawSetPreviewModel(playerid, UpgraderPTD[i], Icon[listitem]);
			}
			for(new i = 2; i < 4; i++)
			{
				if(UpgradeType[playerid] == 1)
				{
					PlayerTextDrawSetString(playerid, UpgraderPTD[i], "$0");
				}
				else if(UpgradeType[playerid] == 2)
				{
					PlayerTextDrawSetString(playerid, UpgraderPTD[i], "0PP");
				}
			}
			for(new i = 0; i < sizeof(UpgraderPTD); i++)
			{
				PlayerTextDrawShow(playerid, UpgraderPTD[i]);
			}
		}
		case DIALOG_UPGRADER2:
		{
			if(!response) return true;

			new
				Amount = strval(inputtext)
			;

			switch(UpgradeType[playerid])
			{
				case 1:
				{
					if(Amount < 1_000_000 || Amount > 20_000_000)
						return SendMsg(playerid, COLOR_SERVER, "Upgrader >> {ffffff}Poti pune intre $1,000,000 si $20,000,000.");

					if(Amount > GetPlayerCash(playerid))
						return SendMsg(playerid, COLOR_SERVER, "Upgrader >> {ffffff}Nu ai $%s.", FormatNumber(Amount));

					va_PlayerTextDrawSetString(playerid, UpgraderPTD[2], "$%s", FormatNumber(Amount));
					va_PlayerTextDrawSetString(playerid, UpgraderPTD[3], "$%s", FormatNumber(Amount * UpgradePower[playerid]));
				}
				case 2:
				{
					if(Amount < 1 || Amount > 5)
						return SendMsg(playerid, COLOR_SERVER, "Upgrader >> {ffffff}Poti pune intre 1 si 5 puncte premium.");

					if(Amount > PlayerInfo[playerid][pPremiumPoints])
						return SendMsg(playerid, COLOR_SERVER, "Upgrader >> {ffffff}Nu ai %d puncte premium.", Amount);

					va_PlayerTextDrawSetString(playerid, UpgraderPTD[2], "%dPP", Amount);
					va_PlayerTextDrawSetString(playerid, UpgraderPTD[3], "%dPP", (Amount * UpgradePower[playerid]));
				}
			}

			UpgradeAmount[playerid] = Amount;
		}
		case DIALOG_LUCKY:
		{
			if(!response) return true;
			new
				money = strval(inputtext)
			;
			if(money < 10_000_000 || money > 500_000_000) return SendMsg(playerid, COLOR_SERVER, "Lucky >> {ffffff}Poti pune intre $10,000,000 si $500,000.000.");
			if(GetPlayerCash(playerid) < money) return SendMsg(playerid, COLOR_SERVER, "Lucky >> {ffffff}Nu ai $%s.", FormatNumber(money));
			GivePlayerCash(playerid, -money);
			LuckyMoney[playerid] = money;
			LuckyType[playerid] = 2;
			EnterInLucky(playerid);
		}
		case DIALOG_ATMBLOWER:
		{
			if(!response) return true;
			new
				rand = RandomWord[playerid]
			;
			if(!strmatch(inputtext, Cuvinte[rand][1]))
			{
				gString[0] = (EOS);
				format(gString, sizeof(gString), "Ordoneaza literele '%s' pentru a forma un cuvant:", Cuvinte[rand][0]);
				SPD(playerid, DIALOG_ATMBLOWER, DIALOG_STYLE_INPUT, "Cuvant" , gString, "Inainte", "Anuleaza");
			}
			else
			{
				rand = 50000 + random(10000);
				GiveJobMoney(playerid, rand);
				Info(playerid, "Ai primit $%s pentru munca depusa.", FormatNumber(rand));
				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;
				Info(playerid, "Pentru a continua, reintoarce-te la Job.");
			}
		}
		case DIALOG_SPAWNCHANGE:
		{
			if(!response) return true;
			switch(listitem)
			{
				case 0:
				{
					SendMsg(playerid, COLOR_SERVER, "SpawnChange >> {ffffff}Vei fi spawnat in locul normal.");
				}
				case 1:
				{
					if(PlayerInfo[playerid][pHouse] == 0 && PlayerInfo[playerid][pRented] == -1) return Info(playerid, "Nu ai o casa.");
					SendMsg(playerid, COLOR_SERVER, "SpawnChange >> {ffffff}Vei fi spawnat la casa.");
				}
				case 2:
				{
					new
						clan = PlayerInfo[playerid][pClan]
					;
					if(clan < 1) return SendMsg(playerid, COLOR_SERVER, "SpawnChange >> {ffffff}Nu esti intr-un clan.");
					if(HasClanHQ[clan] != true) return SendMsg(playerid, COLOR_SERVER, "SpawnChange >> {ffffff}Clanul tau nu detine un sediu.");
					SendMsg(playerid, COLOR_SERVER, "SpawnChange >> {ffffff}Vei fi spawnat in sediul clanului.");
				}
			}
			PlayerInfo[playerid][pSpawnChange] = listitem;
			pUpdateInt(playerid, "SpawnChange", PlayerInfo[playerid][pSpawnChange]);
		}
		case DIALOG_BILLBOARD:
		{
			if(!response) return true;
			new
				b = PlayerInfo[playerid][pBillboard]
			;
			if(!b) return SendMsg(playerid, COLOR_SERVER, "Billboard Menu >> {ffffff}Nu mai ai un Billboard.");
			switch(listitem)
			{
				case 0:
				{
					SPD(playerid, DIALOG_BILLBOARD1, DIALOG_STYLE_INPUT, "Text-ul panoului", "Introdu noul text: (1 - 32 caractere)", "Inainte", "Anuleaza");
				}
				case 1:
				{
					SPD(playerid, DIALOG_BILLBOARD2, DIALOG_STYLE_INPUT, "Pretul panoului", "Introdu noul pret: ($0 - $999,999,999)", "Inainte", "Anuleaza");
				}
				case 2:
				{
					SPD(playerid, DIALOG_BILLBOARD3, DIALOG_STYLE_MSGBOX, "Vinderea panoului", "Vrei sa vinzi panoul la stat?", "Da", "Nu");
				}
			}
		}
		case DIALOG_BILLBOARD1:
		{
			if(!response) return true;
			new
				b = PlayerInfo[playerid][pBillboard],
				escaped[32]
			;
			if(!b) return SendMsg(playerid, COLOR_SERVER, "Billboard Menu >> {ffffff}Nu mai ai un Billboard.");
			if(strlen(inputtext) < 1 || strlen(inputtext) >= 32) return SendMsg(playerid, COLOR_SERVER, "Billboard Menu >> {ffffff}Text-ul este prea scurt / lung.");
			mysql_escape_string(inputtext, escaped);
			if(strlen(escaped) < 1 || strlen(escaped) > 32) return SendMsg(playerid, COLOR_SERVER, "Billboard Menu >> {ffffff}Poti alege un text cuprins intre 1 si 32 de caractere.");
			format(Billboards[b][bText], strlen(escaped) + 1, escaped);
			Query_Mysql("update billboards set Text = '%s' where id = %d", escaped, b);
			UpdateLabel(4, b);
		}
		case DIALOG_BILLBOARD2:
		{
			if(!response) return true;
			new
				b = PlayerInfo[playerid][pBillboard],
				money = strval(inputtext)
			;
			if(!b) return SendMsg(playerid, COLOR_SERVER, "Billboard Menu >> {ffffff}Nu mai ai un Billboard.");
			if(money < 0 || money > 999_999_999) return SendMsg(playerid, COLOR_SERVER, "Billboard Menu >> {ffffff}Poti alege o suma intre $0 si $999,999,999.");
			Billboards[b][bPrice] = money;
			Query_Mysql("update billboards set Price = %d where id = %d", money, b);
			UpdateLabel(4, b);
		}
		case DIALOG_BILLBOARD3:
		{
			if(!response) return true;
			new
				b = PlayerInfo[playerid][pBillboard]
			;
			if(!b) return SendMsg(playerid, COLOR_SERVER, "Billboard Menu >> {ffffff}Nu mai ai un Billboard.");
			WipeBillboard(b);
		}
		case DIALOG_PANOURI:
		{
			if(!response || listitem < 0 || listitem > LoadedBillboards) return true;
			SetPlayerCheckpointEx(playerid, Billboards[listitem + 1][bPX], Billboards[listitem + 1][bPY], Billboards[listitem + 1][bPZ], 5);
			CP[playerid] = 43;
			SendMsg(playerid, COLOR_SERVER, "Panouri >> {ffffff}Urmeaza punctul rosu pentru a ajunge la panoul #%d.", listitem + 1);
		}
		case DIALOG_SAILING:
		{
			if(!response) return true;
			if(HaveCheckpoint(playerid)) return true;
			if(ExamVeh[playerid] != -1) return SendMsg(playerid, COLOR_SERVER, "Licenta de navigatie >> {ffffff}Ai inceput deja un examen.");
			if(GetPlayerCash(playerid) < 300_000) return SendMsg(playerid, COLOR_SERVER, "Licenta de navigatie >> {ffffff}Nu ai $300,000.");
			GivePlayerCash(playerid, -300_000);
			ExamVeh[playerid] = CreateVehicleEx(452, 447.6614, -1910.8075, -0.2757, 184.7906, random(256), random(256), -1, false, true, 100);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			SetVehicleVirtualWorld(ExamVeh[playerid], playerid + 1);
			PutPlayerInVehicleEx(playerid, ExamVeh[playerid], 0);
			CP[playerid] = 358;
			SetPlayerCheckpointEx(playerid, BoatCP[CP[playerid] - 358][0], BoatCP[CP[playerid] - 358][1], BoatCP[CP[playerid] - 358][2], 5);
			SendMsg(playerid, COLOR_SERVER, "Licenta de navigatie >> {ffffff}Urmeaza punctele rosii pentru a-ti lua licenta de navigatie.");
		}
		case DIALOG_FLY:
		{
			if(!response) return true;
			if(HaveCheckpoint(playerid)) return true;
			if(ExamVeh[playerid] != -1) return SendMsg(playerid, COLOR_SERVER, "Licenta de aviatie >> {ffffff}Ai inceput deja un examen.");
			if(GetPlayerCash(playerid) < 300_000) return SendMsg(playerid, COLOR_SERVER, "Licenta de aviatie >> {ffffff}Nu ai $300,000.");
			GivePlayerCash(playerid, -300_000);
			ExamVeh[playerid] = CreateVehicleEx(487, 1965.0059, -2289.0452, 13.7217, 178.5561, random(256), random(256), -1, false, true, 100);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			SetVehicleVirtualWorld(ExamVeh[playerid], playerid + 1);
			PutPlayerInVehicleEx(playerid, ExamVeh[playerid], 0);
			CP[playerid] = 368;
			SetPlayerCheckpointEx(playerid, FlyCP[CP[playerid] - 368][0], FlyCP[CP[playerid] - 368][1], FlyCP[CP[playerid] - 368][2], 5);
			SendMsg(playerid, COLOR_SERVER, "Licenta de aviatie >> {ffffff}Urmeaza punctele rosii pentru a-ti lua licenta de aviatie.");
		}
		case DIALOG_WEAPON:
		{
			if(!response) return true;
			if(HaveCheckpoint(playerid)) return true;
			if(GetPlayerCash(playerid) < 300_000) return SendMsg(playerid, COLOR_SERVER, "Licenta de arme >> {ffffff}Nu ai $300,000.");
			if(InWeaponExam[playerid] != false) return SendMsg(playerid, COLOR_SERVER, "Licenta de arme >> {ffffff}Esti deja in examenul pentru licenta de arme.");
			GivePlayerCash(playerid, -300_000);
			InWeaponExam[playerid] = true;
			for(new i = 0; i < sizeof(WeaponPos); i++)
			{
				WeaponObjects[playerid][i] = CreatePlayerObject(playerid, floatround(WeaponPos[i][0]), WeaponPos[i][1], WeaponPos[i][2], WeaponPos[i][3], WeaponPos[i][4], WeaponPos[i][5], WeaponPos[i][6]);
				WeaponShots[playerid][i] = 0;
			}
			SetPlayerPosEx(playerid, -226.1356, -2202.0037, 248.8997);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			GivePlayerWeapon(playerid, 31, 250);
			SendMsg(playerid, COLOR_SERVER, "Licenta de arme >> {ffffff}Trebuie sa distrugi tintele cu arma primita.");
		}
		case DIALOG_SLOTSBET:
		{
			if(!response) return true;
			new
				BetMoney = strval(inputtext)
			;
			if(BetMoney < 500_000 || BetMoney > 10_000_000) return SendMsg(playerid, COLOR_SERVER, "Sloturi >> {ffffff}Nu poti paria mai putin de $500, 000 sau mai mult de $10, 000, 000.");
			if(GetPlayerCash(playerid) < BetMoney) return SendMsg(playerid, COLOR_SERVER, "Sloturi >> {ffffff}Nu ai $%s.", FormatNumber(BetMoney));
			SlotsBet[playerid] = BetMoney;
			SendMsg(playerid, COLOR_SERVER, "Sloturi >> {ffffff}Ai pariat $%s.", FormatNumber(BetMoney));
			SlotsDate[playerid] = 0;
			Iter_Add(InCasinoSlots, playerid);
			for(new i = 0; i < 3; i++)
			{
				for(new j = 0; j < 3; j++)
				{
					ObjectSlots[playerid][i][j] = 1239;
				}
			}
			for(new i = 0; i < 9; i++)
			{
				PlayerTextDrawSetPreviewModel(playerid, SlotsPTD[i], 1239);
				PlayerTextDrawShow(playerid, SlotsPTD[i]);
			}
			GivePlayerCash(playerid, -BetMoney);
			PierdutiSlots += BetMoney;
			if(PierdutiSlots > 999_999_999)
			{
				MPierdutiSlots ++;
				PierdutiSlots -= 1_000_000_000;
			}
			ProgressToBattlepass(playerid, 10, BetMoney);
		}
		case DIALOG_CONTRACTS:
		{
			if(!response || listitem < 0)
				return true;

			new Comanda;
			foreach(new i : Contracts)
			{
				if(listitem == Comanda)
				{
					if(!Iter_Contains(Contracts, i))
						return Info(playerid, "Acel jucator nu a chemat un Uber.");

					contract_get[playerid] = i;
					Iter_Remove(Contracts, i);
					SendFamilyMessage(5, 0x211CDEC8, "%s are tinta %s, recompensa: $%s.", GetName(playerid), GetName(i), FormatNumber(PlayerInfo[i][pHeadValue]));
					gString[0] = (EOS);
					format(gString, 16, "/find %d", i);
					PC_EmulateCommand(playerid, gString);
					break;
				}
				Comanda ++;
			}
		}
		case DIALOG_VIPMENU:
		{
			if(!response || listitem < 0)
				return true;

			switch(listitem)
			{
				case 0:
				{
					SPD(playerid, DIALOG_VIPTEXT, DIALOG_STYLE_LIST, "Vip Text", "Vip Text\nVip Text Color\nVip Text Position", "Alege", "Anuleaza");
				}
				case 1:
				{
					SPD(playerid, DIALOG_VIPWHEELS, DIALOG_STYLE_LIST, "Vip Wheels", "Golden Wheels\nDrift Wheels\nImproved Wheels", "Alege", "Anuleaza");
				}
			}
		}
		case DIALOG_VIPTEXT:
		{
			if(!response || listitem < 0)
				return true;

			switch(listitem)
			{
				case 0:
				{
					SPD(playerid, DIALOG_VIPTEXT2, DIALOG_STYLE_INPUT, "Set Vip Text", "Introdu mai jos noul text:", "Alege", "Anuleaza");
				}
				case 1:
				{
					SPD(playerid, DIALOG_VIPTEXTCOLOR, DIALOG_STYLE_INPUT, "Set Vip Text Color", "Introdu codul de culoare:\nAcesta se poate gasi pe un color picker.", "Alege", "Anuleaza");
				}
				case 2:
				{
					SPD(playerid, DIALOG_VIPTEXTPOS, DIALOG_STYLE_LIST, "Set Vip Text Position", "X(Latime)\nY(Lungime)\nZ(Inaltime)\nRotation X\nRotation Y\nRotation Z\nReseteaza", "Alege", "Anuleaza");
				}
			}
		}
		case DIALOG_VIPTEXT2:
		{
			if(!response)
				return true;

			new s = SelectedCar[playerid];
			vehicleid = PlayerInfo[playerid][pVehID][s];

			new
				FormatedText[64]
			;

			format(FormatedText, sizeof(FormatedText), "{%s}%s", VipTextColor[playerid][s], inputtext);

			mysql_format(SQL, VipText[playerid][s], 64, "%e", inputtext);
			Query_Mysql("update cars set VipText = '%s' where id = %d", VipText[playerid][s], PlayerInfo[playerid][pVeh][s]);

			CreateAndAttachVipText(vehicleid, FormatedText, VipTextPos[0][playerid][s], VipTextPos[1][playerid][s], VipTextPos[2][playerid][s], VipTextPos[3][playerid][s], VipTextPos[4][playerid][s], VipTextPos[5][playerid][s]);
		}
		case DIALOG_VIPTEXTCOLOR:
		{
			if(!response)
				return true;

			if(strlen(inputtext) < 1 || strlen(inputtext) > 6)
				return Info(playerid, "Textul nu are o lungime corespunzatoare(1 - 6).");

			new s = SelectedCar[playerid];
			vehicleid = PlayerInfo[playerid][pVehID][s];

			new
				FormatedText[64]
			;

			format(FormatedText, sizeof(FormatedText), "{%s}%s", inputtext, VipText[playerid][s]);

			mysql_format(SQL, VipTextColor[playerid][s], 64, inputtext);
			Query_Mysql("update cars set VipTextColor = '%s' where id = %d", VipTextColor[playerid][s], PlayerInfo[playerid][pVeh][s]);

			CreateAndAttachVipText(vehicleid, FormatedText, VipTextPos[0][playerid][s], VipTextPos[1][playerid][s], VipTextPos[2][playerid][s], VipTextPos[3][playerid][s], VipTextPos[4][playerid][s], VipTextPos[5][playerid][s]);
		}
		case DIALOG_VIPTEXTPOS:
		{
			if(!response || listitem < 0)
				return true;

			switch(listitem)
			{
				case 0..5:
				{
					SetPVarInt(playerid, "EditVipText", listitem + 1);

					Info(playerid, "Scrie in chat noua coordonata:");
					Info(playerid, "Cand doresti sa termini, scrie 'stop'.");
				}
				case 6:
				{
					new
						s = SelectedCar[playerid],
						FormatedText[64]
					;
					vehicleid = PlayerInfo[playerid][pVehID][s];
					format(VipTextColor[playerid][s], 64, "ffffff");
					format(VipText[playerid][s], 64, "VipText");
					for(new nr = 0; nr < 6; nr++)
					{
						VipTextPos[nr][playerid][s] = 0;
					}
					format(FormatedText, sizeof(FormatedText), "{%s}%s", VipTextColor[playerid][s], VipText[playerid][s]);
					CreateAndAttachVipText(vehicleid, FormatedText, 0, 0, 0, 0, 0, 0);
				}
			}

		}
		case DIALOG_VIPWHEELS:
		{
			if(!response || listitem < 0)
				return true;

			new
				Roti[3] =
				{
					1084, 1081, 1096
				}
			;

			switch(listitem)
			{
				case 0..2:
				{
					AddVehicleComponent(vehicleid, Roti[listitem]);
					SaveComponent(playerid, vehicleid, Roti[listitem]);
				}
			}
		}
		case DIALOG_SETGUNS:
		{
			if(!response || listitem < 0) return true;
			new
				NeedRank[5] = {1, 4, 1, 4, 2}
			;
			if(PlayerInfo[playerid][pRank] < NeedRank[listitem])
				return SendMsg(playerid, COLOR_SERVER, "Set Guns >> {ffffff}Ai nevoie de rank %d.", NeedRank[listitem]);
			PlayerInfo[playerid][pSetGuns][listitem] = !PlayerInfo[playerid][pSetGuns][listitem];
			Query_Mysql("update users set SetGuns = '%d|%d|%d|%d|%d' where id = %d",
				PlayerInfo[playerid][pSetGuns][0], PlayerInfo[playerid][pSetGuns][1], PlayerInfo[playerid][pSetGuns][2],
				PlayerInfo[playerid][pSetGuns][3], PlayerInfo[playerid][pSetGuns][4], PlayerInfo[playerid][pSQLID]);
			new Weapons[128];
			format(Weapons, sizeof(Weapons), "Deagle - %s\nCombat - %s\nM4 - %s\nRifle - %s\nTec-9 - %s",
				DaSauNu(PlayerInfo[playerid][pSetGuns][0]), DaSauNu(PlayerInfo[playerid][pSetGuns][1]), DaSauNu(PlayerInfo[playerid][pSetGuns][2]), 
				DaSauNu(PlayerInfo[playerid][pSetGuns][3]), DaSauNu(PlayerInfo[playerid][pSetGuns][4]));
			SPD(playerid, DIALOG_SETGUNS, DIALOG_STYLE_LIST, "Setarea Armelor", Weapons, "Alege", "Anuleaza");
		}
		case DIALOG_TABOPTIONS:
		{
			new
				id = GetPVarInt(playerid, "ClickedPlayer")
			;
			DeletePVar(playerid, "ClickedPlayer");
			if(id == INVALID_PLAYER_ID || !IsPlayerConnected(playerid)) return SendMsg(playerid, COLOR_SERVER, "Tab >> {ffffff}Acel jucator s-a deconectat.");
			if(!response || listitem < 0)
			{
				return true;
			}
			switch(listitem)
			{
				case 0:
				{
					format(string, 16, "/spec %d", id);
					PC_EmulateCommand(playerid, string);
				}
				case 1:
				{
					ShowStats(playerid, id);
				}
			}
		}
		case DIALOG_SMS: {
			if(!response) return true;
			new id, message[144]; 
			if(sscanf(inputtext, "us[144]", id, message)) return Info(playerid, "Parametri invalizi.");
			SmsUser(playerid, id, message);
		}
		case DIALOG_CALL: {
			if(!response) return true;
			new id;
			if(sscanf(inputtext, "u", id)) return Info(playerid, "/call [name/playerid]");
			CallUser(playerid, id);
		}
		case DIALOG_SERVICE:
		{
			if(!response) return true;
			switch(listitem)
			{
				case 0:
				{
					if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Nu poti face asta dintr-un vehicul.");
					if(GetPlayerInterior(playerid) || GetPlayerVirtualWorld(playerid)) return Info(playerid, "Nu poti chema Uber aici.");
					if(Iter_Contains(UberCalls, playerid)) return Info(playerid, "Ai chemat deja un Uber.");
					SendFamilyMessage(6, GetFactionColor(6), "%s [%d] a chemat un Uber.", GetName(playerid), playerid);
					Iter_Add(UberCalls, playerid);
					Info(playerid, "Ai chemat un Uber, asteapta...");
				}
				case 1:
				{
					if(GetPlayerInterior(playerid) || GetPlayerVirtualWorld(playerid)) return Info(playerid, "Nu poti chema Paramedic aici.");
					if(Iter_Contains(ParamedicCalls, playerid)) return Info(playerid, "Ai chemat deja un Paramedic.");
					SendFamilyMessage(7, GetFactionColor(7), "%s [%d] a chemat un Paramedic.", GetName(playerid), playerid);
					Iter_Add(ParamedicCalls, playerid);
					Info(playerid, "Ai chemat un Paramedic, asteapta...");
				}
				case 2:
				{
					if(GetPlayerInterior(playerid) || GetPlayerVirtualWorld(playerid)) return Info(playerid, "Nu poti chema Glovo aici.");
					if(Iter_Contains(GlovoCalls, playerid)) return Info(playerid, "Ai chemat deja un Glovo.");
					SendFamilyMessage(8, GetFactionColor(8), "%s [%d] a chemat un Glovo.", GetName(playerid), playerid);
					Iter_Add(GlovoCalls, playerid);
					Info(playerid, "Ai chemat un Glovo, asteapta...");
				}
			}
		}
		case DIALOG_KILLCP: {
			if(!response) return true;
			PC_EmulateCommand(playerid, "/killcp");
		}
		case DIALOG_JOBMENU: {
			if(!response) return true;
			new Job = PlayerInfo[playerid][pOwnedJob];
			switch(listitem){
				case 0: Info(playerid, "Ai $%s in balanta Jobului.", FormatNumber(JobInfo[Job][jBalance]));
				case 1: {
					gString[0] = (EOS);
					format(gString, 128, "Intordu suma pe care vrei sa o scoti:\nSuma maxima este de $%s.", FormatNumber(JobInfo[Job][jBalance]));
					SPD(playerid, DIALOG_JOBWITHDRAW, DIALOG_STYLE_INPUT, "Retragerea Balantei", gString, "Inainte", "Anuleaza");
				}
				case 2: {
					gString[0] = (EOS);
					format(gString, 128, "Deti Jobul %s(%d) de %d zile, si a produs $%s in ultimele 24 de ore.", JobInfo[Job][jName], Job, JobInfo[Job][jLastProp], FormatNumber(JobInfo[Job][jLastDay]));
					SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Informatiile Jobului tau", gString, "Iesi", "");
				}
				case 3: {
					new workers;
					foreach(new i : WithJob[Job]){
						if(JobWorking[i] != false){
							workers ++;
						}
					}
					Info(playerid, "Ai %d angajati si %d muncesc la Jobul tau.", Iter_Count(WithJob[Job]), workers);
				}
				case 4: SPD(playerid, DIALOG_JOBSELL, DIALOG_STYLE_INPUT, "Vanzare Job", "Introdu suma cu care vei vinde Jobul:", "Inainte", "Anuleaza");
				case 5: SPD(playerid, DIALOG_JOBSELLTOSTATE, DIALOG_STYLE_MSGBOX, "Vanzare Job la Stat", "Vrei sa-ti vinzi Jobul la stat?", "Da", "Nu");
			}
		}
		case DIALOG_JOBWITHDRAW: {
			if(!response) return true;
			new Job = PlayerInfo[playerid][pOwnedJob], val = strval(inputtext);
			if(val < 1 || val > JobInfo[Job][jBalance]) return Info(playerid, "Suma invalida.");
			GivePlayerCash(playerid, val);
			JobInfo[Job][jBalance] -= val;
			Query_Mysql("UPDATE `jobs` SET `Balance` = '%d' WHERE `ID` = '%d'", JobInfo[Job][jBalance], Job);
			Info(playerid, "Ai retras $%s din Jobul tau, ti-a mai ramas $%s.", FormatNumber(val), FormatNumber(JobInfo[Job][jBalance]));
		}
		case DIALOG_JOBSELL: {
			if(!response) return true;
			new Job = PlayerInfo[playerid][pOwnedJob], val = strval(inputtext);
			if(val < 0 || val > 999_999_999) return Info(playerid, "Suma invalida.");
			JobInfo[Job][jPrice] = val;
			Query_Mysql("UPDATE `jobs` SET `Price` = '%d' WHERE `ID` = '%d'", val, Job);
			Info(playerid, "Ti-ai pus Jobul la vanzare pentru $%s.", FormatNumber(val));
			UpdateLabel(3, Job);
		}
		case DIALOG_JOBSELLTOSTATE: {
			if(!response) return true;
			new Job = PlayerInfo[playerid][pOwnedJob];
			WipeJob(Job);
			UpdateLabel(3, Job);
		}
		case DIALOG_RULETA1: {
			if(!response) return true;
			if(strval(inputtext) < 500000 || strval(inputtext) > 300_000_000) return Info(playerid, "Poti paria intre $500,000 si $300,000,000.");
			if(GetPlayerCash(playerid) < strval(inputtext)) return Info(playerid, "Nu ai $%s.", FormatNumber(strval(inputtext)));
			SetPVarInt(playerid, "SumaPariata", strval(inputtext));
			new culoare[3][8] = {"Negru", "Rosu", "Verde"};
			format(string, 128, "Esti sigur ca vrei sa pariezi $%s pe %s?", FormatNumber(GetPVarInt(playerid, "SumaPariata")), culoare[GetPVarInt(playerid, "CuloarePariata")]);
			SPD(playerid, DIALOG_RULETA2, DIALOG_STYLE_MSGBOX, "Confirmare", string, "Da", "Nu");
		}
		case DIALOG_RULETA2: {
			if(!response) return true;
			if(GetSVarInt("Ruleta")) return Info(playerid, "Nu poti paria in timp ce ruleta merge.");
			new culoare[3][8] = {"Negru", "Rosu", "Verde"};
			Iter_Add(VotRuleta[GetPVarInt(playerid, "CuloarePariata")], playerid);
			GivePlayerCash(playerid, -GetPVarInt(playerid, "SumaPariata"));
			Info(playerid, "Ai pariat $%s pe %s.", FormatNumber(GetPVarInt(playerid, "SumaPariata")), culoare[GetPVarInt(playerid, "CuloarePariata")]);
		}
		case DIALOG_CALLS: {
			if(!response) return true;
			switch(PlayerInfo[playerid][pMember])
			{
				case 6:
				{
					new Comanda;
					foreach(new i : UberCalls){
						if(listitem == Comanda){
							if(!Iter_Contains(UberCalls, i)) return Info(playerid, "Acel jucator nu a chemat un Uber.");
							if(playerid == i) return Info(playerid, "Nu iti poti accepta singur apelul.");
							new Float: X, Float: Y, Float: Z;
							Info(i, "Uber-ul %s ti-a acceptat apelul, asteapta aici.", GetName(playerid));
							SendFamilyMessage(6, GetFactionColor(6), "Uber-ul %s a acceptat apelul lui %s.", GetName(playerid), GetName(i));
							Info(playerid, "Checkpoint setat pe %s [%d].", GetName(i), i);
							UberAccepted[playerid] = i;
							GetPlayerPos(i, X, Y, Z);
							DisablePlayerCheckpoint(playerid);
							SetPlayerCheckpointEx(playerid, X, Y, Z, 3.0); 
							targetfind[playerid] = i;
							Iter_Remove(UberCalls, i);
							break;
						}
						Comanda ++;
					}
				}
				case 7:
				{
					new Comanda;
					foreach(new i : ParamedicCalls){
						if(listitem == Comanda){
							if(!Iter_Contains(ParamedicCalls, i)) return Info(playerid, "Acel jucator nu a chemat un Paramedic.");
							if(playerid == i) return Info(playerid, "Nu iti poti accepta singur apelul.");
							new Float: X, Float: Y, Float: Z;
							Info(i, "Paramedicul %s ti-a acceptat apelul, asteapta aici.", GetName(playerid));
							SendFamilyMessage(7, GetFactionColor(7), "Paramedicul %s a acceptat apelul lui %s.", GetName(playerid), GetName(i));
							Info(playerid, "Checkpoint setat pe %s [%d].", GetName(i), i);
							ParamedicAccepted[playerid] = i;
							GetPlayerPos(i, X, Y, Z);
							DisablePlayerCheckpoint(playerid);
							SetPlayerCheckpointEx(playerid, X, Y, Z, 3.0); 
							targetfind[playerid] = i;
							Iter_Remove(ParamedicCalls, i);
							break;
						}
						Comanda ++;
					}
				}
				case 8:
				{
					new Comanda;
					foreach(new i : GlovoCalls){
						if(listitem == Comanda){
							if(!Iter_Contains(GlovoCalls, i)) return Info(playerid, "Acel jucator nu a chemat un Glovo.");
							if(playerid == i) return Info(playerid, "Nu iti poti accepta singur apelul.");
							new Float: X, Float: Y, Float: Z;
							Info(i, "Glovo-ul %s ti-a acceptat apelul, asteapta aici.", GetName(playerid));
							SendFamilyMessage(8, GetFactionColor(8), "Glovo-ul %s a acceptat apelul lui %s.", GetName(playerid), GetName(i));
							Info(playerid, "Checkpoint setat pe %s [%d].", GetName(i), i);
							GlovoAccepted[playerid] = i;
							GetPlayerPos(i, X, Y, Z);
							DisablePlayerCheckpoint(playerid);
							SetPlayerCheckpointEx(playerid, X, Y, Z, 3.0); 
							targetfind[playerid] = i;
							Iter_Remove(GlovoCalls, i);
							break;
						}
						Comanda ++;
					}
				}
			}
		}
		case DIALOG_SFV: {
			if(!response || listitem < 0 || listitem >= 5 || PlayerInfo[playerid][pMember] < 1) return true;
			new culoare[8] = {2, 52, 136, 5, 30, 86, 18, 228}, fac = PlayerInfo[playerid][pMember];
			if(fvVehicles[fac][listitem] < 1) return true;
			new
				Float: X = fvPos[fac][0],
				Float: Y = fvPos[fac][1],
				Float: Z = fvPos[fac][2],
				Float: A = fvPos[fac][3],
				Model = fvVehicles[fac][listitem]
			;
			if(PlayerInfo[playerid][pMember] == 8)
			{
				if(listitem == 1 && PlayerInfo[playerid][pRank] < 3)
					return SendMsg(playerid, COLOR_SERVER, "Sfv >> {ffffff}Ai nevoie de rank 3.");

				if(listitem == 2 && PlayerInfo[playerid][pRank] < 5)
					return SendMsg(playerid, COLOR_SERVER, "Sfv >> {ffffff}Ai nevoie de rank 5.");
			}
			if(pfVehicle[playerid] != -1)
			{
				DestroyVehicleEx(pfVehicle[playerid]);
				Iter_Remove(fVehicles[fac], pfVehicle[playerid]);
				pfVehicle[playerid] = -1;
			}
			pfVehicle[playerid] = CreateVehicleEx(Model, X, Y, Z, A, culoare[fac - 1], culoare[fac - 1], -1);
			SetVehicleVirtualWorld(pfVehicle[playerid], GetPlayerVirtualWorld(playerid));
			PutPlayerInVehicleEx(playerid, pfVehicle[playerid], 0);
			Iter_Add(fVehicles[fac], pfVehicle[playerid]);
		}
		case DIALOG_SOPS:
		{
			if(!response)
				return true;

			new
				Slot = SelectedSkin[playerid],
				Skin = PlayerInfo[playerid][pSkins][Slot]
			;

			switch(listitem)
			{
				case 0:
				{

					if(OnDuty[playerid])
						return SendMsg(playerid, COLOR_SERVER, "My Skins >> {ffffff}Nu poti face asta cat timp esti la datorie.");

					if(PlayerInfo[playerid][pModel] == Skin)
						return SendMsg(playerid, COLOR_SERVER, "My Skins >> {ffffff}Deja esti echipat cu acest skin.");

					PlayerInfo[playerid][pModel] = Skin;
					SetPlayerSkin(playerid, Skin);
					pUpdateInt(playerid, "Model", Skin);

					SendMsg(playerid, COLOR_SERVER, "My Skins >> {ffffff}Ti-ai pus Skin-ul %d de pe slotul %d.", Skin, Slot + 1);
				}
				case 1:
				{
					gString[0] = (EOS);
					format(gString, 128, "Esti sigur ca vrei sa stergi skin-ul %d %s?", Skin, GetSkinRarity(Skin));
					SPD(playerid, DIALOG_SOPS1, DIALOG_STYLE_MSGBOX, "Confirmare stergere skin", gString, "Inainte", "Anuleaza");
				}
			}
		}
		case DIALOG_SOPS1:
		{
			if(!response)
				return true;

			new
				Slot = SelectedSkin[playerid]
			;

			if(PlayerInfo[playerid][pSkins][Slot] == DefaultSkin)
				return SendMsg(playerid, COLOR_SERVER, "My Skins >> {ffffff}Nu poti sterge acest skin.");

			if(PlayerInfo[playerid][pModel] == PlayerInfo[playerid][pSkins][Slot])
			{
				PlayerInfo[playerid][pModel] = DefaultSkin;
				SetPlayerSkin(playerid, DefaultSkin);
				pUpdateInt(playerid, "Model", PlayerInfo[playerid][pModel]);
			}

			SendMsg(playerid, COLOR_SERVER, "My Skins >> {ffffff}Ai sters Skin-ul %d de pe slotul %d.", PlayerInfo[playerid][pSkins][Slot], Slot + 1);

			PlayerInfo[playerid][pSkins][Slot] = DefaultSkin;			
		}
		case DIALOG_HEISTS:
		{
			if(!response || listitem < 0) return true;

			if(PlayerInfo[playerid][pHeists][listitem] != false)
				return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Ai facut acest Heist azi.");

			switch(listitem)
			{
				case 0:
				{
					if(HavePremium(playerid) && PlayerInfo[playerid][pRob] < 8)
						return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Nu ai 8 rob points.");

					if(!HavePremium(playerid) && PlayerInfo[playerid][pRob] < 10)
						return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Nu ai 10 rob points.");

					if(PlayerInfo[playerid][pWantedLevel] >= 1)
						return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Nu poti face asta deoarece ai wanted.");

					if(IsACop(playerid))
						return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Nu poti asta deoarece esti politist.");

					if(HaveCheckpoint(playerid))
						return true;

					if(PlayerInfo[playerid][pVehLic] < 1)
						return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Nu ai permisul de conducere.");

					new
						Float: xx,
						Float: yy,
						Float: zz,
						rand
					;

					rand = randEx(1, Bizuri);
					xx = BizzInfo[rand][bEntranceX];
					yy = BizzInfo[rand][bEntranceY];
					zz = BizzInfo[rand][bEntranceZ];

					while(BizzInfo[rand][bType] != 5)
					{ 
						rand = randEx(1, Bizuri);
						xx = BizzInfo[rand][bEntranceX];
						yy = BizzInfo[rand][bEntranceY];
						zz = BizzInfo[rand][bEntranceZ];
					}

					SetPlayerCheckpointEx(playerid, xx, yy, zz, 5); 
					CP[playerid] = 331;

					QuestVeh[playerid] = CreateVehicleEx(482, 1056.0272, 1311.5148, 10.9433, 359.8526, random(256), random(256), -1, false, true); 
					PutPlayerInVehicleEx(playerid, QuestVeh[playerid], 0);

					SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Urmeaza checkpoint-ul pentru a jefui afacerea.");
				}
				case 1:
				{
					if(PlayerInfo[playerid][pVehLic] < 1)
						return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Ai nevoie de licenta de condus.");

					if(PlayerInfo[playerid][pGunLic] < 1)
						return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Ai nevoie de licenta de arme.");

					if(PlayerInfo[playerid][pWantedLevel] >= 1)
						return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Nu poti face asta deoarece ai wanted.");

					if(HaveCheckpoint(playerid))
						return true;

					GivePlayerWeapon(playerid, 31, 1000);

					SetPlayerCheckpointEx(playerid, 2196.5276, 1677.1058, 12.3672, 5); 
					CP[playerid] = 473;

					QuestVeh[playerid] = CreateVehicleEx(482, 1053.8837, 1323.0192, 10.8203, 330.7643, random(256), random(256), -1, false, true); 
					PutPlayerInVehicleEx(playerid, QuestVeh[playerid], 0);

					SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Urmeaza punctul rosu pentru a jefui prima banca.");
				}
				case 2:
				{
					if(PlayerInfo[playerid][pVehLic] < 1)
						return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Ai nevoie de licenta de condus.");

					if(PlayerInfo[playerid][pGunLic] < 1)
						return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Ai nevoie de licenta de arme.");

					if(PlayerInfo[playerid][pWantedLevel] >= 1)
						return SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Nu poti face asta deoarece ai wanted.");

					if(HaveCheckpoint(playerid))
						return true;

					HeistsObjects[playerid][0] = CreatePlayerObject(playerid, 2932, 2749.68896, -2242.43994, 13.79539,   0.00000, 0.00000, -56.64001);
					HeistsObjects[playerid][1] = CreatePlayerObject(playerid, 2934, 2722.41504, -2224.88306, 13.88869,   0.00000, 0.00000, -52.38001);
					HeistsObjects[playerid][2] = CreatePlayerObject(playerid, 2935, 2678.72290, -2226.90186, 13.86179,   0.00000, 0.00000, 45.42001);
					HeistsObjects[playerid][3] = CreatePlayerObject(playerid, 1550, 2676.51709, -2225.58008, 12.89001,   0.00000, 0.00000, 0.00000);
					HeistsObjects[playerid][4] = CreatePlayerObject(playerid, 1550, 2678.49683, -2227.00732, 12.89001,   0.00000, 0.00000, 0.00000);
					HeistsObjects[playerid][5] = CreatePlayerObject(playerid, 1550, 2680.04395, -2228.91162, 12.89001,   0.00000, 0.00000, 0.00000);
					HeistsObjects[playerid][6] = CreatePlayerObject(playerid, 1550, 2720.54639, -2225.75098, 12.88528,   0.00000, 0.00000, 0.00000);
					HeistsObjects[playerid][7] = CreatePlayerObject(playerid, 1550, 2721.39941, -2225.01001, 12.88528,   0.00000, 0.00000, 0.00000);
					HeistsObjects[playerid][8] = CreatePlayerObject(playerid, 1550, 2722.47900, -2223.97021, 12.88528,   0.00000, 0.00000, 0.00000);
					HeistsObjects[playerid][9] = CreatePlayerObject(playerid, 1550, 2749.83228, -2242.29834, 12.88615,   0.00000, 0.00000, 0.00000);
					HeistsObjects[playerid][10] = CreatePlayerObject(playerid, 1550, 2751.89771, -2241.38403, 12.88615,   0.00000, 0.00000, 0.00000);
					HeistsObjects[playerid][11] = CreatePlayerObject(playerid, 1550, 2747.96802, -2243.27637, 12.88615,   0.00000, 0.00000, 0.00000);

					QuestVeh[playerid] = CreateVehicleEx(560, 1053.8837, 1323.0192, 10.8203, 330.7643, random(256), random(256), -1, false, true); 
					PutPlayerInVehicleEx(playerid, QuestVeh[playerid], 0);

					SetPlayerCheckpointEx(playerid, 2640.9600, -2241.6099, 13.5469, 4);
					CP[playerid] = 478;

					SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Mergi la locatia indicata.");
				}
			}
		}
		case DIALOG_SHOP: {
			if(!response) return true;
			switch(listitem){
				case 0:
				{
					new
						TitluShop[64],
						OptiuniShop[15][16] =
						{
							"Premium Account",
							"Change Name",
							"Clear FP",
							"Clear Warns",
							"Vehicle Slot",
							"Private Freq",
							"Clan",
							"Vip Account",
							"Job Boost",
							"Pet",
							"Skin Slot",
							"Supreme Account",
							"Hidden color",
							"Vouchers",
							"Potions"
						},
						StringFinal[300]
					;
					format(TitluShop, sizeof(TitluShop), "Premium Shop - %d PP", PlayerInfo[playerid][pPremiumPoints]);
					for(new i = 0; i < sizeof(OptiuniShop); i++)
					{
						if(i >= sizeof(OptiuniShop) - 2)
						{
							format(StringFinal, sizeof(StringFinal), "%s\n%s", StringFinal, OptiuniShop[i]);
						}
						else
						{						
							format(StringFinal, sizeof(StringFinal), "%s\n%s - %d PP", StringFinal, OptiuniShop[i], PremiumShopPrices[i]);
						}
					}
					SPD(playerid, DIALOG_PREMIUMSHOP, DIALOG_STYLE_LIST, TitluShop, StringFinal, "Alege", "Anuleaza");
				}
				case 1: {
					gString[0] = (EOS);
					format(gString, 64, "Activity Shop - %d AP", PlayerInfo[playerid][pActivity]);
					SPD(playerid, DIALOG_ACTIVITYSHOP, DIALOG_STYLE_LIST, gString, "Mountain Bike - 200 AP\nStallion - 700 AP\n80.000.000$ - 3, 000 AP\nDiamond Crate - 4, 000 AP\n20RP - 5, 000 AP\n70PP - 6, 000 AP\nSandking - 8, 500 AP\nHotring - 12, 500 AP\nBus - 25, 000 AP", "Alege", "Anuleaza");
				}
				case 2:
				{
					new
						TitleString[64]
					;
					format(TitleString, sizeof(TitleString), "Real Shop - %d RM", PlayerInfo[playerid][pRealMoney]);

					gString[0] = (EOS);
					for(new i = 0; i < sizeof(RealShopInfo); i++)
					{
						format(gString, sizeof(gString), "%s%s - %d RM\n", gString, RealShopInfo[i][0], strval(RealShopInfo[i][1]));
					}
					SPD(playerid, DIALOG_REALSHOP, DIALOG_STYLE_LIST, TitleString, gString, "Alege", "Anuleaza");
				}
			}
		}
		case DIALOG_ACTIVITYSHOP: {
			if(!response) return true;
			switch(listitem){
				case 0: {
					if(PlayerInfo[playerid][pActivity] < 200) return Info(playerid, "Nu ai 200 Activity Points.");
					if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots]) return Info(playerid, "Nu ai sloturi libere.");
					PlayerInfo[playerid][pActivity] -= 200;
					pUpdateInt(playerid, "Activity", PlayerInfo[playerid][pActivity]);
					InsertVehicle(playerid, 3, true);
				}
				case 1: {
					if(PlayerInfo[playerid][pActivity] < 700) return Info(playerid, "Nu ai 700 Activity Points.");
					if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots]) return Info(playerid, "Nu ai sloturi libere.");
					PlayerInfo[playerid][pActivity] -= 700;
					pUpdateInt(playerid, "Activity", PlayerInfo[playerid][pActivity]);
					InsertVehicle(playerid, 18, true);
				}
				case 2: {
					if(PlayerInfo[playerid][pActivity] < 3000) return Info(playerid, "Nu ai 3, 000 Activity Points.");
					PlayerInfo[playerid][pActivity] -= 3000;
					pUpdateInt(playerid, "Activity", PlayerInfo[playerid][pActivity]);
					GivePlayerCash(playerid, 80000000);
					Info(playerid, "Ai primit $80, 000, 000 pentru 3, 000 AP.");
				}
				case 3: {
					if(PlayerInfo[playerid][pActivity] < 4000) return Info(playerid, "Nu ai 4, 000 Activity Points.");
					PlayerInfo[playerid][pActivity] -= 4000;
					pUpdateInt(playerid, "Activity", PlayerInfo[playerid][pActivity]);
					PlayerInfo[playerid][pDiamondCrate] ++;
					pUpdateInt(playerid, "DiamondCrate", PlayerInfo[playerid][pDiamondCrate]);
					Info(playerid, "Ai primit un Diamond Crate pentru 4, 000 AP.");
				}
				case 4: {
					if(PlayerInfo[playerid][pActivity] < 5000) return Info(playerid, "Nu ai 5, 000 Activity Points.");
					PlayerInfo[playerid][pActivity] -= 5000;
					pUpdateInt(playerid, "Activity", PlayerInfo[playerid][pActivity]);
					GivePlayerRP(playerid, 20);
					Info(playerid, "Ai primit 20RP pentru 5, 000 AP.");
				}
				case 5: {
					if(PlayerInfo[playerid][pActivity] < 6000) return Info(playerid, "Nu ai 6, 000 Activity Points.");
					PlayerInfo[playerid][pActivity] -= 6000;
					pUpdateInt(playerid, "Activity", PlayerInfo[playerid][pActivity]);
					PlayerInfo[playerid][pPremiumPoints] += 70;
					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					Info(playerid, "Ai primit 70PP pentru 6, 000 AP.");
				}
				case 6: {
					if(PlayerInfo[playerid][pActivity] < 8500) return Info(playerid, "Nu ai 8, 500 Activity Points.");
					if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots]) return Info(playerid, "Nu ai sloturi libere.");
					PlayerInfo[playerid][pActivity] -= 8500;
					pUpdateInt(playerid, "Activity", PlayerInfo[playerid][pActivity]);
					InsertVehicle(playerid, 53, true);
				}
				case 7: {
					if(PlayerInfo[playerid][pActivity] < 12_000) return Info(playerid, "Nu ai 12, 000 Activity Points.");
					if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots]) return Info(playerid, "Nu ai sloturi libere.");
					PlayerInfo[playerid][pActivity] -= 12_000;
					pUpdateInt(playerid, "Activity", PlayerInfo[playerid][pActivity]);
					InsertVehicle(playerid, 62, true);
				}
				case 8: {
					if(PlayerInfo[playerid][pActivity] < 25_000) return Info(playerid, "Nu ai 25, 000 Activity Points.");
					if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots]) return Info(playerid, "Nu ai sloturi libere.");
					PlayerInfo[playerid][pActivity] -= 25_000;
					pUpdateInt(playerid, "Activity", PlayerInfo[playerid][pActivity]);
					InsertVehicle(playerid, 67, true);
				}
			}
		}
		case DIALOG_REALSHOP:
		{
			if(!response || listitem < 0 || listitem >= 9) return true;
			
			new
				Cost = strval(RealShopInfo[listitem][1])
			;

			if(PlayerInfo[playerid][pRealMoney] < Cost)
				return SendMsg(playerid, COLOR_SERVER, "Real Shop >> {ffffff}Nu ai %d Real Money.", Cost);

			switch(listitem)
			{
				case 0 .. 2:
				{
					if(PlayerInfo[playerid][pHouse] != 0)
						return SendMsg(playerid, COLOR_SERVER, "Real Shop >> {ffffff}Ai deja o casa.");

					gString[0] = (EOS);
					format(gString, sizeof(gString), "Vrei sa cumperi o %s aici?\nCosta: %d Real Money.", RealShopInfo[listitem][0], Cost);
					SPD(playerid, DIALOG_BUYCUSTOMHOUSE, DIALOG_STYLE_MSGBOX, RealShopInfo[listitem][0], gString, "Inainte", "Anuleaza");
				}
				case 3 .. 4:
				{
					if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots])
						return SendMsg(playerid, COLOR_SERVER, "Real Shop >> {ffffff}Nu ai un slot liber.");

					new
						Stocks[2] = {61, 59}
					;

					InsertVehicle(playerid, Stocks[listitem - 3], true, true);
				}
				case 5:
				{
					PlayerInfo[playerid][pPremiumPoints] += 50;
					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
				}
				case 6:
				{
					GivePlayerCash(playerid, 50_000_000);
				}
				case 7:
				{
					Query_Mysql("delete from punishlogs where playerid = %d", PlayerInfo[playerid][pSQLID]);
				}
				case 8:
				{
					PlayerInfo[playerid][pBattlepassPremiums] ++;
					pUpdateInt(playerid, "BattlepassPremiums", PlayerInfo[playerid][pBattlepassPremiums]);
				}
			}

			Selected2[playerid] = listitem;

			if(listitem >= 3)
			{
				PlayerInfo[playerid][pRealMoney] -= Cost;
				pUpdateInt(playerid, "RealMoney", PlayerInfo[playerid][pRealMoney]);
				SendMsg(playerid, COLOR_SERVER, "Real Shop >> {ffffff}Ai platit %d Real Money pentru %s.", Cost, RealShopInfo[listitem][0]);
			}
		}
		case DIALOG_BUYCUSTOMHOUSE:
		{
			if(!response) return true;

			new
				Float: X,
				Float: Y,
				Float: Z,
				Interiors[3] = {1, 12, 33},
				Int = Interiors[Selected2[playerid]],
				Cost = strval(RealShopInfo[Selected2[playerid]][1])
			;

			GetPlayerPos(playerid, X, Y, Z);

			gString[0] = (EOS);

			mysql_format(SQL, gString, 256, "INSERT INTO `houses` (Entrancex, Entrancey, Entrancez, Exitx, Exity, Exitz, Interior) VALUES (%f, %f, %f, %f, %f, %f, %d)",
				X, Y, Z, HouseInteriors[Int][0], HouseInteriors[Int][1], HouseInteriors[Int][2], floatround(HouseInteriors[Int][3]));

			mysql_tquery(SQL, gString, "CreateHouse", "iffffffddd",
				playerid, X, Y, Z, HouseInteriors[Int][0], HouseInteriors[Int][1], HouseInteriors[Int][2], floatround(HouseInteriors[Int][3]), true, PlayerInfo[playerid][pSession]);

			PlayerInfo[playerid][pRealMoney] -= Cost;
			pUpdateInt(playerid, "RealMoney", PlayerInfo[playerid][pRealMoney]);
		}
		case DIALOG_SELECTROUTE: {
			if(!response){
				if(JobVeh[playerid] != -1) DestroyVehicleEx(JobVeh[playerid]), JobVeh[playerid] = -1;
				JobWorking[playerid] = false;
				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;
				SetPVarInt(playerid, "rutaselectata", -1);
				return true;
			}
			if(listitem < 0) return true;
			if(listitem == GetPVarInt(playerid, "rutaselectata")) return ShowTrucker(playerid), Info(playerid, "Nu poti alege aceasi ruta.");
			new
				zone[64],
				Float: Distanta = GetPlayerDistanceFromPoint(playerid, TruckerDest[listitem][0], TruckerDest[listitem][1], TruckerDest[listitem][2])
			;
			if(Distanta > 2500)
			{
				CursaLungaTrucker[playerid] = true;
			}
			else
			{
				CursaLungaTrucker[playerid] = false;
			}
			KmTrucker[playerid] = Distanta;
			Get3DZone(TruckerDest[listitem][0], TruckerDest[listitem][1], TruckerDest[listitem][2], zone, 64);
			Info(playerid, "Urmeaza checkpoint-ul pentru a ajunge in %s, distanta: %0.2fm.", zone, Distanta);
			SetPVarInt(playerid, "rutaselectata", listitem);
			JobWorking[playerid] = true;
			SetPlayerCheckpointEx(playerid, TruckerDest[listitem][0], TruckerDest[listitem][1], TruckerDest[listitem][2], 5.0);
			CP[playerid] = 325;
		} case DIALOG_FRAGMENTS: {
			if(!response || listitem < 0) return true;
			
			if(LuckyType[playerid])
				return SendMsg(playerid, COLOR_SERVER, "Lucky >> {ffffff}Esti deja intr-un Lucky.");

			if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots]) return Info(playerid, "Nu ai sloturi libere.");
			new
				Vehicles[8] = {61, 59, 60, 2, 27, 18, 1, 6},
				Cost[8] = {7, 6, 5, 4, 4, 4, 4, 4}
			;
			if(PlayerInfo[playerid][pFragments][listitem + 1] < Cost[listitem]) return Info(playerid, "Nu ai %d fragmente pentru acel vehicul.", Cost[listitem]);
			for(new i = 0; i < sizeof(FragmentTD); i++)
			{
				TextDrawShowForPlayer(playerid, FragmentTD[i]);
			}
			PlayerTextDrawSetPreviewModel(playerid, FragmentPTD[0], StockInfo[Vehicles[listitem]][vModel]);
			PlayerTextDrawSetString(playerid, FragmentPTD[1], GetVehicleName(StockInfo[Vehicles[listitem]][vModel]));
			for(new i = 0; i < sizeof(FragmentPTD); i++)
			{
				PlayerTextDrawShow(playerid, FragmentPTD[i]);
			}
			SelectTextDraw(playerid, HOVER_COLOR);
			InTextdrawMenu[playerid] = 4;
			SelectedFragment[playerid] = listitem;
		} case DIALOG_TRADE: {
			if(!response) return true;
			if(TradeReady[playerid] || TradeID[playerid] == -1) return true; new id = TradeID[playerid];
			switch(listitem){
				case 0: {
					new stringa[32];
					GetPVarString(playerid, "MoneyTrade", stringa, sizeof(stringa));
					if(!strmatch(stringa, "none")) return Info(playerid, "Ai pus deja o suma de bani!"); 
					SetPVarInt(playerid, "dialogTradeID", 1);
					SPD(playerid, DIALOG_TRADE_ADAUGAT, DIALOG_STYLE_INPUT, "Trade money:", "Pune mai jos suma de bani pe care o doresti sa o pui!", "Ok", "Back");
				} case 1: {
					if(GetPVarInt(playerid, "HouseTrade") != -1) return Info(playerid, "Ai pus deja casa!");
					if(PlayerInfo[playerid][pHouse] == 0) return Info(playerid, "Nu ai o casa.");			
					if(PlayerInfo[id][pHouse] != 0) return Info(playerid, "Acel player are deja o casa!");
					SetPVarInt(playerid, "dialogTradeID", 2);
					SPD(playerid, DIALOG_TRADE_ADAUGAT, DIALOG_STYLE_MSGBOX, "Trade house:", "Esti sigur ca vrei sa iti adaugi casa in trade?", "Ok", "Back"); 
				} case 2: {
					if(GetPVarInt(playerid, "BusinessTrade") != -1) return Info(playerid, "Ai pus deja afacerea!");
					if(PlayerInfo[playerid][pBizz] == 0) return Info(playerid, "Nu ai o afacere!");
					if(PlayerInfo[id][pBizz] != 0) return Info(playerid, "Acel player are deja o afacere!");
					SetPVarInt(playerid, "dialogTradeID", 3);
					SPD(playerid, DIALOG_TRADE_ADAUGAT, DIALOG_STYLE_MSGBOX, "Trade business:", "Esti sigur ca vrei sa iti adaugi businessul in trade?", "Ok", "Back"); 
				} case 3: {
					new veh[124], count;
					if(GetPVarInt(playerid, "CarTrade") != -1) return Info(playerid, "Ai pus deja un vehicul!");
					gString[0] = (EOS);
					for(new x; x < PlayerInfo[playerid][pVehSlots]; x++){
						if(PlayerInfo[playerid][pVeh][x] != -1){
							format(veh, 124, "{ffffff}%s\n", GetVehicleName(PlayerInfo[playerid][pVehModel][x]));
							strcat(gString, veh);
							PlayerInfo[playerid][pSelectedVehicle][count] = x;
							count ++;
						}
					} 
					if(count < 1) return Info(playerid, "Nu ai un vehicul."); 
					SPD(playerid, DIALOG_TRADE_VEHICLE, DIALOG_STYLE_LIST, "Trade vehicle:", gString, "Enter", "Back"); 
				} case 4: {
					if(GetPVarInt(playerid, "SkinTrade") != -1) return Info(playerid, "Ai pus deja un Skin.");
					if(PlayerInfo[playerid][pModel] == DefaultSkin) return Info(playerid, "Nu poti pune Skin-ul default.");
					if(GetSkinSlots(id) < 1) return Info(playerid, "Acel jucator nu are sloturi.");
					SetPVarInt(playerid, "dialogTradeID", 4);
					SPD(playerid, DIALOG_TRADE_ADAUGAT, DIALOG_STYLE_MSGBOX, "Trade skin:", "Esti sigur ca vrei sa iti adaugi Skin-ul actual in trade?", "Da", "Nu");
				} case 5: {
					if(GetPVarInt(playerid, "JobTrade") != -1) return Info(playerid, "Ai pus deja un Job");
					if(!PlayerInfo[playerid][pOwnedJob]) return Info(playerid, "Nu ai un Job.");
					SetPVarInt(playerid, "dialogTradeID", 5);
					SPD(playerid, DIALOG_TRADE_ADAUGAT, DIALOG_STYLE_MSGBOX, "Trade Job:", "Esti sigur ca vrei sa iti adaugi Jobul in trade?", "Da", "Nu");
				}
				case 6:
				{
					if(GetPVarInt(playerid, "BillboardTrade") != -1) return Info(playerid, "Ai pus deja un Panou.");
					if(!PlayerInfo[playerid][pBillboard]) return Info(playerid, "Nu ai un Panou.");
					SetPVarInt(playerid, "dialogTradeID", 6);
					SPD(playerid, DIALOG_TRADE_ADAUGAT, DIALOG_STYLE_MSGBOX, "Trade Panou:", "Esti sigur ca vrei sa iti adaugi Panoul in trade?", "Da", "Nu");
				}
				case 7:
				{
					if(GetPVarInt(playerid, "VoucherTrade") != -1) return Info(playerid, "Ai pus deja un Voucher.");

					gString[0] = (EOS);

					format(gString, sizeof gString, "Normal Vouchers: %d\nEpic Vouchers: %d\nPremium Vouchers: %d\nLegendary Vouchers: %d\nOG Vouchers: %d",
						PlayerInfo[playerid][pVouchers][0], PlayerInfo[playerid][pVouchers][1], PlayerInfo[playerid][pVouchers][2], PlayerInfo[playerid][pVouchers][3],
						PlayerInfo[playerid][pVouchers][4]);

					SPD(playerid, DIALOG_TRADE_VOUCHER, DIALOG_STYLE_LIST, "Vouchere", gString, "Alege", "Anuleaza");
				}
				case 8:
				{
					if(GetPVarInt(playerid, "HiddenTrade") != -1) return Info(playerid, "Ai pus deja hiddens.");

					SetPVarInt(playerid, "dialogTradeID", 8);
					SPD(playerid, DIALOG_TRADE_ADAUGAT, DIALOG_STYLE_INPUT, "Trade Hiddens:", "Pune mai jos suma de hiddens pe care o doresti sa o pui!", "Ok", "Back");
				}
			}
		} case DIALOG_TRADE_ADAUGAT: {
			if(!response) return ShowTrade(playerid);
			new id = TradeID[playerid];
			if(id == -1) return true;
			switch(GetPVarInt(playerid, "dialogTradeID")){
				case 1: {
					if(!IsNumeric(inputtext))
						return SendMsg(playerid, COLOR_SERVER, "Suma este invalida.");


					new BigInt:TempMoney;
					converBytes(TempMoney, inputtext);

					if(bytes32(TempMoney) < 1)
						return SendMsg(playerid, COLOR_SERVER, "Suma este invalida.");

					if(!HaveCashForDs(playerid, valueBigInt(TempMoney)))
						return Info(playerid, "Nu ai aceasta suma de bani.");

					AddTradeItem(playerid, 0, 0, valueBigInt(TempMoney));
				} case 2: {
					if(PlayerInfo[playerid][pHouse] == 0) return SendMsg(playerid, COLOR_SERVER, "Nu ai o casa.");
					if(PlayerInfo[id][pHouse] != 0) return Info(playerid, "Acel player are deja o casa!");
					AddTradeItem(playerid, 1, 0);			
				} case 3: {
					if(PlayerInfo[playerid][pBizz] == 0) return SendMsg(playerid, COLOR_SERVER, "Nu ai o afacere!");
					if(PlayerInfo[id][pBizz] != 0) return SendMsg(playerid, COLOR_SERVER, "Acel player are deja o afacere!");
					AddTradeItem(playerid, 2, 0);
				} case 4: {
					if(PlayerInfo[playerid][pModel] == DefaultSkin) return Info(playerid, "Nu poti pune Skin-ul default.");
					if(GetSkinSlots(id) < 1) return Info(playerid, "Acel jucator nu are sloturi.");
					new are;
					for(new i; i < PlayerInfo[playerid][pSkinSlots]; i++){
						if(PlayerInfo[playerid][pSkins][i] == PlayerInfo[playerid][pModel]){
							are = 1;
						}
					}
					if(are) AddTradeItem(playerid, 4, 0);
					else Info(playerid, "Nu ai Skin-ul in inventar.");
				} case 5: {
					if(!PlayerInfo[playerid][pOwnedJob]) return Info(playerid, "Nu ai un Job.");
					if(PlayerInfo[id][pOwnedJob]) return Info(playerid, "Acel jucator are deja un Job.");
					AddTradeItem(playerid, 5, 0);
				}
				case 6:
				{
					if(!PlayerInfo[playerid][pBillboard]) return Info(playerid, "Nu ai un Panou.");
					if(PlayerInfo[id][pBillboard]) return Info(playerid, "Acel jucator are deja un Panou.");
					AddTradeItem(playerid, 6, 0);
				}
				case 8:
				{
					if(!IsNumeric(inputtext))
						return Info(playerid, "Suma este invalida.");

					if(strval(inputtext) < 1)
						return SendMsg(playerid, COLOR_SERVER, "Suma este invalida.");

					if(PlayerInfo[playerid][pHiddens] < strval(inputtext))
						return Info(playerid, "Nu ai %d hiddens.", strval(inputtext));

					AddTradeItem(playerid, 8, strval(inputtext));
				}
			}
		} case DIALOG_TRADE_VEHICLE: {
			if(!response || listitem < 0) return ShowTrade(playerid);
			new
				SelectedVeh = PlayerInfo[playerid][pSelectedVehicle][listitem]
			;
			if(SelectedVeh == -1) return Info(playerid, "Nu ai selectat nimic.");
			AddTradeItem(playerid, 3, PlayerInfo[playerid][pSelectedVehicle][listitem]);
		} case DIALOG_ARENA: {
			if(!response) return true;
			switch(listitem){
				case 0: {
					if(PlayerInfo[playerid][pParkour]) return Info(playerid, "Poti sa faci parkour-ul o data pe zi.");
					if(Iter_Contains(InParkour, playerid)) return Info(playerid, "Esti deja la parkour.");
					StartParkour(playerid);
					SetPlayerVirtualWorld(playerid, playerid + 1);
					Iter_Add(InParkour, playerid);
				}
				case 1: {
					if(Iter_Contains(InPaint, playerid)) return Info(playerid, "Deja te afli in paint, foloseste /leave.");
					if(PlayerInfo[playerid][pGunLic] < 1) return Info(playerid, "Nu ai licenta gun.");
					if(PlayerInfo[playerid][pWantedLevel] >= 1) return Info(playerid, "Nu poti intra deoarece ai wanted.");
					if(OnDuty[playerid]) return Info(playerid, "Nu poti intra deoarece esti on-duty.");
					if(soexpire[playerid]) return Info(playerid, "Nu poti folosi aceasta comanda deoarece ai fost somat recent de un politist.");
					ResetPlayerWeapons(playerid);
					format(String, 64, "%s s-a alaturat arenei paintball.", GetName(playerid));
					SendPaintMessage(COLOR_SERVER, String);
					Iter_Add(InPaint, playerid);
					defer Spawn(playerid, PlayerInfo[playerid][pSession]);
					paintkills[playerid] = 0;
					FreezePlayer(playerid, true);
					defer UnfreezeTimer(playerid, PlayerInfo[playerid][pSession]);
					if(Iter_Count(InPaint) == 2 && painttime == -1) painttime = 195;
				}
				case 2: SPD(playerid, DIALOG_BOX, DIALOG_STYLE_INPUT, "Box", "Trebuie sa introduci id-ul / numele jucatorului urmat de suma de bani\nEx: 11 5000000", "Terminat", "Anuleaza");
				case 3: SPD(playerid, DIALOG_DUEL, DIALOG_STYLE_INPUT, "Duel", "Trebuie sa introduci id-ul / numele jucatorului urmat de suma de bani\nEx: 11 5000000", "Terminat", "Anuleaza");
				case 4:
				{
					if(PlayerInfo[playerid][pGunLic] < 1) return Info(playerid, "Ai nevoie de licenta de arme.");
					if(Iter_Contains(InSkyWars, playerid)) return Info(playerid, "Esti deja in arena de Sky Wars.");
					if(GetPlayerCash(playerid) < 1_000_000) return Info(playerid, "Ai nevoie de $1, 000, 000 pentru a intra.");
					if(Iter_Count(InSkyWars) > 3) return Info(playerid, "Sunt deja 4 jucatori in arena de Sky Wars.");
					if(SkyWarsStarted != false) return Info(playerid, "Runda a inceput deja.");
					InsulaSkywars[SkyWarsMoney] = playerid;
					GivePlayerCash(playerid, -1_000_000);
					SkyWarsMoney ++;
					SetPlayerVirtualWorld(playerid, 3055);
					SetPlayerPosEx(playerid, -1828.3173, 2407.6216, 152.1617);
					Iter_Add(InSkyWars, playerid);
					SendMsg(playerid, COLOR_SERVER, "Sky Wars >> {ffffff}Ai intrat in lobby-ul de Sky Wars!");
					foreach(new x : InSkyWars)
					{
						SendMsg(x, COLOR_SERVER, "Sky Wars >> {ffffff}%s s-a alaturat rundei.", GetName(playerid));
					}
					switch(Iter_Count(InSkyWars))
					{
						case 1:
						{
							SendMsg(playerid, COLOR_SERVER, "Sky Wars >> {ffffff}Runda are nevoie de minim 2 jucatori pentru a incepe.");
						}
						case 2:
						{
							SkyWarsTimer = gettime() + 60;
							foreach(new x : InSkyWars)
							{
								SendMsg(x, COLOR_SERVER, "Sky Wars >> {ffffff}Runda va incepe in %d secunde.", SkyWarsTimer - gettime());
							}
						}
						case 3:
						{
							SendMsg(playerid, COLOR_SERVER, "Sky Wars >> {ffffff}Runda va incepe in %d secunde.", SkyWarsTimer - gettime());
						}
						case 4:
						{
							if(SkyWarsTimer > 15)
							{
								SkyWarsTimer = gettime() + 15;
							}
							foreach(new x : InSkyWars)
							{
								SendMsg(x, COLOR_SERVER, "Sky Wars >> {ffffff}Runda va incepe in %d secunde.", SkyWarsTimer - gettime());
							}
						}
					}
					TextDrawShowForPlayer(playerid, SkyWarsTD);
					FreezePlayer(playerid, true);
					defer UnfreezeTimer(playerid, PlayerInfo[playerid][pSession]);
					SetPlayerHP(playerid, 1000);
					SetPlayerArm(playerid, 0);
					ResetPlayerWeapons(playerid);
				}
				case 5:
				{
					if(PlayerInfo[playerid][pDailyStunt]) return SendMsg(playerid, COLOR_SERVER, "Stunt >> {ffffff}Poti face stunt-ul o data pe zi.");
					if(PlayerInfo[playerid][pVehLic] < 1) return SendMsg(playerid, COLOR_SERVER, "Stunt >> {ffffff}Nu ai licenta de condus.");
					if(HaveCheckpoint(playerid)) return true;
					for(new i = 0; i < sizeof(ObjectsStunt); i++)
					{
						StuntObjects[playerid][i] = CreatePlayerObject(playerid, floatround(ObjectsStunt[i][0]), ObjectsStunt[i][1], ObjectsStunt[i][2], ObjectsStunt[i][3], ObjectsStunt[i][4], ObjectsStunt[i][5], ObjectsStunt[i][6]);
					}
					StuntPickup[playerid] = CreateDynamicPickup(1636, 14, 1722.5780,-2611.0991,28.8355, playerid + 1);
					SetPlayerVirtualWorld(playerid, playerid + 1);
					StuntVehicle[playerid] = CreateVehicleEx(522, 1429.0388, -2592.8960, 13.5469, 270, random(256), random(256), -1);
					SetVehicleVirtualWorld(StuntVehicle[playerid], playerid + 1);
					PutPlayerInVehicleEx(playerid, StuntVehicle[playerid], 0);
					SetPlayerCheckpointEx(playerid, 1772.4197, -2617.0647, 30.5437, 3);
					CP[playerid] = 371;
					Iter_Add(InStunt, playerid);
					StuntTime[playerid] = 90;
					PlayerTextDrawShow(playerid, StuntPTD);
					va_PlayerTextDrawSetString(playerid, StuntPTD, "Stunt System~n~~w~Mai ai %d de secunde.", StuntTime[playerid]);
				}
			}
		} case DIALOG_BOX: {
			if(!response) return true;
			new id, money;
			if(sscanf(inputtext, "ud", id, money)) return SPD(playerid, DIALOG_BOX, DIALOG_STYLE_INPUT, "Box", "Trebuie sa introduci id-ul / numele jucatorului urmat de suma de bani\nEx: 11 5000000", "Terminat", "Anuleaza");
			if(money < 1 || money > 5000000) return Info(playerid, "Poti juca pe maxim $5, 000, 000 si minim $1.");
			if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
			if(id == playerid) return Info(playerid, "Nu te poti provoca singur.");
			if(GetDistanceBetweenPlayers(playerid, id) > 10) return Info(playerid, "Nu esti langa acel player.");
			if(money > GetPlayerCash(playerid)) return Info(playerid, "Nu ai bani.");
			if(money > GetPlayerCash(id)) return Info(playerid, "Acel jucator nu are bani.");
			Info(playerid, "I-ai trimis o invitate de box lui %s.", GetName(id));
			Info(id, "%s ti-a trimis o invitatie de box, cu miza de $%s, foloseste /accept box %d.", GetName(playerid), FormatNumber(money), playerid);
			SetPVarInt(id, "ainvite", playerid);
			SetPVarInt(playerid, "ainvite", id);
			SetPVarInt(id, "amoney", money);
			SetPVarInt(playerid, "amoney", money);
			SetPVarInt(id, "atype", 1);
		} case DIALOG_DUEL: {
			if(!response) return true;
			new id, money;
			if(sscanf(inputtext, "ud", id, money)) return SPD(playerid, DIALOG_DUEL, DIALOG_STYLE_INPUT, "Box", "Trebuie sa introduci id-ul / numele jucatorului urmat de suma de bani\nEx: 11 5000000", "Terminat", "Anuleaza");
			if(PlayerInfo[playerid][pGunLic] < 1 || PlayerInfo[playerid][pGunLic] < 1) return Info(playerid, "Unul dintre voi nu detine licenta de arme.");
			if(money < 1 || money > 5000000) return Info(playerid, "Poti juca pe maxim $5, 000, 000 si minim $1.");
			if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
			if(id == playerid) return Info(playerid, "Nu te poti provoca singur.");
			if(GetDistanceBetweenPlayers(playerid, id) > 10) return Info(playerid, "Nu esti langa acel player.");
			if(money > GetPlayerCash(playerid)) return Info(playerid, "Nu ai bani.");
			if(money > GetPlayerCash(id)) return Info(playerid, "Acel jucator nu are bani.");
			Info(playerid, "I-ai trimis o invitate de duel lui %s.", GetName(id));
			Info(id, "%s ti-a trimis o invitatie de duel, cu miza de $%s, foloseste /accept duel %d.", GetName(playerid), FormatNumber(money), playerid);
			SetPVarInt(id, "ainvite", playerid);
			SetPVarInt(playerid, "ainvite", id);
			SetPVarInt(id, "amoney", money);
			SetPVarInt(playerid, "amoney", money);
			SetPVarInt(id, "atype", 2);
		} case DIALOG_MENU: {
			if(!response) return true;
			switch(listitem){
				case 0: PC_EmulateCommand(playerid, "/stats");
				case 1: PC_EmulateCommand(playerid, "/gps");
				case 2: PC_EmulateCommand(playerid, "/v");
				case 3: PC_EmulateCommand(playerid, "/killcp");
				case 4: PC_EmulateCommand(playerid, "/quitjob");
				case 5: PC_EmulateCommand(playerid, "/lock");
				case 6: PC_EmulateCommand(playerid, "/tasks");
				case 7: PC_EmulateCommand(playerid, "/factions");
				case 8: PC_EmulateCommand(playerid, "/skills");
				case 9: PC_EmulateCommand(playerid, "/achievements");
			}
		} case DIALOG_RESETRAPORT: {
			if(!response) return true;
			foreach(new i : FactionMembers[PlayerInfo[playerid][pMember]])
			{
				if(PlayerInfo[i][pMember] == PlayerInfo[playerid][pMember])
				{
					PlayerInfo[i][pRaport] = 0;
					pUpdateInt(i, "Raport", PlayerInfo[i][pRaport]);
				}
			}
			Query_Mysql("UPDATE `users` SET `Raport` = '0' WHERE `Member` = '%d'", PlayerInfo[playerid][pMember]);
			Info(playerid, "Ai resetat raport-ul membriilor."); 
		} case DIALOG_PCOLOR:
		{ 
			if(!response)
				return true;

			new
				Colors[28][7] =
				{
					"CECECE",
					"0087FE",
					"4700C2",
					"EBFF00",
					"EF00FF",
					"40FF00",
					"9CFF29",
					"0E7F03",
					"FF9A00",
					"6E6E6E",
					"FF4C9D",
					"F4FA58",
					"00BFFF",
					"819FF7",
					"FE9A2E",
					"FA8258",
					"00FF40",
					"D358F7",
					"4169E1",
					"9ACD32",
					"F0E68C",
					"BDB76B",
					"FF1493",
					"9966CC",
					"F0B2B2",
					"DB7093",
					"E70031",
					"AB0000"
				}
			;

			format(PlayerInfo[playerid][pColor], 7, Colors[listitem]);

			pUpdateStr(playerid, "Color", PlayerInfo[playerid][pColor]); 
			
			SendMsg(playerid, COLOR_SERVER, ">> {%s}Culoarea{ffffff} numelui ti-a fost schimbata.", PlayerInfo[playerid][pColor]); 
		} 
		case DIALOG_BUYGARAGE:{
			if(!response) return true;
			new casa = PlayerInfo[playerid][pHouse], Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			HouseInfo[casa][hGarageX] = x;
			HouseInfo[casa][hGarageY] = y;
			HouseInfo[casa][hGarageZ] = z;
			HouseInfo[casa][hGarageLocked] = false;
			PlayerInfo[playerid][pPremiumPoints] -= 500;
			pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
			Query_Mysql("UPDATE `houses` SET `GarageX` = '%f', `GarageY` = '%f', `GarageZ` = '%f', `GarageLocked` = '%d' WHERE `ID` = '%d'", x, y, z, HouseInfo[casa][hGarageLocked], casa);
			UpdateLabel(1, casa);
			Info(playerid, "Ai cumparat garajul in aceasta pozitie.");
		}
		case DIALOG_QUITGROUP: {
			if(!response) return true;
			if(pfVehicle[playerid] != -1) DestroyVehicleEx(pfVehicle[playerid]), Iter_Remove(fVehicles[PlayerInfo[playerid][pMember]], pfVehicle[playerid]), pfVehicle[playerid] = -1;
			new string2[128];
			format(string2, sizeof string2, "%s left faction %s (R%d) after %d days using /quitgroup, with 20 FP.", GetName(playerid), FactionName(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank], GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
			Query_Mysql("INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','0')", string2, PlayerInfo[playerid][pSQLID]);
			defer Spawn(playerid, PlayerInfo[playerid][pSession]); SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]); SetPlayerArm(playerid, 0); ResetPlayerWeapons(playerid);
			if(Iter_Contains(FactionMembers[PlayerInfo[playerid][pMember]], playerid)) Iter_Remove(FactionMembers[PlayerInfo[playerid][pMember]], playerid);
			PlayerInfo[playerid][pRank] = 0; PlayerInfo[playerid][pMember] = 0; PlayerInfo[playerid][pFactionJoin] = 0; PlayerInfo[playerid][pFpunish] = 20;
			pUpdateInt(playerid, "Member", 0); pUpdateInt(playerid, "Rank", 0);
			pUpdateInt(playerid, "FPunish", 20); pUpdateInt(playerid, "FWarn", 0); pUpdateInt(playerid, "FactionJoin", 0);	
			PlayerInfo[playerid][pRaport] = 0; pUpdateInt(playerid, "Raport", PlayerInfo[playerid][pRaport]);
			ResetSetGuns(playerid);
		} case DIALOG_GO: {
			if(!response) return true;
			switch(listitem){
				case 0: SetPlayerPosEx(playerid, -1399.4966, 994.9622, 1024.0919);
				case 1: SetPlayerPosEx(playerid, -2318.1743, -1638.0083, 483.7031);
				case 2: SetPlayerPosEx(playerid, 1530.7354, -1671.6074, 13.3828);
				case 3: SetPlayerPosEx(playerid, 1699.2, 1435.1, 10.7); 
				case 4: SetPlayerPosEx(playerid, -1998.0967, 128.7131, 27.6875); 
			} if(listitem == 0) SetPlayerInterior(playerid, 15), SetPlayerVirtualWorld(playerid, 69);
			else if(listitem > 0) SetPlayerInterior(playerid, 0), SetPlayerVirtualWorld(playerid, 0);
		} case DIALOG_UPGRADES: {
			if(!response) return true;
			switch(listitem){
				case 0:{
					if(PlayerInfo[playerid][pPremiumPoints] < 250) return Info(playerid, "Stage-ul costa 250PP.");
					new s = SelectedCar[playerid];
					if(GetVehicleMaxSpeed(PlayerInfo[playerid][pVehModel][s]) == 0) return Info(playerid, "Nu poti pune stage pe acest vehicul.");
					if(PlayerInfo[playerid][pVehStage][s]) return Info(playerid, "Ai deja Stage pe acest vehicul.");
					PlayerInfo[playerid][pVehStage][s] = true;
					AddToStageVehicles(playerid, s);
					Query_Mysql("UPDATE `cars` SET `Stage`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pVehStage][s], PlayerInfo[playerid][pVeh][s]);
					Info(playerid, "Ai platit 250PP pentru a-ti pune Stage.");
					PlayerInfo[playerid][pPremiumPoints] -= 250;
					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
				} 
				case 1:
				{
					SPD(playerid, DIALOG_NEON, DIALOG_STYLE_LIST, "Alege-ti culoarea neonului", "Galben - 100PP\nVerde - 150PP\nAlbastru - 200PP\nRosu - 250PP\nRoz - 300PP\nAlb - 350PP\nCustom - 400PP\nRemove Neon", "Alege", "Anuleaza");
				}
				case 2:{
					if(PlayerInfo[playerid][pOGPoints] < 1000) return Info(playerid, "Working-ul costa 1, 000 OGPoints.");
					new s = SelectedCar[playerid];
					if(PlayerInfo[playerid][pVehWorking][s]) return Info(playerid, "Ai deja Working pe acest vehicul.");
					PlayerInfo[playerid][pVehWorking][s] = true;
					Query_Mysql("UPDATE `cars` SET `Working`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pVehWorking][s],PlayerInfo[playerid][pVeh][s]);
					Info(playerid, "Ai platit 1, 000 OGPoints pentru a-ti pune Working.");
					PlayerInfo[playerid][pOGPoints] -= 1000;
					pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
				}
				case 3: {
					if(PlayerInfo[playerid][pPremiumPoints] < 350) return Info(playerid, "Nu ai 350PP.");
					new s = SelectedCar[playerid];
					if(PlayerInfo[playerid][pVehVip][s]) return Info(playerid, "Vehiculul tau este deja VIP.");
					PlayerInfo[playerid][pVehVip][s] = true;
					Query_Mysql("UPDATE `cars` SET `VipVehicle`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pVehVip][s], PlayerInfo[playerid][pVeh][s]);
					PlayerInfo[playerid][pPremiumPoints] -= 350;
					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					Info(playerid, "Ai platit 350PP pentru a-ti face vehiculul VIP.");
					vehicleid = PlayerInfo[playerid][pVehID][s];
					new
						FormatedText[64]
					;
					format(VipTextColor[playerid][s], 64, "ffffff");
					format(VipText[playerid][s], 64, "VipText");
					for(new nr = 0; nr < 6; nr++)
					{
						VipTextPos[nr][playerid][s] = 0;
					}
					format(FormatedText, sizeof(FormatedText), "{%s}%s", VipTextColor[playerid][s], VipText[playerid][s]);
					CreateAndAttachVipText(vehicleid, FormatedText, 0, 0, 0, 0, 0, 0);
					Info(playerid, "Foloseste comanda /vipmenu pentru mai multe informatii.");
				}
				case 4:
				{
					if(PlayerInfo[playerid][pPremiumPoints] < 200)
						return Info(playerid, "Nu ai 200PP.");

					new s = SelectedCar[playerid];

					if(PlayerInfo[playerid][pVehRainbow][s])
						return Info(playerid, "Vehiculul tau este deja Rainbow.");

					PlayerInfo[playerid][pVehRainbow][s] = true;
					Query_Mysql("UPDATE `cars` SET `Rainbow`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pVehRainbow][s], PlayerInfo[playerid][pVeh][s]);

					PlayerInfo[playerid][pPremiumPoints] -= 200;
					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);

					Info(playerid, "Ai platit 200PP pentru a-ti face vehiculul Rainbow.");
				}
				case 5:
				{
					new
						s = SelectedCar[playerid]
					;

					if(PlayerInfo[playerid][pVehNeonCustom][s] != true)
						return Info(playerid, "Vehiculul tau nu are Neon Custom.");

					SPD(playerid, DIALOG_CUSTOMNEON, DIALOG_STYLE_LIST, "Schimbare Culoare Neon", "Galben\nVerde\nAlbastru\nRosu\nRoz\nAlb\nAscunde", "Alege", "Anuleaza");
				}
			}
		} case DIALOG_NEON: {
			if(!response || listitem < 0) return true;
			new ppuri[7] = {100, 150, 200, 250, 300, 350, 400}, obiect[7] = {18650, 18649, 18648, 18647, 18651, 18652, 18652};
			if(listitem == 7){
				new s = SelectedCar[playerid];
				if(!PlayerInfo[playerid][pVehNeon][s]) return Info(playerid, "Nu ai neon pe acest vehicul.");
				for(new i; i < 7; i++){
					if(obiect[i] == PlayerInfo[playerid][pVehNeon][s]){
						SetPVarInt(playerid, "PPNeon", ppuri[i] / 2);
					}
				}
				gString[0] = (EOS);
				format(gString, 128, "Esti sigur ca vrei sa-ti stergi neon-ul?\nVei primi %dPP daca faci asta.", GetPVarInt(playerid, "PPNeon"));
				SPD(playerid, DIALOG_REMOVENEON, DIALOG_STYLE_MSGBOX, "Stergere Neon", gString, "Da", "Nu");
				return true;
			}
			if(PlayerInfo[playerid][pPremiumPoints] < ppuri[listitem]) return Info(playerid, "Ai nevoie de %dPP.", ppuri[listitem]);
			new s = SelectedCar[playerid];
			if(PlayerInfo[playerid][pVehNeonCustom][s]) return Info(playerid, "Ai neon custom pe acest vehicul.");
			if(PlayerInfo[playerid][pVehNeon][s] == obiect[listitem] && listitem != 6) return Info(playerid, "Ai deja acest neon pe acest vehicul."); 
			PlayerInfo[playerid][pVehNeon][s] = obiect[listitem];
			if(listitem == 6) PlayerInfo[playerid][pVehNeonCustom][s] = true;
			Query_Mysql("UPDATE `cars` SET `Neon`='%d', `NeonCustom` = '%d' WHERE `ID`='%d'", PlayerInfo[playerid][pVehNeon][s], PlayerInfo[playerid][pVehNeonCustom][s], PlayerInfo[playerid][pVeh][s]);
			CreateNeon(PlayerInfo[playerid][pVehID][s], PlayerInfo[playerid][pVehNeon][s]);
			Info(playerid, "Ai platit %dPP pentru a-ti pune neon.", ppuri[listitem]); 
			PlayerInfo[playerid][pPremiumPoints] -= ppuri[listitem]; 
			pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
		} case DIALOG_REMOVENEON:{
			if(!response) return true;
			new s = SelectedCar[playerid];
			PlayerInfo[playerid][pPremiumPoints] += GetPVarInt(playerid, "PPNeon");
			pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
			DestroyNeon(PlayerInfo[playerid][pVehID][s]);
			PlayerInfo[playerid][pVehNeon][s] = 0;
			PlayerInfo[playerid][pVehNeonCustom][s] = false;
			Query_Mysql("UPDATE `cars` SET `Neon`='0', `NeonCustom` = '0' WHERE `ID`='%d'", PlayerInfo[playerid][pVeh][s]);
			Info(playerid, "Ti-ai scos neon-ul si ai primit %dPP", GetPVarInt(playerid, "PPNeon"));
		} case DIALOG_PET: {
			if(!response) return true;
			switch(listitem){
				case 0: {
					switch(PlayerInfo[playerid][pPetStatus]){
						case 0: SetPlayerAttachedObject(playerid, 6, 19078, 1, 0.320722, -0.067912, -0.165151, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
						case 1: RemovePlayerAttachedObject(playerid, 6);
					}
					PlayerInfo[playerid][pPetStatus] = !PlayerInfo[playerid][pPetStatus];
					pUpdateInt(playerid, "PetStatus", PlayerInfo[playerid][pPetStatus]);
				}
				case 1: {
					gString[0] = (EOS);
					format(gString, 256, "Numele actual al pet-ului este %s\nDaca doresti sa il schimbi te rugam introdu numele dorit in casuta de mai jos\nNumele trebuie sa fie de maxim 15 caractere.", PlayerInfo[playerid][pPetName]);
					SPD(playerid, DIALOG_PETNAME, DIALOG_STYLE_INPUT, "Pet change name", gString, "Ok", "Exit");
				}
				case 2: SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Beneficii pet", "La fiecare nivel primesti in plus 10, 000$ si un rp la payday\nLa fiecare payday primesti cate un Pet Point.", "Ok", "");
				case 3: {
					new cost = 60 * PlayerInfo[playerid][pPetlevel];
					if(PlayerInfo[playerid][pPetPoints] < cost) return Info(playerid, "Nu ai %d Pet Points.", cost);
					PlayerInfo[playerid][pPetPoints] -= cost;
					pUpdateInt(playerid, "PetPoints", PlayerInfo[playerid][pPetPoints]);
					PlayerInfo[playerid][pPetlevel] ++;
					pUpdateInt(playerid, "Petlevel", PlayerInfo[playerid][pPetlevel]);
					Info(playerid, "Ti-ai avansat pet-ul la nivel %d.", PlayerInfo[playerid][pPetlevel]);				
				}
			}
		} case DIALOG_PETNAME: {
			if(!response) return true;
			if(strval(inputtext) > 15) return Info(playerid, "Maxim 15 de caractere.");
			format(PlayerInfo[playerid][pPetName], 30, inputtext);
			pUpdateStr(playerid, "PetName", inputtext);
			Info(playerid, "Noul nume al pet-ului este: %s.", inputtext);
		} case DIALOG_JAIL: {
			if(!response) return true;
			switch(listitem){
				case 0: {
					if(PlayerInfo[playerid][pEscapePoints] < 10) return Info(playerid, "Nu ai 10 escape points.");
					SetPlayerPosEx(playerid, 1771.3826, -1547.6190, 9.9133); 
					SetPlayerInterior(playerid, 0); 
					SetPlayerVirtualWorld(playerid, 305500);
					Info(playerid, "Mergi la unul dintre gardurile numerotate pentru a evada.");
				} 
				case 1: {
					new bani = PlayerInfo[playerid][pJailTime] * 500000;
					if(GetPlayerCash(playerid) < bani) return Info(playerid, "Nu ai $%s.", FormatNumber(bani));
					GivePlayerCash(playerid, -bani);
					PlayerInfo[playerid][pJailed] = 0; 
					PlayerInfo[playerid][pJailTime] = 0; 
					pUpdateInt(playerid, "Jailed", 0); 
					PlayerTextDrawHide(playerid, Jailtime); 
					defer Spawn(playerid, PlayerInfo[playerid][pSession]);
				}
			}
		}
		case DIALOG_SERVER: {
			if(!response) return true;
			switch(listitem){
				case 0: ac_onplayerdeath = !ac_onplayerdeath;
				case 1: ac_trolltimer = !ac_trolltimer;
		 		case 2: ac_fakedamage = !ac_fakedamage;
		 		case 3: restrictie = !restrictie;
			}
			Info(playerid, "Schimbari efectuate cu succes.");
		}
		case DIALOG_SETTINGS: {
			if(!response || listitem < 0) return true;
			switch(listitem)
			{
				case 0: 
				{	
					if(PlayerInfo[playerid][pClan] < 1) return Info(playerid, "Nu esti intr-un clan.");
					if(!PlayerInfo[playerid][pSettings][listitem])
					{
						SendNearbyText(playerid, COLOR_SERVER, "Setari >> {ffffff}%s si-a oprit chat-ul clanului.", GetName(playerid));
					}
					else
					{
						SendNearbyText(playerid, COLOR_SERVER, "Setari >> {ffffff}%s si-a pornit chat-ul clanului.", GetName(playerid));
					}
				}
				case 1: 
				{
					if(PlayerInfo[playerid][pMember] < 1) return Info(playerid, "Nu esti intr-o factiune");
					if(!PlayerInfo[playerid][pSettings][listitem])
					{
						SendNearbyText(playerid, COLOR_SERVER, "Setari >> {ffffff}%s si-a oprit chat-ul factiunii.", GetName(playerid));
					}
					else
					{
						SendNearbyText(playerid, COLOR_SERVER, "Setari >> {ffffff}%s si-a pornit chat-ul factiunii.", GetName(playerid));
					}
				}
				case 2:
				{
					if(!PlayerInfo[playerid][pSettings][listitem])
					{
						SendNearbyText(playerid, COLOR_SERVER, "Setari >> {ffffff}%s si-a oprit anunturile.", GetName(playerid));
					}
					else
					{
						SendNearbyText(playerid, COLOR_SERVER, "Setari >> {ffffff}%s si-a pornit anunturile.", GetName(playerid));
					}
				}
				case 3:
				{
					if(PlayerInfo[playerid][pRank] < 7 && !PlayerInfo[playerid][pAdmin]) return Info(playerid, "Nu esti lider / admin.");
					if(!PlayerInfo[playerid][pSettings][listitem])
					{
						SendNearbyText(playerid, COLOR_SERVER, "Setari >> {ffffff}%s si-a oprit chat-ul liderilor.", GetName(playerid));
					}
					else
					{
						SendNearbyText(playerid, COLOR_SERVER, "Setari >> {ffffff}%s si-a pornit chat-ul liderilor.", GetName(playerid));
					}
				}
				case 4:
				{
					if(!HavePremium(playerid) && !PlayerInfo[playerid][pAdmin]) return Info(playerid, "Nu esti utilizator premium / admin.");
					if(!PlayerInfo[playerid][pSettings][listitem])
					{
						SendNearbyText(playerid, COLOR_SERVER, "Setari >> {ffffff}%s si-a oprit chat-ul premium.", GetName(playerid));
					}
					else
					{
						SendNearbyText(playerid, COLOR_SERVER, "Setari >> {ffffff}%s si-a pornit chat-ul premium.", GetName(playerid));
					}
				}
				case 5:
				{
					if(!HaveVIP(playerid) && !PlayerInfo[playerid][pAdmin]) return Info(playerid, "Nu esti utilizator vip / admin.");
					if(!PlayerInfo[playerid][pSettings][listitem])
					{
						SendNearbyText(playerid, COLOR_SERVER, "Setari >> {ffffff}%s si-a oprit chat-ul vip.", GetName(playerid));
					}
					else
					{
						SendNearbyText(playerid, COLOR_SERVER, "Setari >> {ffffff}%s si-a pornit chat-ul vip.", GetName(playerid));
					}
				}
				case 6:
				{
					if(!PlayerInfo[playerid][pAdmin]) return Info(playerid, "Nu esti admin.");
					if(!PlayerInfo[playerid][pSettings][listitem])
					{
						SendAdmins(COLOR_RED, "Setari >> {ffffff}%s si-a oprit find-ul.", 1, GetName(playerid));
					}
					else
					{
						SendAdmins(COLOR_RED, "Setari >> {ffffff}%s si-a pornit find-ul.", 1, GetName(playerid));
					}
				}
				case 7:
				{
					if(PlayerInfo[playerid][pSettings][listitem])
					{
						Info(playerid, "Ti-ai oprit fps-urile.");
						Iter_Remove(WithFpsText, playerid);	
						PlayerTextDrawHide(playerid, FPSText);
					}
					else
					{
						Info(playerid, "Ti-ai pornit fps-urile.");
						Iter_Add(WithFpsText, playerid);
						PlayerTextDrawShow(playerid, FPSText);
						if(PlayerInfo[playerid][pSettings][10])
						{
							PlayerInfo[playerid][pSettings][10] = false;
						}
					}
				}
				case 8:
				{
					if(!PlayerInfo[playerid][pSettings][listitem])
					{
						Info(playerid, "Ti-ai dezactivat global goal-ul.");
						TextDrawHideForPlayer(playerid, GlobalGoalTD);
						HidePlayerProgressBar(playerid, GlobalGoalBar);
					}
					else
					{
						Info(playerid, "Ti-ai activat global goal-ul.");
						ShowPlayerProgressBar(playerid, GlobalGoalBar);
						TextDrawShowForPlayer(playerid, GlobalGoalTD);
						UpdateGlobalGoal(playerid);
					}
				}
				case 9:
				{
					if(PlayerInfo[playerid][pSettings][listitem])
					{
						Info(playerid, "Ti-ai dezactivat meniul pe tasta N.");
					}
					else
					{
						Info(playerid, "Ti-ai activat meniul pe tasta N.");
					}
				}
				case 10:
				{
					if(PlayerInfo[playerid][pAdmin] < 5) return Info(playerid, "Nu ai acces la asta.");
					if(PlayerInfo[playerid][pSettings][listitem])
					{
						Info(playerid, "Ti-ai dezactivat statisticile serverului.");
					}
					else
					{
						Info(playerid, "Ti-ai activat statisticile serverului.");
					}
				}
				case 11:
				{
					if(!PlayerInfo[playerid][pSettings][listitem])
					{
						SendNearbyText(playerid, COLOR_RED, "Setari >> {ffffff}%s si-a oprit telefonul.", GetName(playerid));
					}
					else
					{
						SendNearbyText(playerid, COLOR_RED, "Setari >> {ffffff}%s si-a pornit telefonul.", GetName(playerid));
					}
				}
				case 12:
				{
					if(!PlayerInfo[playerid][pSettings][listitem])
					{
						SendMsg(playerid, COLOR_RED, "Setari >> {ffffff}Ti-ai oprit tranzactiile.");
					}
					else
					{
						SendMsg(playerid, COLOR_RED, "Setari >> {ffffff}Ti-ai pornit tranzactiile.");
					}
				}
			}
			PlayerInfo[playerid][pSettings][listitem] = !PlayerInfo[playerid][pSettings][listitem];
		} case DIALOG_BUYCAR: {
			if(!response) return true;

			new
				veh = DealerShipSelected[playerid]
			;

			if(PerkActive[playerid][33])
			{
				if(!HaveCashForDs(playerid, valueBigInt(DealerShipPrice95[veh])))
					return Info(playerid, "Nu ai suficienti bani.");
			}
			else if(PerkActive[playerid][32])
			{
				if(!HaveCashForDs(playerid, valueBigInt(DealerShipPrice97[veh])))
					return Info(playerid, "Nu ai suficienti bani.");
			}
			else
			{
				if(!HaveCashForDs(playerid, valueBigInt(DealerShipPrice[veh])))
					return Info(playerid, "Nu ai suficienti bani.");
			}

			if(StockInfo[veh][vStock] < 1) 
				return SendMsg(playerid, COLOR_SERVER, "Dealership >> {ffffff}Vehiculul nu este in stoc.");

			InsertVehicle(playerid, veh);
			ShowDS(playerid);
		} case DIALOG_NEWPASS: {
			if(!response) return true; 
			new length = strlen(inputtext);
			if(length < 8 || length > 32) return Info(playerid, "Parola trebuie sa fie de minim 8 caractere, si maxim 32.");
			new escaped[33];
			mysql_escape_string(inputtext, escaped);
			format(PlayerInfo[playerid][pKey], 32 + 1, MD5_Hash(escaped));
			Info(playerid, "Noua parola este: %s.", escaped);
			pUpdateStr(playerid, "password", PlayerInfo[playerid][pKey]); 
			SetPVarInt(playerid, "deelaypass", gettime() + 10);
		} case DIALOG_CLAN: {
			if(!response) return true;
			switch(listitem){
				case 0 : Info(playerid, "/clan - clan menu, /c - clan chat, /cinvite - invite member to clan, /quitclan - quit the clan");
				case 1: {
					gString[0] = (EOS);
					mysql_format(SQL, gString, sizeof gString, "SELECT * FROM `users` WHERE `Clan` = '%d' ORDER BY `CRank` DESC", PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL, gString, "showClanMembers", "dd",playerid, PlayerInfo[playerid][pSession]);
				} case 2: {
					if(PlayerInfo[playerid][pCRank] < 6) return Info(playerid, "Nu ai rank 6+.");
					SPD(playerid, DIALOG_CLANSETTINGS, DIALOG_STYLE_LIST, "Clan Options:", "Ranknames\nColor\nBuy/Move Clan Garage\nBuy Clan Vehicles\nBuy Clan HQ\nSet Clan Tag", "Ok", "Exit");
				} case 3: {
					gString[0] = (EOS);
					format(gString, sizeof gString, "{ffffff}Clanul tau are la dispozitie {00a326}$%s{ffffff}, si %d clan points.\nBanii acestia se castiga la fiecare zona de clan castigata.\nCu acesti bani puteti cumpara vehicule clanului.", FormatNumber(ClanInfo[PlayerInfo[playerid][pClan]][clanSafe]), ClanInfo[PlayerInfo[playerid][pClan]][clanPoints]);
					SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Clan safe:", gString, "Ok", "");
				} case 4: {
					new zone[50]; gString[0] = (EOS);
					for(new i = 1; i <= serverClanZones; i++){
						if(!ClanZoneInfo[i][clanZoneClan]) format(string, 50, "Nimeni");
						else format(string, sizeof string, "%s", ClanInfo[ClanZoneInfo[i][clanZoneClan]][clanName]);
						Get3DZone(ClanZoneInfo[i][clanZoneObjX], ClanZoneInfo[i][clanZoneObjY], ClanZoneInfo[i][clanZoneObjZ], zone, 30);
						format(gString, sizeof gString, "%s#%d: %s: %s\n", gString, i, string, zone);
					} SPD(playerid, DIALOG_CLANCHECKPOINTTURF, DIALOG_STYLE_LIST, "Zone de clanuri:", gString, "Ok", "Exit");
				} case 5: {
					new
						c = PlayerInfo[playerid][pClan]
					;

					if(strmatch(ClanInfo[c][cClanTag], "None"))
						return SendMsg(playerid, COLOR_SERVER, "Clan Tag >> {ffffff}Clanul tau nu are un tag.");

					SPD(playerid, DIALOG_CLANTAG, DIALOG_STYLE_LIST, "Clan Tag", "Scoate\nInainte de nume\nDupa nume", "Alege", "Anuleaza");
				}
			}
		} case DIALOG_CLANTAG: {
			if(!response) return true;
			SetPlayerClanTag(playerid, listitem);
		} case DIALOG_CLANCHECKPOINTTURF: {
			if(!response || listitem < 0) return true;
			CP[playerid] = 43;
			SetPlayerCheckpointEx(playerid, ClanZoneInfo[listitem + 1][clanZoneObjX], ClanZoneInfo[listitem + 1][clanZoneObjY], ClanZoneInfo[listitem + 1][clanZoneObjZ], 10.0);
			Info(playerid, "Serverul ti-a setat un checkpoint la zona de clan %d.", listitem + 1);
		} case DIALOG_CLANMEMBERS: {
			if(!response || listitem < 0) return true;
			Selected2[playerid] = Selected[playerid][listitem];
			gString[0] = (EOS);
			mysql_format(SQL, gString, sizeof gString, "SELECT * FROM `users` WHERE `id` = '%d'", Selected[playerid][listitem]);
			mysql_tquery(SQL, gString, "checkClanMember", "dd",playerid, PlayerInfo[playerid][pSession]);
		} case DIALOG_CLANMEMBERS2: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 5) return true;
			SPD(playerid, DIALOG_CLANMEMBERS3, DIALOG_STYLE_LIST, "Manage User:", "Rank\nWarn-uri\nUninvite", "Alege", "Anuleaza");
		} case DIALOG_CLANMEMBERS3: {
			if(!response) return true;
			switch(listitem){
				case 0: {
					if(PlayerInfo[playerid][pCRank] < 6) return Info(playerid, "Nu ai rank 6.");
					if(Selected2[playerid] == PlayerInfo[playerid][pSQLID]) return Info(playerid, "Nu poti folosi asta pe tine.");
					gString[0] = (EOS);
					format(gString, sizeof gString, "Rank 1\nRank 2\nRank 3\nRank 4\nRank 5\nRank 6\nRank 7 - vei primi rank 6");
					SPD(playerid, DIALOG_CLAN_RANK, DIALOG_STYLE_LIST, "Set a rank:", gString, "Ok", "Exit");
				} case 1: {
					if(PlayerInfo[playerid][pCRank] < 6) return Info(playerid, "Nu ai rank 6.");
					if(Selected2[playerid] == PlayerInfo[playerid][pSQLID]) return Info(playerid, "Nu poti folosi asta pe tine.");
					SPD(playerid, DIALOG_CLAN_WARNS, DIALOG_STYLE_LIST, "Set warns:", "0/3 Warns\n1/3 Warns\n2/3 Warns", "Ok", "Exit");
				} case 2: {
					if(PlayerInfo[playerid][pCRank] < 6) return Info(playerid, "Nu ai rank 6.");
					if(Selected2[playerid] == PlayerInfo[playerid][pSQLID]) return Info(playerid, "Nu poti folosi asta pe tine.");
					gString[0] = (EOS);
					mysql_format(SQL, gString, sizeof gString, "SELECT * FROM `users` WHERE `id` = '%d'", Selected2[playerid]);
					mysql_tquery(SQL, gString, "clanUninvite", "dd",playerid, PlayerInfo[playerid][pSession]);
				}
			}
		} case DIALOG_CLAN_WARNS: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 6) return true;
			gString[0] = (EOS);
			mysql_format(SQL, gString, sizeof gString, "SELECT * FROM `users` WHERE `id` = '%d'", Selected2[playerid]);
			mysql_tquery(SQL, gString, "clanWarn", "ddd",playerid, listitem, PlayerInfo[playerid][pSession]);
		} case DIALOG_CLAN_RANK: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 6) return true; 
			gString[0] = (EOS);
			mysql_format(SQL, gString, sizeof gString, "SELECT * FROM `users` WHERE `id` = '%d'", Selected2[playerid]);
			switch(listitem){
				case 0..5: 	mysql_tquery(SQL, gString, "clanChangeRank", "ddddd",playerid, 1, listitem + 1, PlayerInfo[playerid][pClan], PlayerInfo[playerid][pSession]);
				case 6: mysql_tquery(SQL, gString, "clanChangeRank", "ddddd",playerid, 2, listitem + 1, PlayerInfo[playerid][pClan], PlayerInfo[playerid][pSession]);
			}
		} case DIALOG_CLANSETTINGS: {
			if(!response) return true;
			switch(listitem){
				case 0: {
					new clan = PlayerInfo[playerid][pClan]; gString[0] = (EOS);
					format(gString, sizeof gString, "Rank 1: %s\nRank 2: %s\nRank 3: %s\nRank 4: %s\nRank 5: %s\nRank 6: %s\nRank 7: %s", ClanInfo[clan][clanRankName1], ClanInfo[clan][clanRankName2], ClanInfo[clan][clanRankName3], ClanInfo[clan][clanRankName4], ClanInfo[clan][clanRankName5], ClanInfo[clan][clanRankName6], ClanInfo[clan][clanRankName7]);
					SPD(playerid, DIALOG_CLAN_CHANGERANK, DIALOG_STYLE_LIST, "Clan RankNames:", gString, "Ok", "Exit");
				} case 1: SPD(playerid, DIALOG_CLAN_COLOR, DIALOG_STYLE_INPUT, "Clan Colors:", "You can visit a color-picker to pick a color.", "Ok", "Exit");
				case 2: {
					if(InSpawnArea[playerid]) return Info(playerid, "Nu poti folosi asta in zona spawnului.");
					if(GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid)) return Info(playerid, "Nu poti face asta aici.");
					new c = PlayerInfo[playerid][pClan];
					if(ClanInfo[c][cGarageX] == 0) return SPD(playerid, DIALOG_BUYCGARAGE, DIALOG_STYLE_MSGBOX, "Buy Clan Garage", "Doresti sa cumperi Garaj clanului pentru 50 Clan Points?", "Da", "Nu");
					new
						Float: X,
						Float: Y,
						Float: Z
					;

					GetPlayerPos(playerid, X, Y, Z);

					ClanInfo[c][cGarageX] = X;
					ClanInfo[c][cGarageY] = Y;
					ClanInfo[c][cGarageZ] = Z;
					Info(playerid, "Garaj mutat cu succes.");
					Query_Mysql("UPDATE `clans` SET `clanGarageX` = '%0.2f', `clanGarageY` = '%0.2f', `clanGarageZ` = '%0.2f' WHERE `clanID` = '%d'", X, Y, Z, ClanInfo[c][clanID]);
					DestroyDynamicPickup(ClanInfo[c][cGaragePickup]);
					UpdateDynamic3DTextLabelText(ClanInfo[c][cGarageLabel], -1, " ");
					DestroyDynamic3DTextLabel(ClanInfo[c][cGarageLabel]);
					new Text[128];
					format(Text, 128, "Creare Vehicul De Clan(%s)\n{ffffff}Apasa tasta {00a326}Y", ClanInfo[c][clanName]);
					ClanInfo[c][cGarageLabel] = CreateStreamed3DTextLabel(Text, COLOR_SERVER, X, Y, Z, 8.0, 0, 0);
					ClanInfo[c][cGaragePickup] = CreateDynamicPickup(19133, 1, X, Y, Z);
					if(ClanGarageArea[c])
					{
						DestroyDynamicArea2(ClanGarageArea[c]);
					}
					ClanGarageArea[c] = CreateDynamicSphere2(11, c, X, Y, Z, 1, 0, 0);
				}
				case 3:
				{
					SPD(playerid, DIALOG_BUYCVEHS, DIALOG_STYLE_LIST, "Cumparare Vehicul Clan" ,"Infernus\nBullet\nSultan\nTurismo\nBanshee\nSandking\nHuntley\nElegy\nComet", "Alege", "Anuleaza");
				}
				case 4:
				{
					new
						c = PlayerInfo[playerid][pClan]
					;

					if(!HasClanHQ[c])
					{
						SPD(playerid, DIALOG_BUYCLANHQ, DIALOG_STYLE_LIST, "Cumparare Clan HQ", "Mic - 100PP\nMediu - 300PP\nMare - 500PP", "Inainte", "Anuleaza");
					}
					else
					{
						SendMsg(playerid, COLOR_SERVER, "Cumparare Clan HQ >> {ffffff}Ai deja un Clan HQ.");
					}
				}
				case 5:
				{
					new
						c = PlayerInfo[playerid][pClan]
					;

					if(!strmatch(ClanInfo[c][cClanTag], "None"))
						return SendMsg(playerid, COLOR_SERVER, "Set Clan Tag >> {ffffff}Clanul tau are deja un tag.");

					SPD(playerid, DIALOG_SETCLANTAG, DIALOG_STYLE_INPUT, "Set Clan Tag", "Introdu clan tag-ul dorit:", "Inainte", "Anuleaza");
				}
			}
		}
		case DIALOG_BUYCLANHQ:
		{
			if(!response) return true;
			new
				Cost[3] = {100, 300, 500}
			;
			if(PlayerInfo[playerid][pPremiumPoints] < Cost[listitem]) return SendMsg(playerid, COLOR_SERVER, "Cumparare Clan HQ >> {ffffff}Nu ai %dPP.", Cost[listitem]);
			Selected2[playerid] = listitem;
			gString[0] = (EOS);
			format(gString, sizeof(gString), "Vrei sa cumperi un Clan HQ pentru %d PP?", Cost[listitem]);
			SPD(playerid, DIALOG_BUYCLANHQ1, DIALOG_STYLE_MSGBOX, "Cumparare Clan HQ", gString, "Inainte", "Anuleaza");
		}
		case DIALOG_BUYCLANHQ1:
		{
			if(!response) return true;
			if(InSpawnArea[playerid]) return SendMsg(playerid, COLOR_SERVER, "Cumparare Clan HQ >> {ffffff}Nu-ti poti cumpara un Clan HQ in zona spawn-ului.");
			if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendMsg(playerid, COLOR_SERVER, "Cumparare Clan HQ >> {ffffff}Nu-l poti cumpara aici.");
			if(IsPlayerInAnyVehicle(playerid)) return SendMsg(playerid, COLOR_SERVER, "Cumparare Clan HQ >> {ffffff}Trebuie sa te dai jos din vehicul.");
			new
				Cost[4] = {0, 100, 300, 500},
				Float: X,
				Float: Y,
				Float: Z,
				OwnerID = PlayerInfo[playerid][pClan],
				item = Selected2[playerid] + 1
			;
			if(item < 1 || item > 3) return SendMsg(playerid, COLOR_SERVER, "Cumparare Clan HQ >> {ffffff}Raspuns invalid.");
			if(PlayerInfo[playerid][pPremiumPoints] < Cost[item]) return SendMsg(playerid, COLOR_SERVER, "Cumparare Clan HQ >> {ffffff}Nu ai %dPP.", Cost[item]);
			PlayerInfo[playerid][pPremiumPoints] -= Cost[item];
			pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
			GetPlayerPos(playerid, X, Y, Z);
			gString[0] = (EOS);
			mysql_format(SQL, gString, sizeof(gString), "insert into clanhqs (Type, X, Y, Z, OwnerID) values ('%d', '%f', '%f', '%f', '%d')", item, X, Y, Z, OwnerID);
			mysql_tquery(SQL, gString, "InsertClanHQ", "iiifffi", playerid, PlayerInfo[playerid][pSession], item, X, Y, Z, OwnerID);
		}
		case DIALOG_BUYCVEHS: {
			if(!response) return true;
			new pret = 11000000 - ((listitem + 1) * 1000000), c = PlayerInfo[playerid][pClan], vid[9] = {411, 541, 560, 451, 429, 495, 579, 562, 480};
			if(ClanInfo[c][clanSafe] < pret) return Info(playerid, "Clanul tau nu are $%s.", FormatNumber(pret));
			if(ClanInfo[c][cVehs][listitem]) return Info(playerid, "Clanul tau a deblocat deja acel vehicul.");
			Info(playerid, "Ai deblocat clanului vehiculul %s.", GetVehicleName(vid[listitem]));
			ClanInfo[c][cVehs][listitem] = 1;
			ClanInfo[c][clanSafe] -= pret;
			Query_Mysql("UPDATE `clans` SET `cVehs` = '%d|%d|%d|%d|%d|%d|%d|%d|%d', `clanSafe` = '%d' WHERE `clanID` = '%d'", ClanInfo[c][cVehs][0], ClanInfo[c][cVehs][1], ClanInfo[c][cVehs][2], ClanInfo[c][cVehs][3],
				ClanInfo[c][cVehs][4], ClanInfo[c][cVehs][5], ClanInfo[c][cVehs][6], ClanInfo[c][cVehs][7], ClanInfo[c][cVehs][8], ClanInfo[c][clanSafe], c);
		}
		case DIALOG_BUYCGARAGE: {
			if(!response) return true;
			new c = PlayerInfo[playerid][pClan];
			if(ClanInfo[c][clanPoints] < 50) return Info(playerid, "Clanul tau nu detine 50 Clan points.");
			new
				Float: X,
				Float: Y,
				Float: Z
			;
			GetPlayerPos(playerid, X, Y, Z);	
			ClanInfo[c][clanPoints] -= 50;
			ClanInfo[c][cGarageX] = X;
			ClanInfo[c][cGarageY] = Y;
			ClanInfo[c][cGarageZ] = Z;
			new Text[128];
			format(Text, 128, "Creare Vehicul De Clan(%s)\n{ffffff}Apasa tasta {00a326}Y", ClanInfo[c][clanName]);
			ClanInfo[c][cGarageLabel] = CreateStreamed3DTextLabel(Text, COLOR_SERVER, X, Y, Z, 8.0, 0, 0);
			ClanInfo[c][cGaragePickup] = CreateDynamicPickup(19133, 1, X, Y, Z);
			if(ClanGarageArea[c])
			{
				DestroyDynamicArea2(ClanGarageArea[c]);
			}
			ClanGarageArea[c] = CreateDynamicSphere2(11, c, X, Y, Z, 1, 0, 0);

			Query_Mysql("UPDATE `clans` SET `clanPoints` = '%d', `clanGarageX` = '%f', `clanGarageY` = '%f', `clanGarageZ` = '%f' WHERE `clanID` = '%d'", ClanInfo[c][clanPoints], ClanInfo[c][cGarageX], ClanInfo[c][cGarageY], ClanInfo[c][cGarageZ], c);
			Info(playerid, "Ai cumparat un Garaj pentru clan in aceasta pozitie.");
		} case DIALOG_SCV:{
			if(!response || listitem < 0 || listitem >= 9) return true;
			new
				c = PlayerInfo[playerid][pClan],
				vid[9] = {411, 541, 560, 451, 429, 495, 579, 562, 480},
				Float: X,
				Float: Y,
				Float: Z,
				Float: A
			;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			if(ClanInfo[c][cVehs][listitem] != 1) return Info(playerid, "Clanul tau nu a deblocat acel vehicul.");
			if(pcVehicle[playerid] != -1) DestroyVehicleEx(pcVehicle[playerid]), Iter_Remove(cVehicles[PlayerInfo[playerid][pClan]], pcVehicle[playerid]), pcVehicle[playerid] = -1;
			pcVehicle[playerid] = CreateVehicleEx(vid[listitem], X, Y, Z, A, random(256), random(256), -1);
			PutPlayerInVehicleEx(playerid, pcVehicle[playerid], 0);
			Iter_Add(cVehicles[c], pcVehicle[playerid]);
		} case DIALOG_CLAN_CHANGERANK: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 6) return true;
			gString[0] = (EOS);
			switch(listitem + 1){
				case 1: format(string, sizeof string, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName1]);
				case 2: format(string, sizeof string, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName2]);
				case 3: format(string, sizeof string, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName3]);
				case 4: format(string, sizeof string, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName4]);
				case 5: format(string, sizeof string, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName5]);
				case 6: format(string, sizeof string, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName6]);
				case 7: format(string, sizeof string, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName7]);
			} 
			format(gString, sizeof gString, "Current clan rank %d: %s\n\nSet a new rank name:", listitem + 1, string);
			SPD(playerid, DIALOG_CLAN_CHANGERANK2, DIALOG_STYLE_INPUT, "Clan Colors:", gString, "Ok", "Exit"); Selected2[playerid] = listitem + 1;
		} case DIALOG_CLAN_CHANGERANK2: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 6) return true;
			switch(Selected2[playerid]){
				case 1: format(ClanInfo[PlayerInfo[playerid][pClan]][clanRankName1], 32, "%s", inputtext);
				case 2: format(ClanInfo[PlayerInfo[playerid][pClan]][clanRankName2], 32, "%s", inputtext);
				case 3: format(ClanInfo[PlayerInfo[playerid][pClan]][clanRankName3], 32, "%s", inputtext);
				case 4: format(ClanInfo[PlayerInfo[playerid][pClan]][clanRankName4], 32, "%s", inputtext);
				case 5: format(ClanInfo[PlayerInfo[playerid][pClan]][clanRankName5], 32, "%s", inputtext);
				case 6: format(ClanInfo[PlayerInfo[playerid][pClan]][clanRankName6], 32, "%s", inputtext);
				case 7: format(ClanInfo[PlayerInfo[playerid][pClan]][clanRankName7], 32, "%s", inputtext);
			}
			gString[0] = (EOS);
			mysql_format(SQL, gString, 256, "update clans set clanRankName%d = '%e' where clanID = %d", Selected2[playerid], inputtext, PlayerInfo[playerid][pClan]);
			mysql_tquery(SQL, gString);
			Info(playerid, "{%s}Clan rank %d: %s", ClanInfo[PlayerInfo[playerid][pClan]][clanColor], Selected2[playerid], inputtext);
		} case DIALOG_CLAN_COLOR: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 6) return true;
			if(strlen(inputtext) != 6) return Info(playerid, "Culoare invalida.");
			format(ClanInfo[PlayerInfo[playerid][pClan]][clanColor], 20, "%s", inputtext);
			Query_Mysql("UPDATE `clans` SET `clanColor` = '%s' WHERE `clanID` = '%d'", inputtext, PlayerInfo[playerid][pClan]);
			Info(playerid, "Clan color changed to {%s}%s{ffffff}.", ClanInfo[PlayerInfo[playerid][pClan]][clanColor], ClanInfo[PlayerInfo[playerid][pClan]][clanColor]);
		} case DIALOG_QUITCLAN: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] == 7) return Info(playerid, "Nu poti parasi clanul, deoarece este al tau.");	
			new clan = PlayerInfo[playerid][pClan];
			SetPlayerClanTag(playerid, 0);
			if(pcVehicle[playerid] != -1) DestroyVehicleEx(pcVehicle[playerid]), Iter_Remove(cVehicles[PlayerInfo[playerid][pClan]], pcVehicle[playerid]), pcVehicle[playerid] = -1;
			SendToClan(clan, COLOR_SERVER, "Clan >> {%s}%s has left the clan (using /quitclan).", ClanInfo[clan][clanColor], GetName(playerid));
			Info(playerid, "{%s}You have left the %s.", ClanInfo[clan][clanColor], ClanInfo[clan][clanName]);
			Iter_Remove(InClan[clan], playerid);
			pUpdateInt(playerid, "Clan", 0); PlayerInfo[playerid][pClan] = 0; pUpdateInt(playerid, "CRank", 0); PlayerInfo[playerid][pCRank] = 0;
			pUpdateInt(playerid, "ClanWarns", 0); PlayerInfo[playerid][pCWarns] = 0;
			if(PlayerInfo[playerid][pSpawnChange] == 3)
			{
				PlayerInfo[playerid][pSpawnChange] = 0;
				pUpdateInt(playerid, "SpawnChange", PlayerInfo[playerid][pSpawnChange]);
			}
		} case DIALOG_CHOOSECLANNAME: {
			if(!response) return SPD(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Scrie mai jos numele pe care il doresti clanului.", "Ok", "");
			if(strlen(inputtext) < 3 || strlen(inputtext) > 19) return SPD(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Scrie mai jos numele pe care il doresti clanului.", "Ok", "");
			new
				escaped[22]
			;
			gString[0] = (EOS);
			mysql_escape_string(inputtext, escaped);
			mysql_format(SQL, gString, sizeof gString, "SELECT * FROM `clans` WHERE `clanName` = '%s'", escaped);
			mysql_tquery(SQL, gString, "checkClanName", "dsd",playerid, escaped, PlayerInfo[playerid][pSession]);
		} case DIALOG_CHOOSECLANTAG: {
			if(!response) return true;
			if(!ValidClanTag(inputtext))
				return SPD(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan Tag", "Scrie mai jos clan tag-ul:", "Inainte", "Anuleaza");

			new
				escaped[5]
			;

			gString[0] = (EOS);
			mysql_escape_string(inputtext, escaped);
			mysql_format(SQL, gString, sizeof gString, "SELECT * FROM `clans` WHERE `clanTag` = '%s'", escaped);
			mysql_tquery(SQL, gString, "checkClanTag", "dsdd", playerid, escaped, 1, PlayerInfo[playerid][pSession]);
		}
		case DIALOG_VEHSPAWN:
		{
			if(!response || listitem < 0)
				return true;

			new
				s = listitem,
				count = 0
			;

			if(listitem == PlayerInfo[playerid][pVehSlots])
			{
				for(new i = 0; i < PlayerInfo[playerid][pVehSlots]; i++)
				{
					if(PlayerInfo[playerid][pVeh][i] == -1)
						continue;

					if(PlayerInfo[playerid][pVehInGarage][i] != false)
						continue;

					count ++;
				}

				if(count < 1)
					return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}Nu ai vehicule de spawnat.");

				new
					price = count * 10_000
				;

				if(GetPlayerCash(playerid) < price)
					return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}Nu ai %s.", FormatNumber(price));

				for(new i = 0; i < PlayerInfo[playerid][pVehSlots]; i++)
				{
					if(PlayerInfo[playerid][pVeh][i] == -1)
						continue;

					if(PlayerInfo[playerid][pVehInGarage][i] != false)
						continue;

					SpawnPlayerVehicle(playerid, i, true);
				}

				GivePlayerCash(playerid, -price);
				SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}Vehiculele au fost spawnate.");
				return true;
			}
			if(PlayerInfo[playerid][pVehModel][s]){
				gString[0] = (EOS);
				format(gString, 128, "Optiunile %s-ului", GetVehicleName(PlayerInfo[playerid][pVehModel][s]));
				SelectedCar[playerid] = s;
				if(PlayerInfo[playerid][pVehID][s])
				{
					if(PlayerInfo[playerid][pVehVip][s] || (IsAGangMember(playerid) && OnDuty[playerid] && ServerWars))
					{
						SPD(playerid, DIALOG_VEHSPAWNCAR, DIALOG_STYLE_LIST, gString, "Informatii\nRemorcheaza\nGaseste\nDistruge\nVinde\nImbunatatiri\nTeleporteaza", "Alege", "Inchide");
					}
					else
					{
						SPD(playerid, DIALOG_VEHSPAWNCAR, DIALOG_STYLE_LIST, gString, "Informatii\nRemorcheaza\nGaseste\nDistruge\nVinde\nImbunatatiri", "Alege", "Inchide");
					}
				}
				else
				{
					if(PlayerInfo[playerid][pVehInGarage][s])
					{
						SPD(playerid, DIALOG_VEHSPAWNCAR, DIALOG_STYLE_LIST, gString, "Informatii\nDeblocheaza", "Alege", "Inchide");
					}
					else
					{					
						SPD(playerid, DIALOG_VEHSPAWNCAR, DIALOG_STYLE_LIST, gString, "Informatii\nRemorcheaza", "Alege", "Inchide");
					}
				}
			}
		}
		case DIALOG_VEHSPAWNCAR: {
			if(!response) return true;
			new
				i = SelectedCar[playerid]
			;
			switch(listitem){
				case 0 : {
					gString[0] = (EOS);
					format(gString, 256, "%d(%s)\n%0.2f KM\n%d zile", PlayerInfo[playerid][pVehModel][i], GetVehicleName(PlayerInfo[playerid][pVehModel][i]), PlayerInfo[playerid][pVehKM][i], GetDaysFromTimestamp(PlayerInfo[playerid][pVehBuyTime][i]));
					SPD(playerid, DIALOG_VEHINFO, DIALOG_STYLE_MSGBOX, "Informatii despre Vehicul", gString, "Close", "");
				} case 1: {
					if(PlayerInfo[playerid][pVehInGarage][i] != false)
					{
						if(PlayerInfo[playerid][pVehID][i])
						{
							DestroyVehicleEx(PlayerInfo[playerid][pVehID][i]);
							DestroyNeon(PlayerInfo[playerid][pVehID][i]);

							SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}%s-ul a fost dus in garaj.", GetVehicleName(PlayerInfo[playerid][pVehModel][i]));
						}
						else
						{

							if(HaveCheckpoint(playerid))
								return true;

							SpawnPlayerVehicle(playerid, i, true, true);
						}				
					}
					else
					{
						if(GetPlayerCash(playerid) < 10_000)
							return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}Ai nevoie de $10,000.");

						SpawnPlayerVehicle(playerid, i);
					}

				} case 2: {
					if(HaveCheckpoint(playerid)) return true;				
					if(PlayerInfo[playerid][pVehID][i]) LocateVeh(playerid, PlayerInfo[playerid][pVehID][i]);
					else return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}%s nu este spawnat.", GetVehicleName(PlayerInfo[playerid][pVehModel][i]));
				} case 3: { 
					if(PlayerInfo[playerid][pVehID][i] < 1) return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}%s nu este spawnat.", GetVehicleName(PlayerInfo[playerid][pVehModel][i]));
					SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}%s a fost distrus.", GetVehicleName(PlayerInfo[playerid][pVehModel][i]));
					DestroyNeon(PlayerInfo[playerid][pVehID][i]);
					DestroyVehicleEx(PlayerInfo[playerid][pVehID][i]);
				} case 4: {
					gString[0] = (EOS);
					mysql_format(SQL, gString, 64, "SELECT * FROM `stock` WHERE `Model`='%d'", PlayerInfo[playerid][pVehModel][i]); 
					mysql_tquery(SQL, gString, "SellVehicle", "idd", playerid, i, PlayerInfo[playerid][pSession]);
				} case 5: {
					if(PlayerInfo[playerid][pVehNeonCustom][i]) 
						SPD(playerid, DIALOG_UPGRADES, DIALOG_STYLE_LIST, "Imbunatatiri", "Stage(250PP)\nNeon\nWorking(1, 000 OGPoints)\nVip(350PP)\nRainbow(200PP)\nSchimbare Neon", "Cumpara", "Anuleaza");
					else
						SPD(playerid, DIALOG_UPGRADES, DIALOG_STYLE_LIST, "Imbunatatiri", "Stage(250PP)\nNeon\nWorking(1, 000 OGPoints)\nVip(350PP)\nRainbow(200PP)", "Cumpara", "Anuleaza");
				} case 6: {
					if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}Nu-ti poti aduce vehiculul aici.");
					if(IsAGangMember(playerid) && OnDuty[playerid] && ServerWars)
					{
						if(PlayerInfo[playerid][pVehID][i] < 1) return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}%s ales nu este spawnat.", GetVehicleName(PlayerInfo[playerid][pVehModel][i]));
						if(IsVehicleOccupied(PlayerInfo[playerid][pVehID][i])) return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}%s este ocupat.", GetVehicleName(PlayerInfo[playerid][pVehModel][i]));
						if(IsPlayerInVehicle(playerid, PlayerInfo[playerid][pVehID][i])) return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}Esti deja in acel vehicul.");
						new
							fac = PlayerInfo[playerid][pMember],
							Float: X = fvPos[fac][0],
							Float: Y = fvPos[fac][1],
							Float: Z = fvPos[fac][2],
							Float: A = fvPos[fac][3],
							VehicleID = PlayerInfo[playerid][pVehID][i]
						;
						SetVehiclePos(VehicleID, X, Y, Z);
						SetVehicleZAngle(VehicleID, A);
						SetVehicleVirtualWorld(VehicleID, 1024);
						SendMsg(playerid, COLOR_SERVER, "War >> {ffffff}%s ti-a fost adus la pozitia de vehicule ale factiunii.", GetVehicleName(PlayerInfo[playerid][pVehModel][i]));
					}
					else if(PlayerInfo[playerid][pVehVip][i])
					{
						if(PlayerInfo[playerid][pVehID][i] < 1) return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}%s ales nu este spawnat.", GetVehicleName(PlayerInfo[playerid][pVehModel][i]));
						if(IsVehicleOccupied(PlayerInfo[playerid][pVehID][i])) return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}%s este ocupat.", GetVehicleName(PlayerInfo[playerid][pVehModel][i]));
						if(IsPlayerInVehicle(playerid, PlayerInfo[playerid][pVehID][i])) return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}Esti deja in acel vehicul.");
						if(GetPlayerCash(playerid) < 100000) return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}Nu ai $100.000.");
						if(GetPlayerInterior(playerid) || GetPlayerVirtualWorld(playerid)) return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}Nu poti aduce vehiculul aici.");
						if(PlayerInfo[playerid][pWantedLevel] != 0) return SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}Nu poti face asta deoarece ai Wanted.");
						new
							Float: plocx,
							Float: plocy,
							Float: plocz
						; 
						GetPlayerPos(playerid, plocx, plocy, plocz);
						SetVehiclePos(PlayerInfo[playerid][pVehID][i], plocx, plocy + 4, plocz);
						SendMsg(playerid, COLOR_SERVER, "Vehicles >> {ffffff}%s ti-a fost adus.", GetVehicleName(PlayerInfo[playerid][pVehModel][i]));
						GivePlayerCash(playerid, -100000);
						SetVehicleVirtualWorld(PlayerInfo[playerid][pVehID][i], GetPlayerVirtualWorld(playerid));
					}
				} 
			}	
		} case DIALOG_CUSTOMNEON: {
			if(!response) return true;
			new v = SelectedCar[playerid], obiect;
			switch(listitem){
				case 0: obiect = 18650;
				case 1: obiect = 18649;
				case 2: obiect = 18648;
				case 3: obiect = 18647;
				case 4: obiect = 18651;
				case 5: obiect = 18652;
				case 6: {
					DestroyNeon(PlayerInfo[playerid][pVehID][v]);
					PlayerInfo[playerid][pVehNeon][v] = 0;
				}
			}
			Query_Mysql("UPDATE `cars` SET `Neon`='%d' WHERE `ID`='%d'", obiect, PlayerInfo[playerid][pVeh][v]);
			if(listitem != 6) CreateNeon(PlayerInfo[playerid][pVehID][v], obiect);
		} case DIALOG_REPORT: {
			if(!response) return true;
			switch(listitem){
				case 0: {
					Info(playerid, "Report-ul tau a fost trimis catre administratori.");
					format(string, 144, "Report >> %s(%d): Sunt blocat/nu vad nimic.", GetName(playerid), playerid);
					SendAdmins(COLOR_RED, string, 1);
					SetPVarString(playerid, "Report", string);
					reportstuck[playerid] = true;
					SetPVarInt(playerid, "deelayn", gettime() + 300);
				} case 1: {
					Info(playerid, "Report-ul tau a fost trimis catre administratori.");
					format(string, 144, "Report >> %s(%d): Vreau sa fac o afacere, am nevoie de un admin.", GetName(playerid), playerid);
					SendAdmins(COLOR_RED, string, 1);
					SetPVarString(playerid, "Report", string);
					Iter_Add(Reports, playerid);
					SetPVarInt(playerid, "deelayn", gettime() + 300);
				}
				case 2: SPD(playerid, DIALOG_REPORTALTAPROBLEMA, DIALOG_STYLE_INPUT, "Report System", "Scrie mai jos problema pe care o ai.\nNu scrie 'am nevoie de un admin', scrie exact ce problema ai.", "Sent", "Exit");
			}
		} case DIALOG_REPORTALTAPROBLEMA: {
			if(!response) return true;
			if(strlen(inputtext) < 3 || strlen(inputtext) > 60) return Info(playerid, "Reportul tau este prea lung sau prea scurt pentru a fi trimis.");
			Info(playerid, "Report-ul tau a fost trimis catre administratori.");
			format(inputtext, 144, "Report >> %s(%d): %s", GetName(playerid),playerid, inputtext);
			SendAdmins(COLOR_RED, inputtext, 1);
			SetPVarString(playerid, "Report", inputtext);
			Iter_Add(Reports, playerid);
			SetPVarInt(playerid, "deelayn", gettime() + 300);
		} case DIALOG_GPS: {
			if(!response) return true;
			switch(listitem){
				case 0: {
					gString[0] = (EOS);
					for(new i; i < MAX_LOCATIONS; i++){
						if((PlayerInfo[playerid][pBonus] || PlayerInfo[playerid][pLevel] > 2) && i == MAX_LOCATIONS - 1) continue;
						format(gString, sizeof(gString), "%s%s - %.0fm\n", gString, LocationName[i], GetPlayerDistanceFromPoint(playerid, LocationPos[i][0], LocationPos[i][1], LocationPos[i][2]));
					}
					SPD(playerid, DIALOG_GPS2, DIALOG_STYLE_LIST, "Locatiile Serverului", gString, "Alege", "Anuleaza"); 
				}
				case 1: { 
					gString[0] = (EOS);
					new stringzz[2100], Float:xx,Float:yy,Float:zz;
					GetPlayerPos(playerid, xx, yy, zz);
					for(new b = 1; b <= Bizuri; b++){
						new btext[32];
						switch(BizzInfo[b][bType]){
							case 1: btext = "Banca";
							case 2: btext = "Magazin de Arme";
							case 3: btext = "Magazin Erotic";
							case 4: btext = "Cazino";
							case 5: btext = "Non-Stop";
							case 6: btext = "Burger";
							case 7: btext = "Inchirieri Vehicule";
							case 8: btext = "Magazin de Imbracaminte";
							case 9: btext = "Benzinarie";
							case 10: btext = "Reparare Vehicule";
							case 11: btext = "Modificari Masini";
						}
						format(gString, 256, "%d - %s - %.0fm\n", BizzInfo[b][bID], btext, GetDistanceBetweenPoints(xx,yy,zz,BizzInfo[b][bEntranceX],BizzInfo[b][bEntranceY],BizzInfo[b][bEntranceZ]));
						strcat(stringzz, gString);
					}
					SPD(playerid, DIALOG_BUSINESS, DIALOG_STYLE_LIST, "Afaceri", stringzz, "Alege", "Anuleaza");
				}
				case 2: {
					gString[0] = (EOS);
					for(new i = 1; i <= factionss; i++) format(gString, 256, "%s%s\n", gString, FacInfo[i][fName]);
					SPD(playerid, DIALOG_HQS, DIALOG_STYLE_LIST, "Sediile Factiunilor", gString , "Alege", "Iesi");
				}
				case 3: PC_EmulateCommand(playerid, "/jobs");
				case 4: {
					gString[0] = (EOS);
					for(new i; i < sizeof(gAtms); i++){
						format(gString, 180, "%sATM #%d - %.0fm\n", gString, i + 1, GetPlayerDistanceFromPoint(playerid, gAtms[i][0], gAtms[i][1], gAtms[i][2]));
					}
					SPD(playerid, DIALOG_ATMS, DIALOG_STYLE_LIST, "ATM-uri", gString, "Alege", "Anuleaza"); 
				}
				case 5:
				{
					gString[0] = (EOS);
					for(new i = 1; i <= LoadedBillboards; i++)
					{
						format(gString, sizeof(gString), "%sPanou #%d - %.0fm - %s\n",
							gString, i, GetPlayerDistanceFromPoint(playerid, Billboards[i][bPX], Billboards[i][bPY], Billboards[i][bPZ]), Billboards[i][bOwner]);
					}
					SPD(playerid, DIALOG_PANOURI, DIALOG_STYLE_LIST, "Panouri", gString, "Alege", "Anuleaza");
				}
			}
		} case DIALOG_ATMS: {
			if(!response || listitem < 0) return true;
			SetPlayerCheckpointEx(playerid, gAtms[listitem][0],gAtms[listitem][1],gAtms[listitem][2], 3);
			CP[playerid] = 43;
		} case DIALOG_GPS2: {
			if(!response || listitem < 0) return true;
			SetPlayerCheckpointEx(playerid, LocationPos[listitem][0], LocationPos[listitem][1], LocationPos[listitem][2], 3);
			CP[playerid] = 43;
		} case DIALOG_BUSINESS:{
			if(!response || listitem < 0) return true;
			SetPlayerCheckpointEx(playerid, BizzInfo[listitem+1][bEntranceX],BizzInfo[listitem+1][bEntranceY],BizzInfo[listitem+1][bEntranceZ], 3.0);
			CP[playerid] = 43;
			Info(playerid, "Urmeaza checkpoint-ul catre afacerea %d.", BizzInfo[listitem+1][bID]);
		} case DIALOG_SELLVEHICLE: {
			if(!response) return true;
			new v = SelectedCar[playerid];
			if(PlayerInfo[playerid][pVehID][v] == CarID[playerid]){
				gString[0] = EOS;
				mysql_format(SQL, gString, 256, "SELECT * FROM `stock` WHERE `Model`='%d'", PlayerInfo[playerid][pVehModel][v]);
				mysql_tquery(SQL, gString, "SellVehicle2", "idd", playerid, v, PlayerInfo[playerid][pSession]);
			}
		} case DIALOG_JOBS: {
			if(!response || listitem < 0) return true;
			SetPlayerCheckpointEx(playerid, JobInfo[listitem + 1][jX], JobInfo[listitem + 1][jY], JobInfo[listitem + 1][jZ], 3.0);
			CP[playerid] = 43;
			Info(playerid, "Urmeaza checkpoint-ul pentru a ajunge la job.");
		} case DIALOG_REGISTER: {
			if(!response){
				SendMsg(playerid, COLOR_RED, "Ai primit kick deoarece ai refuzat sa-ti introduci o adresa de email valida.");
				defer KickEx(playerid, PlayerInfo[playerid][pSession]);
				return true; 
			}
			if(strlen(inputtext) < 15 || strlen(inputtext) > 30){
				Info(playerid, "Adresa ta de email trebuie sa fie intre 15 caractere si 30 de caractere.");
				SPD(playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT, "Email", "(ex: my_email@yahoo.com)", "Ok", "");
				return true;
			}
			new
				Name[MAX_PLAYER_NAME],
				Password[32 + 1],
				Email[64 + 1]
			;
			format(Name, sizeof(Name), GetName(playerid));
			format(Password, sizeof(Password), PlayerInfo[playerid][pKey]);
			format(Email, sizeof(Email), inputtext);

			gString[0] = (EOS);
			mysql_format(SQL, gString, 256, "insert into users (name, password, Email) values ('%e', '%e', '%e')", Name, Password, Email);
			mysql_tquery(SQL, gString, "InsertAccount", "id", playerid, PlayerInfo[playerid][pSession]);
			ConturiTotale ++;
		}
		case DIALOG_TRANSFER:
		{
			if(!response)
				return true;

			if(GetPlayerBank(playerid) < TransferMoney[playerid])
				return Info(playerid, "Nu ai banii necesari.");

			new
				Money = TransferMoney[playerid],
				MoneyAfterTax = TransferMoney[playerid] - PlayerInfo[playerid][pTaxa],
				id = TransferOffer[playerid],
				BizID = InBiz[playerid]
			;

			if(BizID == 0)
				return SendMsg(playerid, COLOR_SERVER, "Transfer >> {ffffff}Nu esti intr-o afacere.");

			if(BizzInfo[BizID][bType] != 1)
				return SendMsg(playerid, COLOR_SERVER, "Transfer >> {ffffff}Nu esti intr-o banca.");

			if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id) || !Logat[id])
				return SendMsg(playerid, COLOR_SERVER, "Transfer >> {ffffff}Jucatorul este invalid.");

			GivePlayerBank(playerid, -Money);
			GivePlayerBank(id, MoneyAfterTax);

			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

			SendMsg(playerid, COLOR_SERVER, "Transfer >> {ffffff}I-ai transferat $%s lui %s", FormatNumber(MoneyAfterTax), GetName(id));
			SendMsg(id, COLOR_SERVER, "Transfer >> {ffffff}%s ti-a transferat $%s.", GetName(playerid), FormatNumber(MoneyAfterTax));

			BizzInfo[BizID][bTill] += PlayerInfo[playerid][pTaxa];
			Query_Mysql("UPDATE `bizz` SET `Till` = '%d' WHERE `ID` = '%d'", BizzInfo[BizID][bTill], BizID);

			PlayerInfo[playerid][pTaxa] = 0;
		}
		case DIALOG_HQS: {
			if(!response) return true;
			SetPlayerCheckpointEx(playerid,FacInfo[listitem + 1][fceX],FacInfo[listitem + 1][fceY],FacInfo[listitem + 1][fceZ], 4.0);
			Info(playerid, "Urmeaza checkpoint-ul pentru a ajunge la factiunea %s.", FactionName(listitem + 1));
			CP[playerid] = 43;
		} case DIALOG_RADIO: {
			if(!response || listitem < 0 || listitem >= sizeof(Radios)) return true;
			StopAudioStreamForPlayersInCar(vehicleid);
			vehRadio[vehicleid] = listitem;
			PlayAudioStreamForPlayersInCar(vehicleid, Radios[vehRadio[vehicleid]]);
			Info(playerid, "Ai schimbat Radio-ul.");			
		} case DIALOG_HELP: {
			if(!response) return true;
			switch(listitem){
				case 0: SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "General Commands", "/accept /ad /admins\n/helpers /time /id /changepass /pay\n/buylevel /shop\n/contract /service","Back","Exit");
				case 1: {
					format(string, sizeof(string), "/wt /cw");
					SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Chat Commands", string, "Back", "Exit");
				} case 2: {
					switch(PlayerInfo[playerid][pMember]){
						case 0: Info(playerid, "Nu esti intr-o factiune.");
						case 1: {
							format(string, sizeof(string), "/mdc /su /arrest\n /ta /cuff /confiscate \n/frisk /clear /f /wanted\n/ticket /duty /gdeposit");
							SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group Commands", string, "Back", "Exit");		
						} case 2..3: {
							format(string, sizeof(string), "/order /attack /f /gdeposit /duty");
							SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group Commands", string, "Back", "Exit");
						} case 4: {
							format(string, sizeof(string), "/f /news /live /endlive /gdeposit /startq /stopq /duty");
							SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group Commands", string, "Back", "Exit");			
						} case 5: {
							format(string, sizeof(string), "/contracts /gethit /order /f /undercover /cancelhit /gdeposit /duty");
							SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group Commands", string, "Back", "Exit");
						} case 6: {
							format(string, sizeof(string), "/fare /uber /f /gdeposit /duty");
							SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group Commands", string, "Back", "Exit");
						} case 7: {
							format(string, sizeof(string), "/heal /sellmed /f /gdeposit /duty");
							SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group Commands", string, "Back", "Exit");
						}
					}
				}
				case 3: SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "House Commands", "/housemenu", "Back", "Exit");
				case 4: SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Business Commands", "/bizmenu", "Back", "Exit");
				case 5:
				{
					Info(playerid, "General commands: /park, /eject, /carcolor /removetuning /v");
				}
				case 6: SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Bank Commands", "/withdraw /deposit", "Back", "Exit");
				case 7:
				{
					if(!PlayerInfo[playerid][pHelper] && !PlayerInfo[playerid][pAdmin]) return Info(playerid, "Nu esti helper.");
					SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Helpers", "/nreport /nmute /kick /re /e /da /slap /nr /questions /nd", "Back", "Exit");
				}
				case 8: SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Premium", "Benefits Premium:\n/pcolor\n4 slots vehicles\n8 rob points at rob\n/pc - premium chat", "Back", "Exit");
				case 9: SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "VIP", "Benefits VIP:\n/find without detective\n/vipchat\n-2 FP(payday)\n+150k PayDay\n/flip\n/fv", "Back", "Exit");
				case 10: {
					if(PlayerInfo[playerid][pRank] < 7) return Info(playerid, "Nu esti lider.");
					SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Leaders", "/members /invite /changerank /l", "Back", "Exit");
				}
				case 11: {
					if(!PlayerInfo[playerid][pAdmin]) return Info(playerid, "Nu esti Admin.");
					gString[0] = (EOS);
					strcat(gString, "/mdc /wanted /ban /banoff /da /a /cn /an /clear /get /mute /questions /spec /kick /va /fspec /fchat\n");
					strcat(gString, "/spawn /l /warn /re /vehname /gunname /slapveh /gotobiz /nr /down /ff /bb /fly /gotohouse\n");
					strcat(gString, "/goto /gotoveh /check /pm /placegotoevent /healme /up /anno /checkv /nos /fv /flip\n");
					strcat(gString, "/cc /unfreeze /freeze /getveh /disarm /nd /aaa2 /dm /reports /fnc /e /closestveh /vre\n");
					strcat(gString, "/slap /mark /gotomark /veh /go /rmute /lp /release /rangefreeze /rangeunfreeze\n");
					strcat(gString, "/rangedisarm /rangegun /rangeheal /dav /gun /fpk /fpkoff /unban\n");
					strcat(gString, "/gotoxyz /set /vowner /seto /editstock /server /banip\n");
					strcat(gString, "/movehousetostate /movebusinesstostate /addhousetobid /addbusinesstobid");
					SPD(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Comenzi de Admin", gString, "Inapoi", "Iesi");
				}
			}
		} case DIALOG_HELP2: {
			if(!response) return true;
			SPD(playerid, DIALOG_HELP,DIALOG_STYLE_LIST, "Comenzi", "General\nChat\nFactiuni\nCase\nAfaceri\nVehicule\nBanca\nHelperi\nPremium\nVIP\nLideri\nAdmini", "Alege","Anuleaza");
		} case DIALOG_MEMBERS: {
			if(!response) return true;
			if(listitem >= 0){
				if(PlayerInfo[playerid][pRank] < 6) return Info(playerid, "Nu esti lider sau colider.");
				gString[0] = (EOS);
				mysql_format(SQL, gString, 64, "SELECT * FROM `users` WHERE `id`='%d'", Selected[playerid][listitem]);
				mysql_tquery(SQL, gString, "ShowMember", "idd", playerid, listitem, PlayerInfo[playerid][pSession]);
			}
		} case DIALOG_MEMBERS2: {
			if(!response) return true;
			gString[0] = (EOS);
			switch(listitem){
				case 0: Info(playerid, "/changerank [name/playerid] [rank]");
				case 1: {
					if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return Info(playerid, "You can't give a fw to yourself.");
					gString[0] = (EOS);
					format(gString, 32, "SQLID%d", Selected2[playerid]);
					new
						i = GetSVarInt(gString) - 1
					;
					if(i != -1)
					{
						if(PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 7 || PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 6)
							return Info(playerid, "You can't give a FW to a member with rank 6-7.");
					}
					gString[0] = (EOS);
					mysql_format(SQL, gString, 64, "SELECT * FROM `users` WHERE `id`='%d'", Selected2[playerid]);
					mysql_tquery(SQL, gString, "FwMember", "id", playerid, PlayerInfo[playerid][pSession]);
				} case 2: {
					if(PlayerInfo[playerid][pRank] < 6) return Info(playerid, "Only leaders have acces to fw clear.");
					SPD(playerid, DIALOG_FUNWARN, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca vrei sa-i stergi FW acelui membru?", "Da", "Nu");
				} case 3..4: {
					if(PlayerInfo[playerid][pRank] < 6) return Info(playerid, "Only leaders can uninvite a member.");
					if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return Info(playerid, "You can't uninvite yourself.");
					new fp;
					if(listitem == 3) fp = 20;
					else fp = 0;
					gString[0] = (EOS);
					mysql_format(SQL, gString, 64, "SELECT * FROM `users` WHERE `id`='%d'", Selected2[playerid]);
					mysql_tquery(SQL, gString, "UninvitePlayer", "ddd", playerid, fp, PlayerInfo[playerid][pSession]);
				}
			}
		} case DIALOG_UNINVITE: {
			if(!response) return true;
			new reason[64];
			mysql_escape_string(inputtext, reason);
			if(strlen(reason) < 1 || strlen(reason) > 64) return Info(playerid, "Motiv invalid.");
			gString[0] = (EOS);
			mysql_format(SQL, gString, 64, "SELECT * FROM `users` WHERE `id` = '%d'", Selected2[playerid]);
			mysql_tquery(SQL, gString, "UninvitePlayer2", "isd", playerid, reason, PlayerInfo[playerid][pSession]);
		} case DIALOG_FWARN: {
			if(!response) return true;
			gString[0] = (EOS);
			mysql_format(SQL, gString, 64, "SELECT * FROM `users` WHERE `id`='%d'", Selected2[playerid]);
			mysql_tquery(SQL, gString, "FWarnPlayer", "idd", playerid, 1, PlayerInfo[playerid][pSession]);
		} case DIALOG_FUNWARN: {
			if(!response) return true;
			gString[0] = (EOS);
			mysql_format(SQL, gString, 64, "SELECT * FROM `users` WHERE `id`='%d'", Selected2[playerid]);
			mysql_tquery(SQL, gString, "FWarnPlayer", "idd", playerid, -1, PlayerInfo[playerid][pSession]);
		} case DIALOG_BUYWALKIE: {
			if(!response) return true;
			if(IsNumeric(inputtext)){
				if(strlen(inputtext) == 3){
					new numb = strval(inputtext);
					if((inputtext[0] != '0')){
						gString[0] = EOS;
						mysql_format(SQL, gString, 128, "SELECT * FROM `frequencies` WHERE `freqid`='%d'", numb);
						mysql_tquery(SQL, gString, "CheckPrivateFreq", "idd", playerid, numb, PlayerInfo[playerid][pSession]);
					}
				}
			}
		} case DIALOG_BASIC: {
			if(!response) return true;
			if(PlayerInfo[playerid][pOGPoints] < 50) return Info(playerid, "Nu ai 50 OGPoints.");
			PlayerInfo[playerid][pBasicCrate] ++; pUpdateInt(playerid, "BasicCrate", PlayerInfo[playerid][pBasicCrate]);
			PlayerInfo[playerid][pOGPoints] -= 50; pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
			Info(playerid, "Ai platit 50 OGPoints pentru un Basic crate.");
		} case DIALOG_NORMAL: {
			if(!response) return true;
			if(PlayerInfo[playerid][pOGPoints] < 100) return Info(playerid, "Nu ai 100 OGPoints.");
			PlayerInfo[playerid][pOGPoints] -= 100; pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
			Info(playerid, "Ai platit 100 OGPoints pentru un Normal crate.");
			PlayerInfo[playerid][pNormalCrate] ++; pUpdateInt(playerid, "NormalCrate", PlayerInfo[playerid][pNormalCrate]);
		} case DIALOG_MEDIUM: {
			if(!response) return true;
			if(PlayerInfo[playerid][pOGPoints] < 150) return Info(playerid, "Nu ai 150 OGPoints.");
			PlayerInfo[playerid][pMediumCrate] ++; pUpdateInt(playerid, "MediumCrate", PlayerInfo[playerid][pMediumCrate]);
			PlayerInfo[playerid][pOGPoints] -= 150; pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
			Info(playerid, "Ai platit 150 OGPoints pentru un Medium crate.");
		} case DIALOG_DIAMOND: {
			if(!response) return true;
			if(PlayerInfo[playerid][pOGPoints] < 250) return Info(playerid, "Nu ai 250 OGPoints.");
			PlayerInfo[playerid][pDiamondCrate] ++; pUpdateInt(playerid, "DiamondCrate", PlayerInfo[playerid][pDiamondCrate]);
			PlayerInfo[playerid][pOGPoints] -= 250; pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
			Info(playerid, "Ai platit 250 OGPoints pentru un Diamond Crate.");
		} case DIALOG_VEHICLE: {
			if(!response) return true;
			if(PlayerInfo[playerid][pOGPoints] < 1000) return Info(playerid, "Nu ai 1000 OGPoints.");
			PlayerInfo[playerid][pVehicleCrate] ++; pUpdateInt(playerid, "VehicleCrate", PlayerInfo[playerid][pVehicleCrate]);
			PlayerInfo[playerid][pOGPoints] -= 1000; pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
			Info(playerid, "Ai platit 1000 OGPoints pentru un Vehicle Crate.");
		} case DIALOG_FRAGMENT: {
			if(!response) return true;
			if(PlayerInfo[playerid][pOGPoints] < 200) return Info(playerid, "Nu ai 200 OGPoints.");
			PlayerInfo[playerid][pFragmentCrate] ++; pUpdateInt(playerid, "FragmentCrate", PlayerInfo[playerid][pFragmentCrate]);
			PlayerInfo[playerid][pOGPoints] -= 200; pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
			Info(playerid, "Ai platit 200 OGPoints pentru un Fragment Crate.");
		} case DIALOG_SKIN: {
			if(!response) return true;
			switch(listitem){
				case 0: {
					if(GetPlayerCash(playerid) < 100000000) return Info(playerid, "Nu ai $100, 000, 000");
					GivePlayerCash(playerid, -100000000);
					PlayerInfo[playerid][pSkinCrate] ++;
					pUpdateInt(playerid, "SkinCrate", PlayerInfo[playerid][pSkinCrate]);
					Info(playerid, "Ai platit $100, 000, 000 pentru un Skin Crate.");
				}
				case 1: {
					if(PlayerInfo[playerid][pPremiumPoints] < 50) return Info(playerid, "Nu ai 50PP.");
					PlayerInfo[playerid][pPremiumPoints] -= 50;
					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					PlayerInfo[playerid][pSkinCrate] ++;
					pUpdateInt(playerid, "SkinCrate", PlayerInfo[playerid][pSkinCrate]);
					Info(playerid, "Ai platit 50PP pentru un Skin Crate.");
				}
			}
		}
		case DIALOG_OGCRATE:
		{
			if(!response) return true;
			if(PlayerInfo[playerid][pOGPoints] < 2_222) return Info(playerid, "Nu ai 2,222 OGPoints.");
			PlayerInfo[playerid][pOGCrate] ++; pUpdateInt(playerid, "OGCrate", PlayerInfo[playerid][pOGCrate]);
			PlayerInfo[playerid][pOGPoints] -= 2_222; pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
			Info(playerid, "Ai platit 2,222 OGPoints pentru un OG crate.");
		}
		case DIALOG_CRATES: {
			if(!response) return true;
			switch(listitem){
				case 0: {
					if(PlayerInfo[playerid][pBasicCrate] < 1) return Info(playerid, "Nu ai acest crate.");
					PlayerInfo[playerid][pBasicCrate] --;
					pUpdateInt(playerid, "BasicCrate", PlayerInfo[playerid][pBasicCrate]);
				}
				case 1: {
					if(PlayerInfo[playerid][pNormalCrate] < 1) return Info(playerid, "Nu ai acest crate.");
					PlayerInfo[playerid][pNormalCrate] --;
					pUpdateInt(playerid, "NormalCrate", PlayerInfo[playerid][pNormalCrate]);
				}
				case 2: {
					if(PlayerInfo[playerid][pMediumCrate] < 1) return Info(playerid, "Nu ai acest crate.");
					PlayerInfo[playerid][pMediumCrate] --;
					pUpdateInt(playerid, "MediumCrate", PlayerInfo[playerid][pMediumCrate]);
				}
				case 3: {
					if(PlayerInfo[playerid][pDiamondCrate] < 1) return Info(playerid, "Nu ai acest crate.");
					PlayerInfo[playerid][pDiamondCrate] --;
					pUpdateInt(playerid, "DiamondCrate", PlayerInfo[playerid][pDiamondCrate]);
				}
				case 4: {
					if(PlayerInfo[playerid][pVehicleCrate] < 1) return Info(playerid, "Nu ai acest crate.");
					if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots]) return Info(playerid, "Nu ai sloturi disponibile.");
					PlayerInfo[playerid][pVehicleCrate] --;
					pUpdateInt(playerid, "VehicleCrate", PlayerInfo[playerid][pVehicleCrate]);
				}
				case 5: {
					if(PlayerInfo[playerid][pFragmentCrate] < 1) return Info(playerid, "Nu ai acest crate.");
					PlayerInfo[playerid][pFragmentCrate] --;
					pUpdateInt(playerid, "FragmentCrate", PlayerInfo[playerid][pFragmentCrate]);
				}
				case 6: {
					if(PlayerInfo[playerid][pSkinCrate] < 1) return Info(playerid, "Nu ai acest crate.");
					if(GetSkinSlots(playerid) < 1) return Info(playerid, "Nu ai sloturi libere.");
					PlayerInfo[playerid][pSkinCrate] --;
					pUpdateInt(playerid, "SkinCrate", PlayerInfo[playerid][pSkinCrate]);
				}
				case 7:
				{
					if(PlayerInfo[playerid][pOGCrate] < 1) return Info(playerid, "Nu ai acest crate.");
					PlayerInfo[playerid][pOGCrate] --;
					pUpdateInt(playerid, "OGCrate", PlayerInfo[playerid][pOGCrate]);
				}
				case 8:
				{
					if(PlayerInfo[playerid][pSupremeCrate] < 1)
						return Info(playerid, "Nu ai acest crate.");

					PlayerInfo[playerid][pSupremeCrate] --;
					pUpdateInt(playerid, "SupremeCrate", PlayerInfo[playerid][pSupremeCrate]);
				}
			}
			SetPVarInt(playerid, "CrateType", listitem + 1);
			ShowCrates(playerid);
		} case DIALOG_RAMHQ: {
			if(!response) return true; new fid = BreachID[playerid];
			SetPlayerPosEx(playerid, FacInfo[fid][fcX], FacInfo[fid][fcY], FacInfo[fid][fcZ]);
			SetPlayerInterior(playerid, FacInfo[fid][fInterior]);
			SetPlayerVirtualWorld(playerid, FacInfo[fid][fID]);
			InHQ[playerid] = fid;
		} case DIALOG_RAMHOUSE: {
			if(!response) return true; new i = BreachID[playerid];
			SetPlayerInterior(playerid, HouseInfo[i][hInterior]);
			SetPlayerPosEx(playerid, HouseInfo[i][hExitX],HouseInfo[i][hExitY],HouseInfo[i][hExitZ]);
			InHouse[playerid] = i;
			SetPlayerVirtualWorld(playerid, HouseInfo[i][hID]);
		} case DIALOG_RAMCLANHQ: {
			if(!response)
					return true;
			new
				i = BreachID[playerid],
				clan = ClanHQs[i][cOwnerID],
				type = ClanHQs[i][cType],
				clanhqid = ClanToHQ[clan]
			;

			SetPlayerPosEx(playerid, ClanHQInteriors[type][1], ClanHQInteriors[type][2], ClanHQInteriors[type][3]);
			SetPlayerInterior(playerid, floatround(ClanHQInteriors[type][0]));
			SetPlayerVirtualWorld(playerid, clan);
			InClanHQ[playerid] = clanhqid;
		} case DIALOG_SELLHOUSETOSTATE: {
			if(!response) return true;
			if(PlayerInfo[playerid][pHouse] != SellHouseID[playerid]) return Info(playerid, "Nu mai ai casa.");
			MoveHouseToState(PlayerInfo[playerid][pHouse]);
		} case DIALOG_SELLBIZTOSTATE: {
			if(!response) return true;
			if(PlayerInfo[playerid][pBizz] != SellHouseID[playerid]) return Info(playerid, "Nu mai ai biz.");
			MoveBusinessToState(PlayerInfo[playerid][pBizz]);
		} case DIALOG_CHANGENAME: {
			if(!response) return true;
			if(isnull(inputtext) || strlen(inputtext) < 3 || strlen(inputtext) > 20) return Info(playerid, "Nume invalid.");
			new escape[26];
			mysql_escape_string(inputtext, escape);
			gString[0] = (EOS);
			mysql_format(SQL, gString, 128, "SELECT * FROM `users` WHERE `name` = '%s'", escape);
			mysql_tquery(SQL, gString, "CheckNewName", "isd", playerid, escape, PlayerInfo[playerid][pSession]);
		} case DIALOG_SEXSHOP: {
			if(!response) return true;
			switch(listitem){
				case 0: {
					if(GetPlayerCash(playerid) <= 99) return Info(playerid, "Nu ai suficienti bani.");
					GivePlayerCash(playerid, -100);
					BizzInfo[InBiz[playerid]][bTill] += 100;
					GivePlayerWeapon(playerid, 10, 1);
				} case 1: {
					if(GetPlayerCash(playerid) <= 99) return Info(playerid, "Nu ai suficienti bani.");
					GivePlayerCash(playerid, -100);
					BizzInfo[InBiz[playerid]][bTill] += 100;
					GivePlayerWeapon(playerid, 11, 1);
				} case 2: {
					if(GetPlayerCash(playerid) <= 99) return Info(playerid, "Nu ai suficienti bani.");
					GivePlayerCash(playerid, -100);
					BizzInfo[InBiz[playerid]][bTill] += 100;
					GivePlayerWeapon(playerid, 13, 1);
				} case 3: {
					if(GetPlayerCash(playerid) <= 99) return Info(playerid, "Nu ai suficienti bani.");
					GivePlayerCash(playerid, -100);
					BizzInfo[InBiz[playerid]][bTill] += 100;
					GivePlayerWeapon(playerid, 12, 1);
				} case 4: {
					if(GetPlayerCash(playerid) <= 149) return Info(playerid, "Nu ai suficienti bani.");
					GivePlayerCash(playerid, -150);
					BizzInfo[InBiz[playerid]][bTill] += 150;
					GivePlayerWeapon(playerid, 14, 1);
				}
			}
			Query_Mysql("UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBiz[playerid]][bTill],InBiz[playerid]);
		} case DIALOG_BUY: {
			if(!response) return true;
			switch(listitem){
				case 0:
				{
					if(PlayerInfo[playerid][pWTalkie]) return Info(playerid, "Ai deja un walkie talkie.");
					if(GetPlayerCash(playerid) < 2500) return Info(playerid, "Nu ai suficienti bani.");
					GivePlayerCash(playerid, -2500);
					BizzInfo[InBiz[playerid]][bTill] += 2500;
					PlayerInfo[playerid][pWTalkie] = true;
					pUpdateInt(playerid, "WTalkie", PlayerInfo[playerid][pWTalkie]);
					Info(playerid, "Ti-ai cumparat un walkie talkie.");
					if(TutorialStep[playerid] == 2)
					{
						SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Cu acest Walkie Talkie poti sa vorbesti cu alti jucatori.");
						SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Cea mai populara frecventa este '1234', asa ca tasteaza /setfreq 1234.");

						TutorialStep[playerid] ++;
					}
				}
				case 1:
				{
					if(PlayerInfo[playerid][pGasCan]) return Info(playerid, "Ai deja un gascan.");
					if(GetPlayerCash(playerid) < 2500) return Info(playerid, "Nu ai suficienti bani.");
					GivePlayerCash(playerid, -2500);
					BizzInfo[InBiz[playerid]][bTill] += 2500;
					Info(playerid, "Ti-ai cumparat un gascan.");
					PlayerInfo[playerid][pGasCan] = true;
					pUpdateInt(playerid, "GasCan", PlayerInfo[playerid][pGasCan]);
				}
			} 
			Query_Mysql("UPDATE `bizz` SET `Till` = '%d' WHERE `ID` = '%d'", BizzInfo[InBiz[playerid]][bTill], InBiz[playerid]);
		} case DIALOG_LOGIN1: {
	 		if(!response)
	 		{
	 			defer KickEx(playerid, PlayerInfo[playerid][pSession]);
	 		}
	 		if(strlen(inputtext) < 8 || strlen(inputtext) > 32)
	 			return SPD(playerid, DIALOG_LOGIN1,DIALOG_STYLE_PASSWORD,"Inregistrare","Te rugam introdu o parola de minim 8 caractere, si maxim 32:","Inregistrare","Cancel");
	 		new escaped[33];
	 		mysql_escape_string(inputtext, escaped);
			format(PlayerInfo[playerid][pKey], 32 + 1, MD5_Hash(escaped));
			SPD(playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT, "Email", "(ex: my_email@yahoo.com)", "Ok", "");	
	 	} case DIALOG_LOGIN2: {
	 		if(!response){
	 			defer KickEx(playerid, PlayerInfo[playerid][pSession]);
	 			return true;
	 		}
	 		if(strlen(inputtext) < 8 || strlen(inputtext) > 32)
	 			return SPD(playerid, DIALOG_LOGIN2, DIALOG_STYLE_PASSWORD, "Logare", "Te rugam introdu-ti parola:", "Logare", "Anuleaza");
 			new
 				tmppass[33]
 			;
 			mysql_escape_string(inputtext, tmppass);
 			OnPlayerLogin(playerid, MD5_Hash(tmppass));
	 	}
	} return true; }
function SPD(playerid, dialogid, dialogtype, const title[], const string[], const btn1[], const btn2[]){
	dialogID[playerid] = dialogid;
	return ShowPlayerDialog(playerid, dialogid, dialogtype, title, string, btn1, btn2);
}	
function SetPlayerCheckpointEx(playerid, Float:x, Float:y, Float:z, Float:size){
	DisablePlayerCheckpoint(playerid);
	SetPVarFloat(playerid, "xloc", x);
	SetPVarFloat(playerid, "yloc", y);
	SetPVarFloat(playerid, "zloc", z);
	return SetPlayerCheckpoint(playerid, x, y, z, size);
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	if(Undercover[playerid])
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);

	if(InTurfZone[forplayerid] != WarOnTurf || !IsAGangMember(playerid) || !IsAGangMember(forplayerid) || !OnDuty[playerid] || !OnDuty[forplayerid] || !ServerWars)
	{
		if(IsACop(playerid))
		{
			if(OnDuty[playerid])
			{
				SetPlayerMarkerForPlayer(forplayerid, playerid, ((GetFactionColor(PlayerInfo[playerid][pMember]) & 0xffffff00)));
			}
			else
			{
				SetPlayerMarkerForPlayer(forplayerid, playerid, 0xffffff00);
			}
		}
		else
		{
			SetPlayerMarkerForPlayer(forplayerid, playerid, ((GetFactionColor(PlayerInfo[playerid][pMember]) & 0xffffff00)));
		}
	}

	return true;
}
public OnVehicleStreamIn(vehicleid, forplayerid){
	for(new v; v < MAX_PERSONAL_VEHICLES; v++){ 
		if(PlayerInfo[forplayerid][pVehID][v] == vehicleid){ 
			SetVehicleParamsForPlayer(vehicleid,forplayerid, 0, 0); 
		} 
	} 
	for(new vv; vv < MAX_VEHICLES; vv++){ 
		if(vv == JobVeh[forplayerid] || vv == RentVeh[forplayerid] || vv == QuestVeh[forplayerid] || vv == pfVehicle[forplayerid] || vv == pcVehicle[forplayerid]){ 
			SetVehicleParamsForPlayer(vv,forplayerid, 0, 0); 
		}
	} 
	return true; 
}
function OwnableVehicle(vehicleid){
	foreach(new i : Player){
		for(new v; v < MAX_PERSONAL_VEHICLES; v++){ 
			if(PlayerInfo[i][pVehID][v] == vehicleid) return true; 
		}
	} 
	return false;
}
stock HaveCashForDs(playerid, const cash[], type = 1)
{
	new BigInt:TempMoney;
	converBytes(TempMoney, cash);
	switch(type)
	{
		case 1:
		{
			if(OPByte(TempMoney, >, #999999999))
			{
				if(OPByte(TempMoney, >, valueBigInt(PlayerCash[playerid])))
				{
					return false;
				}
			}
			else
			{
				if(GetPlayerCash(playerid) < bytes32(TempMoney))
				{
					return false;
				}
			}
		}
		case 2:
		{
			if(OPByte(TempMoney, >, #999999999))
			{
				if(OPByte(TempMoney, >, valueBigInt(PlayerBank[playerid])))
				{
					return false;
				}
			}
			else
			{
				if(GetPlayerBank(playerid) < bytes32(TempMoney))
				{
					return false;
				}
			}
		}
	}
	return true;
}
function InsertVehicle2(playerid, stockid, bool: premium, bool: vip, model, session)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	new
		BoughtMethod = 0
	;

	if(stockid != 0)
	{
		if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots])
		{
			if(PerkActive[playerid][33])
			{
				if(OPByte(DealerShipPrice95[stockid], >, #999999999))
		        {
		            addBytes64(PlayerCash[playerid], valueBigInt(DealerShipPrice95[stockid]));
		        }
		        else
		        {
		            GivePlayerCash(playerid, bytes32(DealerShipPrice95[stockid]));
		        }
				SendMsg(playerid, COLOR_SERVER, "Dealership >> {ffffff}Ai primit $%s deoarece nu ai sloturi disponibile.", formatBytes(DealerShipPrice95[stockid]));
			}
			else if(PerkActive[playerid][32])
			{
				if(OPByte(DealerShipPrice97[stockid], >, #999999999))
		        {
		            addBytes64(PlayerCash[playerid], valueBigInt(DealerShipPrice97[stockid]));
		        }
		        else
		        {
		            GivePlayerCash(playerid, bytes32(DealerShipPrice97[stockid]));
		        }
				SendMsg(playerid, COLOR_SERVER, "Dealership >> {ffffff}Ai primit $%s deoarece nu ai sloturi disponibile.", formatBytes(DealerShipPrice97[stockid]));
			}
			else
			{
				if(OPByte(DealerShipPrice[stockid], >, #999999999))
		        {
		            addBytes64(PlayerCash[playerid], valueBigInt(DealerShipPrice[stockid]));
		        }
		        else
		        {
		            GivePlayerCash(playerid, bytes32(DealerShipPrice[stockid]));
		        }
				SendMsg(playerid, COLOR_SERVER, "Dealership >> {ffffff}Ai primit $%s deoarece nu ai sloturi disponibile.", formatBytes(DealerShipPrice[stockid]));
			}
			Query_Mysql("delete from cars where id = %d", cache_insert_id());
			return true;
		}
		model = StockInfo[stockid][vModel];
	}

	new
		idd = cache_insert_id(),
		Float:gRandomVehicles[8][4] =
		{
			{523.1566, -1288.7944, 16.9699, 285.7405},
			{533.0040, -1279.1887, 16.9695, 222.4635},
			{540.0106, -1273.4564, 16.9693, 221.8032},
			{546.7054, -1268.2214, 16.9708, 222.3633},
			{552.6017, -1263.7153, 16.9698, 219.5970},
			{562.7086, -1278.3401, 16.9712, 104.7959},
			{564.5198, -1288.6240, 16.9758, 41.3149},
			{553.9013, -1290.0325, 16.9753, 40.0195}
		},
		Float:gRandomBoats[8][4] =
		{
			{206.3435, -1916.1201, -0.5501, 177.2371},
			{217.0788, -1914.8450, -0.6255, 180.2478},
			{228.1928, -1914.8070, -0.5567, 179.2730},
			{238.0672, -1915.1794, -0.5691, 181.8733},
			{251.2731, -1915.8468, -0.5748, 179.9893},
			{261.6254, -1917.5620, -0.5836, 186.1591},
			{275.9619, -1924.1995, -0.5555, 174.2962},
			{288.2796, -1923.9706, -0.5181, 177.5738}
		},
		rand = random(8),
		idcar,
		Float: gRandomDS[8][4]
	;
	if(VehicleType[model - 400] == 3)
	{	
		gRandomDS = gRandomBoats;
	}
	else
	{
		gRandomDS = gRandomVehicles;
	}
	if(stockid != 0 && !premium)
    {
		if(PerkActive[playerid][33])
		{
			if(OPByte(DealerShipPrice95[stockid], >, #999999999))
	        {
	            new money[32];
	            format(money, sizeof(money), "-%s", valueBigInt(DealerShipPrice95[stockid]));
	            addBytes64(PlayerCash[playerid], money);
	        }
	        else
	        {
	            GivePlayerCash(playerid, -bytes32(DealerShipPrice95[stockid]));
	        }
	        BoughtMethod = 2;
		}
		else if(PerkActive[playerid][32])
		{
			if(OPByte(DealerShipPrice97[stockid], >, #999999999))
	        {
	            new money[32];
	            format(money, sizeof(money), "-%s", valueBigInt(DealerShipPrice97[stockid]));
	            addBytes64(PlayerCash[playerid], money);
	        }
	        else
	        {
	            GivePlayerCash(playerid, -bytes32(DealerShipPrice97[stockid]));
	        }
	        BoughtMethod = 1;
		}
		else
		{
			if(OPByte(DealerShipPrice[stockid], >, #999999999))
	        {
	            new money[32];
	            format(money, sizeof(money), "-%s", valueBigInt(DealerShipPrice[stockid]));
	            addBytes64(PlayerCash[playerid], money);
	        }
	        else
	        {
	            GivePlayerCash(playerid, -bytes32(DealerShipPrice[stockid]));
	        }
	        BoughtMethod = 0;
		}
        StockInfo[stockid][vStock] --;
        Query_Mysql("UPDATE stock SET Stock='%d' WHERE ID='%d'", StockInfo[stockid][vStock], stockid);
        Info(playerid, "Felicitari, ti-ai cumparat un vehicul(%s).", GetVehicleName(model));
    }
    for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(PlayerInfo[playerid][pVeh][v] == -1)
		{
			idcar = v;
			break;
		}
	}
	resetVehicle(playerid, idcar);
	PlayerInfo[playerid][pVeh][idcar] = idd;
	format(CarOwner[playerid][idcar], 25, GetName(playerid));
	PlayerInfo[playerid][pVehModel][idcar] = model;
	PlayerInfo[playerid][pVehBuyTime][idcar] = gettime();
	PlayerInfo[playerid][pVehLocX][idcar] = gRandomDS[rand][0]; 
	PlayerInfo[playerid][pVehLocY][idcar] = gRandomDS[rand][1]; 
	PlayerInfo[playerid][pVehLocZ][idcar] = gRandomDS[rand][2] + 1;
	PlayerInfo[playerid][pVehAngle][idcar] = gRandomDS[rand][3];
	PlayerInfo[playerid][pBoughtMethod][idcar] = BoughtMethod;
	Query_Mysql("update cars set BoughtMethod = %d where id = %d", BoughtMethod, PlayerInfo[playerid][pVeh][idcar]);
	cUpdate(playerid, idcar, 2);
	cUpdate(playerid, idcar, pVehPaintJ);
	cUpdate(playerid, idcar, pVehLocX);
	cUpdate(playerid, idcar, pVehLocY);
	cUpdate(playerid, idcar, pVehLocZ);
	cUpdate(playerid, idcar, pVehAngle);
	cUpdate(playerid, idcar, pVehColor1);
	cUpdate(playerid, idcar, pVehColor2);
	cUpdate(playerid, idcar, pVehKM);
	cUpdate(playerid, idcar, pVehBuyTime);
	cUpdate(playerid, idcar, pVehGas);
	cUpdate(playerid, idcar, 1);
	PlayerInfo[playerid][pVehID][idcar] = CreateVehicleEx(model, gRandomDS[rand][0], gRandomDS[rand][1], gRandomDS[rand][2] + 1, gRandomDS[rand][3], 0, 0, -1, false, true);
	LocateVeh(playerid, PlayerInfo[playerid][pVehID][idcar]);
	if(vip != false)
	{
		PlayerInfo[playerid][pVehVip][idcar] = true;
		Query_Mysql("update cars set VipVehicle = %d where ID = %d", PlayerInfo[playerid][pVehVip][idcar], PlayerInfo[playerid][pVeh][idcar]);
		new 
			vehicleid = PlayerInfo[playerid][pVehID][idcar],
			FormatedText[64]
		;
		format(VipTextColor[playerid][idcar], 64, "ffffff");
		format(VipText[playerid][idcar], 64, "VipText");
		for(new nr = 0; nr < 6; nr++)
		{
			VipTextPos[nr][playerid][idcar] = 0;
		}
		format(FormatedText, sizeof(FormatedText), "{%s}%s", VipTextColor[playerid][idcar], VipText[playerid][idcar]);
		CreateAndAttachVipText(vehicleid, FormatedText, 0, 0, 0, 0, 0, 0);
	}
	return true;
}
stock InsertVehicle(playerid, stockid, bool: premium = false, bool: vip = false, model = 0)
{
	if(stockid != 0)
	{
		model = StockInfo[stockid][vModel];

		if(PerkActive[playerid][33])
		{
			if(!HaveCashForDs(playerid, valueBigInt(DealerShipPrice95[stockid])) && premium != true)
				return Info(playerid, "Nu ai suficienti bani.");
		}
		else if(PerkActive[playerid][32])
		{
			if(!HaveCashForDs(playerid, valueBigInt(DealerShipPrice97[stockid])) && premium != true)
				return Info(playerid, "Nu ai suficienti bani.");
		}
		else
		{
			if(!HaveCashForDs(playerid, valueBigInt(DealerShipPrice[stockid])) && premium != true)
				return Info(playerid, "Nu ai suficienti bani.");
		}

		if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots])
			return Info(playerid, "Nu ai sloturi disponibile.");
	}

	gString[0] = (EOS);
	mysql_format(SQL, gString, 64, "INSERT INTO cars (Model) VALUES (%d)", model);
	mysql_tquery(SQL, gString, "InsertVehicle2", "idbbdd", playerid, stockid, premium, vip, model, PlayerInfo[playerid][pSession]);
	return true;
}
function cUpdate(playerid, id, type){
	switch(type){
		case pVehLocX: Query_Mysql("UPDATE `cars` SET `Locationx`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pVehLocX][id],PlayerInfo[playerid][pVeh][id]);
		case pVehLocY: Query_Mysql("UPDATE `cars` SET `Locationy`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pVehLocY][id],PlayerInfo[playerid][pVeh][id]);
		case pVehLocZ: Query_Mysql("UPDATE `cars` SET `Locationz`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pVehLocZ][id],PlayerInfo[playerid][pVeh][id]);
		case pVehAngle: Query_Mysql("UPDATE `cars` SET `Angle`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pVehAngle][id],PlayerInfo[playerid][pVeh][id]);
		case pVehKM: Query_Mysql("UPDATE `cars` SET `KM`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pVehKM][id],PlayerInfo[playerid][pVeh][id]);
		case pVehBuyTime: Query_Mysql("UPDATE `cars` SET `BuyTime`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pVehBuyTime][id],PlayerInfo[playerid][pVeh][id]);
		case pVehGas: Query_Mysql("UPDATE `cars` SET `Gas`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pVehGas][id],PlayerInfo[playerid][pVeh][id]);
		case 2: Query_Mysql("UPDATE `cars` SET `mod1`='%d',`mod2`='%d',`mod3`='%d',`mod4`='%d',`mod5`='%d',`mod6`='%d',`mod7`='%d',`mod8`='%d',`mod9`='%d',`mod10`='%d',`mod11`='%d',`mod12`='%d',`mod13`='%d',`mod14`='%d',`mod15`='%d',`mod16`='%d',`mod17`='%d' WHERE `ID`='%d'",
			CarMod[playerid][id][0], CarMod[playerid][id][1], CarMod[playerid][id][2], CarMod[playerid][id][3], CarMod[playerid][id][4], CarMod[playerid][id][5], CarMod[playerid][id][6], CarMod[playerid][id][7],
			CarMod[playerid][id][8], CarMod[playerid][id][9], CarMod[playerid][id][10], CarMod[playerid][id][11], CarMod[playerid][id][12], CarMod[playerid][id][13],CarMod[playerid][id][14],
			CarMod[playerid][id][15], CarMod[playerid][id][16], PlayerInfo[playerid][pVeh][id]);
		case pVehPaintJ: Query_Mysql("UPDATE `cars` SET `PaintJ`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pVehPaintJ][id],PlayerInfo[playerid][pVeh][id]);
		case pVehColor1: Query_Mysql("UPDATE `cars` SET `ColorOne`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pVehColor1][id],PlayerInfo[playerid][pVeh][id]);
		case pVehColor2: Query_Mysql("UPDATE `cars` SET `ColorTwo`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pVehColor2][id],PlayerInfo[playerid][pVeh][id]);
		case 1: Query_Mysql("UPDATE `cars` SET `Owner`='%s' WHERE `ID`='%d'",CarOwner[playerid][id],PlayerInfo[playerid][pVeh][id]);
	}
	return true;
}
stock PutPlayerInVehicleEx(playerid, vehicleid,seatid)
{
	LastVeh[playerid] = vehicleid; 
	PutPlayerInVehicle(playerid, vehicleid, seatid);
	return true;
}
stock strmatch(const String1[], const String2[]){
 	if((!strcmp(String1, String2, true, strlen(String2))) && (strlen(String2) == strlen(String1))) return true;
 	return false;
}
stock SetPlayerPosEx(playerid, Float:X, Float:Y, Float:Z){
	PlayerPosii[playerid][0] = X; 
	PlayerPosii[playerid][1] = Y;
	PlayerPosii[playerid][2] = Z;
	SetPlayerPos(playerid, X, Y, Z); 
	SetCameraBehindPlayer(playerid);
	SetPVarInt(playerid, "ftps", 0);
	SetPVarInt(playerid, "tps", 0);
	return true;
}
function LoadClanZones(){
	new string[50];
	serverClanZones = cache_num_rows();
	for(new i = 1; i <= serverClanZones; i++){
		cache_get_value_name_int(i - 1, "zoneID", ClanZoneInfo[i][clanZoneID]);
		cache_get_value_name_int(i - 1, "zoneClan", ClanZoneInfo[i][clanZoneClan]);
		cache_get_value_name_float(i - 1, "zoneObjX", ClanZoneInfo[i][clanZoneObjX]);
		cache_get_value_name_float(i - 1, "zoneObjY", ClanZoneInfo[i][clanZoneObjY]);
		cache_get_value_name_float(i - 1, "zoneObjZ", ClanZoneInfo[i][clanZoneObjZ]);
		format(string, 50, "%s", ClanInfo[ClanZoneInfo[i][clanZoneClan]][clanName]);
		gString[0] = (EOS);
		format(gString, 128, "Clan Zone %d\nProprietar: %s", ClanZoneInfo[i][clanZoneID], (!ClanZoneInfo[i][clanZoneClan]) ? ("Nimeni") : (string));
		ClanZoneInfo[i][clanZoneLabel] = CreateStreamed3DTextLabel(gString, -1, ClanZoneInfo[i][clanZoneObjX], ClanZoneInfo[i][clanZoneObjY], ClanZoneInfo[i][clanZoneObjZ], 15.0, 0, 0);
		ClanZoneInfo[i][clanZoneAttacked] = 0; ClanZoneInfo[i][clanZoneProcent] = 0; ClanZoneInfo[i][clanZoneDeelay] = 0;
		if(ClanTurfsArea[i])
		{
			DestroyDynamicArea2(ClanTurfsArea[i]);
		}
		ClanTurfsArea[i] = CreateDynamicSphere2(12, i, ClanZoneInfo[i][clanZoneObjX], ClanZoneInfo[i][clanZoneObjY], ClanZoneInfo[i][clanZoneObjZ], 50, 0, 0);
	}
	printf("%d Zone de Clanuri Incarcate.", serverClanZones);
	return true;
}
function LoadcInfo()
{
	serverClans = cache_num_rows();
	for(new i = 1; i <= serverClans; i++)
	{
		cache_get_value_name_int(i - 1, "clanID", ClanInfo[i][clanID]);
		cache_get_value_name_int(i - 1, "clanSlots", ClanInfo[i][clanSlots]);
		cache_get_value_name_int(i - 1, "clanSafe", ClanInfo[i][clanSafe]);
		cache_get_value_name(i - 1, "clanName", ClanInfo[i][clanName]);
		cache_get_value_name(i - 1, "clanColor", ClanInfo[i][clanColor]);
		cache_get_value_name(i - 1, "clanRankName1", ClanInfo[i][clanRankName1]);
		cache_get_value_name(i - 1, "clanRankName2", ClanInfo[i][clanRankName2]);
		cache_get_value_name(i - 1, "clanRankName3", ClanInfo[i][clanRankName3]);
		cache_get_value_name(i - 1, "clanRankName4", ClanInfo[i][clanRankName4]);
		cache_get_value_name(i - 1, "clanRankName5", ClanInfo[i][clanRankName5]);
		cache_get_value_name(i - 1, "clanRankName6", ClanInfo[i][clanRankName6]);
		cache_get_value_name(i - 1, "clanRankName7", ClanInfo[i][clanRankName7]);
		cache_get_value_name_int(i - 1, "clanPoints", ClanInfo[i][clanPoints]);
		cache_get_value_name_float(i - 1, "clanGarageX", ClanInfo[i][cGarageX]);
		cache_get_value_name_float(i - 1, "clanGarageY", ClanInfo[i][cGarageY]);
		cache_get_value_name_float(i - 1, "clanGarageZ", ClanInfo[i][cGarageZ]);
		cache_get_value_name(i - 1, "clanTag", ClanInfo[i][cClanTag]);

		if(ClanGarageArea[i])
		{
			DestroyDynamicArea2(ClanGarageArea[i]);
		}

		if(ClanInfo[i][cGarageX])
		{
			new Text[128];
			format(Text, 128, "Creare Vehicul De Clan(%s)\n{ffffff}Apasa tasta {00a326}Y", ClanInfo[i][clanName]);
			ClanInfo[i][cGarageLabel] = CreateStreamed3DTextLabel(Text, COLOR_SERVER, ClanInfo[i][cGarageX], ClanInfo[i][cGarageY], ClanInfo[i][cGarageZ], 8.0, 0, 0);
			ClanInfo[i][cGaragePickup] = CreateDynamicPickup(19133, 1, ClanInfo[i][cGarageX], ClanInfo[i][cGarageY], ClanInfo[i][cGarageZ]);
			ClanGarageArea[i] = CreateDynamicSphere2(11, i, ClanInfo[i][cGarageX], ClanInfo[i][cGarageY], ClanInfo[i][cGarageZ], 1, 0, 0);
		}

		new nuj[128];
		cache_get_value_name(i - 1, "cVehs", nuj);
		sscanf(nuj, "p<|>a<i>[9]", ClanInfo[i][cVehs]);
		cache_get_value_name(i - 1, "cMotd", ClanInfo[i][cMotd]);
	}
	printf("%d Clanuri Incarcate.", serverClans);
	return true;
}
CMD:changepass(playerid){
	if(GetPVarInt(playerid, "deelaypass") > gettime())
		return Info(playerid, "Iti vei putea schimba parola in %d secunde.", GetPVarInt(playerid, "deelaypass") - gettime());
	SPD(playerid, DIALOG_NEWPASS,DIALOG_STYLE_INPUT, "Change password:","Type in box your new password:","Done","Close");
	return true;
}
CMD:cduty(playerid){
	if(!PlayerInfo[playerid][pClan]) return Info(playerid, "Nu esti intr-un clan.");
	if(OnDuty[playerid]) return Info(playerid, "Esti la datoria factiunii.");
	if(!strcmp(GetWeekDay(), "Sambata", true) || !strcmp(GetWeekDay(), "Duminica", true)) return Info(playerid, "Poti folosi aceasta comanda doar de Luni pana Vineri.");
	new hour, minn, sec;
	gettime(hour, minn, sec);
	switch(ClanDuty[playerid]){
		case 0: SendToClan(PlayerInfo[playerid][pClan], COLOR_SERVER, "Clan >> {%s}%s este acum la datorie.", ClanInfo[PlayerInfo[playerid][pClan]][clanColor], GetName(playerid));
		case 1: SendToClan(PlayerInfo[playerid][pClan], COLOR_SERVER, "Clan >> {%s}%s nu mai este acum la datorie.", ClanInfo[PlayerInfo[playerid][pClan]][clanColor], GetName(playerid));
	}
	ClanDuty[playerid] = !ClanDuty[playerid];
	return true;
}
new Timer:spraytimer[20];
timer spraytimerr[240000](zone){
	if(ClanZoneInfo[zone][clanZoneAttacked] == 0) return true;
	SendToClan(ClanZoneInfo[zone][clanZoneClan], COLOR_SERVER, "Clan >> {%s}Clan %s failed to win turf %d owned by your clan.", ClanInfo[ClanZoneInfo[zone][clanZoneClan]][clanColor], ClanInfo[ClanZoneInfo[zone][clanZoneAttacked]][clanName], zone);
	SendToClan(ClanZoneInfo[zone][clanZoneAttacked], COLOR_SERVER, "Clan >> {%s}Your clan failed to win turf %d owned by clan %s.", ClanInfo[ClanZoneInfo[zone][clanZoneAttacked]][clanColor], zone, ClanInfo[ClanZoneInfo[zone][clanZoneAttacked]][clanName]);
	ClanZoneInfo[zone][clanZoneAttacked] = 0; ClanZoneInfo[zone][clanZoneProcent] = 0;
	return true;
}	
CMD:spray(playerid){
	if(!PlayerInfo[playerid][pClan]) return Info(playerid, "Nu esti intr-un clan.");
	if(GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid)) return Info(playerid, "Nu poti face asta dintr-o lume virtuala sau dintr-un interior.");
	if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Trebuie sa te dai jos din vehicul.");
	new zone = InClanTurf[playerid], zoneclan, clan = PlayerInfo[playerid][pClan];
	if(zone == 0 || !IsPlayerInRangeOfPoint(playerid, 5, ClanZoneInfo[zone][clanZoneObjX], ClanZoneInfo[zone][clanZoneObjY], ClanZoneInfo[zone][clanZoneObjZ])) return Info(playerid, "Nu esti intr-o zona de clan.");
	if(!strcmp(GetWeekDay(), "Sambata", true) || !strcmp(GetWeekDay(), "Duminica", true)) return Info(playerid, "Poti folosi aceasta comanda doar de Luni pana Vineri.");
	new hour, minute, second; gettime(hour, minute, second);
	if(hour != 18 && hour != 19) return Info(playerid, "Poti face spray doar intre orele 18:00 - 20:00.");
	if(!ClanDuty[playerid]) return Info(playerid, "Nu esti la datoria clanului.");
	if(OnDuty[playerid]) return Info(playerid, "Nu poti folosi aceasta comanda deoarece esti duty.");
	if(ClanZoneInfo[zone][clanZoneClan] == PlayerInfo[playerid][pClan]) return Info(playerid, "Aceasta zona este deja detinuta de clanul tau.");
	if(ClanZoneInfo[zone][clanZoneAttacked] && ClanZoneInfo[zone][clanZoneAttacked] != PlayerInfo[playerid][pClan]) return Info(playerid, "Aceasta zona este deja atacata.");
	if(ClanZoneInfo[zone][clanZoneDeelay]) return Info(playerid, "Trebuie sa astepti inca %d secunde.", ClanZoneInfo[zone][clanZoneDeelay]);
	zoneclan = ClanZoneInfo[zone][clanZoneClan];
	if(ClanZoneInfo[zone][clanZoneClan] && !ClanZoneInfo[zone][clanZoneAttacked] && !ClanZoneInfo[zone][clanZoneProcent]){
		SendToClan(zoneclan, COLOR_SERVER, "Clan >> {%s}%s din clanul %s ataca teritoriul %d detinut de clanul tau.", ClanInfo[zoneclan][clanColor], GetName(playerid), ClanInfo[clan][clanName], zone);
		SendToClan(clan, COLOR_SERVER, "Clan >> {%s}%s din clanul tau ataca teritoriul %d detinut de %s.", ClanInfo[clan][clanColor], GetName(playerid), zone, ClanInfo[zoneclan][clanName]);
	} if(!ClanZoneInfo[zone][clanZoneAttacked] && !ClanZoneInfo[zone][clanZoneProcent]){
		ClanZoneInfo[zone][clanZoneProcent] = 100; 
		ClanZoneInfo[zone][clanZoneAttacked] = PlayerInfo[playerid][pClan];
		spraytimer[zone] = defer spraytimerr(zone);
	} if(gettime() < GetPVarInt(playerid, "sprayDeelay")) return Info(playerid, "Asteapta cateva secunde.");
	SetPVarInt(playerid, "sprayDeelay", gettime() + 5); OnePlayAnim(playerid,"SPRAYCAN","spraycan_full", 4.0, 0, 0, 0, 0, 0);
	ClanZoneInfo[zone][clanZoneProcent] -= 5; 
	if(ClanZoneInfo[zone][clanZoneProcent] > 0){
		Info(playerid, "{%s}Continua sa dai cu spray-ul, mai ai %d%.", ClanInfo[clan][clanColor], ClanZoneInfo[zone][clanZoneProcent]);
	} else {
		new bani = 70000 + random(50000);
		if(ClanInfo[clan][clanSafe] < 999_999_999)
		{
			ClanInfo[clan][clanSafe] += bani;
		}
		ClanInfo[clan][clanPoints] ++;
		SetPlayerAmmo(playerid, 9, 0);
		new string[50];
		format(string, 50, "%s", ClanInfo[ClanZoneInfo[zone][clanZoneClan]][clanName]);
		SendToClan(clan, COLOR_SERVER, "Clan >> {%s}%s a castigat turful %d, detinut de %s si a castigat $%s.", ClanInfo[clan][clanColor], GetName(playerid), zone, (!ClanZoneInfo[zone][clanZoneClan]) ? ("Nimeni") : (string), FormatNumber(bani));
		Info(playerid, "{%s}Ai sprayat peretele cu succes.", ClanInfo[clan][clanColor]);
		Query_Mysql("UPDATE `clanzones` SET `zoneClan` = '%d' WHERE `zoneID` = '%d'", clan, zone);
		Query_Mysql("UPDATE `clans` SET `clanSafe` = '%d', `clanPoints` = '%d' WHERE `clanID` = '%d'", ClanInfo[clan][clanSafe], ClanInfo[clan][clanPoints], ClanInfo[clan][clanID]);
		ClanZoneInfo[zone][clanZoneAttacked] = 0;
		ClanZoneInfo[zone][clanZoneProcent] = 0;
		ClanZoneInfo[zone][clanZoneClan] = clan;
		ClanZoneInfo[zone][clanZoneDeelay] = 600;
		Iter_Add(ClanZonesWithDeelay, zone);
		stop spraytimer[zone];
		format(string, 50, "%s", ClanInfo[ClanZoneInfo[zone][clanZoneClan]][clanName]);
		gString[0] = (EOS); format(gString, 128, "Clan Zone %d\nProprietar: %s", ClanZoneInfo[zone][clanZoneID], (!ClanZoneInfo[zone][clanZoneClan]) ? ("Nimeni") : (string));
		UpdateDynamic3DTextLabelText(ClanZoneInfo[zone][clanZoneLabel], -1, gString);
		if(zoneclan)
		{
			SendToClan(zoneclan, COLOR_SERVER, "Clan >> {%s}%s din clanul %s a castigat turful %d, detinut de clanul tau.", ClanInfo[zoneclan][clanColor], GetName(playerid), ClanInfo[clan][clanName], zone);
		}
	}
	return true;
}
stock SendToClan(clanid, color, const text[], va_args<>)
{
	if(clanid == 0) return true;
	gString[0] = (EOS);
	va_format(gString, 144, text, va_start<3>);
	foreach(new x : InClan[clanid])
	{
		if(PlayerInfo[x][pSettings][0] == false)
		{
			SendMsg(x, color, gString);
		}
	}
	return true;
}
stock inviteToClan(playerid, id, clan){
	SendToClan(clan, COLOR_SERVER, "Clan >> {%s}%s has joined the clan invited by %s.", ClanInfo[clan][clanColor], GetName(playerid), GetName(id));
	Info(playerid, "{%s}Te-ai alaturat clanului %s, invitat de %s.", ClanInfo[clan][clanColor], ClanInfo[clan][clanName], GetName(id));
	Info(id, "{%s}%s s-a alaturat clanului, invitat de tine.", ClanInfo[clan][clanColor], GetName(playerid));
	SetPVarInt(playerid, "cinvitePlayer", -1);
	return true;
}
function checkClanName(playerid, name[20], session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(cache_num_rows()) return SPD(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Scrie mai jos numele pe care il doresti clanului.", "Ok", "");
	format(ClanRequestName[playerid], sizeof(name), name);
	SPD(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan Tag", "Scrie mai jos clan tag-ul:", "Inainte", "Anuleaza");
	return true;
}
function checkClanTag(playerid, tag[], type, session)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	if(cache_num_rows())
	{
		SendMsg(playerid, COLOR_SERVER, "Clan Tag >> {ffffff}Acest clan tag este deja folosit.");
		SPD(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan Tag", "Scrie mai jos clan tag-ul:", "Inainte", "Anuleaza");
	}
	else
	{	

		SendMsg(playerid, COLOR_SERVER, "Set Clan Tag >> {ffffff}Ai ales clan tag-ul: '%s'.", tag);

		if(type == 1)
		{
			gString[0] = (EOS);
			mysql_format(SQL, gString, 128, "INSERT INTO `clans` (`clanName`) VALUES ('%s')", ClanRequestName[playerid]);
			mysql_tquery(SQL, gString, "insertServerClan", "dds", playerid, PlayerInfo[playerid][pSession], tag);
		}
		else
		{
			new
				clan = PlayerInfo[playerid][pClan]
			;

			format(ClanInfo[clan][cClanTag], 5, "%s", tag);

			Query_Mysql("UPDATE `clans` SET clanTag = '%s' WHERE `clanID` = '%d'", tag, clan);
		}
	}

	return true;
}
function insertServerClan(playerid, session, tag[5])
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	new
		clanid = cache_insert_id()
	;

	ClanInfo[clanid][clanSlots] = 50;
	
	format(ClanInfo[clanid][clanName], 21, ClanRequestName[playerid]);
	format(ClanInfo[clanid][cClanTag], 5, "%s", tag);
	format(ClanInfo[clanid][clanColor], 20, "FFCC99");
	format(ClanInfo[clanid][clanRankName1], 32, "Newbie");
	format(ClanInfo[clanid][clanRankName2], 32, "Member");
	format(ClanInfo[clanid][clanRankName3], 32, "Advanced");
	format(ClanInfo[clanid][clanRankName4], 32, "Expert");
	format(ClanInfo[clanid][clanRankName5], 32, "Legend");
	format(ClanInfo[clanid][clanRankName6], 32, "Manager");
	format(ClanInfo[clanid][clanRankName7], 32, "Owner");

	Query_Mysql("UPDATE `clans` SET clanTag = '%s' WHERE `clanID` = '%d'", tag, clanid);

	PlayerInfo[playerid][pClan] = clanid;
	pUpdateInt(playerid, "Clan", PlayerInfo[playerid][pClan]);

	PlayerInfo[playerid][pCRank] = 7;
	pUpdateInt(playerid, "CRank", PlayerInfo[playerid][pCRank]);

	serverClans ++;

	Iter_Add(InClan[clanid], playerid);

	ProgressToPerkMissions(playerid, 6, 1);

	Info(playerid, "Ai creat clanul %s.", ClanRequestName[playerid]);
	BuyFromShop(playerid, 6);

	return true;
}
function clanWarn(playerid, clanwarns, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new name[30], clanrank, clan = PlayerInfo[playerid][pClan]; 
	cache_get_value_name_int(0, "CRank", clanrank); 
	cache_get_value_name(0, "name", name);
	if(clanrank >= 5 && PlayerInfo[playerid][pCRank] < 7) return Info(playerid, "Doar liderul poate da warn membrilor 5+.");
	gString[0] = (EOS);
	format(gString, 32, "SQLID%d", Selected2[playerid]);
	new
		x = GetSVarInt(gString) - 1
	;
	if(x != -1)
	{
		PlayerInfo[x][pWarns] = clanwarns;
		Info(x, "{%s}%s ti-a setat %d/3 warns in clan.", ClanInfo[clan][clanColor], GetName(playerid), clanwarns);
	}
	SendToClan(clan, COLOR_SERVER, "Clan >> {%s}%s are acum %d/3 warnuri, date de %s.", ClanInfo[clan][clanColor], name, clanwarns, GetName(playerid));
	Query_Mysql("UPDATE `users` SET `ClanWarns` = '%d' WHERE `id` = '%d'", clanwarns, Selected2[playerid]);
	return true;
}
function clanChangeRank(playerid, changetype, newrank, clan, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new name[30], crank;
	cache_get_value_name(0, "name", name);
	cache_get_value_name_int(0, "CRank", crank);
	if(crank == 7) return Info(playerid, "Nu poti face asta.");
	if(PlayerInfo[playerid][pCRank] < 7 && newrank > 5) return Info(playerid, "Nu poti face asta.");
	if(crank >= 6 && PlayerInfo[playerid][pCRank] < 7) return Info(playerid, "Nu poti face asta.");
	Query_Mysql("UPDATE `users` SET `CRank` = '%d' WHERE `id` = '%d'", newrank, Selected2[playerid]);
	gString[0] = (EOS);
	format(gString, 32, "SQLID%d", Selected2[playerid]);
	new
		x = GetSVarInt(gString) - 1
	;
	if(x != -1)
	{
		PlayerInfo[x][pCRank] = newrank;
		Info(x, "{%s}Ai fost promovat la rankul %d in cadrul clanului %s de catre %s.", ClanInfo[clan][clanColor], newrank, ClanInfo[clan][clanName], GetName(playerid));
	}
	SendToClan(clan, COLOR_SERVER, "Clan >> {%s}%s a fost promovat la rankul %d de catre %s.", ClanInfo[clan][clanColor], name, newrank, GetName(playerid));
	Info(playerid, "{%s}L-ai promovat pe %s la rank %d.", ClanInfo[clan][clanColor], name, newrank);
	if(changetype == 2) PlayerInfo[playerid][pCRank] = 6, pUpdateInt(playerid, "CRank", 6);
	return true;
}
function clanUninvite(playerid, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new name[25], clanrank, id, clan = PlayerInfo[playerid][pClan];
	for(new i; i < cache_num_rows(); i++){
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "CRank", clanrank);
		cache_get_value_name(0, "name", name);
	} 
	if(PlayerInfo[playerid][pCRank] == 7 && clanrank == 7) return Info(playerid, "Nu te poti da singur afara.");
	if(PlayerInfo[playerid][pCRank] < 7 && clanrank >= 5) return Info(playerid, "Nu mai liderul poate da afara membrii de rank 5+.");
	gString[0] = (EOS);
	format(gString, 32, "SQLID%d", id);
	new
		x = GetSVarInt(gString) - 1
	;
	if(x != -1)
	{
		SetPlayerClanTag(x, 0);
		if(pcVehicle[x] != -1) DestroyVehicleEx(pcVehicle[x]), Iter_Remove(cVehicles[PlayerInfo[x][pClan]], pcVehicle[x]), pcVehicle[x] = -1;
		Info(x, "{%s}Ai fost dat afara din clan de catre %s.", ClanInfo[clan][clanColor], GetName(playerid));
		Iter_Remove(InClan[clan], x);		
		PlayerInfo[x][pClan] = 0;
		PlayerInfo[x][pCRank] = 0;
		PlayerInfo[x][pCWarns] = 0;
		if(PlayerInfo[x][pSpawnChange] == 3)
		{
			PlayerInfo[x][pSpawnChange] = 0;
		}
	}
	SendToClan(clan, COLOR_SERVER, "Clan >> {%s}%s has left the clan, uninvited by %s.", ClanInfo[clan][clanColor], name, GetName(playerid));
	Query_Mysql("UPDATE `users` SET `CRank` = '0' , `Clan` = '0', `ClanTime` = '0' , `ClanWarns` = '0' WHERE `id` = '%d'", id);
	Query_Mysql("update users set SpawnChange = 0 where SpawnChange = 3 and id = %d", id);
	return true;
}
function checkClanMember(playerid, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new name[30], clanrank, clanwarns, clantime, laston[50];
	for(new i; i < cache_num_rows(); i++){
		cache_get_value_name_int(i, "CRank", clanrank);
		cache_get_value_name_int(i, "ClanTime", clantime);
		cache_get_value_name_int(i, "ClanWarns", clanwarns);
		cache_get_value_name(i, "name", name);
		cache_get_value_name(i, "lastOn", laston);
	}
	gString[0] = (EOS);
	format(gString, sizeof gString, "Nume: %s\nRank: %d\nWarns: %d/3\nZile: %d\nLast Login: %s", name, clanrank, clanwarns, clantime, laston);
	SPD(playerid, DIALOG_CLANMEMBERS2, DIALOG_STYLE_MSGBOX, "Manage User:", gString, "Options", "Exit");
	return true;
}
function showClanMembers(playerid, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new count = 0, name[30], string[30], clanrank, clanwarns, id, stringmare[1600];
	for(new i; i < cache_num_rows(); i++){
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "CRank", clanrank);
		cache_get_value_name_int(i, "ClanWarns", clanwarns);
		cache_get_value_name(i, "name", name);
		format(stringmare, sizeof stringmare, "%s[R%d] [%d/3] %s\n", stringmare, clanrank, clanwarns, name);
		Selected[playerid][count] = id;
		count ++;
	}
	format(string, sizeof string, "Clan Members %d/%d:", cache_num_rows(), ClanInfo[PlayerInfo[playerid][pClan]][clanSlots]);
	SPD(playerid, DIALOG_CLANMEMBERS, DIALOG_STYLE_LIST, string, stringmare, "Ok", "Exit");
	return true;
}
CMD:clan(playerid){
	if(!PlayerInfo[playerid][pClan]) return Info(playerid, "Nu faci parte dintr-un clan.");
	SPD(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan:", "Clan help\nClan members\nClan settings\nClan safe\nClan turfs\nClan tag", "Ok", "Iesi");
	return true;
}
CMD:c(playerid, params[]){
	if(!PlayerInfo[playerid][pClan]) return Info(playerid, "Nu faci parte dintr-un clan.");
	if(PlayerInfo[playerid][pMuteTime]) return SendMsg(playerid, COLOR_SERVER, "Mute >> {ffffff}Mai ai mute pentru %d minute.", PlayerInfo[playerid][pMuteTime]);
	if(PlayerInfo[playerid][pSettings][0] == true) return Info(playerid, "Trebuie sa activezi acest chat din /settings.");
	new mesaj[128];
	if(sscanf(params, "s[128]", mesaj)) return Info(playerid, "/c [mesaj]");
	new string[32];
	switch(PlayerInfo[playerid][pCRank]){
		case 1: format(string, 32, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName1]);
		case 2: format(string, 32, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName2]);
		case 3: format(string, 32, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName3]);
		case 4: format(string, 32, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName4]);
		case 5: format(string, 32, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName5]);
		case 6: format(string, 32, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName6]);
		case 7: format(string, 32, "%s", ClanInfo[PlayerInfo[playerid][pClan]][clanRankName7]);
	}
	SendToClan(PlayerInfo[playerid][pClan], -1, "{%s}[C] %s %s: %s", ClanInfo[PlayerInfo[playerid][pClan]][clanColor], string, GetName(playerid), mesaj);
	return true;
}
CMD:quitclan(playerid){
	if(!PlayerInfo[playerid][pClan]) return Info(playerid, "Nu faci parte dintr-un clan.");
	SPD(playerid, DIALOG_QUITCLAN, DIALOG_STYLE_MSGBOX, "Are you sure?", "Vrei sa parasesti acest clan?", "Ok", "No");
	return true;
}
CMD:cinvite(playerid, params[]){
	if(!PlayerInfo[playerid][pClan]) return Info(playerid, "Nu faci parte dintr-un clan.");
	if(PlayerInfo[playerid][pCRank] < 5) return Info(playerid, "Nu ai rank 5+ in clan.");
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/cinvite [playerid/name]");
	if(id ==playerid) return Info(playerid, "Nu iti poti da invite tie.");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "Acest player nu este conectat.");
	if(PlayerInfo[id][pClan]) return Info(playerid, "Acest jucator este deja intr-un clan.");
	if(GetDistanceBetweenPlayers(playerid, id) > 10) return Info(playerid, "Nu esti langa acest jucator.");
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof gString, "SELECT * FROM `users` WHERE `Clan` = '%d'", PlayerInfo[playerid][pClan]);
	mysql_tquery(SQL, gString, "checkCMembers", "dddd",playerid, id, PlayerInfo[playerid][pClan], PlayerInfo[playerid][pSession]);
	return true;
}	
function checkCMembers(playerid, id, clan, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(cache_num_rows() >= ClanInfo[clan][clanSlots]) return Info(playerid, "Sunt prea multi jucatori in clan.");
	Info(playerid, "L-ai invitat pe %s sa se alature clanului.", GetName(id));
	SendMsg(id, 0x211CDEC8, "%s te-a invitat sa te alaturi clanului %s. Foloseste comanda [/accept cinvite %d] pentru a accepta.", GetName(playerid), ClanInfo[clan][clanName],playerid);
	SetPVarInt(id, "cinvitePlayer",playerid);
	return true;
}		
CMD:report(playerid){
	if(PlayerInfo[playerid][pRmute] >= 1) return Info(playerid, "Ai mute pe report.");
	if(reportstuck[playerid] || Iter_Contains(Reports, playerid)) return Info(playerid, "Ai trimis deja un report.");
	if(PlayerInfo[playerid][pAdmin] >= 1) return Info(playerid, "Nu poti folosi aceasta comanda deoarece esti administrator.");
	if(GetPVarInt(playerid, "deelayn") > gettime()) return Info(playerid, "Trebuie sa astepti %d pentru a pune o intrebare.", GetPVarInt(playerid, "deelayn") - gettime());
	SPD(playerid, DIALOG_REPORT, DIALOG_STYLE_LIST, "Report System", "Sunt blocat/nu vad nimic\nVreau sa fac o afacere\nAlta problema", "Alege", "Anuleaza");
	return true;
}
CMD:reports(playerid){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	Info(playerid, "Reports:");
	foreach(new i : Reports)
	{
		new string[144];
		GetPVarString(i, "Report", string, 144);
		SendMsg(playerid, COLOR_RED, string);
	} 
	return true;
}
CMD:dr(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, mesaj[128]; if(sscanf(params, "us[128]", id, mesaj)) return Info(playerid, "/dr [name/playerid] [message]");
	if(!IsPlayerConnected(id)) return Info(playerid, "Acel player nu este conectat.");
	if(!Iter_Contains(Reports, id)) return Info(playerid, "Acest player nu are un report activ.");
	Iter_Remove(Reports, id);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s i-a raspuns lui %s: %s", 1, GetName(playerid), GetName(id), mesaj);
	Info(id, "Reportul tau a fost rezolvat.");
	Info(id, "Admin %s: %s", GetName(playerid), mesaj);
	DeletePVar(id, "Report");
	PlayerInfo[playerid][pHelpedPlayers] ++;
	pUpdateInt(playerid, "HelpedPlayers", PlayerInfo[playerid][pHelpedPlayers]);
	return true;
}
function DeleteAd(playerid)
{
	adatad[playerid] = false;
	format(adtext[playerid], 5, "NULL");
	stop timerptad[playerid];
	return true;
}
timer ShowAd[30000](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(adatad[playerid])
	{
		va_SendClientMessageToAll(0x41d62aFF, adtext[playerid]);
		adatad[playerid] = false;
		format(adtext[playerid], 5, "NULL");
		ProgressToBattlepass(playerid, 2, 1);
	}
	return true;
}
CMD:ad(playerid, params[]){
	if(PlayerInfo[playerid][pLevel] < 3) return Info(playerid, "Nu ai nivel 3.");
	if(adatad[playerid]) return Info(playerid, "Ai plasat deja un anunt.");
	if(InLocationZone[playerid] != 5 && !HaveVIP(playerid)) return Info(playerid, "Nu esti la CNN.");
	if(GetPVarInt(playerid, "DeelayAd") > gettime()) return Info(playerid, "Trebuie sa mai astepti %d secunde.", GetPVarInt(playerid, "DeelayAd") - gettime());
	new anunt[120], string[144]; 
	if(sscanf(params, "s[120]", anunt)) return Info(playerid, "/ad [message]");
	format(string, sizeof string, "Prev Ad >> %s: %s", GetGameName(playerid), anunt);
	SendAdmins(0x41d62aFF, string, 1); 
	SendHelpers(0x41d62aFF, string, 1);
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1)
	{
		SendMsg(playerid, 0x41d62aFF, string);
	}
	format(adtext[playerid], 144, "Ad >> %s: %s", GetGameName(playerid), anunt); 
	adatad[playerid] = true; 
	timerptad[playerid] = defer ShowAd(playerid, PlayerInfo[playerid][pSession]);
	SetPVarInt(playerid, "DeelayAd", gettime() + 60);
	return true;
}
CMD:deletemyad(playerid){
	if(!adatad[playerid]) return Info(playerid, "Nu ai plasat un anunt.");
	Info(playerid, "Ti-ai sters anuntul.");
	DeleteAd(playerid);
	return true;
}
CMD:da(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pHelper]) return SendMsg(playerid, COLOR_SERVER, AdminOnly); 
	new id, reason[64]; if(sscanf(params, "us[64]", id, reason)) return Info(playerid, "/da [name/playerid] [reason]");
	if(!IsPlayerConnected(id)) return Info(playerid, "Acel player nu este conectat.");
	if(!adatad[id]) return Info(playerid, "Acel player nu a plasat un anunt.");
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s i-a sters anuntul lui %s, motiv: %s.", 1, GetName(playerid), GetName(id), reason);
	SendHelpers(COLOR_YELLOW, "Helper >> {ffffff}%s i-a sters anuntul lui %s, motiv: %s.", 1, GetName(playerid), GetName(id), reason);
	Info(id, "%s ti-a sters anuntul, motiv: %s.", GetName(playerid), reason);
	DeleteAd(id);
	return true;
}
CMD:work(playerid)
{
	if(PlayerInfo[playerid][pJob] < 1) return Info(playerid, "Nu ai un job!");

	if(ClosestJob(playerid) != PlayerInfo[playerid][pJob])
		return Info(playerid, "Nu esti la locatia Jobului tau.");

	Work(playerid);
	return true;
}
function Work(playerid)
{
	if(HaveCheckpoint(playerid) && ClosestJob(playerid))
		return true;

	new
		AreWorking,
		VehicleID = GetPlayerVehicleID(playerid)
	;

	if(IsPlayerInAnyVehicle(playerid) && OwnableVehicle(GetPlayerVehicleID(playerid))){
		for(new v; v < MAX_PERSONAL_VEHICLES; v++){
			if(PlayerInfo[playerid][pVehID][v] == GetPlayerVehicleID(playerid) && PlayerInfo[playerid][pVehWorking][v]) AreWorking = 1;
		}
	}
	if(IsPlayerInAnyVehicle(playerid) && AreWorking == 0)
		return true;

	if((GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid)) && (!PlayerInfo[playerid][pTutorial]))
		return true;

	if(JobVeh[playerid] != -1)
	{
		DestroyVehicleEx(JobVeh[playerid]);
		JobVeh[playerid] = -1;
	}
	switch(PlayerInfo[playerid][pJob]){
		case 2:
		{
			if(PlayerInfo[playerid][pVehLic] < 1)
				return Info(playerid, "Nu ai permisul de conducere.");

			new
				rand = random(sizeof(RandomForklift))
			;

			JobVeh[playerid] = CreateVehicleEx(530, 2753.5474, -2449.1145, 13.6432, 0, random(256), random(256), -1, false, true);
			PutPlayerInVehicleEx(playerid, JobVeh[playerid], 0);
			JobWorking[playerid] = true;
			Info(playerid, "Urmeaza checkpoint-ul pentru a incarca marfa.");
			SetPlayerCheckpointEx(playerid, RandomForklift[rand][0], RandomForklift[rand][1], RandomForklift[rand][2], 2);
			CP[playerid] = 108;
		}
		case 3:
		{
			SPD(playerid, DIALOG_GETDRUGS, DIALOG_STYLE_LIST, "Dealer de Droguri", "Weed\nMeth\nCocaine\nEcstasy", "Alege", "Anuleaza");
		}
		case 4:
		{
			SPD(playerid, DIALOG_FARMER, DIALOG_STYLE_LIST, "Fermier", "Cultiva grau\nCulege mere\nMulge vacile", "Alege", "Iesi");
		}
		case 5:
		{
			new
				rand = random(sizeof(RandomArms))
			;

			SetPlayerCheckpointEx(playerid, RandomArms[rand][0], RandomArms[rand][1], RandomArms[rand][2], 3.0); 
			Info(playerid, "Urmeaza checkpoint-ul pentru a duce materialele.");
			CP[playerid] = 526;
		}
		case 6:
		{
			if(FishPrice[playerid] != 0)
				return Info(playerid, "Ai deja un Peste, mergi si vinde-l la un Non-Stop.");

			if(FreezedPlayer[playerid])
				return Info(playerid, "Pescuiesti deja.");

			FreezePlayer(playerid, true);
			for(new n = 0; n < 2; n++) TextDrawShowForPlayer(playerid, FishTD[n]);
			PlayerTextDrawShow(playerid, FishPTD[1]);
			SelectTextDraw(playerid, 0x52EF4AFF);
			SetPVarInt(playerid, "FishTimer", 5);
			UpdatePesti(playerid);
			Info(playerid, "Apasa pe pesti pentru a pescui unul.");
		}
		case 7:
		{
			SetPlayerCheckpointEx(playerid, LumberJackCps[0][0], LumberJackCps[0][1], LumberJackCps[0][2], 3);
			CP[playerid] = 348;

			JobCheckpoint[playerid] = 0;

			SendMsg(playerid, COLOR_SERVER, "Padurar >> {ffffff}Urmeaza punctele rosii pentru a taia copacii.");

			JobWorking[playerid] = true;
		}
		case 8: {
			if(AreWorking != 1)
			{
				if(PlayerInfo[playerid][pVehLic] < 1)
					return Info(playerid, "Nu ai permisul de conducere.");

				JobVeh[playerid] = CreateVehicleEx(455, 719.2248, 1192.1852, 13.8295, 350.1779, random(256), random(256), -1, false, true);
				PutPlayerInVehicleEx(playerid, JobVeh[playerid], 0);
			}
			JobWorking[playerid] = true;
			SetPlayerCheckpointEx(playerid, 555.2475, 1302.6099, 10.5306, 5);
			CP[playerid] = 300;
			Info(playerid, "Urmeaza checkpoint-ul pentru a incarca petrolul.");
			if(AreWorking >= 1) SetPVarInt(playerid, "AreWorking", VehicleID);
		}
		case 9:
		{
			if(AreWorking != 1)
			{
				if(PlayerInfo[playerid][pVehLic] < 1)
					return Info(playerid, "Nu ai permisul de conducere.");

				JobVeh[playerid] = CreateVehicleEx(448, 2084.6838, -1800.8658, 13.3828, 356.8355, random(256), random(256), -1, false, true);
				PutPlayerInVehicleEx(playerid, JobVeh[playerid], 0);
			}
			punecppizza(playerid);
			JobWorking[playerid] = true;
			if(AreWorking >= 1) SetPVarInt(playerid, "AreWorking", VehicleID);
		}
		case 10:
		{
			if(AreWorking != 1)
			{
				if(PlayerInfo[playerid][pVehLic] < 1)
					return Info(playerid, "Nu ai permisul de conducere.");

				JobVeh[playerid] = CreateVehicleEx(431, 1974.6080, -1262.9182, 24.0698, 268.6618, random(256), random(256), -1, false, true);
				PutPlayerInVehicleEx(playerid, JobVeh[playerid], 0);
			}
			Info(playerid, "Urmeaza checkpoint-urile.");
			SetPlayerCheckpointEx(playerid, BusDriverCheckpoints[0][0], BusDriverCheckpoints[0][1], BusDriverCheckpoints[0][2], 5);
			CP[playerid] = 305;
			JobWorking[playerid] = true;
			JobCheckpoint[playerid] = 0;
			if(AreWorking >= 1) SetPVarInt(playerid, "AreWorking", VehicleID);
		}
		case 11:
		{
			if(AreWorking != 1)
			{
				if(PlayerInfo[playerid][pVehLic] < 1)
					return Info(playerid, "Nu ai permisul de conducere.");

				JobVeh[playerid] = CreateVehicleEx(544, 1747.1758, -1443.9165, 13.3581, 91.1785, random(256), random(256), -1, false, true);
				PutPlayerInVehicleEx(playerid, JobVeh[playerid], 0);
			}
			JobWorking[playerid] = true;
			punecpfireman(playerid);
			if(AreWorking >= 1) SetPVarInt(playerid, "AreWorking", VehicleID);
		}
		case 12:
		{
			if(PlayerInfo[playerid][pVehLic] < 1)
				return Info(playerid, "Nu ai permisul de conducere.");

			JobWorking[playerid] = true;
			SetPlayerCheckpointEx(playerid, 632.1058, 858.1335, -42.9609, 5);
			CP[playerid] = 304;
			Info(playerid, "Urmeaza checkpoint-ul pentru a mina.");
		}
		case 13:
		{
			if(AreWorking != 1)
			{
				if(PlayerInfo[playerid][pVehLic] < 1)
					return Info(playerid, "Nu ai permisul de conducere.");

				JobVeh[playerid] = CreateVehicleEx(403, 2458.1001, -2089.3384, 14.1525, 90, random(256), random(256), -1, false, true);
				PutPlayerInVehicleEx(playerid, JobVeh[playerid], 0);
			}
			SetPVarInt(playerid, "rutaselectata", -1);
			ShowTrucker(playerid);
			if(AreWorking >= 1) SetPVarInt(playerid, "AreWorking", VehicleID);
		}
		case 14:
		{
			if(PlayerInfo[playerid][pVehLic] < 1)
				return Info(playerid, "Nu ai permisul de conducere.");

			JobVeh[playerid] = CreateVehicleEx(422, 2657.2952, 789.8180, 10.9545, 313.1712, random(256), random(256), -1, false, true);
			PutPlayerInVehicleEx(playerid, JobVeh[playerid], 0);

			if(Iter_Count(PossibleContructor[playerid]))
			{
				Iter_Clear(PossibleContructor[playerid]);
			}

			for(new i = 0; i < sizeof(RandomContructor); i++)
			{
				Iter_Add(PossibleContructor[playerid], i);
			}

			SetPlayerCheckpointEx(playerid, 2704.6587, 894.7921, 10.1647, 3);
			CP[playerid] = 503;
			Info(playerid, "Urmeaza punctul rosu pentru a lua materialele.");
		}
		case 15:
		{
			SetPlayerCheckpointEx(playerid, 2384.3076, 1485.9681, 10.8203, 3);
			CP[playerid] = 329;
			Info(playerid, "Urmeaza checkpoint-ul pentru a lua dinamita.");
		}
		case 16:
		{
			SetPlayerPosEx(playerid, 365.0003, -11.8427, 1001.8516);
			SetPlayerInterior(playerid, 9);
			SetPlayerCheckpointEx(playerid, 371.6427, -6.0166, 1001.8589, 3.0);
			Info(playerid, "Urmeaza checkpoint-ul pentru a ridica mancarea.");
			CP[playerid] = 353;
			JobCheckpoint[playerid] = 0;
			JobWorking[playerid] = true;
			SetPlayerVirtualWorld(playerid, playerid + 1);
		}
	}
	return true;
}
function ShowTrucker(playerid)
{
	gString[0] = (EOS);

	for(new i = 0; i < sizeof(TruckerDest); i++)
	{
		new
			zone[64]
		;
		Get3DZone(TruckerDest[i][0], TruckerDest[i][1], TruckerDest[i][2], zone, 64);
		format(gString, sizeof(gString), "%s%s - %.0fm\n", gString, zone, GetPlayerDistanceFromPoint(playerid, TruckerDest[i][0], TruckerDest[i][1], TruckerDest[i][2]));
	}
	SPD(playerid, DIALOG_SELECTROUTE, DIALOG_STYLE_LIST, "Alege-ti ruta", gString, "Alege", "Anuleaza");
	DisablePlayerCheckpoint(playerid);
	CP[playerid] = 0;
	return true;
}
CMD:n(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] || PlayerInfo[playerid][pHelper]) return Info(playerid, "Nu poti folosi aceasta comanda deoarece esti in staff.");
	if(PlayerInfo[playerid][pNmute]) return Info(playerid, "Ai mute pe /n.");
	if(Iter_Contains(Questions, playerid)) return Info(playerid, "Deja ai o intrebare activa.");
	if(GetPVarInt(playerid, "deelayn") > gettime()) return Info(playerid, "Trebuie sa astepti %d secunde pentru a pune o intrebare.", GetPVarInt(playerid, "deelayn") - gettime());
	new question[128];
	if(sscanf(params, "s[128]", question)) return Info(playerid, "/n [question]");
	Info(playerid, "Ai adresat o intrebare, asteapta sa ti se raspunda.");
	SendHelpers(COLOR_YELLOW, "Question >> %s: %s (/nr %d)", 1, GetName(playerid), question, playerid);
	SetPVarString(playerid, "Question", question);
	Iter_Add(Questions, playerid);
	SetPVarInt(playerid, "deelayn", gettime() + 300);
	return true;
}	
CMD:nr(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pHelper]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new answer[128], id;
	if(sscanf(params, "us[128]", id, answer)) return Info(playerid, "/nr [name/playerid] [answer]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(!Iter_Contains(Questions, id)) return Info(playerid, "Acel player nu are o intrebare activa.");
	Info(id, "%s: %s", GetName(playerid), answer);
	new string[128];
	GetPVarString(id, "Question", string, 128);
	va_SendClientMessageToAll(0x9DFE8080, "* %s: %s", GetName(id), string);
	va_SendClientMessageToAll(0x9DFE8080, "* %s: %s", GetName(playerid), answer);
	DeletePVar(id, "Question");
	Iter_Remove(Questions, id);
	PlayerInfo[playerid][pHelpedPlayers] ++;
	pUpdateInt(playerid, "HelpedPlayers", PlayerInfo[playerid][pHelpedPlayers]);
	return true;
}
CMD:nd(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pHelper]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new answer[128], id;
	if(sscanf(params, "us[128]", id, answer)) return Info(playerid, "/nd [name/playerid] [answer]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(!Iter_Contains(Questions, id)) return Info(playerid, "Acel player nu are o intrebare activa.");
	new string[128];
	GetPVarString(id, "Question", string, 128);
	SendHelpers(COLOR_YELLOW, "* %s: %s", GetName(id), string);
	SendAdmins(COLOR_RED, "* %s: %s", GetName(id), string);
	Info(id, "%s: %s", GetName(playerid), answer);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}(/nd) %s => %s: %s", 1, GetName(playerid), GetName(id), answer);
	SendHelpers(COLOR_YELLOW, "Helper >> {ffffff}(/nd) %s => %s: %s", 1, GetName(playerid), GetName(id), answer);
	DeletePVar(playerid, "Question");
	Iter_Remove(Questions, id);
	PlayerInfo[playerid][pHelpedPlayers] ++;
	pUpdateInt(playerid, "HelpedPlayers", PlayerInfo[playerid][pHelpedPlayers]);
	return true;
}	
CMD:nreport(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pHelper]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, string[128];
	if(sscanf(params, "u", id)) return Info(playerid, "/nreport [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(!Iter_Contains(Questions, id)) return Info(playerid, "Acel player nu are o intrebare activa.");
	new string2[128];
	GetPVarString(id, "Question", string2, 128);
	format(string, sizeof string, "* %s: %s", GetName(id), string2);
	SetPVarString(id, "Report", string);
	DeletePVar(id, "Question");
	SendAdmins(COLOR_RED, "Helper >> {ffffff}%s a marcat intrebarea lui %s ca si problema.", 1, GetName(playerid), GetName(id));
	SendHelpers(COLOR_RED, "Helper >> {ffffff}%s a marcat intrebarea lui %s ca si problema.", 1, GetName(playerid), GetName(id));
	Iter_Add(Reports, id);
	Iter_Remove(Questions, id);
	return true;
}
CMD:questions(playerid){
	if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pHelper]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	Info(playerid, "Active questions:");
	foreach(new i : Questions){
		new string[128];
		GetPVarString(i, "Question", string, 128);
		SendMsg(playerid, COLOR_SERVER, "Question >> %s: %s (/nr %d)", GetName(i), string, i);
	}
	return true;
}	
function SendPaintMessage(color, const string[]){
	foreach(new i : InPaint) SendMsg(i, color, string);
	return true;
}
CMD:go(playerid){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return Info(playerid, "Nu poti folosi aceasta comanda deoarece ai wanted.");
	SPD(playerid, DIALOG_GO, DIALOG_STYLE_LIST, "Locatii", "Arena de Evenimente\nMuntele Chiliad\nLos Santos\nLas Venturas\nSan Fierro", "Alege", "Anuleaza");
	return true;
}	 
CMD:banip(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/banip [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID-ul este invalid.");
	if(Scripter(id) || PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return Info(playerid, "Nu poti face asta.");
	format(String, 32, "banip %s", GetIp(id));
	SendRconCommand(String);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a banat IP-ul %s jucatorului %s.", 1, GetName(playerid), GetIp(id), GetName(id));
	return true;
}	
CMD:jailmenu(playerid){
	if(PlayerInfo[playerid][pJailed] >= 2) return Info(playerid, "Nu poti folosi aceasta comanda deoarece te afli in admin jail.");
	if(PlayerInfo[playerid][pJailTime] < 1) return Info(playerid, "Nu te afli in jail.");
	SPD(playerid, DIALOG_JAIL, DIALOG_STYLE_LIST, "Inchisoare", "Evadeaza\nIesi pe Cautiune", "Alege", "Anuleaza");
	return true;
}		
CMD:edith(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, action[8], value;
	if(sscanf(params, "is[8]i", id, action, value) && !strmatch(action, "move")) return Info(playerid, "/edith [id] [action: move, price, int] [value]");
	if(id < 1 || id > CaseJ) return Info(playerid, "ID-ul este invalid.");
	if(strmatch(action, "move")){
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		HouseInfo[id][hEntranceX] = x;
		HouseInfo[id][hEntranceY] = y;
		HouseInfo[id][hEntranceZ] = z;	
		Query_Mysql("UPDATE `houses` SET `Entrancex` = '%f', `Entrancey` = '%f', `Entrancez` = '%f' WHERE `ID` = '%d'", x, y, z, id);
		SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a mutat casa %d la %0.2f, %0.2f, %0.2f.", 1, GetName(playerid), id, x, y, z);
	}
	else if(strmatch(action, "price")){
		if(value < 0 || value > 999999999) return Info(playerid, "Invalid value.");
		HouseInfo[id][hPrice] = value;
		Query_Mysql("UPDATE `houses` SET `Prices` = '%d' WHERE `ID` = '%d'", value, id);
		SendAdmins(COLOR_RED, "Admin >> {ffffff}%s has edited the house %d price in $%s.", 1, GetName(playerid), id, FormatNumber(value));
	}
	else if(strmatch(action, "int")){
		if(value < 1 || value >= sizeof(HouseInteriors)) return Info(playerid, "Interior invalid (1 - 36).");
		gString[0] = (EOS);
		mysql_format(SQL, gString, 256, "UPDATE `houses` SET `Exitx` = '%f', `Exity` = '%f', `Exitz` = '%f', `Interior` = '%d' WHERE `id` = '%d'",
			HouseInteriors[value][0], HouseInteriors[value][1], HouseInteriors[value][2], floatround(HouseInteriors[value][3]), id);
		mysql_tquery(SQL, gString);
		HouseInfo[id][hExitX] = HouseInteriors[value][0];
		HouseInfo[id][hExitY] = HouseInteriors[value][1];
		HouseInfo[id][hExitZ] = HouseInteriors[value][2];
		HouseInfo[id][hInterior] = floatround(HouseInteriors[value][3]);
	}
	else return Info(playerid, "Parametru invalid.");
	UpdateLabel(1, id); 
	return true;
}
CMD:editb(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, action[8], value;
	if(sscanf(params, "is[8]i", id, action, value) && !strmatch(action, "move")) return Info(playerid, "/editb [id] [action: price, move, type, fee] [value]");
	if(id < 1 || id > Bizuri) return Info(playerid, "Invalid business id.");
	if(strmatch(action, "price")){
		if(value < 0 || value > 999999999) return Info(playerid, "Invalid value.");
		BizzInfo[id][bPrice] = value;
		Query_Mysql("UPDATE `bizz` SET `Prices` = '%d' WHERE `ID` = '%d'", value, id);
		SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a setat pretul bizului %d la $%s.", 1, GetName(playerid), id, FormatNumber(value));
	}
	else if(strmatch(action, "move")){
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		BizzInfo[id][bEntranceX] = x;
		BizzInfo[id][bEntranceY] = y;
		BizzInfo[id][bEntranceZ] = z;
		Query_Mysql("UPDATE `bizz` SET `EntranceX` = '%f', `EntranceY` = '%f', `EntranceZ` = '%f' WHERE `ID` = '%d'", x, y, z, id);
		SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a mutat afacerea %d la %0.2f, %0.2f, %0.2f.", 1, GetName(playerid), id, x, y, z);
	}
	else if(strmatch(action, "type")){
		if(value < 1 || value >= sizeof(InterioareA)) return Info(playerid, "Invalid value.");
		gString[0] = (EOS);
		mysql_format(SQL, gString, 256, "update bizz set Type = %d where id = %d", value, id);
		mysql_tquery(SQL, gString);
		BizzInfo[id][bType] = value;
	}
	else if(strmatch(action, "fee")){
		if(value < 1 || value > 50_000) return Info(playerid, "Suma invalida.");
		gString[0] = (EOS);
		mysql_format(SQL, gString, 256, "update bizz set EntranceCost = %d where id = %d", value, id);
		mysql_tquery(SQL, gString);
		BizzInfo[id][bEntranceCost] = value;
	}
	else return Info(playerid, "Parametru invalid.");
	UpdateLabel(2, id);
	return true;
}
function Crates(playerid)
{
	if(GetPVarInt(playerid, "CrateType"))
		return true;

	gString[0] = (EOS);

	format(gString, sizeof gString, "Basic - %d\nNormal - %d\nMedium - %d\nDiamond - %d\nVehicle - %d\nFragment - %d\nSkin - %d\nOG - %d\nSupreme - %d",
		PlayerInfo[playerid][pBasicCrate], PlayerInfo[playerid][pNormalCrate], PlayerInfo[playerid][pMediumCrate], PlayerInfo[playerid][pDiamondCrate],
		PlayerInfo[playerid][pVehicleCrate], PlayerInfo[playerid][pFragmentCrate], PlayerInfo[playerid][pSkinCrate], PlayerInfo[playerid][pOGCrate],
		PlayerInfo[playerid][pSupremeCrate]);

	SPD(playerid, DIALOG_CRATES, DIALOG_STYLE_LIST, "Alege Crate-ul", gString, "Alege", "Anuleaza");

	return true;
}
function ShowCrates(playerid)
{
	new
		CratesName[10][16] = {"", "Basic", "Normal", "Medium", "Diamond", "Vehicle", "Fragment", "Skin", "OG", "Supreme"},
		CrateName[16]
	;

	format(CrateName, sizeof(CrateName), "%s Crate", CratesName[GetPVarInt(playerid, "CrateType")]);

	DeletePVar(playerid, "Step");

	TextDrawShowForPlayer(playerid, CrateTD);

	for(new i = 0; i < sizeof(CratesPTD); i++)
	{
		if(i == 0)
		{
			PlayerTextDrawSetString(playerid, CratesPTD[0], CrateName);
		}
		else
		{
			PlayerTextDrawSetPreviewModel(playerid, CratesPTD[i], 18631);
		}

		PlayerTextDrawShow(playerid, CratesPTD[i]);
	}

	return true;
}
timer HideCrates[2000](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	TextDrawHideForPlayer(playerid, CrateTD);
	DeletePVar(playerid, "CrateType");
	DeletePVar(playerid, "Step");
	for(new i = 0; i < sizeof(CratesPTD); i++)
	{
		PlayerTextDrawHide(playerid, CratesPTD[i]);
	}
	if(TutorialStep[playerid] == 4)
	{
		SetPlayerPosEx(playerid, LocationPos[0][0], LocationPos[0][1], LocationPos[0][2]);

		FreezePlayer(playerid, true);

		SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Vehiculele sunt un aspect important al server-ului nostru.");
		SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Pentru a putea sa le conduci, vei avea nevoie de o licenta de condus.");
		SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Licenta de condus se obtine de aici, si dureaza 25 de ore.");

		DestroyVehicleEx(RentVeh[playerid]);
		RentVeh[playerid] = -1;

		defer StopCinematicTutorial[5000](playerid, PlayerInfo[playerid][pSession], 3);
	}
	return true;
}
function InsertSkin(playerid, Skin)
{
	for(new i; i < PlayerInfo[playerid][pSkinSlots]; i++)
	{
		if(PlayerInfo[playerid][pSkins][i] == DefaultSkin)
		{
			PlayerInfo[playerid][pSkins][i] = Skin;
			break;
		}
	}
	return true;
}
function CrateCastig(playerid){
	new castig;
	SetPVarInt(playerid, "Step", GetPVarInt(playerid, "Step") + 1);
	switch(GetPVarInt(playerid, "CrateType")){
		case 1:{
			castig = random(2);
			switch(castig){
				case 0: {
					new rand = 1 + random(2);
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1247);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						GivePlayerRP(playerid, rand);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit %d RP.", rand);
					}
				}
				case 1: {
					new rand = 300000 + random(200000);
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1274);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						GivePlayerCash(playerid, rand), GiveGoal(rand);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit $%s.", FormatNumber(rand));
						if(PlayerInfo[playerid][pActivePotions][2] > gettime())
						{
							GivePlayerCash(playerid, rand);
							SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Ai primit $%s deoarece folosesti legendary potion.", FormatNumber(rand));
						}
					}
				}
			}
		}
		case 2:{
			castig = random(2);
			switch(castig){
				case 0: {
					new rand = 2 + random(3);
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1247);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						GivePlayerRP(playerid, rand);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit %d RP.", rand);
					}
				}
				case 1: {
					new rand = 1000000 + random(1000000);
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1274);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						GivePlayerCash(playerid, rand), GiveGoal(rand);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit $%s.", FormatNumber(rand));
						if(PlayerInfo[playerid][pActivePotions][2] > gettime())
						{
							GivePlayerCash(playerid, rand);
							SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Ai primit $%s deoarece folosesti legendary potion.", FormatNumber(rand));
						}
					}
				}
			}
		}
		case 3:{
			castig = random(3);
			switch(castig){
				case 0: {
					new rand = 5 + random(5);
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1247);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						GivePlayerRP(playerid, rand);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit %d RP.", rand);
					}
				}
				case 1: {
					new rand = 3000000 + random(2000000);
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1274);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						GivePlayerCash(playerid, rand), GiveGoal(rand);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit $%s.", FormatNumber(rand));
						if(PlayerInfo[playerid][pActivePotions][2] > gettime())
						{
							GivePlayerCash(playerid, rand);
							SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Ai primit $%s deoarece folosesti legendary potion.", FormatNumber(rand));
						}
					}
				}
				case 2: {
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1582);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						PlayerInfo[playerid][pJobBoost] ++, pUpdateInt(playerid, "JobBoost", PlayerInfo[playerid][pJobBoost]);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit o ora de JobBoost.");
					}
				}
			}
		}
		case 4:{
			castig = random(4);
			switch(castig){
				case 0: {
					new rand = 10 + random(10);
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1247);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						GivePlayerRP(playerid, rand);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit %d RP.", rand);
					}
				}
				case 1: {
					new rand = 5000000 + random(5000000);
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1274);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						GivePlayerCash(playerid, rand), GiveGoal(rand);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit $%s.", FormatNumber(rand));
						if(PlayerInfo[playerid][pActivePotions][2] > gettime())
						{
							GivePlayerCash(playerid, rand);
							SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Ai primit $%s deoarece folosesti legendary potion.", FormatNumber(rand));
						}
					}
				}
				case 2: {
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 19056);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						PlayerInfo[playerid][pGiftPoints] += 500, pUpdateInt(playerid, "GiftPoints", PlayerInfo[playerid][pGiftPoints]);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit 500 GiftPoints.");
					}
				}
				case 3: {
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1240);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						PlayerInfo[playerid][pPremiumPoints] += 5, pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit 5PP.");
					}
				}
			}
		}
		case 5:{
			new
				rand = random(100),
				Model
			;
			switch(rand)
			{
				case 0 .. 14:
				{
					castig = 8;
				}
				case 15 .. 29:
				{
					castig = 14;
				}
				case 30 .. 44:
				{
					castig = 18;
				}
				case 45 .. 59:
				{
					castig = 30;
				}
				case 60 .. 69:
				{
					castig = 33;
				}
				case 70 .. 74:
				{
					castig = 45;
				}
				case 75 .. 79:
				{
					castig = 46;
				}
				case 80 .. 84:
				{
					castig = 48;
				}
				case 85 .. 89:
				{
					castig = 49;
				}
				case 90 .. 94:
				{
					castig = 50;
				}
				case 95 .. 97:
				{
					castig = 53;
				}
				case 98 .. 99:
				{
					castig = 58;
				}
			}
			Model = StockInfo[castig][vModel];
			PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], Model);
			if(GetPVarInt(playerid, "Step") == 12)
			{
				InsertVehicle(playerid, castig, true);
				FinishAchievement(playerid, 8);
				SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit un %s.", GetVehicleName(Model));
			}
		}
		case 6:{
			castig = random(8);
			new
				Vehicles[8] = {61, 59, 60, 2, 27, 18, 1, 6},
				Veh = Vehicles[castig]
			;
			PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], StockInfo[Veh][vModel]);
			if(GetPVarInt(playerid, "Step") == 12)
			{
				PlayerInfo[playerid][pFragments][castig + 1] ++;
				SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit un fragment pentru %s.", GetVehicleName(StockInfo[Veh][vModel]));
			}
		} 
		case 7: {
			castig = random(100);

			new
				CurrentSkin = -1
			;

			switch(castig)
			{
				case 0 .. 19:
				{
					CurrentSkin = 101;
				}
				case 20 .. 37:
				{
					CurrentSkin = 135;
				}
				case 38 .. 55:
				{
					CurrentSkin = 143;
				}
				case 56 .. 65:
				{
					CurrentSkin = 145;
				}
				case 66 .. 75:
				{
					CurrentSkin = 130;
				}
				case 76 .. 85:
				{
					CurrentSkin = 97;
				}
				case 86 .. 90:
				{
					CurrentSkin = 83;
				}
				case 91 .. 95:
				{
					CurrentSkin = 127;
				}
				case 96 .. 97:
				{
					CurrentSkin = 0;
				}
				case 98 .. 99:
				{
					CurrentSkin = 271;
				}
			}

			PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], CurrentSkin);

			if(GetPVarInt(playerid, "Step") == 12)
			{
				InsertSkin(playerid, CurrentSkin);
				SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit skin-ul %d %s.", CurrentSkin, GetSkinRarity(CurrentSkin));
			}
		}
		case 8:
		{
			castig = random(100);
			switch(castig)
			{
				case 0 .. 39:
				{
					new
						rand = 50_000_000 + random(10_000_000)
					;
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1274);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						GivePlayerCash(playerid, rand), GiveGoal(rand);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit $%s.", FormatNumber(rand));
						if(PlayerInfo[playerid][pActivePotions][2] > gettime())
						{
							GivePlayerCash(playerid, rand);
							SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Ai primit $%s deoarece folosesti legendary potion.", FormatNumber(rand));
						}
					}
				}
				case 40 .. 64:
				{
					new
						rand = 15 + random(7)
					;
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1247);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						GivePlayerRP(playerid, rand);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit %d RP.", rand);
					}
				}
				case 65 .. 89:
				{
					new
						rand = 10 + random(5)
					;
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1240);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						PlayerInfo[playerid][pPremiumPoints] += rand, pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit %dPP.", rand);
					}
				}
				case 90 .. 94:
				{
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1581);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						PlayerInfo[playerid][pVouchers][0] ++;
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit un voucher normal.");
					}
				}
				case 95 .. 97:
				{
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 560);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots])
						{
							SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Deoarece nu ai sloturi de vehicule, ai primit crate-ul inapoi.");

							GivePlayerCrate(playerid, 7);
						}
						else
						{
							InsertVehicle(playerid, 58, true);
							SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit un %s.", GetVehicleName(StockInfo[58][vModel]));
						}
					}
				}
				case 98 .. 99:
				{
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1581);
					if(GetPVarInt(playerid, "Step") == 12)
					{
						PlayerInfo[playerid][pVouchers][2] ++;
						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit un voucher premium.");
					}
				}
			}
		}
		case 9:
		{
			castig = random(100);

			switch(castig)
			{
				case 0:
				{
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 477);

					if(GetPVarInt(playerid, "Step") == 12)
					{
						if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots])
						{
							SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Deoarece nu ai sloturi de vehicule, ai primit crate-ul inapoi.");

							GivePlayerCrate(playerid, 8);
						}
						else
						{
							InsertVehicle(playerid, 0, true, false, 477);
							SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit un ZR-350.");
						}
					}
				}
				case 1 .. 3:
				{
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 541);

					if(GetPVarInt(playerid, "Step") == 12)
					{
						if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots])
						{
							SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Deoarece nu ai sloturi de vehicule, ai primit crate-ul inapoi.");

							GivePlayerCrate(playerid, 8);
						}
						else
						{
							InsertVehicle(playerid, 0, true, false, 541);
							SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit un Bullet.");
						}
					}
				}
				case 4 .. 9:
				{
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 451);

					if(GetPVarInt(playerid, "Step") == 12)
					{
						if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots])
						{
							SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Deoarece nu ai sloturi de vehicule, ai primit crate-ul inapoi.");

							GivePlayerCrate(playerid, 8);
						}
						else
						{
							InsertVehicle(playerid, 0, true, false, 451);
							SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit un Turismo.");
						}
					}
				}
				case 10 .. 19:
				{
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 579);

					if(GetPVarInt(playerid, "Step") == 12)
					{
						if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots])
						{
							SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Deoarece nu ai sloturi de vehicule, ai primit crate-ul inapoi.");

							GivePlayerCrate(playerid, 8);
						}
						else
						{
							InsertVehicle(playerid, 0, true, false, 579);
							SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit un Huntley.");
						}
					}
				}
				case 20 .. 54:
				{
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1274);

					if(GetPVarInt(playerid, "Step") == 12)
					{
						new
							rand = 100_000_000 + random(50_000_000)
						;

						GivePlayerCash(playerid, rand);
						GiveGoal(rand);

						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit $%s.", FormatNumber(rand));

						if(PlayerInfo[playerid][pActivePotions][2] > gettime())
						{
							GivePlayerCash(playerid, rand);

							SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Ai primit $%s deoarece folosesti legendary potion.", FormatNumber(rand));
						}
					}
				}
				case 55 .. 99:
				{
					PlayerTextDrawSetPreviewModel(playerid, CratesPTD[GetPVarInt(playerid, "Step")], 1247);

					if(GetPVarInt(playerid, "Step") == 12)
					{
						new
							rand = 50 + random(25)
						;

						GivePlayerRP(playerid, rand);

						SendMsg(playerid, COLOR_SERVER, "Crates >> {ffffff}Ai primit %d RP.", rand);
					}
				}
			}
		}
	}
	PlayerTextDrawShow(playerid, CratesPTD[GetPVarInt(playerid, "Step")]);
	if(GetPVarInt(playerid, "Step") == 12)
	{
		defer HideCrates(playerid, PlayerInfo[playerid][pSession]);
		if(GetPVarInt(playerid, "CrateType") == 8)
		{
			ProgressToPerkMissions(playerid, 12, 1);
		}
	}
	return true;
}
timer HideSpin[2000](playerid, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	SetPVarInt(playerid, "InSpin", 0);
	for(new i; i < 3; i++) TextDrawHideForPlayer(playerid, SpinnTD[i]); for(new i; i < 5; i++) PlayerTextDrawHide(playerid, SpinnPTD[i]);
	return true;
}
function SpinCastig(playerid){
	new SMid = GetPVarInt(playerid, "Smid");
	SetPVarInt(playerid, "Step", GetPVarInt(playerid, "Step") + 1);
	SetPVarInt(playerid, "Smid", SMid + 1);
	if(GetPVarInt(playerid, "Smid") == 5) SetPVarInt(playerid, "Smid", 0);
	PlayerTextDrawSetPreviewModel(playerid, SpinnPTD[0], Spinn(SMid - 2));
	PlayerTextDrawSetPreviewModel(playerid, SpinnPTD[1], Spinn(SMid - 1));
	PlayerTextDrawSetPreviewModel(playerid, SpinnPTD[2], Spinn(SMid));
	PlayerTextDrawSetPreviewModel(playerid, SpinnPTD[3], Spinn(SMid + 1));
	PlayerTextDrawSetPreviewModel(playerid, SpinnPTD[4], Spinn(SMid + 2));
	for(new i; i < 5; i ++) PlayerTextDrawShow(playerid, SpinnPTD[i]);
	if(GetPVarInt(playerid, "Step") == 5){
		switch(SMid){
			case 0:{
				GivePlayerRP(playerid, 6);
				Info(playerid, "Ai primit 6RP.");
			}
			case 1:{
				new rand = 5_000_000 + random(7_000_000);
				GivePlayerCash(playerid, rand);
				GiveGoal(rand);
				Info(playerid, "Ai primit $%s.", FormatNumber(rand));
				if(PlayerInfo[playerid][pActivePotions][2] > gettime())
				{
					GivePlayerCash(playerid, rand);
					SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Ai primit $%s deoarece folosesti legendary potion.", FormatNumber(rand));
				}
			}
			case 2:{
				PlayerInfo[playerid][pOGPoints] += 100;
				pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
				Info(playerid, "Ai primit 100 OGPoints.");
			}
			case 3:{
				PlayerInfo[playerid][pPremiumPoints] += 7;
				pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
				Info(playerid, "Ai primit 7 PP.");
			}
			case 4: {
				if(PlayerInfo[playerid][pVehSlots] >= MAX_PERSONAL_VEHICLES)
				{
					PlayerInfo[playerid][pPremiumPoints] += PremiumShopPrices[4];
					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendMsg(playerid, COLOR_SERVER, "Spin >> {ffffff}Deoarece ai maximul de sloturi, ai primit %d PP.", PremiumShopPrices[4]);
				}
				else {
					PlayerInfo[playerid][pVehSlots] ++;
					pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pVehSlots]);
					Info(playerid, "Ai primit un slot pentru vehicule.");
				}
			}
		}
		defer HideSpin(playerid, PlayerInfo[playerid][pSession]);
	}
	return true;
}
stock Spinn(id){
	new mid;
	switch(id){
		case -2: mid = 1240;
		case -1: mid = 411;
		case 0: mid = 1247;
		case 1: mid = 1274;
		case 2: mid = 954;
		case 3: mid = 1240;
		case 4: mid = 411;
		case 5: mid = 1247;
		case 6: mid = 1274;
	}
	return mid;
}
function ShowSpin(playerid){
	SetPVarInt(playerid, "Smid", random(5));
	DeletePVar(playerid, "Step");
	SetPVarInt(playerid, "InSpin", 1);
	for(new i; i < 5; i++) PlayerTextDrawSetPreviewModel(playerid, SpinnPTD[i], 18631);
	for(new i; i < 3; i++) TextDrawShowForPlayer(playerid, SpinnTD[i]);
	for(new i; i < 5; i++) PlayerTextDrawShow(playerid, SpinnPTD[i]);
	return true;
}
new
	GunShopPrice[7][2] =
	{
		{0, 0},
		{347, 3000},
		{348, 5000},
		{349, 8000},
		{353, 7000},
		{355, 10000},
		{356, 10000}
	},
	GunShopName[7][] = {"", "SD Pistol", "Deagle", "Shotgun", "MP5", "AK47", "M4"}
;
function ShowGS(playerid)
{
	new
		Arma = GunShopSelected[playerid]
	;
	for(new i; i < 4; i++)
	{
		TextDrawShowForPlayer(playerid, GunTD[i]);
	}
	PlayerTextDrawSetPreviewModel(playerid, GunPTD[0], GunShopPrice[Arma][0]);
	PlayerTextDrawSetPreviewRot(playerid, GunPTD[0], 0, 0, 0, 2);
	va_PlayerTextDrawSetString(playerid, GunPTD[1], "Buy %s - $%s", GunShopName[Arma], FormatNumber(GunShopPrice[Arma][1]));
	for(new i; i < 2; i++)
	{
		PlayerTextDrawShow(playerid, GunPTD[i]);
	}
	SelectTextDraw(playerid, HOVER_COLOR);
	return true;
}
function HideGS(playerid){
	for(new i; i < 4; i++) TextDrawHideForPlayer(playerid, GunTD[i]);
	for(new i; i < 2; i++) PlayerTextDrawHide(playerid, GunPTD[i]);
	CancelSelectTextDraw(playerid);
	GunShopSelected[playerid] = 0;
	return true;
}
timer HideBonus[2000](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	DeletePVar(playerid, "InBonus");

	for(new i; i < 2; i ++)
	{
		PlayerTextDrawHide(playerid, GiftPTD[i]);
	}

	TextDrawHideForPlayer(playerid, GiftTD);

	PlayerInfo[playerid][pBonus] = true;
	pUpdateInt(playerid, "Bonus", PlayerInfo[playerid][pBonus]);

	if(PlayerInfo[playerid][pTutorial] != false)
	{
		InterpolateCameraPos(playerid, 1142.365722, -1052.819335, 188.920471, 1154.703369, -1735.546386, 32.680225, 10000);
		InterpolateCameraLookAt(playerid, 1142.509277, -1057.621948, 187.536743, 1154.690429, -1739.949340, 30.310853, 10000);

		SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Felicitari! Ai terminat tutorialul server-ului!");
		SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Serverul dispune de multe sisteme precum Gift, Spin, Battlepass, Arena sau Trivia.");
		SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Te lasam pe tine sa descoperi singur aceste sisteme si multe altele.");
		SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Daca ai probleme/intrebari legate de server, poti folosi comanda [/n] si un Helper te va ajuta.");

		defer StopCinematicTutorial(playerid, PlayerInfo[playerid][pSession], 4);
	}

	return true;
}
function BonusCastig(playerid){
	new BonusIcon[3] = {1575, 1576, 1576}, BonusName[3][] = {"Newbie Pack", "Starter Pack", "Mega Starter Pack"}, castig = random(3);
	SetPVarInt(playerid, "Step", GetPVarInt(playerid, "Step") + 1);
	PlayerTextDrawSetPreviewModel(playerid, GiftPTD[0], BonusIcon[castig]);
	PlayerTextDrawShow(playerid, GiftPTD[0]);
	PlayerTextDrawSetString(playerid, GiftPTD[1], BonusName[castig]);
	if(GetPVarInt(playerid, "Step") == 5){
		new
			Prize[3][3] =
			{
				{2, 3_500_000, 3},
				{4, 4_000_000, 5},
				{6, 5_000_000, 7}
			}
		;
		InsertVehicle(playerid, Prize[castig][0], true);
		GivePlayerCash(playerid, Prize[castig][1]);
		PlayerInfo[playerid][pPremiumPoints] += Prize[castig][2];
		pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
		Info(playerid, "Ai primit un %s, $%s, si %dPP.", GetVehicleName(StockInfo[Prize[castig][0]][vModel]), FormatNumber(Prize[castig][1]), Prize[castig][2]);
		defer HideBonus(playerid, PlayerInfo[playerid][pSession]);
	}
	return true;
}
stock SkinRarity(skin)
{
	new
		rarity = 0
	;

	switch(skin)
	{
		case 1, 7, 22, 250, 291, 292, 160, 179, 210, 236, 13, 47, 60, 65, 101, 135, 143:
		{
			// Skin Comun
			rarity = 1;
		}
		case 19, 20, 45, 137, 241, 293, 197, 209, 233, 249, 62, 52, 46, 29, 145, 130, 97:
		{
			// Skin Rar
			rarity = 2;
		}
		case 82, 84, 269, 311, 127, 155, 205, 31, 10, 33, 83:
		{
			// Skin Epic
			rarity = 3;
		}
		case 0, 271, 167, 264:
		{
			// Skin Legendar
			rarity = 4;
		}
	}
	return rarity;
}
function GiveJobMoney(playerid, money)
{
	new
		OriginalMoney = money
	;

	SetPVarInt(playerid, "magie", GetPVarInt(playerid, "magie") + 1);
	if(GetPVarInt(playerid, "magie") >= 3) return AKick(playerid, "job hack");
	TureJobToday[playerid] ++;
	new Job = PlayerInfo[playerid][pJob], banijob;
	TureJobs[playerid][Job] ++;
	if(TureJobs[playerid][Job] >= 3)
	{
		new
			bool: Facute = true
		;

		for(new i = 2; i <= MAX_JOBS; i++)
		{
			if(TureJobs[playerid][i] < 3)
			{
				Facute = false;
				break;
			}
		}

		if(Facute != false)
		{
			ProgressToBattlepass(playerid, 9, 1);
		}
	}
	switch(Job)
	{
		case 5:
		{
			TureArmsToday[playerid] ++;
		}
	}
	GiveJobBalance(Job, floatround(0.02 * money, floatround_round));
	if(PlayerInfo[playerid][pJobBoost] >= 1 && Job != 2 && Job != 7){
		money += money / 2;
		Info(playerid, "Ai primit $%s deoarece ai Job Boost.", FormatNumber(money / 2));
	}
	if(PlayerInfo[playerid][pActivePotions][0] > gettime())
	{
		money += OriginalMoney;
		SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Ai primit $%s deoarece folosesti common potion.", FormatNumber(OriginalMoney));
	}
	if(PlayerInfo[playerid][pConnectTime] >= 100)
	{
		new
			Float: Percent = (floatround(PlayerInfo[playerid][pConnectTime] / 100, floatround_floor) * 5) / 10,
			BonusMoney
		;

		if(PlayerInfo[playerid][pConnectTime] >= 2000)
		{
			Percent = 10.0;
		}

		BonusMoney = floatround(OriginalMoney * Percent / 10);

		SendMsg(playerid, COLOR_SERVER, "Reborn >> {ffffff}Ai primit $%s datorita orelor jucate. (+%d%s)", FormatNumber(BonusMoney), floatround(Percent * 10), "%%");
	}
	if(PlayerInfo[playerid][pSkills][Job] < 6) PlayerInfo[playerid][pTure][Job] ++;
	if(PlayerInfo[playerid][pSkills][Job] == 6) PlayerInfo[playerid][pTure][Job] = 0;
	if(PlayerInfo[playerid][pSkills][Job] == 1 && PlayerInfo[playerid][pTure][Job] == 30) PlayerInfo[playerid][pSkills][Job] ++, PlayerInfo[playerid][pTure][Job] = 0;
	if(PlayerInfo[playerid][pSkills][Job] == 2 && PlayerInfo[playerid][pTure][Job] == 60) PlayerInfo[playerid][pSkills][Job] ++, PlayerInfo[playerid][pTure][Job] = 0;
	if(PlayerInfo[playerid][pSkills][Job] == 3 && PlayerInfo[playerid][pTure][Job] == 90) PlayerInfo[playerid][pSkills][Job] ++, PlayerInfo[playerid][pTure][Job] = 0;
	if(PlayerInfo[playerid][pSkills][Job] == 4 && PlayerInfo[playerid][pTure][Job] == 120) PlayerInfo[playerid][pSkills][Job] ++, PlayerInfo[playerid][pTure][Job] = 0;
	if(PlayerInfo[playerid][pSkills][Job] == 5 && PlayerInfo[playerid][pTure][Job] == 150)
	{
		PlayerInfo[playerid][pSkills][Job] ++, PlayerInfo[playerid][pTure][Job] = 0, FinishAchievement(playerid, 4);

		new
			bool: AllSkill6 = true
		;

		for(new i = 2; i <= MAX_JOBS; i++)
		{
			if(PlayerInfo[playerid][pSkills][i] < 6)
			{
				AllSkill6 = false;
				break;
			}
		}

		if(AllSkill6 != false)
		{
			ProgressToBattlepass(playerid, 15, 1);
		}
	}
	if(PlayerInfo[playerid][pSkills][Job] > 1 && Job != 2 && Job != 7) banijob = 10000 * (PlayerInfo[playerid][pSkills][Job] - 1);
	if(PlayerInfo[playerid][pSkills][Job] > 1 && (Job == 2 || Job == 7)) banijob = 6000 * (PlayerInfo[playerid][pSkills][Job] - 1);
	if(PlayerInfo[playerid][pSkills][Job] > 1) money += banijob, Info(playerid, "Ai primit $%s, deoarece ai skill %d.", FormatNumber(banijob), PlayerInfo[playerid][pSkills][Job]);
	if(PlayerInfo[playerid][pSkills][Job] >= 3)
	{
		new
			RandomOG = 1 + random(3)
		;

		PlayerInfo[playerid][pOGPoints] += RandomOG;
		pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
		SendMsg(playerid, COLOR_SERVER, "Job >> {ffffff}Ai primit %d OGPoints deoarece ai peste skill 3.", RandomOG);
	}
	new bool: SkinNesetat = false;
	for(new i; i < PlayerInfo[playerid][pSkinSlots]; i++){
		if(PlayerInfo[playerid][pSkins][i] == PlayerInfo[playerid][pModel]){
			SkinNesetat = true;
		}
	}
	if(SkinRarity(PlayerInfo[playerid][pModel]) && SkinNesetat){
		new bani = 0;
		switch(SkinRarity(PlayerInfo[playerid][pModel])){
			case 1: bani = floatround(0.5 * money, floatround_round);
			case 2: bani = money;
			case 3: bani = money;
			case 4: bani = 2 * money;
		}
		money += bani;
		Info(playerid, "Datorita Skin-ului pe care il porti ai primit $%s.", FormatNumber(bani));
	}
	if(Job == DailyJob)
	{
		new
			DailyJobBonus = floatround(0.2 * money, floatround_round)
		;
		SendMsg(playerid, COLOR_SERVER, "Jobul zilei >> {ffffff}Ai primit $%s in plus deoarece este jobul zilei.", FormatNumber(DailyJobBonus));
		money += DailyJobBonus;
	}
	if(PerkActive[playerid][1] && TureJobToday[playerid] > 30)
	{
		new
			Ture = TureJobToday[playerid] - 30
		;

		if(Ture > 25)
		{
			Ture = 25;
		}

		money += 1_000 * Ture;

		SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit $%s in plus. #1", FormatNumber(1_000 * Ture));
	}
	if(PerkActive[playerid][2] && TureJobToday[playerid] == 30)
	{
		GivePlayerJobBoost(playerid, 1);
		SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit o ora de job boost. #2");
	}
	if(PerkActive[playerid][4])
	{
		if(TureJobToday[playerid] > 2)
		{
			money += OriginalMoney / 2;

			SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit $%s in plus. #4", FormatNumber(OriginalMoney / 2));

			new
				rand = random(100)
			;

			switch(rand)
			{
				case 0..12:
				{
					GivePlayerRP(playerid, 1);

					SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit un punct de respect. #4");
				}
			}
		}
	}
	else if(PerkActive[playerid][3])
	{
		new
			rand = random(100)
		;

		switch(rand)
		{
			case 0..5:
			{	
				GivePlayerRP(playerid, 1);

				SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit un punct de respect. #3");
			}
		}
	}
	if(PerkActive[playerid][6])
	{
		new
			Ture = TureJobToday[playerid]
		;

		if(Ture > 5)
		{
			Ture = 5;
		}

		money += 2_000 * Ture;

		SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit $%s in plus. #6", FormatNumber(2_000 * Ture));
	}
	else if(PerkActive[playerid][5])
	{
		new
			Ture = TureJobToday[playerid]
		;

		if(Ture > 10)
		{
			Ture = 10;
		}

		money += 1_000 * Ture;

		SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit $%s in plus. #5", FormatNumber(1_000 * Ture));
	}
	if(HavePremium(playerid))
	{
		new
			bonus = floatround(0.05 * OriginalMoney)
		;

		money += bonus;

		SendMsg(playerid, COLOR_SERVER, "Premium >> {ffffff}Ai primit $%s in plus deoarece ai cont premium.", FormatNumber(bonus));
	}
	GivePlayerCash(playerid, money);
	GiveGoal(money);
	ProgressToTask(playerid, 3, money);
	if(PlayerInfo[playerid][pClan])
	{
		new
			c = PlayerInfo[playerid][pClan], banuti = floatround(floatmul(money, 0.10),floatround_ceil)
		;
		if(ClanInfo[c][clanSafe] < 999_999_999)
		{
			ClanInfo[c][clanSafe] += banuti;
			Query_Mysql("UPDATE `clans` SET `clanSafe` = '%d' WHERE `clanID` = '%d'", ClanInfo[c][clanSafe], c);
		}
		Info(playerid, "Clanul din care faci parte a primit $%s.", FormatNumber(banuti));
	}
	return true;
}
function CheckTask(playerid){
	new Task = PlayerInfo[playerid][pTaskActual];
	if(!Task && PlayerInfo[playerid][pTaskuri] < 3) return SendMsg(playerid, COLOR_SERVER, "Task >> {ffffff}Nu ai un Task actual.");
	if(PlayerInfo[playerid][pTaskuri] >= 3 && !Task) return SendMsg(playerid, COLOR_SERVER, "Task >> {ffffff}Ai terminat task-urile zilnice.");
	SendMsg(playerid, COLOR_SERVER, "Task >> {ffffff}%s - Progress: %s / %s.",
		TaskName[Task], FormatNumber(PlayerInfo[playerid][pTaskProgress]), FormatNumber(TaskProgress[Task]));
	return true;
}
CMD:duty(playerid){
	if(!PlayerInfo[playerid][pMember]) return Info(playerid, "Nu faci parte dintr-o factiune.");
	if(ClanDuty[playerid]) return Info(playerid, "Esti la datoria clanului.");
	if(IsACop(playerid) && PlayerInfo[playerid][pGunLic] < 1 && OnDuty[playerid] != true) return Info(playerid, "Ai nevoie de licenta de arme.");
	if(GetPlayerInterior(playerid) < 1 && PlayerInfo[playerid][pMember] != 8) return Info(playerid, "Nu te afli intr-un interior.");
	if(Iter_Contains(InPaint, playerid)) return Info(playerid, "Nu poti face asta aici.");
	dutyonfactions(playerid);
	return true;
}
function dutyonfactions(playerid){
	switch(OnDuty[playerid]){
		case 0: {
			switch(PlayerInfo[playerid][pMember])
			{
				case 1:
				{
					new
						Skins[8] = {0, 71, 284, 281, 266, 283, 267, 267},
						Skin = Skins[PlayerInfo[playerid][pRank]]
					;
					SetPlayerSkin(playerid, Skin);
					SetPlayerFactionColor(playerid);
					GivePlayerWeapon(playerid, 24, 500);
					GivePlayerWeapon(playerid, 3, 1);
					GivePlayerWeapon(playerid, 41, 500);
					GivePlayerWeapon(playerid, 29, 1000);
					GivePlayerWeapon(playerid, 31, 1000);
					SetPlayerArm(playerid, 100);
				}
				case 2:
				{
					if(ServerWars)
					{
						PlayerTextDrawShow(playerid, WarPTD);
					}
					new
						Skins[8] = {0, 114, 114, 115, 115, 116, 292, 292},
						Skin = Skins[PlayerInfo[playerid][pRank]]
					;
					SetPlayerSkin(playerid, Skin);
				}
				case 3:
				{
					if(ServerWars)
					{
						PlayerTextDrawShow(playerid, WarPTD);
					}
					new
						Skins[8] = {0, 108, 109, 110, 110, 100, 292, 292},
						Skin = Skins[PlayerInfo[playerid][pRank]]
					;
					SetPlayerSkin(playerid, Skin);
				}
				case 4:
				{
					new
						Skins[8] = {0, 188, 188, 17, 187, 187, 147, 147},
						Skin = Skins[PlayerInfo[playerid][pRank]]
					;
					SetPlayerSkin(playerid, Skin);
				}
				case 5:
				{
					if(Undercover[playerid])
					{
						Undercover[playerid] = false;
						foreach(new i : Player) ShowPlayerNameTagForPlayer(i,playerid, 1);
					}
					new
						Skins[8] = {0, 208, 186, 186, 294, 294, 294, 294},
						Skin = Skins[PlayerInfo[playerid][pRank]]
					;
					SetPlayerSkin(playerid, Skin);
				}
				case 6:
				{
					new
						Skins[8] = {0, 253, 253, 255, 255, 61, 228, 228},
						Skin = Skins[PlayerInfo[playerid][pRank]]
					;
					SetPlayerSkin(playerid, Skin);
 				}
 				case 7:
				{
					new
						Skins[8] = {0, 274, 274, 275, 275, 275, 276, 276},
						Skin = Skins[PlayerInfo[playerid][pRank]]
					;
					SetPlayerSkin(playerid, Skin);
 				}
 				case 8:
 				{
 					if(!IsPlayerInAnyVehicle(playerid))
 						return SendMsg(playerid, COLOR_SERVER, "Duty >> {ffffff}Nu te afli intr-un vehicul.");

 					if(!Iter_Contains(fVehicles[8], GetPlayerVehicleID(playerid)))
 						return SendMsg(playerid, COLOR_SERVER, "Duty >> {ffffff}Nu te afli intr-un vehicul de Glovo.");

 					va_SendClientMessageToAll(0xe5ff00aa, "Glovo >> %s este la datorie. [/service]", GetName(playerid));
 				}
			}
			OnDuty[playerid] = true;
		} case 1: {
			if(IsACop(playerid))
			{
				SetPlayerColor(playerid, 0xffffffff);
			}
			if(IsAGangMember(playerid) && ServerWars)
			{
				PlayerTextDrawHide(playerid, WarPTD);
			}
			SetPlayerArm(playerid, 0);
			ResetPlayerWeapons(playerid);
			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
			OnDuty[playerid] = false;
		}
	} 
	SetPlayerHP(playerid, 100); 
	return true;
}
CMD:vowner(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);	
	new name[30], carid;
	if(sscanf(params, "s[30]i", name, carid)) return Info(playerid, "/vowner [exact player name] [exact vehicle db id]");
	Query_Mysql("UPDATE `cars` SET `Owner` = '%s' WHERE `ID` = '%d'", name, carid);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s [user: %d] has set %s owner for vehicle id %d (must relog to update).", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], name, carid);
	return true;
}	
CMD:seto(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 5) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new nume[30], item[30], amount;	
	if(sscanf(params, "s[30]s[30]d", nume, item, amount)){
		Info(playerid, "/seto [playername] [item] [amount]");
		Info(playerid, "Optiuni: money, bankmoney, hours, materials, drugs, fp, pp, admin, helper, grouprank, staffwarns, manager");
		return true;
	}
	if(strmatch(item, "money"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6)
			return SendMsg(playerid, COLOR_SERVER, AdminOnly);

		Query_Mysql("UPDATE `users` SET `Money` = '%d' WHERE `Name` = '%s'", amount, nume);
	}
	else if(strmatch(item, "bankmoney"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6)
			return SendMsg(playerid, COLOR_SERVER, AdminOnly);

		Query_Mysql("UPDATE `users` SET `Bank` = '%d' WHERE `Name` = '%s'", amount, nume);
	}
	else if(strmatch(item, "hours"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6)
			return SendMsg(playerid, COLOR_SERVER, AdminOnly);

		Query_Mysql("UPDATE `users` SET `ConnectedTime` = '%d' WHERE `Name` = '%s'", amount, nume);
	}
	else if(strmatch(item, "materials")) Query_Mysql("UPDATE `users` SET `Materials` = '%d' WHERE `Name` = '%s'", amount, nume);
	else if(strmatch(item, "drugs")) Query_Mysql("UPDATE `users` SET `Drugs` = '%d' WHERE `Name` = '%s'", amount, nume);
	else if(strmatch(item, "fp")) Query_Mysql("UPDATE `users` SET `FPunish` = '%d' WHERE `Name` = '%s'", amount, nume);
	else if(strmatch(item, "pp"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6)
			return SendMsg(playerid, COLOR_SERVER, AdminOnly);

		Query_Mysql("UPDATE `users` SET `PremiumPoints` = '%d' WHERE `Name` = '%s'", amount, nume);
	}
	else if(strmatch(item, "admin")){
		if(PlayerInfo[playerid][pAdmin] < 6)
			return SendMsg(playerid, COLOR_SERVER, AdminOnly);

		if(CheckAcces(nume))
			return SendMsg(playerid, COLOR_SERVER, "Seto >> {ffffff}Nu poti face asta.");

		Query_Mysql("UPDATE `users` SET `Admin` = '%d', `Color` = 'CECECE' WHERE `Name` = '%s'", amount, nume);
	}
	else if(strmatch(item, "helper")) Query_Mysql("UPDATE `users` SET `Helper` = '%d', `Color` = 'CECECE' WHERE `Name` = '%s'", amount, nume);
	else if(strmatch(item, "grouprank"))
	{
		if(PlayerInfo[playerid][pAdmin] < 6)
			return SendMsg(playerid, COLOR_SERVER, AdminOnly);

		Query_Mysql("UPDATE `users` SET `Rank` = '%d' WHERE `Name` = '%s'", amount, nume);
	}
	else if(strmatch(item, "staffwarns")) Query_Mysql("UPDATE `users` SET `StaffWarns` = '%d' WHERE `Name` = '%s'", amount, nume);
	else if(strmatch(item, "manager")) Query_Mysql("UPDATE `users` SET `Manager` = '%d' WHERE `Name` = '%s'", amount, nume);
	else return Info(playerid, "Item invalid.");
	SendAdmins(COLOR_RED, "SETO >> %s i-a setat lui %s %s la %s.", 1, GetName(playerid), nume, item, FormatNumber(amount));
	return true;
}
CMD:server(playerid){
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly); gString[0] = (EOS);
	format(gString, 164, "Troll hack - onplayerdeath - %d\nTroll hack - %d\nTroll kill / fake damage - %d\nRestrictie - %d", ac_onplayerdeath, ac_trolltimer, ac_fakedamage, restrictie);
	SPD(playerid, DIALOG_SERVER, DIALOG_STYLE_LIST, "Server", gString, "Alege", "Anuleaza");	
	return true;
}
CMD:pc(playerid, params[]){
	if(!HavePremium(playerid) && !PlayerInfo[playerid][pAdmin]) return Info(playerid, "Nu ai cont premium."); 
	if(PlayerInfo[playerid][pSettings][4]) return Info(playerid, "Acest chat este dezactivat."); 
	if(PlayerInfo[playerid][pMuteTime]) return SendMsg(playerid, COLOR_SERVER, "Mute >> {ffffff}Mai ai mute pentru %d minute.", PlayerInfo[playerid][pMuteTime]);
	if(LastPC[playerid] + 3 > gettime()) return SendMsg(playerid, COLOR_SERVER, "PC >> {ffffff}Asteapta %d secunde.", (LastPC[playerid] + 3) - gettime());
	new mesaj[128]; 
	if(sscanf(params, "s[128]", mesaj)) return Info(playerid, "/pc [message]");
	new
		bool: Vazut[MAX_PLAYERS]
	;
	foreach(new i : Premiums)
	{
		if(PlayerInfo[i][pSettings][4] == false)
		{
			SendMsg(i, 0xC2A2DAAA, "Premium User %s: %s", GetGameName(playerid), mesaj);
			Vazut[i] = true;
		}
	}
	foreach(new i : Admins)
	{
		if(PlayerInfo[i][pSettings][4] == false && Vazut[i] == false)
		{
			SendMsg(i, 0xC2A2DAAA, "Premium User %s: %s", GetGameName(playerid), mesaj);
		}
	}
	LastPC[playerid] = gettime();
	return true;
}
CMD:pet(playerid){
	if(!PlayerInfo[playerid][pPet]) return Info(playerid, "Nu ai un pet.");
	gString[0] = (EOS);
	if(!PlayerInfo[playerid][pPetStatus])
		format(gString, 256, "Status: Scos\nNume pet: %s\nBeneficii pet\nAvanseaza pet: %d Pet points", PlayerInfo[playerid][pPetName], PlayerInfo[playerid][pPetPoints]);	
	else
		format(gString, 256, "Status: Pus\nNume pet: %s\nBeneficii pet\nAvanseaza pet: %d Pet points", PlayerInfo[playerid][pPetName], PlayerInfo[playerid][pPetPoints]);	
	SPD(playerid, DIALOG_PET, DIALOG_STYLE_LIST, "Pet Menu", gString, "Alege", "Anuleaza");
	return true;
}
stock ClearChat(playerid, rows = 25){ 
	for(new x; x < rows; x++) SendMsg(playerid, -1, " ");
	return true;
}
CMD:fspec(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "i", id)) return Info(playerid, "/fspec [faction id]");
	if(id < 0 || id > 8) return Info(playerid, "Invalid faction id.");
	if(id && PlayerInfo[playerid][pMember] == id) return Info(playerid, "Te afli deja in aceasta factiune.");
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s este spec pe factiunea %s.", 1, GetName(playerid), FactionName(id));
	specfaction[playerid] = id;
	return true;
}	
CMD:fchat(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	if(specfaction[playerid] < 1) return Info(playerid, "Nu te afli spec pe o factiune.");
	new message[128]; if(sscanf(params, "s[128]", message)) return Info(playerid, "/fchat [message]");
	SendFamilyMessage(specfaction[playerid], 0xa32a9fFF, "# Admin %s: %s", GetName(playerid), message);
	return true;
}
function GiveGoal(money)
{
	server_goal += money;
	if(server_goal >= 1_000_000_000)
	{
		server_goal -= 1_000_000_000;
		new
			bani = 10000000 + random(5000000),
			rand = 1 + random(stockss),
			model = StockInfo[rand][vModel]
		; 
		foreach(new i : Player)
		{
			GivePlayerCash(i, bani);
			GivePlayerOG(i, 100);
		}
		StockInfo[rand][vStock] ++;
		Query_Mysql("UPDATE `stock` SET `stock` = '%d' WHERE `ID` = '%d'", StockInfo[rand][vStock], StockInfo[rand][vID]);
		va_SendClientMessageToAll(COLOR_SERVER, "Server >> {ffffff}Global Goal-ul a fost atins, ai primit: $%s, 100 OGPoints si +1 Stock la %s.", FormatNumber(bani), GetVehicleName(model)); 
	}
	va_TextDrawSetString(GlobalGoalTD, "$%s / $1,000,000,000", FormatNumber(server_goal));
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pSettings][8] == false && GetPVarInt(i, "NeedSpawn") != 1)
		{
			UpdateGlobalGoal(i);
		}
	}
	return true;
}
CMD:setgoal(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new suma;
	if(sscanf(params, "i", suma)) return Info(playerid, "/setgoal [amount]");	
	if(suma > 1_000_000_000 || suma < 0) return Info(playerid, "Suma invalida, minim $0, maxim $1,000,000,000.");
	server_goal = 0;
	GiveGoal(suma);
	return true; 
}
CMD:ban(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, days, reason[64], name[MAX_PLAYER_NAME], adminname[MAX_PLAYER_NAME];
	if(sscanf(params, "uis[64]", id, days, reason)) return Info(playerid, "/ban [name/playerid] [days, 0 = permanent] [reason]");
	if(!IsPlayerConnected(id)) return Info(playerid, "ID-ul este invalid.");
	if(days < 0) return Info(playerid, "Invalid days.");
	if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[id][pAdmin]) return Info(playerid, "Nu poti folosi aceasta comanda pe un admin mai mare sau egal cu tine.");
	format(name, sizeof(name), GetName(id));
	format(adminname, sizeof(adminname), GetName(playerid));
	BanUser(name, reason, adminname, PlayerInfo[playerid][pSQLID], days);
	return true;
}
function BanUser2(UserName[MAX_PLAYER_NAME], Reason[64], AdminName[MAX_PLAYER_NAME], AdminID, Days){
	if(!cache_num_rows()) return false;
	new id, reason[64];
	cache_get_value_name_int(0, "id", id);
	mysql_escape_string(Reason, reason);
	if(!Days){
		va_SendClientMessageToAll(COLOR_SANCTION, "Ban >> %s a fost banat de %s, motiv: %s.", UserName, AdminName, reason);
		Query_Mysql("INSERT INTO bans (Name, AdminName, Reason, Days, Permanent, Active) VALUES('%s', '%s', '%s', '999', 1, 1)", UserName, AdminName, reason);
		Query_Mysql("INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','1','0','%s','%s','%s','%d')", id, AdminID, reason, UserName, AdminName, gettime());
	}
	if(Days){
		va_SendClientMessageToAll(COLOR_SANCTION, "Ban >> %s a fost banat de %s pentru %d zile, motiv: %s.", UserName, AdminName, Days, reason);
		Query_Mysql("INSERT INTO bans (Name, AdminName, Reason, Days, Permanent, Active) VALUES('%s', '%s', '%s', '%d', 0, 1)", UserName, AdminName, reason, Days);	
		Query_Mysql("INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','2','%d','%s','%s','%s','%d')", id, AdminID, Days, reason, UserName, AdminName, gettime());
	}
	gString[0] = (EOS);
	format(gString, 32, "SQLID%d", id);
	new
		i = GetSVarInt(gString) - 1
	;
	if(i != -1)
	{
		defer KickEx(i, PlayerInfo[i][pSession]); 
	}
	return true;
}
function BanUser(UserName[MAX_PLAYER_NAME], Reason[64], AdminName[MAX_PLAYER_NAME], AdminID, Days){
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "SELECT * FROM `users` WHERE `name`='%s'", UserName);
	mysql_tquery(SQL, gString, "BanUser2", "sssdd", UserName, Reason, AdminName, AdminID, Days);
	return true;
}
CMD:unban(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 4) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new name[25];
	if(sscanf(params, "s[25]", name)) return Info(playerid, "/unban [exact player name]");
	Query_Mysql("UPDATE `bans` SET `Active` = '0' WHERE `name` = '%s' AND `Active` = '1'", name);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s unbanned player %s.", 1, GetName(playerid), name);
	return true;
}
CMD:banoff(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly); 
	new name[MAX_PLAYER_NAME], days, reason[64], adminname[MAX_PLAYER_NAME];
	if(sscanf(params, "s[25]is[64]", name, days, reason)) return Info(playerid, "/banoff [exact player name] [days, 0 = permanent] [reason]");
	if(days < 0) return Info(playerid, "Invalid days.");
	if(CheckAcces(name)) return Info(playerid, "Nu poti bana acel jucator.");
	format(adminname, sizeof(adminname), GetName(playerid));
	BanUser(name, reason, adminname, PlayerInfo[playerid][pSQLID], days);
	return true;
}
CMD:vouchers(playerid)
{
	gString[0] = (EOS);

	format(gString, sizeof gString, "Normal Vouchers: %d\nEpic Vouchers: %d\nPremium Vouchers: %d\nLegendary Vouchers: %d\nOG Vouchers: %d",
		PlayerInfo[playerid][pVouchers][0], PlayerInfo[playerid][pVouchers][1], PlayerInfo[playerid][pVouchers][2], PlayerInfo[playerid][pVouchers][3],
		PlayerInfo[playerid][pVouchers][4]);

	SPD(playerid, DIALOG_VOUCHERS, DIALOG_STYLE_LIST, "Vouchere", gString, "Alege", "Anuleaza");
	return true;
}
CMD:accept(playerid, params[]){
	new item[64], id; if(sscanf(params, "s[64]u", item, id)){
		Info(playerid, "/accept [item] [id]");
		Info(playerid, "Optiuni: invite, gun, ticket, dice, cinvite, materials, live, drugs, box, duel, heal, drink, food.");
		return true;
	}
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id) || !Logat[id]) return Info(playerid, "ID-ul este invalid.");
	if(strcmp(item, "trade", true) == 0) acceptTrade(playerid, id);
	else if(strcmp(item, "invite", true) == 0){
		if(PlayerInfo[playerid][pMember] >= 1) return Info(playerid, "Deja te afli intr-o factiune.");
		if(FactionOffer[playerid] == -1) return Info(playerid, "Nu ai primit o invitatie.");
		if(PlayerInfo[FactionOffer[playerid]][pMember] < 1) return Info(playerid, "Playerul ce ti-a dat invite nu este intr-o factiune.");
		if(pfVehicle[playerid] != -1) DestroyVehicleEx(pfVehicle[playerid]), Iter_Remove(fVehicles[PlayerInfo[playerid][pMember]], pfVehicle[playerid]), pfVehicle[playerid] = -1;
		PlayerInfo[playerid][pMember] = PlayerInfo[FactionOffer[playerid]][pMember]; PlayerInfo[playerid][pRank] = 1; PlayerInfo[playerid][pFactionJoin] = gettime();
		Iter_Add(FactionMembers[PlayerInfo[playerid][pMember]], playerid);
		SetPlayerVirtualWorld(playerid, 0);
		if(!IsACop(playerid))
		{
			SetPlayerFactionColor(playerid);
		}
		defer Spawn(playerid, PlayerInfo[playerid][pSession]);
		Info(playerid, "You are now a member of the %s.", FactionName(PlayerInfo[playerid][pMember]));
		SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_SERVER, "Faction >> {ffffff}%s has joined the group (invited by %s).", GetName(playerid), GetName(FactionOffer[playerid]));
		Query_Mysql("UPDATE `users` SET `Member` = '%d', `Rank` = '1', `FactionJoin` = '%d' WHERE `id` = '%d'", PlayerInfo[playerid][pMember], PlayerInfo[playerid][pFactionJoin], PlayerInfo[playerid][pSQLID]);
		Query_Mysql("INSERT INTO faction_logs (`text`, `player`,`leader`) VALUES ('%s has joined the group %s (invited by %s).','%d','%d')", GetName(playerid), FactionName(PlayerInfo[playerid][pMember]), GetName(FactionOffer[playerid]), PlayerInfo[playerid][pSQLID], PlayerInfo[FactionOffer[playerid]][pSQLID]);
		Query_Mysql("UPDATE `users` SET `FactionTime` = '0' WHERE `id` = '%d'", PlayerInfo[playerid][pSQLID]);
		PlayerInfo[playerid][pRaport] = 0;
		pUpdateInt(playerid, "Raport", 0);
		ResetSetGuns(playerid);
	} else if(strcmp(item, "cinvite", true) == 0){
		if(GetPVarInt(playerid, "cinvitePlayer") == -1) return Info(playerid, "Acest jucator nu este conectat.");
		if(id != GetPVarInt(playerid, "cinvitePlayer")) return Info(playerid, "Nu acest jucator ti-a oferit o invitatie in clan.");
		PlayerInfo[playerid][pClan] = PlayerInfo[id][pClan];
		pUpdateInt(playerid, "Clan", PlayerInfo[playerid][pClan]);
		PlayerInfo[playerid][pCRank] = 1;
		pUpdateInt(playerid, "CRank", 1);
		pUpdateInt(playerid, "ClanTime", 0);
		inviteToClan(playerid, id, PlayerInfo[playerid][pClan]);
		Iter_Add(InClan[PlayerInfo[playerid][pClan]], playerid);
		ProgressToPerkMissions(playerid, 6, 1);
	} else if(strcmp(item, "materials", true) == 0){
		if(MatsOffer[playerid] < 0) return true;
		if(PlayerInfo[playerid][pConnectTime] < 5) return Info(playerid, "Nu ai 5 ore.");
		if(MatsOffer[playerid] != id) return Info(playerid, "This player has not offered you materials.");
		if(GetPlayerCash(playerid) < MatsPrice[playerid]) return Info(playerid, "Nu ai suficienti bani.");
		PlayerInfo[playerid][pMats] += MatsAmmo[playerid]; PlayerInfo[MatsOffer[playerid]][pMats] -= MatsAmmo[playerid];
		GivePlayerCash(playerid, -MatsPrice[playerid]); GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
		Info(playerid, "You buy %d materials for $%s from %s.", MatsAmmo[playerid], FormatNumber(MatsPrice[playerid]), GetName(MatsOffer[playerid]));
		Info(MatsOffer[playerid], "%s bought your materials for $%s.", GetName(playerid), FormatNumber(MatsPrice[playerid]));
		pUpdateInt(playerid, "Materials", PlayerInfo[playerid][pMats]); pUpdateInt(MatsOffer[playerid], "Materials", PlayerInfo[MatsOffer[playerid]][pMats]);
		MatsOffer[playerid] = -1; MatsAmmo[playerid] = 0; MatsPrice[playerid] = 0;
	} else if(strcmp(item, "gun", true) == 0){
		if(SellgunOffer[playerid] < 0) return true;
		if(SellgunOffer[playerid] != id) return Info(playerid, "This player has not offered you gun.");
		if(GetPlayerCash(playerid) < SellgunPrice[playerid]) return Info(playerid, "Nu ai suficienti bani.");
		new weaponid, ammo, price, mats, idoffer;
		weaponid = SellgunID[playerid]; ammo = SellgunAmmo[playerid]; price = SellgunPrice[playerid]; mats = SellgunMats[playerid]; idoffer = SellgunOffer[playerid]; 
		GivePlayerWeapon(playerid, weaponid, ammo);
		PlayerInfo[idoffer][pMats] -= mats; pUpdateInt(idoffer, "Materials", PlayerInfo[idoffer][pMats]);
		GivePlayerCash(playerid, -price); GivePlayerCash(idoffer, price);
		Info(idoffer, "I-ai dat lui %s, o arma cu %d gloante, pentru %d materiale.", GetName(playerid), ammo, mats);
		Info(playerid, "Ai primit o arma cu %d gloante de la %s.", ammo, GetName(idoffer)); 			
		SellgunOffer[playerid] = -1; SellgunPrice[playerid] = 0; SellgunMats[playerid] = 0; SellgunAmmo[playerid] = 0; SellgunID[playerid] = 0;
	} else if(strcmp(item, "ticket", true) == 0){
		if(TicketOffer[playerid] == -1) return Info(playerid, "Nu ti-a dat nimeni o amenda.");
		if(TicketOffer[playerid] != id) return Info(playerid, "This player has not offered you ticket.");
		if(!IsPlayerConnected(id)) return Info(playerid, "Acel player nu este conectat.");
		if(GetDistanceBetweenPlayers(playerid, id) > 5.0) return Info(playerid, "Esti prea departe de acel jucator.");
		if(GetPlayerCash(playerid) < TicketMoney[playerid]) return Info(playerid, "Nu ai suficienti bani.");
		Info(playerid, "You have paid the $%s ticket %s issued you.", FormatNumber(TicketMoney[playerid]), GetName(id));
		Info(id, "%s has accepted the $%s ticket you issued them.", GetName(playerid), FormatNumber(TicketMoney[playerid]));
		GivePlayerCash(playerid, -TicketMoney[playerid]); GivePlayerCash(id, TicketMoney[playerid]);
		PlayerInfo[id][pRaport] ++;
		pUpdateInt(id, "Raport", PlayerInfo[id][pRaport]);
		TicketOffer[playerid] = -1;
		TicketMoney[playerid] = 0;
	} else if(strcmp(item, "live", true) == 0){
		if(LiveOffer[playerid] == -1) return true;
		if(LiveOffer[playerid] != id) return true;
		if(!IsPlayerConnected(LiveOffer[playerid])) return Info(playerid, "Acel jucator nu este conectat.");
		if(Iter_Contains(Nearby[playerid], LiveOffer[playerid])){
			if(TalkingLive[id] == false) PlayerInfo[id][pRaport] ++; pUpdateInt(id, "Raport", PlayerInfo[id][pRaport]);
			Info(id, "%s accepted live interview.", GetName(playerid));
			FreezePlayer(playerid, true); FreezePlayer(id, true);
			TalkingLive[playerid] = true; TalkingLive[LiveOffer[playerid]] = true; LiveOffer[playerid] = -1;
		}	
	} /*else if(strcmp(item, "drugs", true) == 0){
		if(DrugOffer[playerid] == -1) return true;
		if(PlayerInfo[playerid][pConnectTime] < 5) return Info(playerid, "Nu ai 5 ore.");
		if(DrugOffer[playerid] != id) return Info(playerid, "This player has not offered you drugs.");
		if(GetPlayerCash(playerid) < DrugPrice[playerid]) return Info(playerid, "Nu ai bani.");
		if(!IsPlayerConnected(DrugOffer[playerid])) return Info(playerid, "Acel player nu este conectat.");
		if(PlayerInfo[playerid][pDrugs] > 50) return Info(playerid, "You are fully loaded with drugs, use them first.");
		Info(playerid, "You bought %d gram for $%s from Drugs dealer %s.", DrugGram[playerid], FormatNumber(DrugPrice[playerid]), GetName(DrugOffer[playerid]));
		Info(DrugOffer[playerid], "%s has bought your %d gram..", GetName(playerid), DrugGram[playerid]);
		GivePlayerCash(DrugOffer[playerid], DrugPrice[playerid]); GivePlayerCash(playerid, -DrugPrice[playerid]);
		PlayerInfo[playerid][pDrugs] += DrugGram[playerid]; PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
		pUpdateInt(DrugOffer[playerid], "Drugs", PlayerInfo[DrugOffer[playerid]][pDrugs]); pUpdateInt(playerid, "Drugs", PlayerInfo[playerid][pDrugs]);
		DrugOffer[playerid] = -1; DrugPrice[playerid] = 0; DrugGram[playerid] = 0;
	} */
	else if(strcmp(item, "dice", true) == 0){
		if(PlayerInfo[playerid][pConnectTime] < 5) return Info(playerid, "Nu ai 5 ore.");	
		if(DiceRequest[playerid] == -1) return Info(playerid, "Nobody invited you to play dice.");
		if(DiceRequest[playerid] != id) return Info(playerid, "That player didn't invited you to play dice with him.");
		if(GetPlayerCash(playerid) < DiceMoney[playerid]) return Info(playerid, "You or your adversary doesn't have enough money to play dice.");
		if(GetPlayerCash(id) < DiceMoney[playerid]) return Info(playerid, "You or your adversary doesn't have enough money to play dice.");
		if(GetDistanceBetweenPlayers(playerid, DiceRequest[playerid]) > 10) return Info(playerid, "Nu te afli langa acel player.");

		DiceMoney[id] = DiceMoney[playerid];

		DicePartner[playerid] = id;
		DicePartner[id] = playerid;

		ShowDice(playerid);

		ShowDice(id);

		SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Trebuie sa apesi pe zaruri, apoi adversarul sa faca acelas lucru.");
		SendMsg(id, COLOR_SERVER, "Dice >> {ffffff}Trebuie sa apesi pe zaruri, apoi adversarul sa faca acelas lucru.");

		DiceRequest[playerid] = -1;
	} else if(strcmp(item, "box", true) == 0){
		if(GetPVarInt(playerid, "atype") != 1) return true;
		if(GetPVarInt(playerid, "ainvite") == 999) return Info(playerid, "Nobody invited you to play box.");
		if(GetPVarInt(playerid, "ainvite") != id) return Info(playerid, "That player didn't invited you to play box with him.");
		if(GetPlayerCash(playerid) < GetPVarInt(playerid, "amoney")) return Info(playerid, "Nu ai bani.");
		if(GetPlayerCash(id) < GetPVarInt(playerid, "amoney")) return Info(playerid, "Acel jucator nu are bani.");
		if(GetDistanceBetweenPlayers(playerid, id) > 10) return Info(playerid, "Nu te afli langa acel player.");
		SetPlayerPosEx(playerid, 763.1862, -1.9211, 1001.5942); SetPlayerPosEx(id, 758.7480, 2.5029, 1001.5942);
		SetPlayerFacingAngle(playerid, 45); SetPlayerFacingAngle(id, 227);
		SetPlayerInterior(playerid, 5); SetPlayerVirtualWorld(playerid, playerid + 1); SetPlayerInterior(id, 5); SetPlayerVirtualWorld(id, playerid + 1);
		SetPlayerHP(playerid, 100); SetPlayerHP(id, 100); 
		FreezePlayer(playerid, true); FreezePlayer(id, true);
		ResetPlayerWeapons(playerid); ResetPlayerWeapons(id);
		GivePlayerCash(playerid, -GetPVarInt(playerid, "amoney")); GivePlayerCash(id, -GetPVarInt(playerid, "amoney"));
		SetPVarInt(playerid, "aoponent", id); SetPVarInt(id, "aoponent", playerid);
		defer UnfreezeTimer(playerid, PlayerInfo[playerid][pSession]); defer UnfreezeTimer(id, PlayerInfo[id][pSession]);
	} else if(strcmp(item, "duel", true) == 0){
		if(GetPVarInt(playerid, "atype") != 2) return true;
		if(GetPVarInt(playerid, "ainvite") == 999) return Info(playerid, "Nobody invited you to play duel.");
		if(GetPVarInt(playerid, "ainvite") != id) return Info(playerid, "That player didn't invited you to play duel with him.");
		if(GetPlayerCash(playerid) < GetPVarInt(playerid, "amoney")) return Info(playerid, "Nu ai bani.");
		if(GetPlayerCash(id) < GetPVarInt(playerid, "amoney")) return Info(playerid, "Acel jucator nu are bani.");
		if(GetDistanceBetweenPlayers(playerid, id) > 10) return Info(playerid, "Nu te afli langa acel player.");
		SetPlayerPosEx(playerid, -2738.7600, -251.9838, 7.1875); SetPlayerPosEx(id, -2766.9038, -252.3474, 7.1875);
		SetPlayerFacingAngle(playerid, 90); SetPlayerFacingAngle(id, 270);
		SetPlayerVirtualWorld(playerid, playerid + 1); SetPlayerVirtualWorld(id, playerid + 1);
		SetPlayerHP(playerid, 100); SetPlayerHP(id, 100); 
		FreezePlayer(playerid, true); FreezePlayer(id, true);
		ResetPlayerWeapons(playerid); ResetPlayerWeapons(id);
		GivePlayerWeapon(playerid, 24, 9999); GivePlayerWeapon(playerid, 31, 9999); GivePlayerWeapon(id, 24, 9999); GivePlayerWeapon(id, 31, 9999);
		GivePlayerCash(playerid, -GetPVarInt(playerid, "amoney")); GivePlayerCash(id, -GetPVarInt(playerid, "amoney"));
		SetPVarInt(playerid, "aoponent", id); SetPVarInt(id, "aoponent", playerid);
		defer UnfreezeTimer(playerid, PlayerInfo[playerid][pSession]); defer UnfreezeTimer(id, PlayerInfo[id][pSession]);
	} else if(strmatch(item, "heal")){
		new
			id2 = HealRequest[playerid]
		;

		if(id2 != id || PlayerInfo[id][pMember] != 7)
			return SendMsg(playerid, COLOR_SERVER, "Accept Heal >> {ffffff}Jucatorul nu ti-a oferit heal.");

		if(GetPlayerHP(playerid) > 90)
			return SendMsg(playerid, COLOR_SERVER, "Accept Heal >> {ffffff}Nu poti avea peste 90HP.");

		if(GetDistanceBetweenPlayers(playerid, id) > 5)
			return SendMsg(playerid, COLOR_SERVER, "Accept Heal >> {ffffff}Nu esti langa acel jucator.");

		if(GetPlayerCash(playerid) < 5000)
			return SendMsg(playerid, COLOR_SERVER, "Accept Heal >> {ffffff}Nu ai $5,000");

		GivePlayerCash(playerid, -5000);
		GivePlayerCash(id, 5000);

		SendMsg(playerid, COLOR_SERVER, "Heal >> {ffffff}Ai platit $5,000 pentru heal de la %s.", GetName(id));
		SendMsg(id, COLOR_SERVER, "Heal >> {ffffff}%s ti-a platit $5,000 pentru heal.", GetName(playerid));

		SetPlayerHP(playerid, 100);

		PlayerInfo[id][pRaport] ++;
		pUpdateInt(id, "Raport", PlayerInfo[id][pRaport]);

	} else if(strmatch(item, "med")){
		new
			id2 = MedRequest[playerid]
		;

		if(id2 != id || PlayerInfo[id][pMember] != 7)
			return SendMsg(playerid, COLOR_SERVER, "Accept Med >> {ffffff}Jucatorul nu ti-a oferit med.");

		if(GetDistanceBetweenPlayers(playerid, id) > 5)
			return SendMsg(playerid, COLOR_SERVER, "Accept Med >> {ffffff}Nu esti langa acel jucator.");

		if(GetPlayerCash(playerid) < 50000)
			return SendMsg(playerid, COLOR_SERVER, "Accept Med >> {ffffff}Nu ai $50,000");

		if(PlayerInfo[playerid][pMedKit])
			return SendMsg(playerid, COLOR_SERVER, "Accept Med >> {ffffff}Ai deja o trusa medicala.");

		GivePlayerCash(playerid, -50000);
		GivePlayerCash(id, 50000);

		SendMsg(playerid, COLOR_SERVER, "Accept Med >> {ffffff}Ai platit $50,000 pentru o trusa medicala de la %s.", GetName(id));
		SendMsg(id, COLOR_SERVER, "Accept Med >> {ffffff}%s ti-a platit $50,000 pentru o trusa medicala.", GetName(playerid));

		PlayerInfo[playerid][pMedKit] = true;
		pUpdateInt(playerid, "MedKit", PlayerInfo[playerid][pMedKit]);

		PlayerInfo[id][pRaport] ++;
		pUpdateInt(id, "Raport", PlayerInfo[id][pRaport]);

	} else if(strmatch(item, "drink")){
		new
			id2 = DrinkRequest[playerid]
		;

		if(id2 != id || PlayerInfo[id][pMember] != 8)
			return SendMsg(playerid, COLOR_SERVER, "Accept Drink >> {ffffff}Jucatorul nu ti-a oferit apa.");

		if(GetDistanceBetweenPlayers(playerid, id) > 10)
			return SendMsg(playerid, COLOR_SERVER, "Accept Drink >> {ffffff}Nu esti langa acel jucator.");

		if(GetPlayerCash(playerid) < 50000)
			return SendMsg(playerid, COLOR_SERVER, "Accept Drink >> {ffffff}Nu ai $50,000");

		if(PlayerInfo[playerid][pApa] > 70)
			return SendMsg(playerid, COLOR_SERVER, "Accept Drink >> {ffffff}Ai peste 70 apa.");

		GivePlayerCash(playerid, -50000);
		GivePlayerCash(id, 50000);

		SendMsg(playerid, COLOR_SERVER, "Accept Drink >> {ffffff}Ai platit $50,000 pentru apa de la %s.", GetName(id));
		SendMsg(id, COLOR_SERVER, "Accept Drink >> {ffffff}%s ti-a platit $50,000 pentru apa.", GetName(playerid));

		PlayerInfo[playerid][pApa] = 100;
		UpdateFood(playerid);

		PlayerInfo[id][pRaport] ++;
		pUpdateInt(id, "Raport", PlayerInfo[id][pRaport]);

	} else if(strmatch(item, "food")){
		new
			id2 = FoodRequest[playerid]
		;

		if(id2 != id || PlayerInfo[id][pMember] != 8)
			return SendMsg(playerid, COLOR_SERVER, "Accept Food >> {ffffff}Jucatorul nu ti-a oferit mancare.");

		if(GetDistanceBetweenPlayers(playerid, id) > 10)
			return SendMsg(playerid, COLOR_SERVER, "Accept Food >> {ffffff}Nu esti langa acel jucator.");

		if(GetPlayerCash(playerid) < 50000)
			return SendMsg(playerid, COLOR_SERVER, "Accept Food >> {ffffff}Nu ai $50,000");

		if(PlayerInfo[playerid][pMancare] > 70)
			return SendMsg(playerid, COLOR_SERVER, "Accept Food >> {ffffff}Ai peste 70 mancare.");

		GivePlayerCash(playerid, -50000);
		GivePlayerCash(id, 50000);

		SendMsg(playerid, COLOR_SERVER, "Accept Food >> {ffffff}Ai platit $50,000 pentru mancare de la %s.", GetName(id));
		SendMsg(id, COLOR_SERVER, "Accept Food >> {ffffff}%s ti-a platit $50,000 pentru mancare.", GetName(playerid));

		PlayerInfo[playerid][pMancare] = 100;
		UpdateFood(playerid);

		PlayerInfo[id][pRaport] ++;
		pUpdateInt(id, "Raport", PlayerInfo[id][pRaport]);

	} else { Info(playerid, "Campuri invalide."); return true; }	 	
	return true;
}
CMD:givepp(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, amount, reason[64]; 
	if(sscanf(params, "uis[64]", id, amount, reason)) return Info(playerid, "/givepp [name/playerid] [amount] [reason]");
	if(!IsPlayerConnected(id)) return Info(playerid, "ID-ul este invalid.");
	if(amount < 1 || amount > 1000) return Info(playerid, "Suma invalida.");
	PlayerInfo[id][pPremiumPoints] += amount; 
	pUpdateInt(id, "PremiumPoints", PlayerInfo[id][pPremiumPoints]);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s i-a dat %d PP lui %s, motiv: %s.", 1, GetName(playerid), amount, GetName(id), reason);
	Info(id, "Admin-ul %s ti-a dat %d PP", GetName(playerid), amount);
	return true;
}
CMD:cr(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/cr [name/playerid]");
	if(!IsPlayerConnected(id)) return Info(playerid, "Acel player nu este conectat.");
	if(!Iter_Contains(Reports, id)) return Info(playerid, "Acel player nu are un report activ.");
	Iter_Remove(Reports, id);
	new string[144];
	GetPVarString(id, "Report", string, 144);
	SendAdmins(COLOR_RED, "%s closed '%s'.", 1, GetName(playerid), string);
	Info(id, "Reportul tau este in curs de rezolvare.");
	DeletePVar(id, "Report");
	PlayerInfo[playerid][pHelpedPlayers] ++;
	pUpdateInt(playerid, "HelpedPlayers", PlayerInfo[playerid][pHelpedPlayers]);
	return true;
}
function LastPunish(playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	new time[64], name[32], name2[32], reason[64], actionid, actiontime;
	if(!cache_num_rows()) return Info(playerid, "Last Punish-ul este gol.");
	for(new i, j = cache_num_rows(); i != j; ++i)
	{
		cache_get_value_name(i, "time", time);
		cache_get_value_name(i, "reason", reason);
		cache_get_value_name_int(i, "actionid", actionid);
		cache_get_value_name_int(i, "actiontime", actiontime);
		cache_get_value_name(i, "playername", name);
		cache_get_value_name(i, "givername", name2);
		switch(actionid)
		{
			case 1: SendMsg(playerid, 0x02679eff, "[%s] Ban: %s has been permanent banned by %s, reason: %s.", time, name, name2, reason);
			case 2: SendMsg(playerid, 0x02679eff, "[%s] Ban: %s has been banned by %s for %d days, reason: %s.", time, name, name2, actiontime, reason);
			case 5: SendMsg(playerid, 0x02679eff, "[%s] Warn: %s received a warn from admin %s, reason: %s.", time, name, name2, reason);
			case 6: SendMsg(playerid, 0x02679eff, "[%s] Jail: %s was jailed by %s for %d minutes, reason: %s.", time, name, name2, actiontime, reason);
			case 7: SendMsg(playerid, 0x02679eff, "[%s] Mute: %s has been muted by %s for %d minutes, reason: %s.", time, name, name2, actiontime, reason);
		}
	}
	return true;
}
CMD:lp(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/lp [name/playerid]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "Jucatorul nu este conectat.");
	if(!Logat[id]) return Info(playerid, "Jucatorul nu este logat.");
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "SELECT * FROM `punishlogs` WHERE `playerid`='%d' ORDER BY `ID` DESC", PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL, gString, "LastPunish", "id", playerid, PlayerInfo[playerid][pSession]);
	return true;
}
CMD:cancelhit(playerid){
	if(PlayerInfo[playerid][pMember] != 5) return Info(playerid, "Nu faci parte din Hitman.");
	if(contract_get[playerid] < 0) return Info(playerid, "Nu ai un contract.");
	contract_get[playerid] = -1;
	SendFamilyMessage(5, 0x211CDEC8, "%s si-a anulat contractul.", GetName(playerid));
	Undercover[playerid] = false;
	foreach(new i : Player) ShowPlayerNameTagForPlayer(i, playerid, 1);
	PlayerTextDrawHide(playerid, Jailtime);
	Info(playerid, "Nu mai esti sub acoperire.");
	return true;
}
CMD:mycontract(playerid){
	if(PlayerInfo[playerid][pMember] != 5) return Info(playerid, "Nu faci parte din Hitman.");
	if(contract_get[playerid] < 0) return Info(playerid, "Nu ai un contract.");
	new contract = contract_get[playerid];
	Info(playerid, "Ai contract pe %s (%d, $%s).", GetName(contract), contract, FormatNumber(PlayerInfo[contract][pHeadValue]));
	return true;
}	
CMD:undercover(playerid){
	if(PlayerInfo[playerid][pMember] != 5) return Info(playerid, "Nu faci parte din Hitman.");
	if(!OnDuty[playerid]) return Info(playerid, "Nu esti la datorie.");	
	if(contract_get[playerid] == -1) return Info(playerid, "Nu ai un contract.");
	switch(Undercover[playerid]){
		case false: {
			Undercover[playerid] = true;
			foreach(new i : Player) ShowPlayerNameTagForPlayer(i,playerid, 0);
			PlayerTextDrawSetString(playerid, Jailtime, "Esti sub acoperire.");
			PlayerTextDrawShow(playerid, Jailtime);
			Info(playerid, "Esti sub acoperire.");
		}
		case true: {
			Undercover[playerid] = false;
			foreach(new i : Player) ShowPlayerNameTagForPlayer(i,playerid, 1);
			PlayerTextDrawHide(playerid, Jailtime);
			Info(playerid, "Nu mai esti sub acoperire.");
		}
	}
	return true;
}
CMD:contract(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 5) return Info(playerid, "Nu poti folosi aceasta comanda deoarece esti hitman.");
	new
		id,
		money
	;
	if(sscanf(params, "ui", id, money)) return Info(playerid, "/contract [name/playerid] [money]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID invalid.");
	if(money < 1 || money > 999999999) return Info(playerid, "Minimul este de 1$, iar maximul de $999, 999, 999.");
	if(id == playerid) return Info(playerid, "Nu poti folosi aceasta comanda pe tine.");
	if(PlayerInfo[id][pAdmin] || PlayerInfo[id][pMember] == 5) return Info(playerid, "Nu poti pune un contract pe acel jucator.");
	if(GetPlayerCash(playerid) < money) return Info(playerid, "Nu ai bani.");
	if(PlayerInfo[id][pHeadValue] != 0) return Info(playerid, "Exista deja un contract pe acel jucator.");
	GivePlayerCash(playerid, -money);
	PlayerInfo[id][pHeadValue] = money;
	pUpdateInt(id, "HeadValue", PlayerInfo[id][pHeadValue]);
	Iter_Add(Contracts, id);
	SendFamilyMessage(5, 0x211CDEC8, "Contract: %s, pret: $%s.", GetName(id), FormatNumber(PlayerInfo[id][pHeadValue]));
	Info(playerid, "Ai pus un contract de $%s pe %s!", FormatNumber(money), GetName(id));
	return true;
}
CMD:contracts(playerid){
	if(PlayerInfo[playerid][pMember] != 5) return Info(playerid, "Nu faci parte din Hitman.");
	if(OnDuty[playerid] != true) return Info(playerid, "Nu esti la datorie.");
	if(Iter_Count(Contracts) < 1) return Info(playerid, "Nu sunt contracte.");
	if(contract_get[playerid] != -1) return Info(playerid, "Ai deja un contract.");
	gString[0] = (EOS);
	foreach(new x : Contracts)
	{
		format(gString, sizeof(gString), "%s%s - %0.2fm\n", gString, GetName(x), GetDistanceBetweenPlayers(playerid, x));
	}
	SPD(playerid, DIALOG_CONTRACTS, DIALOG_STYLE_LIST, "Contracte", gString, "Alege", "Anuleaza");
	return true;
}
CMD:spawnchange(playerid)
{
	SPD(playerid, DIALOG_SPAWNCHANGE, DIALOG_STYLE_LIST, "Spawn Change", "Locul normal\nCasa\nSediul Clanului", "Alege", "Anuleaza");
	return true;
}
CMD:specoff(playerid){
	if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pHelper]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	if(Spectate[playerid] == -1) return Info(playerid, "Nu esti spectator pe nimeni.");
	TogglePlayerSpectating(playerid, false);
	return true;
}
CMD:fly(playerid)
{
	if(PlayerInfo[playerid][pAdmin] < 1)
		return SendMsg(playerid, COLOR_SERVER, AdminOnly);

	if(IsPlayerInAnyVehicle(playerid))
	{
		new
			vehicleid = GetPlayerVehicleID(playerid),
			Float: VelX,
			Float: VelY,
			Float: VelZ
		;
		GetVehicleVelocity(vehicleid, VelX, VelY, VelZ);
		SetVehicleVelocity(vehicleid, VelX, VelY, VelZ + 0.5);
		return true;
	}

	if(StartFly(playerid) == true)
	{
		SetPlayerHP(playerid, 100000);
		SetPlayerArmour(playerid, 100000);
	}

	else
	{
		StopFly(playerid);
		SetPlayerHP(playerid, 100);
		SetPlayerArmour(playerid, 0);
	}

	return true;
}

function MoveHouseToState(id)
{
	format(HouseInfo[id][hOwner], 8, "Server");
	HouseInfo[id][hRent] = 1;
	HouseInfo[id][hPrice] = 0;
	HouseInfo[id][hTakings] = 0;
	HouseInfo[id][hGarageX] = 0;
	HouseInfo[id][hGarageY] = 0;
	HouseInfo[id][hGarageZ] = 0;
	HouseInfo[id][hGarageLocked] = false;
	UpdateLabel(1, id);
	Query_Mysql("UPDATE `houses` SET `Owner`='%s',`Rent`='%d', `Prices` = '%d', `Takings` = '%d', `GarageX` = '%d', `GarageY` = '%d', `GarageZ` = '%d', `GarageLocked` = '%d' WHERE `ID`='%d'", 
		HouseInfo[id][hOwner], HouseInfo[id][hRent], HouseInfo[id][hPrice], HouseInfo[id][hTakings], HouseInfo[id][hGarageX], HouseInfo[id][hGarageY], HouseInfo[id][hGarageZ], HouseInfo[id][hGarageLocked], id);
	Query_Mysql("UPDATE `users` SET `House` = '0', `SpawnChange` = '0' WHERE `House` = '%d'", id);
	foreach(new i : Player)
	{ 
		if(PlayerInfo[i][pHouse] == id)
		{
			PlayerInfo[i][pHouse] = 0;
			PlayerInfo[i][pSpawnChange] = 0;
			break;
		}
	}
	return true;
}

CMD:movehousetostate(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "i", id)) return Info(playerid, "/movehousetostate [house id]");
	MoveHouseToState(id);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a mutat casa %d la stat.", 1, GetName(playerid), id);
	return true;
}

function MoveBusinessToState(id)
{
	BizzInfo[id][bTill] = 0;
	format(BizzInfo[id][bOwner], 8, "Server");
	BizzInfo[id][bEntranceCost] = 1;
	BizzInfo[id][bPrice] = 0;
	Query_Mysql("UPDATE `bizz` SET `Till`='%d',`Owner`='%s',`EntranceCost`='%d', `Prices` = '%d' WHERE `ID`='%d'",
		BizzInfo[id][bTill], BizzInfo[id][bOwner], BizzInfo[id][bEntranceCost], BizzInfo[id][bPrice], id);
	Query_Mysql("UPDATE `users` SET `Bizz` = '0' WHERE `Bizz` = '%d'", id);
	UpdateLabel(2, id); 
	foreach(new i : Player)
	{ 
		if(PlayerInfo[i][pBizz] == id)
		{
			PlayerInfo[i][pBizz] = 0;
			break;
		}
	}
	return true;
}
CMD:movebusinesstostate(playerid, params[]){	
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "i", id)) return Info(playerid, "/movebusinesstostate [business id]");
	MoveBusinessToState(id);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a mutat afacerea %d la stat.", 1, GetName(playerid), id);
	return true;
}
CMD:addtobid(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
		return SendMsg(playerid, COLOR_SERVER, AdminOnly);

	if(BidType != 0)
		return Info(playerid, "Deja este o licitatie activa.");

	new
		option[16],
		id,
		sid
	;

	if(sscanf(params, "s[16]i", option, id))
		return Info(playerid, "/addtobid [casa / afacerea / jobul / panoul] [id]");

	switch(YHash(option))
	{
		case _H<casa>:
		{
			if(id < 1 || id > CaseJ)
				return Info(playerid, "ID invalid.");

			if(!strmatch("Server", HouseInfo[id][hOwner]))
				return Info(playerid, "Aceasta casa este detinuta de cineva.");

			sid = 1;
		}
		case _H<afacerea>:
		{
			if(id < 1 || id > Bizuri)
				return Info(playerid, "ID invalid.");

			if(!strmatch("Server", BizzInfo[id][bOwner]))
				return Info(playerid, "Aceasta afacere este detinuta de cineva.");

			sid = 2;
		}
		case _H<jobul>:
		{
			if(id < 1 || id > MAX_JOBS)
				return Info(playerid, "ID invalid.");

			if(!strmatch("Server", JobInfo[id][jOwner]))
				return Info(playerid, "Acest Job este detinut de cineva.");

			sid = 3;
		}
		case _H<panoul>:
		{
			if(id < 1 || id > LoadedBillboards)
				return Info(playerid, "ID invalid.");

			if(!strmatch("Server", Billboards[id][bOwner]))
				return Info(playerid, "Acest panou este detinut de cineva.");

			sid = 4;
		}
		default:
		{
			Info(playerid, "Optiune invalida.");
			return true;
		}
	}
	resetBigInt(BidMoney);
	lastplayerbid = -1;
	ObiectLicitat = id;
	BidType = sid;
	va_SendClientMessageToAll(COLOR_SERVER, "Licitatii >> {ffffff}O licitatie a inceput (%s: %d).", option, id);
	SendClientMessageToAll(COLOR_SERVER, "Licitatii >> {ffffff}Pentru a licita folositi comanda /bid, trebuie sa aveti banii in banca.");
	SendClientMessageToAll(COLOR_SERVER, "Licitatii >> {ffffff}Daca in 30 de secunde nu liciteaza nimeni, licitatia se anuleaza.");
	timer_licitatie = defer timer_bid();
	return true;
}
CMD:bid(playerid, params[])
{
	if(BidType < 1)
		return Info(playerid, "Nu este o licitatie activa.");

	if(lastplayerbid == playerid)
		return Info(playerid, "Deja ai licitat.");

	if(BidType == 1 && PlayerInfo[playerid][pHouse] != 0)
		return Info(playerid, "Ai deja o Casa.");
	
	if(BidType == 2 && PlayerInfo[playerid][pBizz] != 0)
		return Info(playerid, "Ai deja o Afacere.");
	
	if(BidType == 3 && PlayerInfo[playerid][pOwnedJob] != 0)
		return Info(playerid, "Ai deja un Job.");

	if(BidType == 4 && PlayerInfo[playerid][pBillboard] != 0)
		return Info(playerid, "Ai deja un Panou.");

	new
		bani[32]
	;

	new BigInt:TempMoney;

	if(sscanf(params, "s[32]", bani))
	{
		Info(playerid, "/bid [bani]");
		switch(BidType)
		{
			case 1:
			{
				Info(playerid, "Casa %d este scoasa la licitatie.", ObiectLicitat);
			}
			case 2:
			{
				Info(playerid, "Afacerea %d este scoasa la licitatie.", ObiectLicitat);
			}
			case 3:
			{
				Info(playerid, "Locul de munca %d este scos la licitatie.", ObiectLicitat);
			}
			case 4:
			{
				Info(playerid, "Panoul %d este scos la licitatie.", ObiectLicitat);
			}
		}
		if(lastplayerbid != -1) Info(playerid, "%s conduce licitatia cu $%s.", GetName(lastplayerbid), formatBytes(BidMoney));		
		return true;
	}

	if(!IsNumeric(bani))
		return Info(playerid, "/bid [bani]");

	converBytes(TempMoney, bani);

	if(bytes32(TempMoney) < 1)
		return SendMsg(playerid, COLOR_SERVER, "Bid >> {ffffff}Suma este invalida.");

	if(bytes32(TempMoney) < 5_000_000)
		return SendMsg(playerid, COLOR_SERVER, "Bid >> {ffffff}Suma minima este de $5,000,000.");

	if(!HaveCashForDs(playerid, valueBigInt(TempMoney), 1) && !HaveCashForDs(playerid, valueBigInt(TempMoney), 2))
		return SendMsg(playerid, COLOR_SERVER, "Bid >> {ffffff}Nu ai $%s.", formatBytes(TempMoney));

	if(bytes32(BidMoney) != 0)
	{	
		new BigInt:DifMoney;
		if(OPByte(BidMoney, <, #999999999))
		{
			addBytes32(DifMoney, bytes32(BidMoney));
		}
		else
		{
			addBytes64(DifMoney, valueBigInt(BidMoney));
		}
		addBytes32(DifMoney, 5_000_000);

		if(OPByte(DifMoney, >=, valueBigInt(TempMoney)))
		{
			SendMsg(playerid, COLOR_SERVER, "Bid >> {ffffff}Trebuie sa licitezi peste $%s.", formatBytes(DifMoney));
			return true;
		}
	}

	lastplayerbid = playerid;

	resetBigInt(BidMoney);
	if(OPByte(TempMoney, <, #999999999))
	{
		addBytes32(BidMoney, bytes32(TempMoney));
	}
	else
	{
		addBytes64(BidMoney, valueBigInt(TempMoney));
	}

	va_SendClientMessageToAll(COLOR_SERVER, "Licitatii >> {ffffff}%s a licitat suma de $%s.", GetName(playerid), formatBytes(BidMoney));
	va_SendClientMessageToAll(COLOR_SERVER, "Licitatii >> {ffffff}Daca in 30 de secunde nu liciteaza nimeni, %s va castiga licitatia.", GetName(playerid));
	stop timer_licitatie;
	timer_licitatie = defer timer_bid();
	return true;
}
CMD:cuff(playerid, params[]){
	if(!IsACop(playerid)) return Info(playerid, "Nu esti Politist.");
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/cuff [name/playerid]");
	if(!IsPlayerConnected(id)) return Info(playerid, "Acel player nu este conectat.");
	if(PlayerInfo[id][pWantedLevel] < 1) return Info(playerid, "Acel player nu are wanted.");
	if(id == playerid) return Info(playerid, "Nu poti folosi aceasta comanda pe tine.");
	if(GetDistanceBetweenPlayers(playerid, id) > 6.0) return Info(playerid, "Acel player nu se afla langa tine.");
	if(PlayerCuffed2[id]) return Info(playerid, "This player is already cuffed.");
	Info(id, "You were Cuffed by %s, till uncuff.", GetName(playerid));
	Info(playerid, "You Cuffed %s, till uncuff.", GetName(id));
	FreezePlayer(id, true);
	PutPlayerInVehicleEx(id, GetPlayerVehicleID(playerid), 1);
	PlayerCuffed2[id] = true;
	SetPlayerAttachedObject(id, 1, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	SetPlayerSpecialAction(id, SPECIAL_ACTION_CUFFED);
	return true;
}
CMD:uncuff(playerid, params[]){
	if(!IsACop(playerid)) return Info(playerid, "Nu esti Politist.");
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/uncuff [name/playerid]");
	if(!IsPlayerConnected(id)) return Info(playerid, "Acel player nu este conectat.");
	if(id == playerid) return Info(playerid, "Nu poti folosi aceasta comanda pe tine.");
	if(GetDistanceBetweenPlayers(playerid, id) > 6.0) return Info(playerid, "Acel player nu se afla langa tine.");
	if(PlayerCuffed2[id] != true) return Info(playerid, "This player is not cuffed.");
	Info(id, "You were uncuffed by %s.", GetName(playerid));
	Info(playerid, "You uncuffed %s", GetName(id));
	PlayerCuffed2[id] = false;
	RemovePlayerAttachedObject(playerid, 1);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	FreezePlayer(id, false);
	return true;
}
CMD:resetstock(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new vehicles, amount;
	if(sscanf(params, "ii", vehicles, amount)) return Info(playerid, "/resetstock [vehicles] [amount]");
	if(amount < 1 || vehicles < 1 || vehicles - 1 > stockss) return Info(playerid, "Invalid number.");
	for(new x; x < vehicles; x++){
		StockInfo[x][vStock] = amount;
		Query_Mysql("UPDATE `stock` SET `stock` = '%d' WHERE `ID` = '%d'", amount, StockInfo[x][vID]);
	}
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a resetat stocul vehiculelor pana la %d la %d.", 1, GetName(playerid), vehicles, amount);
	return true;
}
CMD:mute(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, time, reason[64];
	if(sscanf(params, "uis[64]", id, time, reason)) return Info(playerid, "/mute [name/playerid] [time] [reason]");
	if(!IsPlayerConnected(id)) return Info(playerid, "Acel player nu este conectat.");
	if(id == playerid) return Info(playerid, "Nu iti poti da mute singur.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[id][pAdmin]) return Info(playerid, "Nu poti folosi aceasta comanda pe un admin mai mare decat tine.");
	if(PlayerInfo[id][pMuteTime]) return Info(playerid, "Acel player are deja mute.");
	if(time < 1 || time > 30) return Info(playerid, "Invalid time.");
	va_SendClientMessageToAll(COLOR_SANCTION, "Mute >> %s a fost amutit de %s pentru %d minute, motiv: %s.", GetName(id), GetName(playerid), time, reason);
	PlayerInfo[id][pMuteTime] = time;
	return true;
}	
CMD:unmute(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/unmute [name/playerid]");
	if(!IsPlayerConnected(id)) return Info(playerid, "Acel player nu este conectat.");
	if(PlayerInfo[id][pMuteTime] < 1) return Info(playerid, "Acel player nu are mute.");
	PlayerInfo[id][pMuteTime] = 0;
	Info(id, "Ai primit unmute de la %s.", GetName(playerid));
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s i-a dat unmute lui %s.", 1, GetName(playerid), GetName(id));
	return true;
}
new
	obiectdrop = -1,
	Float: viatadrop,
	Text3D:textdrop
;
function Drop()
{
	new
		Hour
	;

	gettime(Hour);

	if(obiectdrop != -1)
	{
		UpdateDynamic3DTextLabelText(textdrop, -1, "");
		DestroyDynamicObject(obiectdrop);
		obiectdrop = -1;
		DestroyDynamic3DTextLabel(textdrop);
		viatadrop = 0;
	}

	foreach(new i : Player)
	{
		if(DamageDrop[i] != 0)
		{
			DamageDrop[i] = 0;
		}
	}

	new
		Float:gRandomDrop[10][6] =
		{
			{1393.72412, -744.75275, 96.34622, 1.73999, 8.99998, 0.00000},
			{2027.27161, -1191.49438, 21.07639, 0.00000, 0.00000, 0.00000},
			{2798.90991, -1863.67908, 9.47092, 0.00000, 0.00000, 0.00000},
			{1777.72131, -2543.47266, 13.16978, 0.00000, 0.00000, 0.00000},
			{1193.44678, -2024.79736, 68.52914, 0.00000, 0.00000, 0.00000},
			{-263.98599, -1449.64233, 5.83130, 8.87999, -3.18000, 0.00000},
			{303.45706, -737.51086, 5.13864, 0.00000, 0.00000, 0.00000},
			{341.58585, 5.94393, 5.10083, 12.06002, 0.71998, 0.00000},
			{-567.00085, -161.43692, 77.75048, -3.00000, 0.42000, 0.66000},
			{-975.88733, -1441.45032, 129.43234, 0.00000, 0.00000, 0.00000}
		},
		rand = random(sizeof(gRandomDrop))
	;

	obiectdrop = CreateDynamicObject(19056, gRandomDrop[rand][0], gRandomDrop[rand][1], gRandomDrop[rand][2], gRandomDrop[rand][3], gRandomDrop[rand][4], gRandomDrop[rand][5]);

	viatadrop = 2500;

	gString[0] = (EOS);
	format(gString, 128, "{00a326}Drop\n{ffffff}Viata: {00a326}%0.2f", viatadrop);
	textdrop = CreateDynamic3DTextLabel(gString, -1, gRandomDrop[rand][0], gRandomDrop[rand][1], gRandomDrop[rand][2], 15.0, INVALID_PLAYER_ID, INVALID_PLAYER_ID, 0, 0, 0, -1, 100.0);

	SendClientMessageToAll(COLOR_SERVER, "Drop >> {ffffff}A fost lansat un cadou! Foloseste [/finddrop] pentru a vedea unde se afla.");

	return true;
}
CMD:kickall(playerid){
	if(!Scripter(playerid)) return false; 
	foreach(new i : Player) defer KickEx(i, PlayerInfo[i][pSession]);
	return true;
}
CMD:servername(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new name[32]; if(sscanf(params, "s[32]", name)) return Info(playerid, "/servername [+text]");
	gString[0] = EOS; format(gString, 64, "hostname Jade.OG-Life.Ro | %s", name);
	SendRconCommand(gString);
	return true;
}
CMD:sett(playerid, params[]){
	new hour; if(sscanf(params, "i", hour)) return Info(playerid, "/sett <0-24>");
	if(hour > 24 || hour < 0) return Info(playerid, "Ora invalida.");
	SetPlayerTime(playerid, hour, 0);
	Info(playerid, "Ti-ai setat ora jocului la %d.", hour);
	return true;
}
CMD:setw(playerid, params[]){
	new weather; if(sscanf(params, "i", weather)) return Info(playerid, "/setw <0-20>");
	if(weather > 20 || weather < 0) return Info(playerid, "Vreme invalida.");
	SetPlayerWeather(playerid, weather);
	Info(playerid, "Ti-ai setat vremea jocului la %d.", weather);
	return true;
}
CMD:findrentveh(playerid){
	if(RentVeh[playerid] < 1) return Info(playerid, "Nu ai un vehicul inchiriat.");
	LocateVeh(playerid, RentVeh[playerid]);
	return true;
}
CMD:myraport(playerid){
	if(PlayerInfo[playerid][pMember] < 1) return Info(playerid, "Nu faci parte dintr-o factiune.");
	SendMsg(playerid, COLOR_SERVER, "My Raport >> {ffffff}Ai %d puncte de raport.", PlayerInfo[playerid][pRaport]);
	if(IsAGangMember(playerid))
	{
		SendMsg(playerid, COLOR_SERVER, "My Raport >> {ffffff}Ucideri: %d, Decese: %d.", PlayerInfo[playerid][pKills], PlayerInfo[playerid][pDeaths]);
	}
	return true;
}
CMD:resetraport(playerid){
	if(PlayerInfo[playerid][pRank] < 7) return Info(playerid, "Nu esti leader.");
	SPD(playerid, DIALOG_RESETRAPORT, DIALOG_STYLE_MSGBOX, "Raport", "Doresti sa resetezi raport-ul membriilor?", "Da", "Nu");
	return true;
}
function ShowRaports(playerid, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	Info(playerid, "Raport-ul membriilor:");
	for(new i, j = cache_num_rows(); i < j; i++){
		new raport, name[25], rank;
		cache_get_value_name(i, "name", name);
		cache_get_value_name_int(i, "Raport", raport);
		cache_get_value_name_int(i, "Rank", rank);
		Info(playerid, "%s - rank %d - %d puncte", name, rank, raport);		
	}
	return true;
}
CMD:raports(playerid){
	if(PlayerInfo[playerid][pRank] < 6) return Info(playerid, "Nu esti lider sau colider.");
	gString[0] = EOS;
	mysql_format(SQL, gString, 256, "SELECT * FROM `users` WHERE `Member`='%d' ORDER BY `users`.`Raport` DESC", PlayerInfo[playerid][pMember]);
	mysql_tquery(SQL, gString, "ShowRaports", "id", playerid, PlayerInfo[playerid][pSession]);
	return true;
}
CMD:gcp(playerid)
{
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new
		Float: X = GetPVarFloat(playerid, "xloc"),
		Float: Y = GetPVarFloat(playerid, "yloc"),
		Float: Z = GetPVarFloat(playerid, "zloc")
	;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		PlayerPosii[playerid][0] = X; 
		PlayerPosii[playerid][1] = Y;
		PlayerPosii[playerid][2] = Z;
		SetPVarInt(playerid, "ftps", 0);
		SetPVarInt(playerid, "tps", 0);
		SetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
	}
	else
	{
		SetPlayerPosEx(playerid, X, Y, Z);
	}
	SetPVarInt(playerid, "magie", 0);
	return true;
}
CMD:lock(playerid) return Lock(playerid);
CMD:finddrop(playerid){
	if(HaveCheckpoint(playerid)) return true;
	if(obiectdrop == -1) return Info(playerid, "Nu este un drop activ.");
	new Float: X, Float: Y, Float: Z;
	GetDynamicObjectPos(obiectdrop, X, Y, Z);
	SetPlayerCheckpointEx(playerid, X, Y, Z, 5);
	CP[playerid] = 43;
	Info(playerid, "Urmeaza checkpoint-ul pentru a ajunge la drop.");
	return true;
}
function LeaveStunt(playerid)
{
	for(new i = 0; i < sizeof(ObjectsStunt); i++)
	{
		DestroyPlayerObject(playerid, StuntObjects[playerid][i]);
		StuntObjects[playerid][i] = 0;
	}
	DestroyDynamicPickup(StuntPickup[playerid]);
	StuntPickup[playerid] = 0;
	DestroyVehicleEx(StuntVehicle[playerid]);
	StuntVehicle[playerid] = -1;
	PlayerTextDrawHide(playerid, StuntPTD);
	Iter_Remove(InStunt, playerid);
	SetPlayerPosEx(playerid, LocationPos[6][0], LocationPos[6][1], LocationPos[6][2]);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	DisablePlayerCheckpoint(playerid);
	CP[playerid] = 0;
	return true;
}
CMD:leave(playerid){
	if(!Iter_Contains(InParkour, playerid) && !Iter_Contains(InPaint, playerid) && !Iter_Contains(InSkyWars, playerid) && !Iter_Contains(InStunt, playerid))
		return Info(playerid, "Nu esti la Parkour / Paintball / Sky Wars / Stunt.");
	if(Iter_Contains(InParkour, playerid))
	{
		Info(playerid, "Te-ai oprit din a face parkour.");
		Iter_Remove(InParkour, playerid);
		defer Spawn(playerid, PlayerInfo[playerid][pSession]);
		SetPVarInt(playerid, "TrebuieTeleportat", 1);
	}
	if(Iter_Contains(InPaint, playerid))
	{
		Iter_Remove(InPaint, playerid);
		PlayerTextDrawHide(playerid, PaintTD);
		for(new i; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
		format(String, 64, "%s a parasit arena paintball.", GetName(playerid));
		SendPaintMessage(0xFFFF00AA, String);
		defer Spawn(playerid, PlayerInfo[playerid][pSession]);
		SetPVarInt(playerid, "TrebuieTeleportat", 1);
		if(Iter_Count(InPaint) < 2)
		{
			foreach(new x : InPaint)
			{
				if(x != playerid)
				{
					Info(x, "Runda s-a terminat din lipsa de jucatori!");
					Info(x, "Scorul tau: %d", paintkills[x]);
					PlayerTextDrawSetString(playerid, PaintTD, "Se asteapta jucatori...");
					paintkills[x] = 0;
					painttime = -1;
					for(new i; i != 5; ++i) SendDeathMessageToPlayer(x, 1001, 1001, 1001);
					ResetPlayerWeapons(x);
					break;
				}
			}
		}
	}
	if(Iter_Contains(InSkyWars, playerid))
	{	
		LeaveSkyWars(playerid);
	}
	if(Iter_Contains(InStunt, playerid))
	{
		LeaveStunt(playerid);
	}
	return true;
}
CMD:m(playerid){
	SPD(playerid, DIALOG_MENU, DIALOG_STYLE_LIST, "Meniu", "Statisticile Tale\nLocatiile Serverului\nVehiculele Tale\nAnuleaza Checkpoint-ul\nParaseste-ti Jobul\nIncuie/Descuie Vehiculul\nTask-urile Tale\nFactiunile Serverului\nSkills\nRealizari", "Alege", "Anuleaza");
	return true;
}
CMD:unbanip(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 5) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new ip[20]; 
	if(sscanf(params, "s[16]", ip)) return Info(playerid, "/unbanip [ip]");
	format(String, 32, "unbanip %s", ip); 
	SendRconCommand(String);
	SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a debanat ip-ul %s.", 1, GetName(playerid), ip); 
	return true;
}
function SaveAccount(playerid){

	Query_Mysql("update users set Money = %s where id = %d", valueBigInt(PlayerCash[playerid]), PlayerInfo[playerid][pSQLID]);

	Query_Mysql("update users set Bank = %s where id = %d", valueBigInt(PlayerBank[playerid]), PlayerInfo[playerid][pSQLID]);

	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pBattlepassProgress][0]);
	for(new i = 1; i < 18; i++) format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pBattlepassProgress][i]);
	pUpdateStr(playerid, "BattlepassProgress", gString);
	pUpdateInt(playerid, "BattlepassTier", PlayerInfo[playerid][pBattlepassTier]);
	pUpdateInt(playerid, "BattlepassXP", PlayerInfo[playerid][pBattlepassXP]);

	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pSkills][1]);
	for(new i = 2; i <= MAX_JOBS; i++) format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pSkills][i]);
	pUpdateStr(playerid, "Skills", gString);

	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pTure][1]);
	for(new i = 2; i <= MAX_JOBS; i++) format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pTure][i]);
	pUpdateStr(playerid, "Ture", gString);

	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pFragments][1]);
	for(new i = 2; i < 9; i++) format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pFragments][i]);
	pUpdateStr(playerid, "Fragments", gString);

	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pWeapons][1]);
	for(new i = 2; i < 7; i++) format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pWeapons][i]);
	pUpdateStr(playerid, "Weapons", gString);
		
	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pSkins][0]);
	for(new i = 1; i < 10; i++) format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pSkins][i]);
	pUpdateStr(playerid, "Skins", gString);

	pUpdateInt(playerid, "Mancare", PlayerInfo[playerid][pMancare]);
	pUpdateInt(playerid, "Apa", PlayerInfo[playerid][pApa]);

	pUpdateInt(playerid, "Burger", PlayerInfo[playerid][pBurger]);
	pUpdateInt(playerid, "Soda", PlayerInfo[playerid][pSoda]);

	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pSettings][0]);
	for(new i = 1; i < 13; i++) format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pSettings][i]);
	pUpdateStr(playerid, "Settings", gString);

	pUpdateInt(playerid, "GiftBoxSeconds", PlayerInfo[playerid][pGiftBoxSeconds]);

	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pDrugs][0]);
	for(new i = 1; i < 4; i++) format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pDrugs][i]);
	pUpdateStr(playerid, "Drugs", gString);

	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pPotions][0]);
	for(new i = 1; i < 4; i ++)
	{
		format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pPotions][i]);
	}
	pUpdateStr(playerid, "Potions", gString);

	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pActivePotions][0]);
	for(new i = 1; i < 4; i ++)
	{
		format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pActivePotions][i]);
	}
	pUpdateStr(playerid, "ActivePotions", gString);

	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pPerkProgress][0]);
	for(new i = 1; i < 13; i ++)
	{
		format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pPerkProgress][i]);
	}
	pUpdateStr(playerid, "PerkProgress", gString);
	pUpdateInt(playerid, "PerkPoints", PlayerInfo[playerid][pPerkPoints]);

	pUpdateInt(playerid, "TureJobToday", TureJobToday[playerid]);
	pUpdateInt(playerid, "TureArmsToday", TureArmsToday[playerid]);
	pUpdateInt(playerid, "TureDrugToday", TureDrugToday[playerid]);
	pUpdateInt(playerid, "KPaintToday", KPaintToday[playerid]);
	pUpdateInt(playerid, "GiftsToday", GiftsToday[playerid]);

	gString[0] = (EOS);
	format(gString, 128, "%d", PerkActive[playerid][0]);
	for(new i = 1; i < 39; i++)
	{
		format(gString, 128, "%s|%d", gString, PerkActive[playerid][i]);
	}
	pUpdateStr(playerid, "PerkActive", gString);

	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pHeists][0]);
	for(new i = 1; i < 3; i ++)
	{
		format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pHeists][i]);
	}
	pUpdateStr(playerid, "Heists", gString);

	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pTodayTasks][0]);
	for(new i = 1; i < 3; i ++)
	{
		format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pTodayTasks][i]);
	}
	pUpdateStr(playerid, "TodayTasks", gString);

	gString[0] = (EOS);
	format(gString, 128, "%d", PlayerInfo[playerid][pVouchers][0]);
	for(new i = 1; i < 5; i ++)
	{
		format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pVouchers][i]);
	}
	pUpdateStr(playerid, "Vouchers", gString);

	gString[0] = (EOS);
	format(gString, 8, "%d", PlayerInfo[playerid][pActiveStatus][0]);
	for(new i = 1; i < 2; i ++)
	{
		format(gString, 128, "%s|%d", gString, PlayerInfo[playerid][pActiveStatus][i]);
	}
	pUpdateStr(playerid, "ActiveStatus", gString);

	return true;
}
timer DispareTextdraw2[10000](playerid, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	HidePlayerProgressBar(playerid, LevelBar);
	for(new i; i < 3; i++) PlayerTextDrawHide(playerid, LevelTD[i]);
	BarLevel[playerid] = false;
	return true;
}
function UpdateLevelBar(playerid){
	if(BarLevel[playerid]){
		for(new i; i < 3; i++) PlayerTextDrawHide(playerid, LevelTD[i]);
		HidePlayerProgressBar(playerid, LevelBar);
		stop DispareTextdraw[playerid];
	}
	va_PlayerTextDrawSetString(playerid, LevelTD[0], "%d", PlayerInfo[playerid][pLevel]);
	va_PlayerTextDrawSetString(playerid, LevelTD[1], "%d", PlayerInfo[playerid][pLevel] + 1);
	va_PlayerTextDrawSetString(playerid, LevelTD[2], "%d/%d", PlayerInfo[playerid][pRespect], PlayerInfo[playerid][pLevel] * 3);
	for(new i; i < 3; i++) PlayerTextDrawShow(playerid, LevelTD[i]);
	ShowPlayerProgressBar(playerid, LevelBar);
	SetPlayerProgressBarMaxValue(playerid, LevelBar, PlayerInfo[playerid][pLevel] * 3); 
	SetPlayerProgressBarValue(playerid, LevelBar, PlayerInfo[playerid][pRespect]);
	ShowPlayerProgressBar(playerid, LevelBar);
	DispareTextdraw[playerid] = defer DispareTextdraw2(playerid, PlayerInfo[playerid][pSession]);
	BarLevel[playerid] = true;
	return true;
}
function UpdateGlobalGoal(playerid){
	SetPlayerProgressBarMaxValue(playerid, GlobalGoalBar, 1_000_000_000.0);
	SetPlayerProgressBarValue(playerid, GlobalGoalBar, server_goal * 1.0);
	ShowPlayerProgressBar(playerid, GlobalGoalBar);
	return true;
}
function AfterCamera(playerid)
{
	TogglePlayerSpectating(playerid, 0);
	SetCameraBehindPlayer(playerid);
	PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
	DeletePVar(playerid, "NeedSpawn");

	Info(playerid, "Bine ai venit pe server, %s.", GetName(playerid));

	if(PlayerInfo[playerid][pAdmin])
	{
		SendAdmins(COLOR_SERVER, "Staff >> {ffffff}Admin-ul %s a intrat pe server.", 1, GetName(playerid));
		SendHelpers(COLOR_SERVER, "Staff >> {ffffff}Admin-ul %s a intrat pe server.", 1, GetName(playerid));
	}

	else if(PlayerInfo[playerid][pHelper])
	{
		SendAdmins(COLOR_SERVER, "Staff >> {ffffff}Helper-ul %s a intrat pe server.", 1, GetName(playerid));
		SendHelpers(COLOR_SERVER, "Staff >> {ffffff}Helper-ul %s a intrat pe server.", 1, GetName(playerid));
	}

	va_PlayerTextDrawSetString(playerid, NamePTD, "%s(~g~~h~%d~w~~h~)", GetName(playerid), playerid);
	PlayerTextDrawShow(playerid, NamePTD);
	TextDrawShowForPlayer(playerid, ServerTD);

	CheckTask(playerid);

	foreach(new i : Player)
	{
		ShowPlayerNameTagForPlayer(i,playerid, 1);
	}

	if(PlayerInfo[playerid][pMember] && FacInfo[PlayerInfo[playerid][pMember]][fMotd])
	{
		SendMsg(playerid, GetFactionColor(PlayerInfo[playerid][pMember]), "GMOTD >> {ffffff}%s", FacInfo[PlayerInfo[playerid][pMember]][fMotd]);
	}

	if(PlayerInfo[playerid][pClan] && ClanInfo[PlayerInfo[playerid][pClan]][cMotd])
	{
		SendMsg(playerid, GetClanColor(PlayerInfo[playerid][pClan]), "CMOTD >> {ffffff}%s", ClanInfo[PlayerInfo[playerid][pClan]][cMotd]);
	}

	if(PlayerInfo[playerid][pSettings][7] == true)
	{
		Iter_Add(WithFpsText, playerid);
		PlayerTextDrawShow(playerid, FPSText);
	}

	if(PlayerInfo[playerid][pSettings][8] == false)
	{
		TextDrawShowForPlayer(playerid, GlobalGoalTD);
		UpdateGlobalGoal(playerid);
	}

	if(!PlayerInfo[playerid][pTutorial] && !PlayerInfo[playerid][pBonus] && PlayerInfo[playerid][pLevel] < 3)
	{
		SendMsg(playerid, COLOR_SERVER, "Bonus de inceput >> {ffffff}Pentru a-ti primi bonusul foloseste comanda [/gps], alege 'Locatii Importante', apoi alege 'Bonus'.");
	}

	if(IsAndroidPlayer(playerid) == false)
	{
		TextDrawShowForPlayer(playerid, DateTD);
		Iter_Add(PcPlayers, playerid);
	}
	else
	{
		TextDrawShowForPlayer(playerid, DateATD);
		Iter_Add(AndroidPlayers, playerid);
	}

	UpdateFood(playerid);

	for(new i; i < 2; i++)
	{
		TextDrawShowForPlayer(playerid, FoodTD[i]);
	}

	for(new i; i < 2; i ++)
	{
		PlayerTextDrawShow(playerid, FoodPTD[i]);
	}

	if(PlayerInfo[playerid][pLevel] >= 5)
	{
		TextDrawShowForPlayer(playerid, GiftBoxTD);

		if(PlayerInfo[playerid][pGiftBoxSeconds] < 1)
		{
			PlayerTextDrawSetString(playerid, GiftBoxPTD, "~g~~h~Gift~n~~g~~h~Disponibil");
		}
		else
		{
			va_PlayerTextDrawSetString(playerid, GiftBoxPTD, "~g~~h~%s", CalculeazaTimp(PlayerInfo[playerid][pGiftBoxSeconds]));
		}

		PlayerTextDrawShow(playerid, GiftBoxPTD);
	}
	
	if(PlayerInfo[playerid][pDailyQuestToday] != true)
	{
		SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Quest-ul zilei este '%s', foloseste /dailyquest.", DailyQuestsName[TodayDailyQuest - 1]);
	}

	BankSafe[playerid] = CreatePlayerObject(playerid, 2332, 2310.67090, -6.02892, 26.13791, 0.00000, 0.00000, -148.67999);

	new
		bool: AllSkill6 = true
	;

	for(new i = 2; i <= MAX_JOBS; i++)
	{
		if(PlayerInfo[playerid][pSkills][i] < 6)
		{
			AllSkill6 = false;
			break;
		}
	}

	if(AllSkill6 != false)
	{
		ProgressToBattlepass(playerid, 15, 1);
	}

	if(HuntRamase() != 0)
	{
		SendMsg(playerid, COLOR_SERVER, "Gift Hunt >> {ffffff}Gaseste cat mai multe cadouri pe harta pentru a primi premii.");
		SendMsg(playerid, COLOR_SERVER, "Gift Hunt >> {ffffff}Cadourile sunt ascunse aleatoriu pe harta, s-au gasit %d/100.", 100 - HuntRamase());
		SendMsg(playerid, COLOR_SERVER, "Gift Hunt >> {ffffff}Pentru a vedea premiile tasteaza [/gifthuntrewards].");
		SendMsg(playerid, COLOR_SERVER, "Gift Hunt >> {ffffff}Pentru a vedea topul jucatorilor [/gifthuntlist].");
	}

	if(PlayerInfo[playerid][pLoggedToday] != true)
	{
		if(HavePremium(playerid))
		{
			GivePlayerCrate(playerid, 0);

			SendMsg(playerid, COLOR_SERVER, "Premium >> {ffffff}Ai primit un basic crate deoarece ai cont premium.");
		}

		PlayerInfo[playerid][pLoggedToday] = true;
		pUpdateInt(playerid, "LoggedToday", PlayerInfo[playerid][pLoggedToday]);
	}

	if(PlayerInfo[playerid][pPrizeToCollect] != 0)
	{
		switch(PlayerInfo[playerid][pPrizeToCollect])
		{
			case 1:
			{
				SendMsg(playerid, COLOR_SERVER, "Gift Hunt >> {ffffff}Ai primit un Stretch deoarece obtinut locul 1.");

				InsertVehicle(playerid, 0, true, false, 409);
			}
			case 2:
			{
				SendMsg(playerid, COLOR_SERVER, "Gift Hunt >> {ffffff}Ai primit un NRG-500 deoarece obtinut locul 2.");

				InsertVehicle(playerid, 60, true);
			}
			case 3:
			{
				SendMsg(playerid, COLOR_SERVER, "Gift Hunt >> {ffffff}Ai primit un Elegy deoarece obtinut locul 3.");

				InsertVehicle(playerid, 54, true);
			}
		}

		PlayerInfo[playerid][pPrizeToCollect] = 0;
		pUpdateInt(playerid, "PrizeToCollect", PlayerInfo[playerid][pPrizeToCollect]);
	}

	if(PlayerInfo[playerid][pActiveStatus][0] != 0)
	{
		UpdateStatusLabel(playerid);
	}

	return true;
}
timer CameraConnect[1500](playerid, step, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	new
		Float: CameraX,
		Float: CameraY,
		Float: CameraZ
	;
	switch(PlayerInfo[playerid][pSpawnChange])
	{
		case 0:
		{
			if(PlayerInfo[playerid][pMember] != 0)
			{
				new
					Faction = PlayerInfo[playerid][pMember]
				;
				CameraX = FacInfo[Faction][fceX];
				CameraY = FacInfo[Faction][fceY];
				CameraZ = FacInfo[Faction][fceZ];
			}
			else
			{
				CameraX = SpawnX;
				CameraY = SpawnY;
				CameraZ = SpawnZ;
			}
		}
		case 1:
		{
			new
				house
			;
			if(PlayerInfo[playerid][pHouse] != 0)
			{
				house = PlayerInfo[playerid][pHouse];
			}
			else if(PlayerInfo[playerid][pRented] != -1)
			{
				house = PlayerInfo[playerid][pRented];
			}
			CameraX = HouseInfo[house][hEntranceX];
			CameraY = HouseInfo[house][hEntranceY];
			CameraZ = HouseInfo[house][hEntranceZ];
		}
		case 2:
		{
			new
				clan = PlayerInfo[playerid][pClan],
				clanhqid = ClanToHQ[clan]
			;
			CameraX = ClanHQs[clanhqid][cX];
			CameraY = ClanHQs[clanhqid][cY];
			CameraZ = ClanHQs[clanhqid][cZ];
		}
	}
	switch(step)
	{
		case 1..4:
		{
			PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
			SetPlayerCameraPos(playerid, CameraX, CameraY, CameraZ + 250 - (50 * step));
			SetPlayerCameraLookAt(playerid, CameraX, CameraY, CameraZ);
			defer CameraConnect(playerid, step + 1, PlayerInfo[playerid][pSession]);
		}
		case 5:
		{
			AfterCamera(playerid);
		}
	}
	return true;
}
stock HexToInt(const string[])
{
	if(!string[0])
		return 0;

	new
		cur = 1,
		res = 0
	;

	for(new i = strlen(string); i > 0; i--)
	{
		res += cur * (string[i - 1] - ((string[i - 1] < 58) ? (48) : (55)));
		cur = cur * 16;
	}

	return res;
}
stock GetClanColor(cid)
{
	new
		color[11]
	;

	format(color, 11, "0x%sff", ClanInfo[cid][clanColor]);
	
	return HexToInt(color);
}

new
	FactionColors[9][7] =
	{
		"FFFFFF",
		"0049D0",
		"749B92",
		"A127E0",
		"EFC6FF",
		"7E3937",
		"8BBA2E",
		"EB3A34",
		"E5FF00"
	}
;

stock GetFactionColor(fid)
{
	new
		color[11]
	;

	format(color, sizeof(color), "0x%sFF", FactionColors[fid]);
	
	return HexToInt(color);
}
function SetPlayerFactionColor(playerid)
{
	new
		faction = PlayerInfo[playerid][pMember],
		culoare = GetFactionColor(faction)
	;

	SetPlayerColor(playerid, culoare);

	return true;
}

function UpdateFood(playerid){
	if(PlayerInfo[playerid][pApa] > 50) va_PlayerTextDrawSetString(playerid, FoodPTD[1], "~g~~h~%d%%", PlayerInfo[playerid][pApa]);
	else if(PlayerInfo[playerid][pApa] <= 50) va_PlayerTextDrawSetString(playerid, FoodPTD[1], "~r~~h~%d%%", PlayerInfo[playerid][pApa]);
	if(PlayerInfo[playerid][pMancare] > 50) va_PlayerTextDrawSetString(playerid, FoodPTD[0], "~g~~h~%d%%", PlayerInfo[playerid][pMancare]);
	else if(PlayerInfo[playerid][pMancare] <= 50) va_PlayerTextDrawSetString(playerid, FoodPTD[0], "~r~~h~%d%%", PlayerInfo[playerid][pMancare]);
	return true;
}

function RemoveBuildings(playerid)
{
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1682.7188, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1682.6719, 13.4531, 0.25);

	RemoveBuildingForPlayer(playerid, 5043, 1843.3672, -1856.3203, 13.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 5340, 2644.8594, -2039.2344, 14.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 5856, 1024.9844, -1029.3516, 33.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 5779, 1041.3516, -1025.9297, 32.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 6400, 488.2813, -1734.6953, 12.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 10575, -2716.3516, 217.4766, 5.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 11313, -1935.8594, 239.5313, 35.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 11319, -1904.5313, 277.8984, 42.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 10182, -1786.8125, 1209.4219, 25.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 9625, -2425.7266, 1027.9922, 52.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 9093, 2386.6563, 1043.6016, 11.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 8957, 2393.7656, 1483.6875, 12.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 7707, 2006.0000, 2317.6016, 11.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 7709, 2006.0000, 2303.7266, 11.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 7891, 1968.7422, 2162.4922, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3294, -1420.5469, 2591.1563, 57.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 3294, -100.0000, 1111.4141, 21.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 13028, 720.0156, -462.5234, 16.8594, 0.25);

	//Billboards
	RemoveBuildingForPlayer(playerid, 4236, 1387.0313, -1715.0234, 30.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 4235, 1387.0313, -1715.0234, 30.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 4754, 1850.5234, -1050.7422, 34.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 4729, 1850.5234, -1050.7422, 34.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 5854, 992.5313, -962.7344, 60.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 6350, 247.3906, -1454.8281, 37.7344, 0.25);

	//Crates
	RemoveBuildingForPlayer(playerid, 1280, 546.8984, -1820.9375, 5.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 546.8984, -1813.3125, 5.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 546.8984, -1806.5313, 5.4297, 0.25);

	return true;
}

function HideMilestone(playerid){
	for(new i; i < 8; i++) TextDrawHideForPlayer(playerid, MilestoneTD[i]);
	CancelSelectTextDraw(playerid);
	SetPVarInt(playerid, "InMilestone", 0);
	return true;
}
function CifrePin(playerid){
	new cifre;
	for(new i; i < 4; i++){
		if(PinText[playerid][i] != -1) cifre++;
	}
	return cifre;
}
function ClosePhone(playerid){
	DeletePVar(playerid, "InTelefon");
	for(new i; i < 23; i++) TextDrawHideForPlayer(playerid, PhoneTD[i]);
	CancelSelectTextDraw(playerid);
	return true;
}
function RentSelectedVehicle(playerid)
{
	new
		SelectedVeh = SelectedRentVehicle[playerid],
		Model = RentVehicles[SelectedVeh][0],
		Money = RentVehicles[SelectedVeh][1],
		Business = AtRentBiz[playerid],
		Float: X,
		Float: Y,
		Float: Z
	;

	GetPlayerPos(playerid, X, Y, Z);

	if(GetPlayerCash(playerid) < Money)
		return SendMsg(playerid, COLOR_SERVER, "Rent Vehicle >> {ffffff}Ai nevoie de $%s pentru a inchiria un %s.", FormatNumber(Money), GetVehicleName(Model));

	if(RentVeh[playerid] != -1)
	{
		DestroyVehicleEx(RentVeh[playerid]);
		RentVeh[playerid] = -1;
	}

	RentVeh[playerid] = CreateVehicleEx(Model, X, Y, Z, 0, 1, 1, -1, false, true);
	PutPlayerInVehicleEx(playerid, RentVeh[playerid], 0);
	SetVehicleParamsForPlayer(RentVeh[playerid],playerid, 0, 0);
	DestroyNeon(RentVeh[playerid]);

	GivePlayerCash(playerid, - Money);

	BizzInfo[Business][bTill] += Money;
	Query_Mysql("UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'", BizzInfo[Business][bTill], Business);

	SendMsg(playerid, COLOR_SERVER, "Rent Vehicle >> {ffffff}Ai inchiriat un %s pentru $%s.", GetVehicleName(Model), FormatNumber(Money));

	AtRentBiz[playerid] = 0;

	ExitRentVehicle(playerid);
	return true;
}

function ExitRentVehicle(playerid)
{
	for(new i = 0; i < 4; i++)
	{
		TextDrawHideForPlayer(playerid, RentVehicleTD[i]);
	}

	for(new i = 0; i < 2; i++)
	{
		PlayerTextDrawHide(playerid, RentVehiclePTD[i]);
	}

	InTextdrawMenu[playerid] = 0;
	SelectedRentVehicle[playerid] = 0;

	CancelSelectTextDraw(playerid);
	return true;
}
function ShowTuning(playerid)
{

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return ExitTuning(playerid);

	new
		vehicleid = GetPlayerVehicleID(playerid),
		model = GetVehicleModel(vehicleid),
		SelectedMod = SelectedModification[playerid],
		RotationMod = RotationModification[playerid],
		Modification = ValidModifications[model - 400][SelectedMod]
	;

	PlayerTextDrawSetString(playerid, TuningPTD[0], ModificationsName[Modification - 1000][1]);
	if(strval(ModificationsName[Modification - 1000][0]) >= 1194 && strval(ModificationsName[Modification - 1000][0]) <= 1196)
	{
		PlayerTextDrawSetPreviewModel(playerid, TuningPTD[1], 1672);
	}
	else
	{
		PlayerTextDrawSetPreviewModel(playerid, TuningPTD[1], strval(ModificationsName[Modification - 1000][0]));
	}
	PlayerTextDrawSetPreviewRot(playerid, TuningPTD[1], 0, 0, RotationMod);

	for(new i = 0; i < 2; i++)
	{
		PlayerTextDrawShow(playerid, TuningPTD[i]);
	}

	return true;
}
function ExitTuning(playerid)
{
	for(new i = 0; i < 5; i++)
	{
		TextDrawHideForPlayer(playerid, TuningTD[i]);
	}

	for(new i = 0; i < 2; i++)
	{
		PlayerTextDrawHide(playerid, TuningPTD[i]);
	}

	InTextdrawMenu[playerid] = 0;
	SelectedModification[playerid] = 1;
	RotationModification[playerid] = 0;

	CancelSelectTextDraw(playerid);
	return true;
}
function ExitSlots(playerid)
{
	for(new i = 0; i < 17; i++)
	{
		TextDrawHideForPlayer(playerid, SlotsTD[i]);
	}
	for(new i = 0; i < 9; i++)
	{
		PlayerTextDrawHide(playerid, SlotsPTD[i]);
	}
	InTextdrawMenu[playerid] = 0;
	CancelSelectTextDraw(playerid);
	if(Iter_Contains(InCasinoSlots, playerid))
	{
		Iter_Remove(InCasinoSlots, playerid);
	}
	return true;
}
function ExitFragmentCrafting(playerid)
{
	for(new i = 0; i < sizeof(FragmentTD); i++)
	{
		TextDrawHideForPlayer(playerid, FragmentTD[i]);
	}
	for(new i = 0; i < sizeof(FragmentPTD); i++)
	{
		PlayerTextDrawHide(playerid, FragmentPTD[i]);
	}
	CancelSelectTextDraw(playerid);
	InTextdrawMenu[playerid] = 0;
	return true;
}
function EnterInLucky(playerid)
{
	new
		Objects[2] = {1654, 1}
	;
	switch(LuckyType[playerid])
	{
		case 1:
		{
			new
				Vehicles[8] = {61, 59, 60, 2, 27, 18, 1, 6},
				FragmentSelected = SelectedFragment[playerid],
				StockID = Vehicles[FragmentSelected],
				VehModel = StockInfo[StockID][vModel]
			;
			Objects[1] = VehModel;
		}
		case 2:
		{
			Objects[1] = 1274;
		}
		case 3:
		{
			new
				Icon[3] = {0, 1274, 1240}
			;
			Objects[1] = Icon[UpgradeType[playerid]];
		}
	}
	for(new i = 0; i < 3; i++)
	{
		LuckyObject[playerid][i] = Objects[0];
		PlayerTextDrawSetPreviewModel(playerid, LuckyPTD[i], LuckyObject[playerid][i]);
	}
	for(new i = 0; i < sizeof(LuckyTD); i++)
	{
		TextDrawShowForPlayer(playerid, LuckyTD[i]);
	}
	for(new i = 0; i < sizeof(LuckyPTD); i++)
	{
		PlayerTextDrawShow(playerid, LuckyPTD[i]);
	}
	LuckyStep[playerid] = 1;
	Iter_Add(InLucky, playerid);
	return true;
}
function ExitUpgrader(playerid)
{
	for(new i = 0; i < sizeof(UpgraderTD); i++)
	{
		TextDrawHideForPlayer(playerid, UpgraderTD[i]);
	}
	for(new i = 0; i < sizeof(UpgraderPTD); i++)
	{
		PlayerTextDrawHide(playerid, UpgraderPTD[i]);
	}
	CancelSelectTextDraw(playerid);
	InTextdrawMenu[playerid] = 0;
	return true;
}
new
	BulletsPerGun[7] = {0, 100, 100, 100, 150, 200, 200},
	WeaponID[7] = {0, 23, 24, 25, 29, 30, 31}
;
function GiveInventory(playerid, Slot)
{
	if(PlayerInfo[playerid][pGunLic] < 1) return SendMsg(playerid, COLOR_SERVER, "Inventory >> {ffffff}Nu ai licenta de arme.");
	if(PlayerInfo[playerid][pWeapons][Slot] < BulletsPerGun[Slot]) return true;
	PlayerInfo[playerid][pWeapons][Slot] -= BulletsPerGun[Slot];
	GivePlayerWeapon(playerid, WeaponID[Slot], BulletsPerGun[Slot]);
	SendMsg(playerid, COLOR_SERVER, "Inventory >> {ffffff}Ai folosit %d gloante pentru %s.", BulletsPerGun[Slot], weapName(WeaponID[Slot]));
	va_PlayerTextDrawSetString(playerid, InventoryPTD[Slot], "x%d", PlayerInfo[playerid][pWeapons][Slot]);
	if(PlayerInfo[playerid][pWeapons][Slot] < BulletsPerGun[Slot])
	{
		TextDrawHideForPlayer(playerid, InventoryTD[Slot + 10]);
		PlayerTextDrawHide(playerid, InventoryPTD[Slot]);
	}
	return true;
}
function ExitFinishWar(playerid)
{
	if(InFinishWarTD[playerid])
	{
		for(new i = 0; i < sizeof(FinishWarTD); i++)
		{
			TextDrawHideForPlayer(playerid, FinishWarTD[i]);
		}
		InFinishWarTD[playerid] = false;
		CancelSelectTextDraw(playerid);
		PlayerTextDrawHide(playerid, FinishWarPTD);
	}
	return true;
}
function ShowPerkCategory(playerid, category)
{
	for(new i = 0; i < sizeof(PerkMenuTD); i++)
	{
		TextDrawHideForPlayer(playerid, PerkMenuTD[i]);
	}

	for(new i = 0; i < sizeof(CategoryPerksTD); i++)
	{
		TextDrawShowForPlayer(playerid, CategoryPerksTD[i]);
	}

	new
		CategoryNames[9][] = {"Job", "Fisher", "Trucker", "Weapons & Drugs", "Paint", "Murder & Health", "Cars & Racing", "Trader", "Gift"},
		PerksOnCategory[9] = {6, 2, 2, 6, 4, 4, 6, 6, 2},
		PerksPerCategory[9][6] =
		{
			{1, 2, 3, 4, 5, 6},
			{7, 8},
			{9, 10},
			{11, 12, 13, 14, 15, 16},
			{17, 18, 19, 20},
			{21, 22, 23, 24},
			{25, 26, 27, 28, 29, 30},
			{31, 32, 33, 34, 35, 36},
			{37, 38}
		},
		LastPerk = -1,
		MagicNumber
	;

	for(new i = 0; i < PerksOnCategory[category - 1]; i++)
	{
		new
			Perk = PerksPerCategory[category - 1][i]
		;
		
		if(PerkActive[playerid][Perk])
		{
			LastPerk = i + 1;
		}
	}

	MagicNumber = 2 * LastPerk - 1;

	va_PlayerTextDrawSetString(playerid, CategoryPerksPTD[0], "%s Perks", CategoryNames[category - 1]);

	for(new i = sizeof(CategoryPerksPTD) - 6; i < sizeof(CategoryPerksPTD); i++)
	{
		va_PlayerTextDrawSetString(playerid, CategoryPerksPTD[i], "%d", PerksPerCategory[category - 1][i - 12]);
	}

	for(new i = 1; i < sizeof(CategoryPerksPTD) - 6; i++)
	{
		if(LastPerk != -1 && i <= MagicNumber)
		{
			if(i % 2 != 0)
			{
				PlayerTextDrawColor(playerid, CategoryPerksPTD[i], 16711730);
			}
			else
			{
				PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[i], 16711730);
			}
		}
		else
		{
			if(i % 2 != 0)
			{
				PlayerTextDrawColor(playerid, CategoryPerksPTD[i], 1296911871);
			}
			else
			{
				PlayerTextDrawBoxColor(playerid, CategoryPerksPTD[i], 1296911871);
			}
		}
	}

	for(new i = 0; i < sizeof(CategoryPerksPTD); i++)
	{
		switch(PerksOnCategory[category - 1])
		{
			case 2:
			{
				if((i > 3 && i < 12) || i == 14 || i == 15|| i == 16 || i == 17)
				{
					continue;
				}
			}
			case 4:
			{
				if((i > 7 && i < 12) || i == 16 || i == 17)
				{
					continue;
				}
			}
		}
		PlayerTextDrawShow(playerid, CategoryPerksPTD[i]);
	}

	InTextdrawMenu[playerid] = 10 + category;
	return true;
}
public OnPlayerClickTextDraw(playerid, Text:clickedid){
	if(clickedid == INVALID_TEXT_DRAW)
	{
		switch(InTextdrawMenu[playerid])
		{
			case 1:
			{
				ExitRentVehicle(playerid);
			}
			case 2:
			{
				ExitTuning(playerid);
			}
			case 3:
			{
				if(Iter_Contains(InCasinoSlots, playerid))
				{
					SendMsg(playerid, COLOR_SERVER, "Slots >> {ffffff}Nu poti iesi acum.");
					SelectTextDraw(playerid, HOVER_COLOR);
				}
				else
				{
					ExitSlots(playerid);
				}
			}
			case 4:
			{
				ExitFragmentCrafting(playerid);
			}
			case 5:
			{
				ExitUpgrader(playerid);
			}
			case 6:
			{
				HideInventory(playerid);
			}
			case 7:
			{
				HideDS(playerid);
			}
			case 8:
			{
				HideBattlepass(playerid);
			}
			case 9:
			{
				if(InTextdrawMenu[playerid] == 9)
				{
					HideDice(playerid);
				}
			}
			case 10..20:
			{
				ExitPerkMenu(playerid);
			}
			case 21:
			{
				ExitMySkins(playerid);
			}
		}
		if(InFinishWarTD[playerid])
		{
			ExitFinishWar(playerid);
		}
	}
	if(clickedid == MySkinsTD[1])
	{
		ExitMySkins(playerid);
	}
	if(clickedid == MySkinsTD[2])
	{
		new
			Slot = MySkinsSlot[playerid]
		;

		if(Slot > 0)
		{
			Slot --;
		}

		UpdateMySkins(playerid, Slot);
	}
	if(clickedid == MySkinsTD[3])
	{
		new
			Slot = MySkinsSlot[playerid]
		;

		if(Slot < PlayerInfo[playerid][pSkinSlots] - 1)
		{
			Slot ++;
		}

		UpdateMySkins(playerid, Slot);
	}
	if(clickedid ==  PerkDetailsTD[5])
	{
		new
			PerkID = PerkDetailsID[playerid],
			PerkCost = CostPerks[PerkID]
		;

		if(PerkCost > PlayerInfo[playerid][pPerkPoints])
			return SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Nu ai %d perk points.", PerkCost);

		if(PerkActive[playerid][PerkID] != false)
			return SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai deja acest perk.");

		new
			PerksOnCategory[9] = {6, 2, 2, 6, 4, 4, 6, 6, 2},
			PerksPerCategory[9][6] =
			{
				{1, 2, 3, 4, 5, 6},
				{7, 8},
				{9, 10},
				{11, 12, 13, 14, 15, 16},
				{17, 18, 19, 20},
				{21, 22, 23, 24},
				{25, 26, 27, 28, 29, 30},
				{31, 32, 33, 34, 35, 36},
				{37, 38}
			},
			Category = -1,
			Position = -1
		;

		for(new i = 0; i < sizeof(PerksPerCategory); i++)
		{
			for(new j = 0; j < PerksOnCategory[i]; j++)
			{
				if(PerkID == PerksPerCategory[i][j])
				{
					Category = i;

					Position = j;
					
					break;
				}
			}
		}

		if(Position > 0)
		{
			new
				PrevPerk = PerksPerCategory[Category][Position - 1]
			;

			if(PerkActive[playerid][PrevPerk] != true)
				return SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai nevoie de perk-ul anterior.");
		}

		PlayerInfo[playerid][pPerkPoints] -= PerkCost;

		PerkActive[playerid][PerkID] = true;

		switch(PerkID)
		{
			case 25, 26, 27, 28:
			{
				if(!Iter_Contains(RacePerk, playerid))
				{
					Iter_Add(RacePerk, playerid);
				}
			}
		}

		SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ti-ai luat perk-ul %d pentru %d perk points.", PerkID, PerkCost);
	}
	if(clickedid == PerkDetailsTD[6])
	{
		new
			PerkID = PerkDetailsID[playerid]
		;

		if(PerkActive[playerid][PerkID] != true)
			return SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai deja acest perk.");

		new
			PerksOnCategory[9] = {6, 2, 2, 6, 4, 4, 6, 6, 2},
			PerksPerCategory[9][6] =
			{
				{1, 2, 3, 4, 5, 6},
				{7, 8},
				{9, 10},
				{11, 12, 13, 14, 15, 16},
				{17, 18, 19, 20},
				{21, 22, 23, 24},
				{25, 26, 27, 28, 29, 30},
				{31, 32, 33, 34, 35, 36},
				{37, 38}
			},
			Position = -1,
			Category = -1
		;

		for(new i = 0; i < sizeof(PerksPerCategory); i++)
		{
			for(new j = 0; j < PerksOnCategory[i]; j++)
			{
				if(PerkID == PerksPerCategory[i][j])
				{
					Category = i;

					Position = j;

					break;
				}
			}
		}

		new
			PlusPerkPoints = 0
		;

		for(new i = PerksOnCategory[Category] - 1; i >= Position; i--)
		{
			new
				Perk = PerksPerCategory[Category][i]
			;

			if(PerkActive[playerid][Perk])
			{
				PlusPerkPoints += CostPerks[Perk];

				PerkActive[playerid][Perk] = false;

				switch(Perk)
				{
					case 25, 26, 27, 28:
					{
						if(Iter_Contains(RacePerk, playerid))
						{
							Iter_Remove(RacePerk, playerid);
						}
					}
				}
			}
		}

		PlayerInfo[playerid][pPerkPoints] += PlusPerkPoints;

		SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Ai primit %d perk points.", PlusPerkPoints);
	}
	if(clickedid == PerkMenuTD[1] || clickedid == CategoryPerksTD[1] || clickedid == PerkDetailsTD[1])
	{
		ExitPerkMenu(playerid);
	}
	if(clickedid == PerkMenuTD[12])
	{
		ShowPerkCategory(playerid, 1);
	}
	if(clickedid == PerkMenuTD[13])
	{
		ShowPerkCategory(playerid, 2);
	}
	if(clickedid == PerkMenuTD[14])
	{
		ShowPerkCategory(playerid, 3);
	}
	if(clickedid == PerkMenuTD[15])
	{
		ShowPerkCategory(playerid, 4);
	}
	if(clickedid == PerkMenuTD[16])
	{
		ShowPerkCategory(playerid, 5);
	}
	if(clickedid == PerkMenuTD[17])
	{
		ShowPerkCategory(playerid, 6);
	}
	if(clickedid == PerkMenuTD[18])
	{
		ShowPerkCategory(playerid, 7);
	}
	if(clickedid == PerkMenuTD[19])
	{
		ShowPerkCategory(playerid, 8);
	}
	if(clickedid == PerkMenuTD[20])
	{
		ShowPerkCategory(playerid, 9);
	}
	if(clickedid == PerkMenuTD[21])
	{
		gString[0] = (EOS);
		for(new i = 0; i < sizeof(MisiuniPerks); i++)
		{
			format(gString, sizeof(gString), "%s\n(%d/%d) %s - %d points",
				gString, PlayerInfo[playerid][pPerkProgress][i], MaxProgressPerks[i], MisiuniPerks[i], RewardsPerks[i]);
		}

		SPD(playerid, DIALOG_GOL, DIALOG_STYLE_LIST, "Misiuni", gString, "Anuleaza", "");
	}
	if(clickedid == DiceTD[1])
	{
		if(InTextdrawMenu[playerid] == 9)
		{
			HideDice(playerid);
		}
	}
	if(clickedid == BattlepassTD[1])
	{
		HideBattlepass(playerid);
	}
	if(clickedid == BattlepassTD[3])
	{
		gString[0] = (EOS);

		for(new i = 0; i < sizeof(BattlepassMissions); i++)
		{
			format(gString, sizeof(gString), "%s%s: %d/%d - %dXP\n", gString, BattlepassMissions[i], PlayerInfo[playerid][pBattlepassProgress][i], BattlepassMaxProgress[i], BattlepassMissionXP[i]);
		}

		SPD(playerid, DIALOG_GOL, DIALOG_STYLE_LIST, "Missions", gString, "Anuleaza", "");
	}
	if(clickedid == BattlepassTD[7])
	{
		if(PlayerInfo[playerid][pBattlepassType] != 0)
			return SendMsg(playerid, COLOR_SERVER, "Battlepass >> {ffffff}Ai deja Battlepass Premium.");

		if(PlayerInfo[playerid][pBattlepassPremiums] < 1)
			return SendMsg(playerid, COLOR_SERVER, "Battlepass >> {ffffff}Nu ai Battlepass-uri Premium.");

		SPD(playerid, DIALOG_ACTIVATEBATTLEPASS, DIALOG_STYLE_MSGBOX, "Premium Battlepass", "Vrei sa-ti folosesti Premium Battlepass-ul?", "Da", "Nu");
	}
	if(clickedid == BattlepassTD[8])
	{
		new
			page = BattlepassPage[playerid]
		;

		if(page <= 1)
		{
			page = 11;
		}

		page --;

		UpdateBattlepassPage(playerid, page);
	}
	if(clickedid == BattlepassTD[9])
	{
		new
			page = BattlepassPage[playerid]
		;

		if(page >= 10)
		{
			page = 0;
		}

		page ++;

		UpdateBattlepassPage(playerid, page);
	}
	if(clickedid == FinishWarTD[1])
	{
		ExitFinishWar(playerid);
	}
	if(clickedid == InventoryTD[1])
	{
		HideInventory(playerid);
	}
	if(clickedid == InventoryTD[23])
	{
		ShowInventory(playerid, 1);
	}
	if(clickedid == InventoryTD[24])
	{
		SendMsg(playerid, COLOR_SERVER, "Inventory >> {ffffff}Optiunea este in lucru.");
	}
	if(clickedid == InventoryTD[25])
	{
		ShowInventory(playerid, 2);
	}
	if(clickedid == InventoryTD[26])
	{
		ShowInventory(playerid, 3);
	}
	if(clickedid == InventoryTD[27])
	{
		new
			Condus = PlayerInfo[playerid][pVehLic],
			Pilotat = PlayerInfo[playerid][pFlyLic],
			Navigat = PlayerInfo[playerid][pBoatLic],
			Arme = PlayerInfo[playerid][pGunLic]
		;
		gString[0] = (EOS);
		format(gString, sizeof(gString), "Condus: %d ore\nPilotat: %d ore\nNavigat: %d ore\nArme: %d ore", Condus, Pilotat, Navigat, Arme);
		SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Licente", gString, "Iesi", "");
	}
	if(clickedid == InventoryTD[17])
	{
		GiveInventory(playerid, 1);
	}
	if(clickedid == InventoryTD[18])
	{
		GiveInventory(playerid, 2);
	}
	if(clickedid == InventoryTD[19])
	{
		GiveInventory(playerid, 3);
	}
	if(clickedid == InventoryTD[20])
	{
		GiveInventory(playerid, 4);
	}
	if(clickedid == InventoryTD[21])
	{
		GiveInventory(playerid, 5);
	}
	if(clickedid == InventoryTD[22])
	{
		GiveInventory(playerid, 6);
	}
	if(clickedid == UpgraderTD[1])
	{
		ExitUpgrader(playerid);
	}
	if(clickedid == UpgraderTD[2])
	{
		UpgradePower[playerid] = 2;
		new
			NewAmount = UpgradeAmount[playerid] * UpgradePower[playerid]
		;
		if(UpgradeType[playerid] == 1)
		{
			va_PlayerTextDrawSetString(playerid, UpgraderPTD[3], "$%s", FormatNumber(NewAmount));
		}
		else if(UpgradeType[playerid] == 2)
		{
			va_PlayerTextDrawSetString(playerid, UpgraderPTD[3], "%dPP", NewAmount);
		}
	}
	if(clickedid == UpgraderTD[3])
	{
		UpgradePower[playerid] = 5;
		new
			NewAmount = UpgradeAmount[playerid] * UpgradePower[playerid]
		;
		if(UpgradeType[playerid] == 1)
		{
			va_PlayerTextDrawSetString(playerid, UpgraderPTD[3], "$%s", FormatNumber(NewAmount));
		}
		else if(UpgradeType[playerid] == 2)
		{
			va_PlayerTextDrawSetString(playerid, UpgraderPTD[3], "%dPP", NewAmount);
		}
	}
	if(clickedid == UpgraderTD[4])
	{
		UpgradePower[playerid] = 10;
		new
			NewAmount = UpgradeAmount[playerid] * UpgradePower[playerid]
		;
		if(UpgradeType[playerid] == 1)
		{
			va_PlayerTextDrawSetString(playerid, UpgraderPTD[3], "$%s", FormatNumber(NewAmount));
		}
		else if(UpgradeType[playerid] == 2)
		{
			va_PlayerTextDrawSetString(playerid, UpgraderPTD[3], "%dPP", NewAmount);
		}
	}
	if(clickedid == UpgraderTD[5])
	{
		if(UpgradeAmount[playerid] < 1) return SendMsg(playerid, COLOR_SERVER, "Upgrader >> {ffffff}Nu ai pus nimic.");
		switch(UpgradeType[playerid])
		{
			case 1:
			{
				if(GetPlayerCash(playerid) < UpgradeAmount[playerid]) return SendMsg(playerid, COLOR_SERVER, "Upgrader >> {ffffff}Nu ai $%s.", FormatNumber(UpgradeAmount[playerid]));
				GivePlayerCash(playerid, -UpgradeAmount[playerid]);
			}
			case 2:
			{
				if(PlayerInfo[playerid][pPremiumPoints] < UpgradeAmount[playerid]) return SendMsg(playerid, COLOR_SERVER, "Upgrader >> {ffffff}Nu ai %dPP.", UpgradeAmount[playerid]);
				PlayerInfo[playerid][pPremiumPoints] -= UpgradeAmount[playerid];
				pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
			}
		}
		for(new i = 0; i < sizeof(UpgraderTD); i++)
		{
			TextDrawHideForPlayer(playerid, UpgraderTD[i]);
		}
		for(new i = 0; i < sizeof(UpgraderPTD); i++)
		{
			PlayerTextDrawHide(playerid, UpgraderPTD[i]);
		}
		CancelSelectTextDraw(playerid);
		InTextdrawMenu[playerid] = 0;
		LuckyType[playerid] = 3;
		EnterInLucky(playerid);
	}
	if(clickedid == FragmentTD[1])
	{
		ExitFragmentCrafting(playerid);
	}
	if(clickedid == FragmentTD[2])
	{
		if(Iter_Contains(InLucky, playerid))
		{
			SendMsg(playerid, COLOR_SERVER, "Fragments >> {ffffff}Nu poti face asta acum.");
		}
		else
		{
			for(new i = 0; i < sizeof(FragmentTD); i++)
			{
				TextDrawHideForPlayer(playerid, FragmentTD[i]);
			}
			for(new i = 0; i < sizeof(FragmentPTD); i++)
			{
				PlayerTextDrawHide(playerid, FragmentPTD[i]);
			}
			CancelSelectTextDraw(playerid);
			InTextdrawMenu[playerid] = 0;
			LuckyType[playerid] = 1;
			EnterInLucky(playerid);
			new
				Cost[8] = {7, 6, 5, 4, 4, 4, 4, 4},
				FragmentSelected = SelectedFragment[playerid]
			;
			PlayerInfo[playerid][pFragments][FragmentSelected + 1] -= Cost[FragmentSelected];
		}
	}
	if(clickedid == SlotsTD[1])
	{
		if(Iter_Contains(InCasinoSlots, playerid))
		{
			SendMsg(playerid, COLOR_SERVER, "Slots >> {ffffff}Nu poti iesi acum.");
		}
		else
		{
			ExitSlots(playerid);
		}
	}
	if(clickedid == SlotsTD[2])
	{
		if(Iter_Contains(InCasinoSlots, playerid)) return SendMsg(playerid, COLOR_SERVER, "Sloturi >> {ffffff}Ai pariat deja.");
		SPD(playerid, DIALOG_SLOTSBET, DIALOG_STYLE_INPUT, "Pariu Sloturi", "Introdu suma pe care vrei sa o pariezi($500, 000 - $10, 000, 00):", "Pariaza", "Anuleaza");
	}
	if(clickedid == TuningTD[1])
	{
		ExitTuning(playerid);
	}
	if(clickedid == TuningTD[2])
	{
		if(IsPlayerInAnyVehicle(playerid) < 1)
		{
			ExitTuning(playerid);
		}

		else
		{
			new
				vehicleid = GetPlayerVehicleID(playerid),
				model = GetVehicleModel(vehicleid)
			;

			if(SelectedModification[playerid] < 2)
			{
				SelectedModification[playerid] = 45;
				while(!ValidModifications[model - 400][SelectedModification[playerid] - 1])
				{
					SelectedModification[playerid] --;
				}
			}
			SelectedModification[playerid] --;
			ShowTuning(playerid);
		}
	}
	if(clickedid == TuningTD[3])
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			ExitTuning(playerid);
		}

		else
		{
			new
				vehicleid = GetPlayerVehicleID(playerid),
				model = GetVehicleModel(vehicleid)
			;

			if(model == 0)
			{
				ExitTuning(playerid);
			}
			else
			{			
				if(SelectedModification[playerid] >= 44 || !ValidModifications[model - 400][SelectedModification[playerid] + 1])
				{
					SelectedModification[playerid] = 0;
				}
				SelectedModification[playerid] ++;
				ShowTuning(playerid);
			}

		}
	}
	if(clickedid == TuningTD[4])
	{
		if(GetPlayerCash(playerid) < 5_000)
			return SendMsg(playerid, COLOR_SERVER, "Tuning >> {ffffff}Ai nevoie de $5, 000 pentru a-ti pune aceasta componenta.");

		if(!IsPlayerInAnyVehicle(playerid))
		{
			ExitTuning(playerid);
		}

		else
		{
			new
				vehicleid = GetPlayerVehicleID(playerid),
				model = GetVehicleModel(vehicleid),
				SelectedMod = SelectedModification[playerid],
				Modification = ValidModifications[model - 400][SelectedMod],
				componentid = strval(ModificationsName[Modification - 1000][0]),
				Biz = NearbyTuning(playerid),
				bool: VehiculVip
			;

			for(new i = 0; i < MAX_PERSONAL_VEHICLES; i++)
			{
				if(PlayerInfo[playerid][pVehID][i] == vehicleid)
				{
					if(PlayerInfo[playerid][pVehVip][i] == true)
					{
						VehiculVip = true;
					}
				}
			}

			new
				RotiVip[3] =
				{
					1084, 1081, 1096
				}
			;

			for(new i = 0; i < sizeof(RotiVip); i++)
			{
				if(RotiVip[i] == componentid && VehiculVip != true)
				{
					SendMsg(playerid, COLOR_SERVER, "Tuning >> {ffffff}Nu-ti poti pune aceste roti deoarece vehiculul nu este vip.");
					return true;
				}
			}

			if(componentid >= 1194 && componentid <= 1196)
			{
				componentid -= 1194;
				ChangeVehiclePaintjob(vehicleid, componentid);
			}

			AddVehicleComponent(vehicleid, componentid);
			SaveComponent(playerid, vehicleid, componentid);

			GivePlayerCash(playerid, -5_000);

			BizzInfo[Biz][bTill] += 5_000;
			Query_Mysql("UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'", BizzInfo[Biz][bTill], Biz);

			SendMsg(playerid, COLOR_SERVER, "Tuning >> {ffffff}Ai platit $5, 000 pentru a-ti pune %s.", ModificationsName[Modification - 1000][1]);
		}
	}
	if(clickedid == RentVehicleTD[1])
	{
		ExitRentVehicle(playerid);
	}
	if(clickedid == RentVehicleTD[2])
	{
		new
			SelectedVeh = SelectedRentVehicle[playerid]
		;

		if(SelectedVeh < 1)
		{
			SelectedVeh = sizeof(RentVehicles);
		}

		SelectedVeh --;

		PlayerTextDrawSetPreviewModel(playerid, RentVehiclePTD[0], RentVehicles[SelectedVeh][0]);
		PlayerTextDrawShow(playerid, RentVehiclePTD[0]);

		va_PlayerTextDrawSetString(playerid, RentVehiclePTD[1], "%s~n~~n~~n~~n~~n~~n~$%s", GetVehicleName(RentVehicles[SelectedVeh][0]), FormatNumber(RentVehicles[SelectedVeh][1]));

		SelectedRentVehicle[playerid] = SelectedVeh;
	}
	if(clickedid == RentVehicleTD[3])
	{
		new
			SelectedVeh = SelectedRentVehicle[playerid]
		;

		if(SelectedVeh >= sizeof(RentVehicles) - 1)
		{
			SelectedVeh = -1;
		}

		SelectedVeh ++;

		PlayerTextDrawSetPreviewModel(playerid, RentVehiclePTD[0], RentVehicles[SelectedVeh][0]);
		PlayerTextDrawShow(playerid, RentVehiclePTD[0]);

		va_PlayerTextDrawSetString(playerid, RentVehiclePTD[1], "%s~n~~n~~n~~n~~n~~n~$%s", GetVehicleName(RentVehicles[SelectedVeh][0]), FormatNumber(RentVehicles[SelectedVeh][1]));

		SelectedRentVehicle[playerid] = SelectedVeh;
	}
	if(GetPVarInt(playerid, "InClothing"))
	{
		if(clickedid == ClothingStoreTD[1])
		{
			ExitClothing(playerid);
		}
		if(clickedid == ClothingStoreTD[2])
		{
			new Skin = SkinClothing[playerid];
			if(Skin <= 0) Skin = sizeof(ServerSkins);
			Skin --;
			va_PlayerTextDrawSetString(playerid, ClothingStorePTD[0], "Skin %d~n~~n~%s", ServerSkins[Skin][0], GetSkinRarity(ServerSkins[Skin][0]));
			SkinClothing[playerid] = Skin;
			SetPlayerSkin(playerid, ServerSkins[Skin][0]);
			va_PlayerTextDrawSetString(playerid, ClothingStorePTD[1], "%dPP", GetSkinPP(ServerSkins[Skin][0]));
			va_PlayerTextDrawSetString(playerid, ClothingStorePTD[2], "%dKK", GetSkinMoney(ServerSkins[Skin][0]) / 1000000);
		}
		if(clickedid == ClothingStoreTD[3])
		{
			new Skin = SkinClothing[playerid];
			if(Skin >= sizeof(ServerSkins) - 1) Skin = -1;
			Skin ++;
			va_PlayerTextDrawSetString(playerid, ClothingStorePTD[0], "Skin %d~n~~n~%s", ServerSkins[Skin][0], GetSkinRarity(ServerSkins[Skin][0]));
			SkinClothing[playerid] = Skin;
			SetPlayerSkin(playerid, ServerSkins[Skin][0]);
			va_PlayerTextDrawSetString(playerid, ClothingStorePTD[1], "%dPP", GetSkinPP(ServerSkins[Skin][0]));
			va_PlayerTextDrawSetString(playerid, ClothingStorePTD[2], "%dKK", GetSkinMoney(ServerSkins[Skin][0]) / 1000000);
		}
	}
	if(GetPVarInt(playerid, "InTelefon"))
	{
		if(clickedid == PhoneTD[4])
		{
			ClosePhone(playerid);
		}
		if(clickedid == PhoneTD[11])
		{
			SPD(playerid, DIALOG_CALL, DIALOG_STYLE_INPUT, "Call", "Introdu ID-ul jucatorului pe care vrei sa-l suni:", "Inainte", "Iesi");
		}
		if(clickedid == PhoneTD[12])
		{
			SPD(playerid, DIALOG_SMS, DIALOG_STYLE_INPUT, "Sms", "Intordu ID-ul jucatorului si textul\nEx: 5 Salut!", "Inainte", "Iesi");
		}
		if(clickedid == PhoneTD[13])
		{
			if(PlayerInfo[playerid][pWantedLevel] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Lester >> {ffffff}Nu ai wanted.");
			
			if(escapedat[playerid] == 2)
				return SendMsg(playerid, COLOR_SERVER, "Lester >> {ffffff}Nu poti face asta in timp ce evadezi.");

			new
				price = PlayerInfo[playerid][pWantedLevel] * 20_000_000
			;

			gString[0] = (EOS);
			format(gString, 128, "Vrei sa scapi de Wanted pentru $%s?", FormatNumber(price));
			SPD(playerid, DIALOG_LESTER, DIALOG_STYLE_MSGBOX, "Lester", gString, "Da", "Nu");	
		}
		if(clickedid == PhoneTD[14])
		{
			PC_EmulateCommand(playerid, "/service");
		}
		if(clickedid == PhoneTD[15])
		{
			gString[0] = (EOS);
			for(new i = 1; i <= stockss; i++)
			{
				if(PerkActive[playerid][33])
				{
					format(gString, 2048, "%s\n%s - $%s", gString, GetVehicleName(StockInfo[i][vModel]), formatBytes(DealerShipPrice95[i]));
				}
				else if(PerkActive[playerid][32])
				{
					format(gString, 2048, "%s\n%s - $%s", gString, GetVehicleName(StockInfo[i][vModel]), formatBytes(DealerShipPrice97[i]));
				}
				else
				{
					format(gString, 2048, "%s\n%s - $%s", gString, GetVehicleName(StockInfo[i][vModel]), formatBytes(DealerShipPrice[i]));
				}
			}
			SPD(playerid, DIALOG_GOL, DIALOG_STYLE_LIST, "Vehiculele din Dealership", gString, "Iesi", "");
		}
		if(clickedid == PhoneTD[16])
		{
			PC_EmulateCommand(playerid, "/settings");
		}
	}
	for(new i = 1; i < 11; i++){
		if(clickedid == PinTD[i]){
			new cifra = i;
			if(i == 10) cifra = 0;
			for(new p; p < 4; p++){
				if(PinText[playerid][p] == -1){
					PinText[playerid][p] = cifra;
					gString[0] = (EOS);
					for(new n; n < CifrePin(playerid); n++){
						format(gString, 5, "%s%d", gString, PinText[playerid][n]);
					}
					PlayerTextDrawSetString(playerid, PinPTD, gString);
					break;
				}
			}
		}
	}
	if(clickedid == PinTD[11]){
		if(CifrePin(playerid) < 4) return true;
		switch(GetPVarInt(playerid, "InPin")){
			case 1: {
				gString[0] = (EOS);
				for(new i; i < 4; i++){
					format(gString, 5, "%s%d", gString, PinText[playerid][i]);
				}
				if(!strval(gString)){
					ShowPin(playerid);
					SetPVarInt(playerid, "InPin", 1);
					Info(playerid, "Nu-ti poti pune acest PIN");
					return true;
				}
				PlayerInfo[playerid][pPin] = strval(gString);
				Info(playerid, "Pin-ul tau este %d.", PlayerInfo[playerid][pPin]);
				pUpdateInt(playerid, "Pin", PlayerInfo[playerid][pPin]);
				HidePin(playerid);
			}
			case 2: {
				gString[0] = (EOS);
				for(new i; i < 4; i++){
					format(gString, 5, "%s%d", gString, PinText[playerid][i]);
				}
				if(PlayerInfo[playerid][pPin] != strval(gString)) {
					Info(playerid, "Codul PIN este gresit.");
					defer KickEx(playerid, PlayerInfo[playerid][pSession]);
				}
				HidePin(playerid);
			}
		}
	}
	if(clickedid == PinTD[12]){
		if(!CifrePin(playerid)) return true;
		for(new i; i < 4; i++) PinText[playerid][i] = -1;
		PlayerTextDrawSetString(playerid, PinPTD, "----");
	}
	if(clickedid == MilestoneTD[1]) HideMilestone(playerid);
	if(clickedid == MilestoneTD[3]){
		GivePlayerCash(playerid, 20_000_000);
		Info(playerid, "Ai ales sa primesti $20, 000, 000.");
		while(PlayerInfo[playerid][pMilestone] <= PlayerInfo[playerid][pConnectTime]) PlayerInfo[playerid][pMilestone] += 10;
		pUpdateInt(playerid, "Milestone", PlayerInfo[playerid][pMilestone]);
		HideMilestone(playerid);
		ProgressToBattlepass(playerid, 13, 1);
	}
	if(clickedid == MilestoneTD[5]){
		PlayerInfo[playerid][pPremiumPoints] += 10;
		pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
		Info(playerid, "Ai ales sa primesti 10PP.");
		while(PlayerInfo[playerid][pMilestone] <= PlayerInfo[playerid][pConnectTime]) PlayerInfo[playerid][pMilestone] += 10;
		pUpdateInt(playerid, "Milestone", PlayerInfo[playerid][pMilestone]);
		HideMilestone(playerid);
		ProgressToBattlepass(playerid, 13, 1);
	}
	if(clickedid == MilestoneTD[7]){
		PlayerInfo[playerid][pSpin] += 500;
		pUpdateInt(playerid, "Spin", PlayerInfo[playerid][pSpin]);
		Info(playerid, "Ai ales sa primesti 500 Spin Points.");
		while(PlayerInfo[playerid][pMilestone] <= PlayerInfo[playerid][pConnectTime]) PlayerInfo[playerid][pMilestone] += 10;
		pUpdateInt(playerid, "Milestone", PlayerInfo[playerid][pMilestone]);
		HideMilestone(playerid);
		ProgressToBattlepass(playerid, 13, 1);
	}
	if(clickedid == RuletaTD[1]) HideRoulette(playerid);
	if(clickedid == RuletaTD[2]){
		if(PariuRuleta(playerid) != -1) return Info(playerid, "Ai pariat deja.");
		SetPVarInt(playerid, "CuloarePariata", 0);
		SPD(playerid, DIALOG_RULETA1, DIALOG_STYLE_INPUT, "Pariere Ruleta", "Introdu suma pe care vrei sa o pariezi:", "Inainte", "Iesi");
	}
	if(clickedid == RuletaTD[3]){
		if(PariuRuleta(playerid) != -1) return Info(playerid, "Ai pariat deja.");
		SetPVarInt(playerid, "CuloarePariata", 1);
		SPD(playerid, DIALOG_RULETA1, DIALOG_STYLE_INPUT, "Pariere Ruleta", "Introdu suma pe care vrei sa o pariezi:", "Inainte", "Iesi");
	}
	if(clickedid == RuletaTD[4]){
		if(PariuRuleta(playerid) != -1) return Info(playerid, "Ai pariat deja.");
		SetPVarInt(playerid, "CuloarePariata", 2);
		SPD(playerid, DIALOG_RULETA1, DIALOG_STYLE_INPUT, "Pariere Ruleta", "Introdu suma pe care vrei sa o pariezi:", "Inainte", "Iesi");
	}
	if(clickedid == BGTD[1]){ 
		for(new i; i < 5; i++) TextDrawHideForPlayer(playerid, BGTD[i]); 
		CancelSelectTextDraw(playerid); 
		SetPVarInt(playerid, "InBurger", 0); 
	}
	if(clickedid == BGTD[2]) SetPVarInt(playerid, "bgselectat", 1);
	if(clickedid == BGTD[3]) SetPVarInt(playerid, "bgselectat", 2);
	if(clickedid == BGTD[4]){
		new bid = InBiz[playerid];
		switch(GetPVarInt(playerid, "bgselectat")){
			case 0: Info(playerid, "Nu ai selectat nimic.");
			case 1: {
				if(GetPlayerCash(playerid) < 10000) return Info(playerid, "Nu ai suficienti bani.");
				if(PlayerInfo[playerid][pBurger] >= 10) return Info(playerid, "Ai deja 10 burgeri.");
				GivePlayerCash(playerid, -10000);
				BizzInfo[bid][bTill] += 10000;
				Query_Mysql("UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'", BizzInfo[bid][bTill],bid);
				PlayerInfo[playerid][pBurger] ++;
				Info(playerid, "Burger achizitionat, verifica-ti Invetarul apasand 'H'.");
			}
			case 2: {
				if(GetPlayerCash(playerid) < 10000) return Info(playerid, "Nu ai suficienti bani.");
				if(PlayerInfo[playerid][pSoda] >= 10) return Info(playerid, "Ai deja 10 sticle cu apa.");
				GivePlayerCash(playerid, -10000);
				BizzInfo[bid][bTill] += 10000;
				Query_Mysql("UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'", BizzInfo[bid][bTill],bid);
				PlayerInfo[playerid][pSoda] ++;
				Info(playerid, "Sticla cu apa achizitionata, verifica-ti Invetarul apasand 'H'.");
			}
		}
	}
	if(clickedid == GunTD[1]) HideGS(playerid);
	if(clickedid == GunTD[2]){ 
		if(GunShopSelected[playerid] <= 1) GunShopSelected[playerid] = 7;
		GunShopSelected[playerid] --;
		ShowGS(playerid);
	}
	if(clickedid == GunTD[3]){
		if(GunShopSelected[playerid] >= 6) GunShopSelected[playerid] = 0;
		GunShopSelected[playerid] ++;
		ShowGS(playerid);
	}
	if(clickedid == DealerShipTD[1])
	{
		HideDS(playerid);
	}
	if(clickedid == DealerShipTD[2])
	{
		if(PlayerInfo[playerid][pVehSlots] < GetPlayerVehicles(playerid) + 1)
			return SendMsg(playerid, COLOR_SERVER, "Dealership >> {ffffff}Nu ai suficiente sloturi pentru vehicule.");

		if(StockInfo[DealerShipSelected[playerid]][vStock] < 1) 
			return SendMsg(playerid, COLOR_SERVER, "Dealership >> {ffffff}Vehiculul nu este in stoc.");

		SPD(playerid, DIALOG_BUYCAR, DIALOG_STYLE_MSGBOX, "Dealership", "Doresti sa cumperi acest vehicul?", "Da", "Nu");
	}
	if(clickedid == DealerShipTD[3])
	{ 
		if(DealerShipSelected[playerid] == 1) DealerShipSelected[playerid] = stockss + 1; 
		DealerShipSelected[playerid] --; 
		ShowDS(playerid); 
	}
	if(clickedid == DealerShipTD[4])
	{ 
		if(DealerShipSelected[playerid] == stockss) DealerShipSelected[playerid] = 0; 
		DealerShipSelected[playerid] ++;
		ShowDS(playerid); 
	}
	if(clickedid == DealerShipTD[5])
	{
		DealerShipRotation[playerid] += 45;

		if(DealerShipRotation[playerid] > 360)
		{
			DealerShipRotation[playerid] = 45;
		}

		PlayerTextDrawSetPreviewRot(playerid, DealerShipPTD[2], -10, 0, DealerShipRotation[playerid]);
		PlayerTextDrawShow(playerid, DealerShipPTD[2]);
	}
	if(clickedid == DealerShipTD[6])
	{
		DealerShipRotation[playerid] -= 45;

		if(DealerShipRotation[playerid] < -360)
		{
			DealerShipRotation[playerid] = 315;
		}

		PlayerTextDrawSetPreviewRot(playerid, DealerShipPTD[2], -10, 0, DealerShipRotation[playerid]);
		PlayerTextDrawShow(playerid, DealerShipPTD[2]);
	}
	if(clickedid == TradeTD[10]){
		if(!TradeItems[playerid]) return SendMsg(playerid, COLOR_SERVER, "Nu ai adaugat nimic in aceasta afacere!");
		if(TradeReady[playerid]) return SendMsg(playerid, COLOR_SERVER, "Nu poti sterge bunurile adaugate in timp ce timer-ul este activat!");
		new id = TradeID[playerid]; TradeItems[playerid] = 0; TradeItems[id] = 0; HideTradeItems(playerid); ShowTradeTDs(id), ShowTradeTDs(playerid);
		TextDrawHideForPlayer(id, TradeTD[9]); TextDrawHideForPlayer(id, TradeTD[10]); PlayerTextDrawHide(playerid, TradePTD[2]); PlayerTextDrawHide(playerid, TradePTD[3]);
		SetPVarString(playerid, "MoneyTrade", "none");
		SetPVarInt(playerid, "HouseTrade", -1);
		SetPVarInt(playerid, "BusinessTrade", -1);
		SetPVarInt(playerid, "CarTrade", -1);
		SetPVarInt(playerid, "SkinTrade", -1);
		SetPVarInt(playerid, "JobTrade", -1);
		SetPVarInt(playerid, "BillboardTrade", -1);
		SetPVarInt(playerid, "VoucherTrade", -1);
		SetPVarInt(playerid, "HiddenTrade", -1);
		SetPVarString(id, "MoneyTrade", "none");
		SetPVarInt(id, "HouseTrade", -1);
		SetPVarInt(id, "BusinessTrade", -1);
		SetPVarInt(id, "CarTrade", -1);
		SetPVarInt(id, "SkinTrade", -1);
		SetPVarInt(id, "JobTrade", -1);
		SetPVarInt(id, "BillboardTrade", -1);
		SetPVarInt(id, "VoucherTrade", -1);
		SetPVarInt(id, "HiddenTrade", -1);
		TradeReady[id] = false;
		Info(playerid, "%s si-a sters bunurile adaugate.", GetName(playerid));
		Info(id, "%s si-a sters bunurile adaugate.", GetName(playerid)); 
	}
	if(clickedid == TradeTD[9] && TradeReady[playerid] == false) ShowTrade(playerid);
	if(clickedid == Text:INVALID_TEXT_DRAW){
		if(GetPVarInt(playerid, "InClothing")) ExitClothing(playerid);
		if(GetPVarInt(playerid, "InTelefon")) ClosePhone(playerid);
		if(InTextdrawMenu[playerid] == 7) HideDS(playerid);
		if(TradeID[playerid] != -1){
			new id = TradeID[playerid]; Info(playerid, "%s a anulat afacerea!", GetName(playerid)); 
			Info(id, "%s a anulat afacerea!", GetName(playerid)); 
			HideTradeItems(playerid), HideTradeItems(id), HideTradeTDs(id), HideTradeTDs(playerid), CancelSelectTextDraw(playerid), CancelSelectTextDraw(id);
		}
		if(GunShopSelected[playerid] != 0) HideGS(playerid);
		if(GetPVarInt(playerid, "InBurger")){ 
			for(new i; i < 5; i++) TextDrawHideForPlayer(playerid, BGTD[i]); 
			CancelSelectTextDraw(playerid); 
			SetPVarInt(playerid, "InBurger", 0); 
		}
		if(Iter_Contains(InRuleta, playerid)) HideRoulette(playerid);
		if(GetPVarInt(playerid, "InMilestone")) HideMilestone(playerid);
		if(GetPVarInt(playerid, "InPin")) SelectTextDraw(playerid, HOVER_COLOR);
		if(GetPVarInt(playerid, "InTrivia")) CloseTrivia(playerid);
	}
	return false;
}
function ShowDS(playerid)
{
	if(InTextdrawMenu[playerid] != 7) return true;

	new
		Veh = DealerShipSelected[playerid],
		Model = StockInfo[Veh][vModel]
	;

	va_PlayerTextDrawSetString(playerid, DealerShipPTD[0], "%s", GetVehicleName(Model));

	if(PerkActive[playerid][33])
	{
		va_PlayerTextDrawSetString(playerid, DealerShipPTD[1], "Top speed: %dkm/h~n~~n~~n~Price: $%s~n~~n~~n~Stock: %d",
			GetVehicleMaxSpeed(Model), formatBytes(DealerShipPrice95[Veh]), StockInfo[Veh][vStock]);
	}
	else if(PerkActive[playerid][32])
	{
		va_PlayerTextDrawSetString(playerid, DealerShipPTD[1], "Top speed: %dkm/h~n~~n~~n~Price: $%s~n~~n~~n~Stock: %d",
			GetVehicleMaxSpeed(Model), formatBytes(DealerShipPrice97[Veh]), StockInfo[Veh][vStock]);
	}
	else
	{
		va_PlayerTextDrawSetString(playerid, DealerShipPTD[1], "Top speed: %dkm/h~n~~n~~n~Price: $%s~n~~n~~n~Stock: %d",
			GetVehicleMaxSpeed(Model), formatBytes(DealerShipPrice[Veh]), StockInfo[Veh][vStock]);
	}

	PlayerTextDrawSetPreviewModel(playerid, DealerShipPTD[2], Model);
	PlayerTextDrawSetPreviewRot(playerid, DealerShipPTD[2], -10, 0, DealerShipRotation[playerid]);
	PlayerTextDrawShow(playerid, DealerShipPTD[2]);

	return true;
}
function HideDS(playerid){
	for(new i; i < sizeof(DealerShipTD); i++) TextDrawHideForPlayer(playerid, DealerShipTD[i]);
	for(new i; i < sizeof(DealerShipPTD); i++) PlayerTextDrawHide(playerid, DealerShipPTD[i]);
	InTextdrawMenu[playerid] = 0;
	CancelSelectTextDraw(playerid);
	return true;
}
function CreateNeon(carid, object){ 
	if(!IsValidVehicle(carid)) return true;
	if(neon1[carid] != -1) DestroyDynamicObject(neon1[carid]), neon1[carid] = -1;
	if(neon2[carid] != -1) DestroyDynamicObject(neon2[carid]), neon2[carid] = -1;
	neon1[carid] = CreateDynamicObject(object, 0, 0, 0, 0, 0, 0); 
	AttachDynamicObjectToVehicle(neon1[carid], carid, -0.8, 0.0, -0.50, 0.0, 0.0, 0.0); 
	neon2[carid] = CreateDynamicObject(object, 0, 0, 0, 0, 0, 0); 
	AttachDynamicObjectToVehicle(neon2[carid], carid, 0.8, 0.0, -0.50, 0.0, 0.0, 0.0);
	return true;
}
function DestroyNeon(carid){
	if(!IsValidVehicle(carid)) return true;
	if(Iter_Contains(RainbowVehicles, carid))
	{
		Iter_Remove(RainbowVehicles, carid);
	}
	if(Iter_Contains(StageVehicles, carid))
	{
		RemoveFromStageVehicles(carid);
	}
	if(neon1[carid] != -1) DestroyDynamicObject(neon1[carid]), neon1[carid] = -1;
	if(neon2[carid] != -1) DestroyDynamicObject(neon2[carid]), neon2[carid] = -1;
	if(VipTextObject[carid] != 0)
	{
		DestroyDynamicObject(VipTextObject[carid]);
		VipTextObject[carid] = 0;
	}
	StopAudioStreamForPlayersInCar(carid);
	vehRadio[carid] = 0;
	return true;
}
timer RepairATM[120000](ATM)
{
	AtmHealth[ATM] = 1000;
	gString[0] = (EOS);
	format(gString, sizeof(gString), "{ffffff}ATM {00a326}#%d\n{ffffff}Tasteaza {00a326}/deposit sau /withdraw\n{ffffff}Viata: {00a326}%0.2f", ATM + 1, AtmHealth[ATM]);
	UpdateDynamic3DTextLabelText(AtmText[ATM], COLOR_SERVER, gString);
	DestroyDynamicObject(AtmObject[ATM]);
	AtmObject[ATM] = CreateDynamicObject(19324, gAtms[ATM][0], gAtms[ATM][1], gAtms[ATM][2], 0.00000, 0.00000, gAtms[ATM][3]);
	return true;
}
public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(objectid == obiectdrop)
	{
		viatadrop -= WeaponDamage[weaponid];
		DamageDrop[playerid] += WeaponDamage[weaponid];

		gString[0] = (EOS);
		format(gString, 128, "{00a326}Drop\n{ffffff}Viata: {00a326}%0.2f", viatadrop); 
		UpdateDynamic3DTextLabelText(textdrop, -1, gString);

		if(viatadrop < 1)
		{
			UpdateDynamic3DTextLabelText(textdrop, -1, " ");
			DestroyDynamicObject(obiectdrop);
			obiectdrop = -1;
			DestroyDynamic3DTextLabel(textdrop);
			viatadrop = 0;

			foreach(new i : Player)
			{ 
				if(DamageDrop[i] != 0)
				{ 
					new
						bani = floatround(DamageDrop[i]) * 3_000,
						rp = floatround(DamageDrop[i] / 400, floatround_floor)
					;

					GivePlayerCash(i, bani);
					GivePlayerRP(i, rp);

					SendMsg(i, COLOR_SERVER, "Drop >> {ffffff}Ai primit $%s si %d Respect Points deoarece ai contribuit la drop.", FormatNumber(bani), rp); 

					DamageDrop[i] = 0;
					ProgressToBattlepass(playerid, 11, 1);
				} 
			}
		}
	}
	else if(GetDynamicObjectModel(objectid) == 19324)
	{
		new
			atm = -1
		;

		for(new i = 0; i < sizeof(gAtms); i++)
		{
			if(AtmObject[i] == objectid)
			{
				atm = i;

				break;
			}
		}

		if(atm != -1)
		{
			if(AtmHealth[atm] > 0)
			{
				if(IsACop(playerid))
					return SendMsg(playerid, COLOR_SERVER, "Atm >> {ffffff}Nu poti sparge atm-ul deoarece esti politist.");

				AtmHealth[atm] -= WeaponDamage[weaponid];

				gString[0] = (EOS);
				format(gString, sizeof(gString), "{ffffff}ATM {00a326}#%d\n{ffffff}Tasteaza {00a326}/deposit sau /withdraw\n{ffffff}Viata: {00a326}%0.2f", atm + 1, AtmHealth[atm]);
				UpdateDynamic3DTextLabelText(AtmText[atm], COLOR_SERVER, gString);

				if(AtmHealth[atm] <= 0)
				{
					gString[0] = (EOS);
					format(gString, sizeof(gString), "{ffffff}ATM {00a326}#%d\n{ffffff}Distrus", atm + 1);
					UpdateDynamic3DTextLabelText(AtmText[atm], COLOR_SERVER, gString);

					DestroyDynamicObject(AtmObject[atm]);
					AtmObject[atm] = CreateDynamicObject(2943, gAtms[atm][0], gAtms[atm][1], gAtms[atm][2], 0.00000, 0.00000, gAtms[atm][3]);

					new
						rand = 100_000 + random(50_000)
					;

					GivePlayerCash(playerid, rand);

					SendMsg(playerid, COLOR_SERVER, "ATM >> {ffffff}Ai distrus ATM-ul #%d si ai primit $%s.", atm + 1, FormatNumber(rand));

					if(PlayerInfo[playerid][pWantedLevel] < 6)
					{
						WantedPoints[playerid] += 2;
						SetPlayerCriminal(playerid, -1, "ATM Robber");	
					}

					defer RepairATM(atm);
				}
			}
		}
	}
	return true;
}
timer HideAchivTD[5000](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	PlayerTextDrawHide(playerid, AchivPTD);
	return true;
}
function FinishAchievement(playerid, x){
	if(PlayerInfo[playerid][pAchievement][x]) return true;
	new bani = randEx(9000000, 10000000), rpuri = randEx(1, 5);
	playerTextDrawShow(playerid, AchivPTD, "%s~n~~n~Bani primiti: ~r~$%s~n~~w~~h~RP primite: ~r~%d", AchievementName[x], FormatNumber(bani), rpuri);
	GivePlayerCash(playerid, bani);
	GiveGoal(bani);
	GivePlayerRP(playerid, rpuri);
	PlayerInfo[playerid][pAchievement][x] = true;
	Query_Mysql("UPDATE `users` SET `playerAchivStatus` = '%d|%d|%d|%d|%d|%d|%d|%d|%d' WHERE `id` = '%d'", PlayerInfo[playerid][pAchievement][0], PlayerInfo[playerid][pAchievement][1], PlayerInfo[playerid][pAchievement][2],
		PlayerInfo[playerid][pAchievement][3], PlayerInfo[playerid][pAchievement][4], PlayerInfo[playerid][pAchievement][5], PlayerInfo[playerid][pAchievement][6], PlayerInfo[playerid][pAchievement][7], PlayerInfo[playerid][pAchievement][8],
		PlayerInfo[playerid][pSQLID]);
	defer HideAchivTD(playerid, PlayerInfo[playerid][pSession]);
	UpdateLevelBar(playerid);
	return true;
}
function ProgressToTask(playerid, x, progress)
{
	if(PlayerInfo[playerid][pTaskActual] < 1) return true;

	if(PlayerInfo[playerid][pTaskActual] != x) return true;

	if(PlayerInfo[playerid][pTaskProgress] + progress < TaskProgress[x])
	{
		PlayerInfo[playerid][pTaskProgress] += progress;
		pUpdateInt(playerid, "TaskProgress", PlayerInfo[playerid][pTaskProgress]);
		CheckTask(playerid);
	}
	else
	{
		PlayerInfo[playerid][pTaskActual] = 0;
		pUpdateInt(playerid, "TaskActual", 0);

		PlayerInfo[playerid][pTaskProgress] = 0;
		pUpdateInt(playerid, "TaskProgress", 0);

		new
			Money = TaskReward[x][0] + random(TaskReward[x][1]),
			RespectPoints = TaskReward[x][2],
			PremiumPoints = TaskReward[x][3];

		GivePlayerCash(playerid, Money);
		GiveGoal(Money);

		GivePlayerRP(playerid, RespectPoints);

		GivePlayerPP(playerid, PremiumPoints);

		playerTextDrawShow(playerid, AchivPTD, "%s~n~~n~Bani: ~r~$%s~n~~w~~h~Puncte de Respect: ~r~%d~n~~w~~h~Puncte Premium: ~r~%d", TaskName[x], FormatNumber(Money), RespectPoints, PremiumPoints);
		defer HideAchivTD(playerid, PlayerInfo[playerid][pSession]);
	}

	return true;
}
stock playerTextDrawShow(playerid, PlayerText:textdrawid, const string[], va_args<>){
	new UsageString[250];
	va_format(UsageString, sizeof UsageString, string, va_start<3>);
	PlayerTextDrawSetString(playerid, textdrawid, UsageString);
	return PlayerTextDrawShow(playerid, textdrawid);
}
function ShowTradeTDs(playerid){
	PlayerTextDrawSetString(playerid, TradePTD[4], "~r~nepregatit");
	PlayerTextDrawSetString(playerid, TradePTD[5], "~r~nepregatit");
	for(new i; i < sizeof(TradePTD); i++)
		if(i < 6) PlayerTextDrawShow(playerid, TradePTD[i]);
	for(new i; i < sizeof(TradeTD); i++)
		if(i < 11) TextDrawShowForPlayer(playerid, TradeTD[i]);
	SelectTextDraw(playerid, 0x00BFFFFF);
	return true;
}
function HideTradeTDs(playerid){
	for(new i; i < sizeof(TradePTD); i++) PlayerTextDrawHide(playerid, TradePTD[i]);
	for(new i; i < sizeof(TradeTD); i++) TextDrawHideForPlayer(playerid, TradeTD[i]);
	TradeID[playerid] = -1;
	TradePlayer[playerid] = -1;
	TradeTime[playerid] = 0;
	return true;
}
function HideTradeItems(playerid){
	SetPVarString(playerid, "MoneyTrade", "none");
	SetPVarInt(playerid, "HouseTrade", -1);
	SetPVarInt(playerid, "BusinessTrade", -1);
	SetPVarInt(playerid, "CarTrade", -1);
	SetPVarInt(playerid, "SkinTrade", -1);
	SetPVarInt(playerid, "JobTrade", -1);
	SetPVarInt(playerid, "BillboardTrade", -1);
	SetPVarInt(playerid, "VoucherTrade", -1);
	SetPVarInt(playerid, "HiddenTrade", -1);
	new id = TradeID[playerid];
	for(new i; i < sizeof(TradeTitle); i++) PlayerTextDrawHide(playerid, TradeTitle[i]), PlayerTextDrawHide(id, TradeTitle[i]);
	for(new i; i < sizeof(TradeIcon); i++) PlayerTextDrawHide(playerid, TradeIcon[i]), PlayerTextDrawHide(id, TradeIcon[i]);
	for(new i; i < sizeof(TradeTD); i++) TextDrawHideForPlayer(playerid, TradeTD[i]), TextDrawHideForPlayer(id, TradeTD[i]);
	TradeItems[playerid] = 0;
	return true;
}
function resetTradeVariables(playerid){
	SetPVarString(playerid, "MoneyTrade", "none");
	SetPVarInt(playerid, "HouseTrade", -1);
	SetPVarInt(playerid, "BusinessTrade", -1);
	SetPVarInt(playerid, "CarTrade", -1);
	SetPVarInt(playerid, "SkinTrade", -1);
	SetPVarInt(playerid, "JobTrade", -1);
	SetPVarInt(playerid, "BillboardTrade", -1);
	SetPVarInt(playerid, "VoucherTrade", -1);
	SetPVarInt(playerid, "HiddenTrade", -1);
	TradeID[playerid] = -1;
	TradePlayer[playerid] = -1;
	return true;
}
function FinishTrade(playerid){
	new id = TradeID[playerid];
	SendMsg(playerid, COLOR_SERVER, "Afacerea a fost finalizata cu succes!");
	SendMsg(id, COLOR_SERVER, "Afacerea a fost finalizata cu succes!");
	new stringa[32];
	GetPVarString(playerid, "MoneyTrade", stringa, sizeof(stringa));
	if(!strmatch(stringa, "none")){
		new BigInt:TempMoney;
		converBytes(TempMoney, stringa);
		if(OPByte(TempMoney, >, #999999999))
        {
            new money[32];
            format(money, sizeof(money), "-%s", valueBigInt(TempMoney));
            addBytes64(PlayerCash[playerid], money);
            addBytes64(PlayerCash[id], valueBigInt(TempMoney));
        }
        else
        {
            GivePlayerCash(playerid, -bytes32(TempMoney));
            GivePlayerCash(id, bytes32(TempMoney));
        }
	} 
	if(GetPVarInt(playerid, "HouseTrade") != -1) GiveHouse(id, GetPVarInt(playerid, "HouseTrade")); 
	if(GetPVarInt(playerid, "BusinessTrade") != -1) GiveBiz(id, GetPVarInt(playerid, "BusinessTrade")); 
	if(GetPVarInt(playerid, "CarTrade") != -1){
		new idcar, x = GetPVarInt(playerid, "CarTrade"); 
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
			if(PlayerInfo[id][pVeh][v] == -1)
			{
				idcar = v;
				break;
			}
		}
		PlayerInfo[id][pVeh][idcar] = PlayerInfo[playerid][pVeh][x];
		PlayerInfo[id][pVehModel][idcar] = PlayerInfo[playerid][pVehModel][x];
		PlayerInfo[id][pVehID][idcar] = PlayerInfo[playerid][pVehID][x]; 
		PlayerInfo[id][pVehLocX][idcar] = PlayerInfo[playerid][pVehLocX][x];
		PlayerInfo[id][pVehLocY][idcar] = PlayerInfo[playerid][pVehLocY][x]; 
		PlayerInfo[id][pVehLocZ][idcar] = PlayerInfo[playerid][pVehLocZ][x];
		PlayerInfo[id][pVehAngle][idcar] = PlayerInfo[playerid][pVehAngle][x]; 
		PlayerInfo[id][pVehBuyTime][idcar] = PlayerInfo[playerid][pVehBuyTime][x];
		PlayerInfo[id][pVehColor1][idcar] = PlayerInfo[playerid][pVehColor1][x];
		PlayerInfo[id][pVehColor2][idcar] = PlayerInfo[playerid][pVehColor2][x]; 
		PlayerInfo[id][pVehKM][idcar] = PlayerInfo[playerid][pVehKM][x];
		PlayerInfo[id][pVehGas][idcar] = PlayerInfo[playerid][pVehGas][x];
		PlayerInfo[id][pVehPaintJ][idcar] = PlayerInfo[playerid][pVehPaintJ][x];
		PlayerInfo[id][pVehStage][idcar] = PlayerInfo[playerid][pVehStage][x];
		PlayerInfo[id][pVehWorking][idcar] = PlayerInfo[playerid][pVehWorking][x];
		PlayerInfo[id][pVehNeon][idcar] = PlayerInfo[playerid][pVehNeon][x];
		PlayerInfo[id][pVehNeonCustom][idcar] = PlayerInfo[playerid][pVehNeonCustom][x];
		PlayerInfo[id][pVehVip][idcar] = PlayerInfo[playerid][pVehVip][x];
		PlayerInfo[id][pVehRainbow][idcar] = PlayerInfo[playerid][pVehRainbow][x];
		PlayerInfo[id][pVehRainbowOn][idcar] = PlayerInfo[playerid][pVehRainbowOn][x];
		PlayerInfo[id][pBoughtMethod][idcar] = PlayerInfo[playerid][pBoughtMethod][x];
		PlayerInfo[id][pVehInGarage][idcar] = PlayerInfo[playerid][pVehInGarage][x];
		for(new s; s < 17; s++) CarMod[id][idcar][s] = CarMod[playerid][x][s];
		Query_Mysql("UPDATE `cars` SET `Owner`= '%s' WHERE `ID` = '%d'", GetName(id), PlayerInfo[playerid][pVeh][x]);
		PlayerInfo[playerid][pVeh][x] = -1;
		PlayerInfo[playerid][pVehID][x] = PlayerInfo[playerid][pVehModel][x] = 0;
	}
	GetPVarString(id, "MoneyTrade", stringa, sizeof(stringa));
	if(!strmatch(stringa, "none")){
		new BigInt:TempMoney;
		converBytes(TempMoney, stringa);
		if(OPByte(TempMoney, >, #999999999))
        {
            new money[32];
            format(money, sizeof(money), "-%s", valueBigInt(TempMoney));
            addBytes64(PlayerCash[id], money);
            addBytes64(PlayerCash[playerid], valueBigInt(TempMoney));
        }
        else
        {
            GivePlayerCash(id, -bytes32(TempMoney));
            GivePlayerCash(playerid, bytes32(TempMoney));
        }
	} 
	if(GetPVarInt(id, "HouseTrade") != -1) GiveHouse(playerid, GetPVarInt(id, "HouseTrade")); 
	if(GetPVarInt(id, "BusinessTrade") != -1) GiveBiz(playerid, GetPVarInt(id, "BusinessTrade")); 
	if(GetPVarInt(id, "CarTrade") != -1){
		new idcar, x = GetPVarInt(id, "CarTrade"); 
		for(new v; v < MAX_PERSONAL_VEHICLES; v++){ if(PlayerInfo[playerid][pVeh][v] == -1){ idcar = v; break; } }
		PlayerInfo[playerid][pVeh][idcar] = PlayerInfo[id][pVeh][x];
		PlayerInfo[playerid][pVehModel][idcar] = PlayerInfo[id][pVehModel][x];
		PlayerInfo[playerid][pVehID][idcar] = PlayerInfo[id][pVehID][x]; 
		PlayerInfo[playerid][pVehLocX][idcar] = PlayerInfo[id][pVehLocX][x];
		PlayerInfo[playerid][pVehLocY][idcar] = PlayerInfo[id][pVehLocY][x]; 
		PlayerInfo[playerid][pVehLocZ][idcar] = PlayerInfo[id][pVehLocZ][x];
		PlayerInfo[playerid][pVehAngle][idcar] = PlayerInfo[id][pVehAngle][x]; 
		PlayerInfo[playerid][pVehBuyTime][idcar] = PlayerInfo[id][pVehBuyTime][x];
		PlayerInfo[playerid][pVehColor1][idcar] = PlayerInfo[id][pVehColor1][x];
		PlayerInfo[playerid][pVehColor2][idcar] = PlayerInfo[id][pVehColor2][x]; 
		PlayerInfo[playerid][pVehKM][idcar] = PlayerInfo[id][pVehKM][x];
		PlayerInfo[playerid][pVehGas][idcar] = PlayerInfo[id][pVehGas][x];
		PlayerInfo[playerid][pVehPaintJ][idcar] = PlayerInfo[id][pVehPaintJ][x];
		PlayerInfo[playerid][pVehStage][idcar] = PlayerInfo[id][pVehStage][x];
		PlayerInfo[playerid][pVehWorking][idcar] = PlayerInfo[id][pVehWorking][x];
		PlayerInfo[playerid][pVehNeon][idcar] = PlayerInfo[id][pVehNeon][x];
		PlayerInfo[playerid][pVehNeonCustom][idcar] = PlayerInfo[id][pVehNeonCustom][x];
		PlayerInfo[playerid][pVehVip][idcar] = PlayerInfo[id][pVehVip][x];
		PlayerInfo[playerid][pVehRainbow][idcar] = PlayerInfo[id][pVehRainbow][x];
		PlayerInfo[playerid][pVehRainbowOn][idcar] = PlayerInfo[id][pVehRainbowOn][x];
		PlayerInfo[playerid][pVehInGarage][idcar] = PlayerInfo[id][pVehInGarage][x];
		PlayerInfo[playerid][pBoughtMethod][idcar] = PlayerInfo[id][pBoughtMethod][x];
		for(new s; s < 17; s++) CarMod[playerid][idcar][s] = CarMod[id][x][s];
		Query_Mysql("UPDATE `cars` SET `Owner`= '%s' WHERE `ID` = '%d'", GetName(playerid), PlayerInfo[id][pVeh][x]);
		PlayerInfo[id][pVeh][x] = -1;
		PlayerInfo[id][pVehID][x] = PlayerInfo[id][pVehModel][x] = 0;
	} 
	if(GetPVarInt(playerid, "SkinTrade") != -1){
		for(new i; i < PlayerInfo[playerid][pSkinSlots]; i++){
			if(PlayerInfo[id][pSkins][i] == DefaultSkin){
				PlayerInfo[id][pSkins][i] = GetPVarInt(playerid, "SkinTrade");
				break;
			}
		}
		for(new i; i < PlayerInfo[playerid][pSkinSlots]; i++){
			if(PlayerInfo[playerid][pSkins][i] == GetPVarInt(playerid, "SkinTrade")){
				PlayerInfo[playerid][pModel] = DefaultSkin;
				SetPlayerSkin(playerid, DefaultSkin);
				pUpdateInt(playerid, "Model", DefaultSkin);
				PlayerInfo[playerid][pSkins][i] = DefaultSkin;
				break;
			}
		}
	}
	if(GetPVarInt(id, "SkinTrade") != -1){
		for(new i; i < PlayerInfo[playerid][pSkinSlots]; i++){
			if(PlayerInfo[playerid][pSkins][i] == DefaultSkin){
				PlayerInfo[playerid][pSkins][i] = GetPVarInt(id, "SkinTrade");
				break;
			}
		}
		for(new i; i < PlayerInfo[id][pSkinSlots]; i++){
			if(PlayerInfo[id][pSkins][i] == GetPVarInt(id, "SkinTrade")){
				PlayerInfo[id][pModel] = DefaultSkin;
				SetPlayerSkin(id, DefaultSkin);
				pUpdateInt(id, "Model", DefaultSkin);
				PlayerInfo[id][pSkins][i] = DefaultSkin;
				break;
			}
		}
	}
	if(GetPVarInt(id, "JobTrade") != -1){
		new Job = GetPVarInt(id, "JobTrade");
		PlayerInfo[playerid][pOwnedJob] = Job;
		pUpdateInt(playerid, "OwnedJob", Job);
		PlayerInfo[id][pOwnedJob] = 0;
		pUpdateInt(id, "OwnedJob", 0);
		format(JobInfo[Job][jOwner], 25, GetName(playerid));
		JobInfo[Job][jPrice] = 0;
		JobInfo[Job][jLastProp] = 0;
		Query_Mysql("UPDATE `jobs` SET `Owner` = '%s', `Price` = '%d', `LastProp` = '%d' WHERE `ID` = '%d'", JobInfo[Job][jOwner], JobInfo[Job][jPrice], JobInfo[Job][jLastProp], Job);
		UpdateLabel(3, Job);
	}
	if(GetPVarInt(playerid, "JobTrade") != -1){
		new Job = GetPVarInt(playerid, "JobTrade");
		PlayerInfo[id][pOwnedJob] = Job;
		pUpdateInt(id, "OwnedJob", Job);
		PlayerInfo[playerid][pOwnedJob] = 0;
		pUpdateInt(playerid, "OwnedJob", 0);
		format(JobInfo[Job][jOwner], 25, GetName(id));
		JobInfo[Job][jPrice] = 0;
		JobInfo[Job][jLastProp] = 0;
		Query_Mysql("UPDATE `jobs` SET `Owner` = '%s', `Price` = '%d', `LastProp` = '%d' WHERE `ID` = '%d'", JobInfo[Job][jOwner], JobInfo[Job][jPrice], JobInfo[Job][jLastProp], Job);
		UpdateLabel(3, Job);
	}
	if(GetPVarInt(id, "BillboardTrade") != -1)
	{
		new
			b = GetPVarInt(id, "BillboardTrade")
		;

		PlayerInfo[playerid][pBillboard] = b;
		pUpdateInt(playerid, "Billboard", b);
		PlayerInfo[id][pBillboard] = 0;
		pUpdateInt(id, "Billboard", 0);
		format(Billboards[b][bOwner], strlen(GetName(playerid)) + 1, GetName(playerid));
		Billboards[b][bPrice] = 0;
		Query_Mysql("update billboards set Owner = '%s', Price = '%d' where id = %d", Billboards[b][bOwner], Billboards[b][bPrice], b);
		UpdateLabel(4, b);
	}
	if(GetPVarInt(playerid, "BillboardTrade") != -1)
	{
		new
			b = GetPVarInt(playerid, "BillboardTrade")
		;

		PlayerInfo[id][pBillboard] = b;
		pUpdateInt(id, "Billboard", b);
		PlayerInfo[playerid][pBillboard] = 0;
		pUpdateInt(playerid, "Billboard", 0);
		format(Billboards[b][bOwner], strlen(GetName(id)) + 1, GetName(id));
		Billboards[b][bPrice] = 0;
		Query_Mysql("update billboards set Owner = '%s', Price = '%d' where id = %d", Billboards[b][bOwner], Billboards[b][bPrice], b);
		UpdateLabel(4, b);
	}
	if(GetPVarInt(id, "VoucherTrade") != -1)
	{
		new
			b = GetPVarInt(id, "VoucherTrade")
		;

		GivePlayerVoucher(playerid, b, 1);

		GivePlayerVoucher(id, b, -1);
	}
	if(GetPVarInt(playerid, "VoucherTrade") != -1)
	{
		new
			b = GetPVarInt(playerid, "VoucherTrade")
		;

		GivePlayerVoucher(id, b, 1);

		GivePlayerVoucher(playerid, b, -1);
	}
	if(GetPVarInt(id, "HiddenTrade") != -1)
	{
		new
			b = GetPVarInt(id, "HiddenTrade")
		;

		GivePlayerHiddens(playerid, b);

		GivePlayerHiddens(id, -b);
	}
	if(GetPVarInt(playerid, "HiddenTrade") != -1)
	{
		new
			b = GetPVarInt(playerid, "HiddenTrade")
		;

		GivePlayerHiddens(id, b);

		GivePlayerHiddens(playerid, -b);
	}
	CancelSelectTextDraw(playerid);
	CancelSelectTextDraw(id); 
	HideTradeItems(playerid);
	HideTradeItems(id); 
	HideTradeTDs(playerid); 
	HideTradeTDs(id); 
	resetTradeVariables(playerid); 
	resetTradeVariables(id); 
	return true;
}
function GiveBiz(id, biz){
	Query_Mysql("UPDATE `users` SET `Bizz` = '0' WHERE `Bizz` = '%d'", biz);
	foreach(new i : Player){ 
		if(PlayerInfo[i][pBizz] == biz)
		{
			PlayerInfo[i][pBizz] = 0;
			break;
		}
	}
	PlayerInfo[id][pBizz] = biz;
	pUpdateInt(id, "Bizz", biz); 
	format(BizzInfo[biz][bOwner], 25, GetName(id));
	BizzInfo[biz][bPrice] = 0;
	UpdateLabel(2, biz);
	Query_Mysql("UPDATE `bizz` SET `Owner`='%s', `Prices`='0' WHERE `ID`='%d'", GetName(id), biz);
	FinishAchievement(id, 6);
	return true;
}
function GiveHouse(id, house){
	Query_Mysql("UPDATE `users` SET `House` = '0' WHERE `House` = '%d'", house);
	foreach(new i : Player){ 
		if(PlayerInfo[i][pHouse] == house)
		{
			PlayerInfo[i][pHouse] = 0;
			break;
		}
	}
	PlayerInfo[id][pHouse] = house;
	pUpdateInt(id, "House", house); 
	HouseInfo[house][hPrice] = 0;
	format(HouseInfo[house][hOwner], 25, GetName(id)); 
	UpdateLabel(1, house);
	Query_Mysql("UPDATE `houses` SET `Owner`='%s' WHERE `ID`= '%d'", GetName(id), house);
	FinishAchievement(id, 5);
	return true;
}
stock ShowTrade(playerid){
	gString[0] = (EOS);
	format(gString, sizeof(gString), "Bani - $%s\nCasa - %d\nAfacere - %d\nVehicule\nSkin - %d\nJob - %d\nPanou - %d\nVouchere\nHiddens - %d", 
		formatBytes(PlayerCash[playerid]), PlayerInfo[playerid][pHouse], PlayerInfo[playerid][pBizz], PlayerInfo[playerid][pModel], PlayerInfo[playerid][pOwnedJob],
		PlayerInfo[playerid][pBillboard], PlayerInfo[playerid][pHiddens]);
	SPD(playerid, DIALOG_TRADE, DIALOG_STYLE_LIST, "Trade", gString, "Ok", "Cancel"); 
	return true;
}
stock AddTradeItem(playerid, type, amount, const banimulti[32] = ""){
	new tid, pid, id = TradeID[playerid];
	if(TradeItems[playerid] == 5) return true;
	if(!GetPVarInt(playerid, "TradeAccepted")) tid = TradeItems[playerid] + 11, pid = TradeItems[playerid];
	if(GetPVarInt(playerid, "TradeAccepted")) tid = TradeItems[playerid] + 16, pid = TradeItems[playerid] + 5;
	TradeItems[playerid] ++; TextDrawShowForPlayer(playerid, TradeTD[tid]); TextDrawShowForPlayer(id, TradeTD[tid]);
	switch(type){
		case 0: {
			new BigInt:TempMoney;
			converBytes(TempMoney, banimulti);
			SetPVarString(playerid, "MoneyTrade", banimulti);
			va_PlayerTextDrawSetString(playerid, TradeTitle[pid], "$%s", formatBytes(TempMoney));
			va_PlayerTextDrawSetString(id, TradeTitle[pid], "$%s", formatBytes(TempMoney));
			PlayerTextDrawSetPreviewModel(playerid, TradeIcon[pid], 1212);
			PlayerTextDrawSetPreviewModel(id, TradeIcon[pid], 1212);
		}
		case 1: {
			SetPVarInt(playerid, "HouseTrade", PlayerInfo[playerid][pHouse]); 
			va_PlayerTextDrawSetString(playerid, TradeTitle[pid], "House %d", PlayerInfo[playerid][pHouse]);
			va_PlayerTextDrawSetString(id, TradeTitle[pid], "House %d", PlayerInfo[playerid][pHouse]);
			PlayerTextDrawSetPreviewModel(playerid, TradeIcon[pid], 1273);
			PlayerTextDrawSetPreviewModel(id, TradeIcon[pid], 1273);
		}
		case 2: {
			SetPVarInt(playerid, "BusinessTrade", PlayerInfo[playerid][pBizz]); 
			va_PlayerTextDrawSetString(playerid, TradeTitle[pid], "Business %d", PlayerInfo[playerid][pBizz]);
			va_PlayerTextDrawSetString(id, TradeTitle[pid], "Business %d", PlayerInfo[playerid][pBizz]);
			PlayerTextDrawSetPreviewModel(playerid, TradeIcon[pid], 1272);
			PlayerTextDrawSetPreviewModel(id, TradeIcon[pid], 1272);
		}
		case 3: {
			SetPVarInt(playerid, "CarTrade", amount);
			va_PlayerTextDrawSetString(playerid, TradeTitle[pid], "%s~n~%0.2f km", GetVehicleName(PlayerInfo[playerid][pVehModel][amount]), PlayerInfo[playerid][pVehKM][amount]);
			va_PlayerTextDrawSetString(id, TradeTitle[pid], "%s~n~%0.2f km", GetVehicleName(PlayerInfo[playerid][pVehModel][amount]), PlayerInfo[playerid][pVehKM][amount]);
			PlayerTextDrawSetPreviewModel(playerid, TradeIcon[pid], PlayerInfo[playerid][pVehModel][amount]);
			PlayerTextDrawSetPreviewVehCol(playerid, TradeIcon[pid], PlayerInfo[playerid][pVehColor1][amount], PlayerInfo[playerid][pVehColor2][amount]);
			PlayerTextDrawSetPreviewModel(id, TradeIcon[pid], PlayerInfo[playerid][pVehModel][amount]);
			PlayerTextDrawSetPreviewVehCol(id, TradeIcon[pid], PlayerInfo[playerid][pVehColor1][amount], PlayerInfo[playerid][pVehColor2][amount]);
		}
		case 4: {
			SetPVarInt(playerid, "SkinTrade", PlayerInfo[playerid][pModel]);
			va_PlayerTextDrawSetString(playerid, TradeTitle[pid], "Skin %d", PlayerInfo[playerid][pModel]);
			va_PlayerTextDrawSetString(id, TradeTitle[pid], "Skin %d", PlayerInfo[playerid][pModel]);
			PlayerTextDrawSetPreviewModel(playerid, TradeIcon[pid], PlayerInfo[playerid][pModel]);
			PlayerTextDrawSetPreviewModel(id, TradeIcon[pid], PlayerInfo[playerid][pModel]);
		}
		case 5: {
			SetPVarInt(playerid, "JobTrade", PlayerInfo[playerid][pOwnedJob]);
			va_PlayerTextDrawSetString(playerid, TradeTitle[pid], "Job %d", PlayerInfo[playerid][pOwnedJob]);
			va_PlayerTextDrawSetString(id, TradeTitle[pid], "Job %d", PlayerInfo[playerid][pOwnedJob]);
			PlayerTextDrawSetPreviewModel(playerid, TradeIcon[pid], 19135);
			PlayerTextDrawSetPreviewModel(id, TradeIcon[pid], 19135);
		}
		case 6:
		{
			SetPVarInt(playerid, "BillboardTrade", PlayerInfo[playerid][pBillboard]);
			va_PlayerTextDrawSetString(playerid, TradeTitle[pid], "Panou %d", PlayerInfo[playerid][pBillboard]);
			va_PlayerTextDrawSetString(id, TradeTitle[pid], "Panou %d", PlayerInfo[playerid][pBillboard]);
			PlayerTextDrawSetPreviewModel(playerid, TradeIcon[pid], 1239);
			PlayerTextDrawSetPreviewModel(id, TradeIcon[pid], 1239);
		}
		case 7:
		{
			new
				Names[5][10] = {"Normal", "Epic", "Premium", "Legendary", "OG"}
			;

			SetPVarInt(playerid, "VoucherTrade", amount);
			va_PlayerTextDrawSetString(playerid, TradeTitle[pid], "%s Voucher", Names[amount]);
			va_PlayerTextDrawSetString(id, TradeTitle[pid], "%s Voucher", Names[amount]);
			PlayerTextDrawSetPreviewModel(playerid, TradeIcon[pid], 1239);
			PlayerTextDrawSetPreviewModel(id, TradeIcon[pid], 1239);
		}
		case 8:
		{
			SetPVarInt(playerid, "HiddenTrade", amount);
			va_PlayerTextDrawSetString(playerid, TradeTitle[pid], "x%d Hiddens", amount);
			va_PlayerTextDrawSetString(id, TradeTitle[pid], "x%d Hiddens", amount);
			PlayerTextDrawSetPreviewModel(playerid, TradeIcon[pid], 1239);
			PlayerTextDrawSetPreviewModel(id, TradeIcon[pid], 1239);
		}
	}
	PlayerTextDrawShow(playerid, TradeTitle[pid]);
	PlayerTextDrawShow(id, TradeTitle[pid]);
	PlayerTextDrawShow(playerid, TradeIcon[pid]);
	PlayerTextDrawShow(id, TradeIcon[pid]);
	return true;
}
CMD:trade(playerid, params[]){
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/trade <playerid/name>");
	if(id == INVALID_PLAYER_ID) return SendMsg(playerid, COLOR_SERVER, "Acel player nu este conectat.");
	if(PlayerInfo[playerid][pConnectTime] < 10 || PlayerInfo[id][pConnectTime] < 10) return Info(playerid, "Unul din voi nu are 10 ore jucate.");
	if(GetPlayerInterior(playerid) || IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Nu poti face o afacere dintr-un interior sau vehicul!");
	if(GetDistanceBetweenPlayers(playerid,id) > 5) return Info(playerid, "Nu esti langa acel player");
	if(TradePlayer[id] == playerid) return Info(playerid, "I-ai mai facut o oferta acestui jucator!");
	if(TradeID[playerid] != -1) return SendMsg(playerid, COLOR_SERVER, "Esti deja intr-o afacere!");
	if(playerid == id) return Info(playerid, "Nu poti executa aceasta comanda asupra ta!");
	TradePlayer[id] = playerid; Info(playerid, "L-ai invitat pe %s (%d) pentru a face afaceri.", GetName(id), id); 
	Info(id, "%s (%d) te-a invitat sa faceti afaceri. Foloseste (/accept trade %d) pentru a accepta invitatia.", GetName(playerid),playerid, playerid); 
	return true;
}
function acceptTrade(playerid, id){ 
	if(TradePlayer[playerid] == -1) return Info(playerid, "Nu ai primit o asemenea oferta.");
	if(TradePlayer[playerid] != id) return Info(playerid, "Acel player nu ti-a facut o oferta.");
	if(GetPlayerInterior(playerid) || IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Nu poti face o afacere dintr-un interior sau vehicul!");
	if(GetPlayerInterior(id) || IsPlayerInAnyVehicle(id)) return Info(playerid, "Nu poti face o afacere cu cineva ce se afla intr-un interior sau vehicul!");
	if(TradeID[playerid] != -1) return SendMsg(playerid, COLOR_SERVER, "Esti deja intr-o afacere!");
	if(TradeID[id] != -1) return SendMsg(playerid, COLOR_SERVER, "Acel player este deja intr-o afacere!"); 
	TradePlayer[playerid] = -1;
	va_PlayerTextDrawSetString(playerid, TradePTD[0], "Bunurile lui %s", GetName(id));
	PlayerTextDrawSetString(id, TradePTD[0], "Bunurile tale");
	PlayerTextDrawSetString(playerid, TradePTD[1], "Bunurile tale");
	va_PlayerTextDrawSetString(id, TradePTD[1], "Bunurile lui %s", GetName(playerid));
	TradeItems[id] = 0;
	TradeItems[playerid] = 0;
	TradeReady[id] = false;
	TradeReady[playerid] = false;
	TradeID[id] = playerid;
	TradeID[playerid] = id;
	SendMsg(id, COLOR_SERVER, "%s (%d) a acceptat invitatia ta!", GetName(playerid), playerid); ShowTradeTDs(id), ShowTradeTDs(playerid);
	TextDrawHideForPlayer(id, TradeTD[9]), TextDrawHideForPlayer(id, TradeTD[10]), PlayerTextDrawHide(playerid, TradePTD[2]), PlayerTextDrawHide(playerid, TradePTD[3]);
	SetPVarInt(playerid, "TradeAccepted", 1), SetPVarInt(id, "TradeAccepted", 0), SetPVarInt(id, "CarTrade", -1), SetPVarInt(playerid, "CarTrade", -1);
	return true;
}

stock GetSkinMoney(skin)
{
	new
		MoneyTypes[5] =
		{
			0,
			75_000_000,
			150_000_000,
			330_000_000,
			500_000_000
		}
	;
	return MoneyTypes[SkinRarity(skin)];
}
stock GetSkinPP(skin)
{
	new
		PPTypes[5] =
		{
			0,
			10,
			25,
			75,
			150
		}
	;
	return PPTypes[SkinRarity(skin)];
}
stock GetSkinRarity(skin)
{
	new
		TextTypes[5][10] =
		{
			"",
			"Comun",
			"Rar",
			"Epic",
			"Legendar"
		}
	;
	return TextTypes[SkinRarity(skin)];
}
function BuySkin(playerid, type, skin)
{
	if(GetSkinSlots(playerid) < 1)
		return SendMsg(playerid, COLOR_SERVER, "Clothes >> {ffffff}Nu ai sloturi libere.");

	new
		TextTypes[5][10] =
		{
			"",
			"Comun",
			"Rar",
			"Epic",
			"Legendar"
		}
	;

	switch(type)
	{
		case 1:
		{
			new
				price = GetSkinPP(skin)
			;

			if(PlayerInfo[playerid][pPremiumPoints] < price)
				return SendMsg(playerid, COLOR_SERVER, "Clothes >> {ffffff}Nu ai %dPP.", price);

			GivePlayerPP(playerid, -price);

			SendMsg(playerid, COLOR_SERVER, "Clothes >> {ffffff}Ti-ai cumparat skin-ul %d de tip %s pentru %dPP.", skin, TextTypes[SkinRarity(skin)], price);
		}
		case 2:
		{
			new
				price = GetSkinMoney(skin)
			;

			if(GetPlayerCash(playerid) < price)
				return SendMsg(playerid, COLOR_SERVER, "Clothes >> {ffffff}Nu ai $%s.", FormatNumber(price));

			GivePlayerCash(playerid, -price);

			SendMsg(playerid, COLOR_SERVER, "Clothes >> {ffffff}Ti-ai cumparat skin-ul %d de tip %s pentru $%s.", skin, TextTypes[SkinRarity(skin)], FormatNumber(price));
		}
	}
	InsertSkin(playerid, skin);
	ExitClothing(playerid);
	return true;
}
function ShowPerkDetails(playerid, perk)
{
	for(new i = 0; i < sizeof(CategoryPerksTD); i++)
	{
		TextDrawHideForPlayer(playerid, CategoryPerksTD[i]);
	}

	for(new i = 0; i < sizeof(CategoryPerksPTD); i++)
	{
		PlayerTextDrawHide(playerid, CategoryPerksPTD[i]);
	}

	for(new i = 0; i < sizeof(PerkDetailsTD); i++)
	{
		TextDrawShowForPlayer(playerid, PerkDetailsTD[i]);
	}

	PlayerTextDrawSetString(playerid, PerkDetailsPTD[0], NamesPerks[perk]);
	PlayerTextDrawSetPreviewModel(playerid, PerkDetailsPTD[1], ObjectsPerks[perk]);
	PlayerTextDrawSetString(playerid, PerkDetailsPTD[2], DescriptionPerks[perk]);
	va_PlayerTextDrawSetString(playerid, PerkDetailsPTD[3], "Cost: %d points", CostPerks[perk]);
	va_PlayerTextDrawSetString(playerid, PerkDetailsPTD[4], "Your points: %d points", PlayerInfo[playerid][pPerkPoints]);

	for(new i = 0; i < sizeof(PerkDetailsPTD); i++)
	{
		PlayerTextDrawShow(playerid, PerkDetailsPTD[i]);
	}

	InTextdrawMenu[playerid] = 20;

	PerkDetailsID[playerid] = perk;

	return true;
}
function ManevraTha(playerid, adunare)
{
	new
		MinPerPage[9] = {0, 6, 8, 10, 16, 20, 24, 30, 36}
	;

	ShowPerkDetails(playerid, MinPerPage[InTextdrawMenu[playerid] - 11] + adunare);

	return true;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(playertextid == MySkinsPTD[0])
	{
		new
			Slot = MySkinsSlot[playerid],
			SelectedSlot = Slot - 1
		;

		SelectedSkin[playerid] = SelectedSlot;

		ExitMySkins(playerid);

		SPD(playerid, DIALOG_SOPS, DIALOG_STYLE_LIST, "Optiuni Skin", "Echipeaza skin-ul\nSterge skin-ul", "Alege", "Anuleaza");
	}
	if(playertextid == MySkinsPTD[1])
	{
		new
			Slot = MySkinsSlot[playerid],
			SelectedSlot = Slot
		;

		SelectedSkin[playerid] = SelectedSlot;

		ExitMySkins(playerid);

		SPD(playerid, DIALOG_SOPS, DIALOG_STYLE_LIST, "Optiuni Skin", "Echipeaza skin-ul\nSterge skin-ul", "Alege", "Anuleaza");
	}
	if(playertextid == MySkinsPTD[2])
	{
		new
			Slot = MySkinsSlot[playerid],
			SelectedSlot = Slot + 1
		;

		SelectedSkin[playerid] = SelectedSlot;

		ExitMySkins(playerid);

		SPD(playerid, DIALOG_SOPS, DIALOG_STYLE_LIST, "Optiuni Skin", "Echipeaza skin-ul\nSterge skin-ul", "Alege", "Anuleaza");
	}
	if(playertextid == CategoryPerksPTD[12])
	{
		ManevraTha(playerid, 1);
	}
	if(playertextid == CategoryPerksPTD[13])
	{
		ManevraTha(playerid, 2);
	}
	if(playertextid == CategoryPerksPTD[14])
	{
		ManevraTha(playerid, 3);
	}
	if(playertextid == CategoryPerksPTD[15])
	{
		ManevraTha(playerid, 4);
	}
	if(playertextid == CategoryPerksPTD[16])
	{
		ManevraTha(playerid, 5);
	}
	if(playertextid == CategoryPerksPTD[17])
	{
		ManevraTha(playerid, 6);
	}
	if(playertextid == ClothingStorePTD[1])
	{
		if(GetSkinSlots(playerid) < 1) return Info(playerid, "Nu ai sloturi libere.");
		if(OnDuty[playerid] != false) return Info(playerid, "Nu poti face asta deoarece esti la datorie.");
		BuySkin(playerid, 1, ServerSkins[SkinClothing[playerid]][0]);
	}
	if(playertextid == ClothingStorePTD[2])
	{
		if(GetSkinSlots(playerid) < 1) return Info(playerid, "Nu ai sloturi libere.");
		if(OnDuty[playerid] != false) return Info(playerid, "Nu poti face asta deoarece esti la datorie.");
		BuySkin(playerid, 2, ServerSkins[SkinClothing[playerid]][0]);
	}
	if(playertextid == DicePTD[0])
	{
		new
			id = DicePartner[playerid],
			money = DiceMoney[playerid]
		;

		if(id == -1)
			return true;

		if(GetPlayerCash(playerid) < money)
			return SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Nu ai banii necesari.");

		if(GetPlayerCash(id) < money)
			return SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Adversarul nu are banii necesari.");

		if(DiceRolled[playerid][0])
		{
			if(DiceRolled[playerid][1])
			{
				SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Ai invartit deja ambele zaruri, asteapta-ti adversarul.");
			}
			else
			{			
				SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Ai invartit deja acest zar.");
			}

			return true;
		}

		if(Iter_Contains(MovingDice, playerid))
			return SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Invarti deja un zar, asteapta.");

		if(Iter_Contains(MovingDice, id))
			return SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Adversarul invarte deja un zar, asteapta.");

		MovingDiceID[playerid] = 1;

		MovingDiceStep[playerid] = 0;

		Iter_Add(MovingDice, playerid);

		SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Ai inceput sa invarti un zar.");
	}
	if(playertextid == DicePTD[1])
	{
		new
			id = DicePartner[playerid],
			money = DiceMoney[playerid]
		;

		if(id == -1)
			return true;

		if(GetPlayerCash(playerid) < money)
			return SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Nu ai banii necesari.");

		if(GetPlayerCash(id) < money)
			return SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Adversarul nu are banii necesari.");

		if(DiceRolled[playerid][1])
		{
			if(DiceRolled[playerid][0])
			{
				SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Ai invartit deja ambele zaruri, asteapta-ti adversarul.");
			}
			else
			{			
				SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Ai invartit deja acest zar.");
			}

			return true;
		}

		if(Iter_Contains(MovingDice, playerid))
			return SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Invarti deja un zar, asteapta.");

		if(Iter_Contains(MovingDice, id))
			return SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Adversarul invarte deja un zar, asteapta.");

		MovingDiceID[playerid] = 2;

		MovingDiceStep[playerid] = 0;

		Iter_Add(MovingDice, playerid);

		SendMsg(playerid, COLOR_SERVER, "Dice >> {ffffff}Ai inceput sa invarti un zar.");
	}
	if(playertextid == InventoryPTD[7])
	{
		switch(InventoryPage[playerid])
		{
			case 2:
			{
				if(PlayerInfo[playerid][pBurger] < 1)
					return SendMsg(playerid, COLOR_SERVER, "Inventory >> {ffffff}Nu ai un burger.");

				if(PlayerInfo[playerid][pMancare] >= 100)
					return SendMsg(playerid, COLOR_SERVER, "Inventory >> {ffffff}Ai suficienta mancare.");

				PlayerInfo[playerid][pBurger] --;
				PlayerInfo[playerid][pMancare] += 20;
				if(PlayerInfo[playerid][pMancare] > 100)
				{
					PlayerInfo[playerid][pMancare] = 100;
				}

				SendMsg(playerid, COLOR_SERVER, "Inventory >> {ffffff}Ai consumat un burger, %d ramasi.(+20 mancare)", PlayerInfo[playerid][pBurger]);

				va_PlayerTextDrawSetString(playerid, InventoryPTD[8], "x%d", PlayerInfo[playerid][pBurger]);

				UpdateFood(playerid);
			}
			case 3:
			{
				if(PlayerInfo[playerid][pSoda] < 1)
					return SendMsg(playerid, COLOR_SERVER, "Inventory >> {ffffff}Nu ai un suc.");

				if(PlayerInfo[playerid][pApa] >= 100)
					return SendMsg(playerid, COLOR_SERVER, "Inventory >> {ffffff}Ai suficienta apa.");

				PlayerInfo[playerid][pSoda] --;
				PlayerInfo[playerid][pApa] += 20;
				if(PlayerInfo[playerid][pApa] >= 100)
				{
					PlayerInfo[playerid][pApa] = 100;
				}

				SendMsg(playerid, COLOR_SERVER, "Inventory >> {ffffff}Ai consumat un suc, %d ramase.(+20 apa.)", PlayerInfo[playerid][pSoda]);

				va_PlayerTextDrawSetString(playerid, InventoryPTD[8], "x%d", PlayerInfo[playerid][pSoda]);

				UpdateFood(playerid);
			}
		}
	}
	if(playertextid == UpgraderPTD[0])
	{
		SPD(playerid, DIALOG_UPGRADER1, DIALOG_STYLE_LIST, "Upgrader", "Bani\nPuncte Premium", "Inainte", "Anuleaza");
	}
	if(playertextid == UpgraderPTD[2])
	{
		SPD(playerid, DIALOG_UPGRADER2, DIALOG_STYLE_INPUT, "Upgrader", "Introdu suma:", "Inainte", "Anuleaza");
	}
	if(playertextid == TuningPTD[1])
	{
		if(RotationModification[playerid] >= 360)
		{
			RotationModification[playerid] = 0;
		}

		RotationModification[playerid] += 45;

		ShowTuning(playerid);
	}
	if(playertextid == RentVehiclePTD[0])
	{
		RentSelectedVehicle(playerid);
	}
	if(playertextid == GunPTD[1])
	{
		new
			Arma = GunShopSelected[playerid],
			Price = GunShopPrice[Arma][1],
			Ammo[7] = {0, 100, 100, 100, 150, 200, 200},
			Biz = InBiz[playerid]
		;
		if(GetPlayerCash(playerid) < Price) return Info(playerid, "Nu ai $%s.", FormatNumber(Price));
		if((PlayerInfo[playerid][pWeapons][Arma] + Ammo[Arma]) > 999) return Info(playerid, "Nu poti cumpara mai mult.");
		PlayerInfo[playerid][pWeapons][Arma] += Ammo[Arma];
		GivePlayerCash(playerid, -Price);
		BizzInfo[Biz][bTill] += Price;
		Query_Mysql("update bizz set Till = %d where id = %d", BizzInfo[Biz][bTill], Biz);
		Info(playerid, "Arma achizitionata, verifica-ti Invetarul apasand 'H'.");
	}
	for(new i = 1; i < 4; i++){
		if(playertextid == TriviaPTD[i]){
			if(strval(TriviaQuestions[CurrentQuestion[playerid]][4]) != i)
			{
				SetPVarInt(playerid, "GresiteTrivia", GetPVarInt(playerid, "GresiteTrivia") + 1);
			}
			if(GetPVarInt(playerid, "GresiteTrivia") >= 3) return CloseTrivia(playerid);
			if(GetPVarInt(playerid, "IntrebareTrivia") >= 9){
				new rand = 3_000_000 + random(1_000_000);
				CloseTrivia(playerid);
				Info(playerid, "Felicitari, ai primit $%s si 5PP.", FormatNumber(rand));
				GivePlayerCash(playerid, rand);
				GiveGoal(rand);
				PlayerInfo[playerid][pPremiumPoints] += 5;
				pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
				if(PlayerInfo[playerid][pActivePotions][2] > gettime())
				{
					GivePlayerCash(playerid, rand);
					SendMsg(playerid, COLOR_SERVER, "Potions >> {ffffff}Ai primit $%s deoarece folosesti legendary potion.", FormatNumber(rand));
				}
				PlayerInfo[playerid][pTrivia] = true;
				pUpdateInt(playerid, "Trivia", PlayerInfo[playerid][pTrivia]);
			}
			else
			{
				SetPVarInt(playerid, "IntrebareTrivia", GetPVarInt(playerid, "IntrebareTrivia") + 1);
				CurrentQuestion[playerid] = PlayerQuestionsTrivia[playerid][GetPVarInt(playerid, "IntrebareTrivia")];
				SetPVarInt(playerid, "TimpTrivia", 10);
				va_PlayerTextDrawSetString(playerid, TriviaPTD[0], TriviaQuestions[CurrentQuestion[playerid]][0]);
				va_PlayerTextDrawSetString(playerid, TriviaPTD[1], TriviaQuestions[CurrentQuestion[playerid]][1]);
				va_PlayerTextDrawSetString(playerid, TriviaPTD[2], TriviaQuestions[CurrentQuestion[playerid]][2]);
				va_PlayerTextDrawSetString(playerid, TriviaPTD[3], TriviaQuestions[CurrentQuestion[playerid]][3]);
				for(new t; t < 5; t++) PlayerTextDrawShow(playerid, TriviaPTD[t]);
			}
		}
	}
	for(new i = 1; i < 5; i++)
	{
		if(playertextid == FishPTD[i])
		{
			PlayerTextDrawHide(playerid, FishPTD[i]);
			SetPVarInt(playerid, "PestiPrinsi", i);
			PlayerTextDrawShow(playerid, FishPTD[i + 1]);
			UpdatePesti(playerid);
		}
	}
	if(playertextid == FishPTD[5])
	{
		for(new i; i < 2; i++)
		{
			TextDrawHideForPlayer(playerid, FishTD[i]);
		}
		for(new i; i < 6; i++)
		{
			PlayerTextDrawHide(playerid, FishPTD[i]);
		}
		SetPVarInt(playerid, "PestiPrinsi", 0);
		SetPVarInt(playerid, "FishTimer", -1);
		CancelSelectTextDraw(playerid);
		FreezePlayer(playerid, false);
		switch(random(120))
		{
			case 0..70:
			{
				FishPrice[playerid] = 50000 + random(10000);
				Info(playerid, "Ai prins un peste de tip Salau.");
			}
			case 71..100:
			{
				FishPrice[playerid] = 70000 + random(10000);
				Info(playerid, "Ai prins un peste de tip Crap.");
			}
			case 101..120:
			{
				FishPrice[playerid] = 80000 + random(10000);
				Info(playerid, "Ai prins un peste de tip Somn.");
			}
		}
		if(PlayerInfo[playerid][pTutorial])
		{	
			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Felicitari, ai prins un peste la Jobul de Pescar.");
			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Pentru a-l vinde, va trebui sa mergi la un Non-Stop.");
			SendMsg(playerid, COLOR_SERVER, "Tutorial >> {ffffff}Pentru a te deplasa mai usor, urmeaza punctul rosu pentru a lua bicicleta.");

			RentVeh[playerid] = CreateVehicleEx(510, 735.5881,-1436.2034,13.5391, 90, 0, 0, -1, false, true);
			SetVehicleVirtualWorld(RentVeh[playerid], GetPlayerVirtualWorld(playerid));

			SetPlayerCheckpointEx(playerid, 735.5881, -1436.2034, 13.5391, 4);
			CP[playerid] = 500;
		}
	}
	if(playertextid == TradePTD[4]){
		if(GetPVarInt(playerid, "TradeAccepted") == 0){
			new id = TradeID[playerid];
			switch(TradeReady[playerid]){
				case 0: {
					if(TradeItems[playerid] == 0) return Info(playerid, "Trebuie sa adaugi minim un bun personal!");
					new stringa[32];
					GetPVarString(playerid, "MoneyTrade", stringa, sizeof(stringa));
					new BigInt:TempMoney;
					converBytes(TempMoney, stringa);
					if(!strmatch(stringa, "none") && !HaveCashForDs(playerid, valueBigInt(TempMoney))) return Info(playerid, "Nu ai banii pe care i-ai pus in afacere!");
					PlayerTextDrawSetString(playerid, TradePTD[4], "~g~pregatit");
					PlayerTextDrawSetString(id, TradePTD[4], "~g~pregatit");
					PlayerTextDrawShow(playerid, TradePTD[4]); 
					PlayerTextDrawShow(id, TradePTD[4]);
					TradeReady[playerid] = true;
					if(TradeReady[id]){
						if(GetPVarInt(playerid, "CarTrade") != -1 && GetPVarInt(id, "CarTrade") == -1 && GetPlayerVehicles(id) + 1 > PlayerInfo[id][pVehSlots]) return SendMsg(playerid, COLOR_SERVER, "Acel jucator are numarul maxim de vehicule! Puteti face doar schimb pe schimb.");
						if(GetPVarInt(id, "CarTrade") != -1 && GetPVarInt(playerid, "CarTrade") == -1 && GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots]) return SendMsg(playerid, COLOR_SERVER, "Ai numarul maxim de vehicule personale! Puteti face doar schimb pe schimb.");
						PlayerTextDrawSetString(playerid, TradePTD[6], "00:10");
						PlayerTextDrawSetString(id, TradePTD[6], "00:10");
						PlayerTextDrawShow(id, TradePTD[6]);
						PlayerTextDrawShow(playerid, TradePTD[6]);
						TradeTime[playerid] = 10;
						SendMsg(playerid, COLOR_SERVER, "Afacerea se va termina in urmatoarele 10 secunde!");
						SendMsg(id, COLOR_SERVER, "Afacerea se va termina in urmatoarele 10 secunde!");
					}
				} case 1: {
					PlayerTextDrawSetString(playerid, TradePTD[4], "~r~nepregatit"); PlayerTextDrawSetString(id, TradePTD[4], "~r~nepregatit"); PlayerTextDrawShow(playerid, TradePTD[4]);
					PlayerTextDrawShow(id, TradePTD[4]); TradeReady[playerid] = false;
					if(TradeTime[id] || TradeTime[playerid]){
						PlayerTextDrawHide(id, TradePTD[6]), PlayerTextDrawHide(playerid, TradePTD[6]); TradeTime[playerid] = 0, TradeTime[id] = 0;
						SendMsg(playerid, COLOR_SERVER, "Timer-ul a fost anulat deoarece unul dintre voi nu este pregatit!");
						SendMsg(id, COLOR_SERVER, "Timer-ul a fost anulat deoarece unul dintre voi nu este pregatit!");
					}
				}
			}
		}
	} if(playertextid == TradePTD[5]){
		if(GetPVarInt(playerid, "TradeAccepted") && TradeID[playerid] != -1){
			new id = TradeID[playerid]; switch(TradeReady[playerid]){
				case 0:{
					if(TradeItems[playerid] == 0) return Info(playerid, "Trebuie sa adaugi minim un bun personal!");
					new stringa[32];
					GetPVarString(playerid, "MoneyTrade", stringa, sizeof(stringa));
					new BigInt:TempMoney;
					converBytes(TempMoney, stringa);
					if(!strmatch(stringa, "none") && !HaveCashForDs(playerid, valueBigInt(TempMoney))) return Info(playerid, "Nu ai banii pe care i-ai pus in afacere!");
					PlayerTextDrawSetString(playerid, TradePTD[5], "~g~pregatit");
					PlayerTextDrawSetString(id, TradePTD[5], "~g~pregatit");
					PlayerTextDrawShow(playerid, TradePTD[5]); 
					PlayerTextDrawShow(id, TradePTD[5]);
					TradeReady[playerid] = true;
					if(TradeReady[id]){
						if(GetPVarInt(playerid, "CarTrade") != -1 && GetPVarInt(id, "CarTrade") == -1 && GetPlayerVehicles(id) + 1 > PlayerInfo[id][pVehSlots]) return SendMsg(playerid, COLOR_SERVER, "Acel player are numarul maxim de vehicule! Puteti face doar schimb pe schimb.");
						if(GetPVarInt(id, "CarTrade") != -1 && GetPVarInt(playerid, "CarTrade") == -1 && GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots]) return SendMsg(playerid, COLOR_SERVER, "Ai numarul maxim de vehicule personale! Puteti face doar schimb pe schimb.");
						PlayerTextDrawSetString(playerid, TradePTD[6], "00:10");
						PlayerTextDrawSetString(id, TradePTD[6], "00:10");
						PlayerTextDrawShow(id, TradePTD[6]);
						PlayerTextDrawShow(playerid, TradePTD[6]);
						TradeTime[playerid] = 10;
						SendMsg(playerid, COLOR_SERVER, "Afacerea se va termina in urmatoarele 10 secunde!");
						SendMsg(id, COLOR_SERVER, "Afacerea se va termina in urmatoarele 10 secunde!");
					}
				} case 1: {
					PlayerTextDrawSetString(playerid, TradePTD[5], "~r~nepregatit");
					PlayerTextDrawSetString(id, TradePTD[5], "~r~nepregatit");
					PlayerTextDrawShow(playerid, TradePTD[5]);
					PlayerTextDrawShow(id, TradePTD[5]);
					TradeReady[playerid] = false;
					if(TradeTime[id] || TradeTime[playerid]){
						PlayerTextDrawHide(id, TradePTD[6]);
						PlayerTextDrawHide(playerid, TradePTD[6]);
						TradeTime[playerid] = 0;
						TradeTime[id] = 0;
						SendMsg(playerid, COLOR_SERVER, "Unul dintre voi nu este pregatit!");
						SendMsg(id, COLOR_SERVER, "Unul dintre voi nu este pregatit!");
					}
				}
			}
		}
	} if(playertextid == TradePTD[3]){
		if(!TradeItems[playerid]) return Info(playerid, "Nu ai adaugat nimic in aceasta afacere!");
		if(TradeReady[playerid]) return Info(playerid, "Nu poti sterge bunurile adaugate in timp ce timer-ul este activat!");
		new id = TradeID[playerid]; TradeItems[playerid] = 0; TradeItems[id] = 0; HideTradeItems(playerid); ShowTradeTDs(id), ShowTradeTDs(playerid);
		TextDrawHideForPlayer(playerid, TradeTD[9]); TextDrawHideForPlayer(playerid, TradeTD[10]); PlayerTextDrawHide(id, TradePTD[2]); PlayerTextDrawHide(id, TradePTD[3]); 
		SetPVarString(playerid, "MoneyTrade", "none");
		SetPVarInt(playerid, "HouseTrade", -1);
		SetPVarInt(playerid, "BusinessTrade", -1);
		SetPVarInt(playerid, "CarTrade", -1);
		SetPVarInt(playerid, "SkinTrade", -1);
		SetPVarInt(playerid, "JobTrade", -1);
		SetPVarInt(playerid, "BillboardTrade", -1);
		SetPVarInt(playerid, "VoucherTrade", -1);
		SetPVarInt(playerid, "HiddenTrade", -1);
		SetPVarString(id, "MoneyTrade", "none");
		SetPVarInt(id, "HouseTrade", -1);
		SetPVarInt(id, "BusinessTrade", -1);
		SetPVarInt(id, "CarTrade", -1);
		SetPVarInt(id, "SkinTrade", -1);
		SetPVarInt(id, "JobTrade", -1);
		SetPVarInt(id, "BillboardTrade", -1);
		SetPVarInt(id, "VoucherTrade", -1);
		SetPVarInt(id, "HiddenTrade", -1);
		TradeReady[id] = false;
		Info(playerid, "%s si-a sters bunurile adaugate.", GetName(playerid));
		Info(id, "%s si-a sters bunurile adaugate.", GetName(playerid)); 
	} if(playertextid == TradePTD[2] && TradeReady[playerid] == false) ShowTrade(playerid); 
	return true;
}
function GetPlayerVehicles(playerid){
	new total = 0;
	for(new v; v < MAX_PERSONAL_VEHICLES; v++){
		if(PlayerInfo[playerid][pVeh][v] != -1) total++;
	} 
	return total;
}
stock randEx(min, max) return random(max - min) + min;
CMD:fastevent(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 5) return false;
	if(strcmp(fastevent, "None", true)) return Info(playerid, "Este deja un fastevent activ."); 
	new text[64], amount;
	if(sscanf(params, "s[64]i", text, amount)) return Info(playerid, "/fastevent [text] [premiu]");
	if(amount < 1 || amount > 1000000) return Info(playerid, "Suma minima este $1, iar cea maxima $1,000,000.");
	format(fastevent, 64, "%s", text);
	fasteventpremiu = amount;
	va_SendClientMessageToAll(COLOR_SERVER, "Event >> {ffffff}Primul care scrie {00a326}%s{ffffff} primeste $%s.", text, FormatNumber(amount));
	return true;
}
CMD:fragments(playerid)
{
	if(HaveCheckpoint(playerid)) return true;
	new
		Vehicles[8] = {61, 59, 60, 2, 27, 18, 1, 6},
		Cost[8] = {7, 6, 5, 4, 4, 4, 4, 4}
	;
	gString[0] = (EOS);
	for(new i = 0; i < sizeof(Vehicles); i++)
	{
		format(gString, sizeof(gString), "%s%s - %d/%d\n", gString, GetVehicleName(StockInfo[Vehicles[i]][vModel]), PlayerInfo[playerid][pFragments][i + 1], Cost[i]);
	}
	SPD(playerid, DIALOG_FRAGMENTS, DIALOG_STYLE_LIST, "Fragments", gString, "Alege", "Anuleaza");
	return true;
}
CMD:carradio(playerid){
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Info(playerid, "Trebuie sa te afli intr-un vehicul."); 
	ShowRadio(playerid);
	return true;
}
CMD:reward(playerid)
{
	new
		Reward[11][32] = {"", "$1,000,000", "3RP", "3PP", "500 GiftPoints", "150 OGPoints", "$4,000,000", "7RP", "6PP", "$6,000,000", "Stallion"}
	;
	gString[0] = (EOS);
	for(new i = 1; i < sizeof(Reward); i++)
	{
		new
			Colectat[16]
		;
		if(PlayerInfo[playerid][pZiua] > i)
		{
			format(Colectat, sizeof(Colectat), "Colectat");
		}
		else if(PlayerInfo[playerid][pZiua] == i)
		{
			if(PlayerInfo[playerid][pZiuaColectat])
			{
				format(Colectat, sizeof(Colectat), "Colectat");
			}
			else
			{
				format(Colectat, sizeof(Colectat), "De colectat");
			}
		}
		else if(PlayerInfo[playerid][pZiua] < i)
		{
			format(Colectat, sizeof(Colectat), "In viitor");
		}
		format(gString, sizeof(gString), "%sZiua %d - %s - %s\n", gString, i, Reward[i], Colectat);
	}
	SPD(playerid, DIALOG_GOL, DIALOG_STYLE_LIST, "Daily Reward", gString, "Iesi", "");
	return true;
}
CMD:p(playerid){
	if(PlayerInfo[playerid][pMuteTime]) return SendMsg(playerid, COLOR_SERVER, "Mute >> {ffffff}Mai ai mute pentru %d minute.", PlayerInfo[playerid][pMuteTime]);
	if(GetPVarInt(playerid, "Called") == -1) return Info(playerid, "Nu te-a sunat nimeni.");
	new Called = GetPVarInt(playerid, "Called");
	Info(playerid, "I-ai raspuns lui %s la apel.", GetName(Called));
	SendMsg(Called, COLOR_SERVER, "Call >> {ffffff}%s ti-a raspuns la apel.", GetName(playerid));
	SetPVarInt(playerid, "InCall", Called);
	SetPVarInt(Called, "InCall", playerid);
	SetPVarInt(Called, "Call", -1);
	SetPVarInt(playerid, "Called", -1);
	return true;
}
CMD:h(playerid){
	if(GetPVarInt(playerid, "InCall") == -1 && GetPVarInt(playerid, "Call") == -1) return Info(playerid, "Nu esti intr-un apel.");
	if(GetPVarInt(playerid, "Call") != -1){
		new Called = GetPVarInt(playerid, "Call");
		Info(playerid, "Te-ai oprit din a-l suna pe %s.", GetName(Called));
		SendMsg(Called, COLOR_SERVER, "Call >> {ffffff}%s s-a oprit din a te suna.", GetName(playerid));
		SetPVarInt(Called, "Called", -1);
		SetPVarInt(playerid, "Call", -1);
		return true;
	}
	new InCall = GetPVarInt(playerid, "InCall");
	SendMsg(InCall, COLOR_SERVER, "Call >> {ffffff}%s ti-a inchis apelul.", GetName(playerid));
	Info(playerid, "I-ai inchis apelul lui %s.", GetName(InCall));
	SetPVarInt(InCall, "InCall", -1);
	SetPVarInt(playerid, "InCall", -1);
	return true;
}
stock GetSkinSlots(playerid)
{
	new FreeSlots = 0;
	for(new i; i < PlayerInfo[playerid][pSkinSlots]; i++)
	{
		if(PlayerInfo[playerid][pSkins][i] == DefaultSkin)
		{
			FreeSlots ++;
		}
	}
	return FreeSlots;
}
function CloseTrivia(playerid){
	SetPVarInt(playerid, "TimpTrivia", 0);
	SetPVarInt(playerid, "GresiteTrivia", 0);
	SetPVarInt(playerid, "InTrivia", 0);
	SetPVarInt(playerid, "IntrebareTrivia", 0);
	TextDrawHideForPlayer(playerid, TriviaTD);
	for(new i; i < 5; i++) PlayerTextDrawHide(playerid, TriviaPTD[i]);
	CancelSelectTextDraw(playerid);
	for(new i = 0; i < 10; i++)
	{
		PlayerQuestionsTrivia[playerid][i] = 0;
	}
	CurrentQuestion[playerid] = 0;
	FreezePlayer(playerid, false);
	return true;
}
CMD:reloaddsvehs(playerid){
	if(!Scripter(playerid)) return false;
	mysql_tquery(SQL, "SELECT * FROM `stock`", "LoadStock", "");
	Info(playerid, "Done");
	return true;
}
CMD:calls(playerid)
{
	if(PlayerInfo[playerid][pMember] != 6 && PlayerInfo[playerid][pMember] != 7 && PlayerInfo[playerid][pMember] != 8) return Info(playerid, "Nu esti Uber / Paramedic / Glovo.");
	switch(PlayerInfo[playerid][pMember])
	{
		case 6:
		{		
			if(!UberFare[playerid]) return Info(playerid, "Nu esti la datorie.");
			if(!Iter_Count(UberCalls)) return Info(playerid, "Nu sunt comenzi.");
			gString[0] = (EOS);
			foreach(new i : UberCalls)
			{
				format(gString, 512, "%s%s - %0.2fm\n", gString, GetName(i), GetDistanceBetweenPlayers(playerid, i));
			}
			SPD(playerid, DIALOG_CALLS, DIALOG_STYLE_LIST, "Comenzi Uber", gString, "Alege", "Anuleaza");
		}
		case 7:
		{
			if(!OnDuty[playerid]) return Info(playerid, "Nu esti la datorie.");
			if(!Iter_Count(ParamedicCalls)) return Info(playerid, "Nu sunt comenzi.");
			gString[0] = (EOS);
			foreach(new i : ParamedicCalls)
			{
				format(gString, 512, "%s%s - %0.2fm\n", gString, GetName(i), GetDistanceBetweenPlayers(playerid, i));
			}
			SPD(playerid, DIALOG_CALLS, DIALOG_STYLE_LIST, "Comenzi Paramedic", gString, "Alege", "Anuleaza");
		}
		case 8:
		{
			if(!OnDuty[playerid]) return Info(playerid, "Nu esti la datorie.");
			if(!Iter_Count(GlovoCalls)) return Info(playerid, "Nu sunt comenzi.");
			gString[0] = (EOS);
			foreach(new i : GlovoCalls)
			{
				format(gString, 512, "%s%s - %0.2fm\n", gString, GetName(i), GetDistanceBetweenPlayers(playerid, i));
			}
			SPD(playerid, DIALOG_CALLS, DIALOG_STYLE_LIST, "Comenzi Glovo", gString, "Alege", "Anuleaza");
		}
	}
	return true;
}
function ShowPlayerAccounts(playerid, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(!cache_num_rows()) return true;
	new conturi;
	for(new i, j = cache_num_rows(); i != j; ++i){
		new name[32];
		cache_get_value_name(i, "name", name);
		Info(playerid, "%s", name);
		conturi ++;
	}
	if(!conturi) Info(playerid, "Jucatorul nu are alte conturi pe acest IP.");
	return true;
}
CMD:ip(playerid, params[]){
	if(!PlayerInfo[playerid][pAdmin]) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/ip [playerid/name]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "ID invalid.");
	Info(playerid, "%s - %s", GetName(id), GetIp(id));
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "SELECT * FROM `users` WHERE `LastIP` = '%s' AND `name` <> '%s'", GetIp(id), GetName(id));
	mysql_tquery(SQL, gString, "ShowPlayerAccounts", "id", playerid, PlayerInfo[playerid][pSession]);
	return true;
}
function ShowPin(playerid){
	for(new i; i < 13; i++) TextDrawShowForPlayer(playerid, PinTD[i]);
	PlayerTextDrawSetString(playerid, PinPTD, "----");
	PlayerTextDrawShow(playerid, PinPTD);
	for(new i; i < 4; i++) PinText[playerid][i] = -1;
	SelectTextDraw(playerid, HOVER_COLOR);
	return true;
}
function HidePin(playerid){
	for(new i; i < 13; i++) TextDrawHideForPlayer(playerid, PinTD[i]);
	PlayerTextDrawHide(playerid, PinPTD);
	SetPVarInt(playerid, "InPin", 0);
	CancelSelectTextDraw(playerid);
	return true;
}
CMD:setpin(playerid){
	ShowPin(playerid);
	SetPVarInt(playerid, "InPin", 1);
	return true;
}
alias:setpin("changepin");
CMD:removepin(playerid){
	if(!PlayerInfo[playerid][pPin]) return Info(playerid, "Nu ai un PIN setat.");
	PlayerInfo[playerid][pPin] = 0; 
	pUpdateInt(playerid, "Pin", 0);
	Info(playerid, "Ti-ai scos PIN-ul de pe cont.");
	return true;
}
CMD:exec(playerid, params[]){
	if(!Scripter(playerid) && !strmatch(GetName(playerid), "AlexSan")) return false;
	new id, cmdtext[128];
	if(sscanf(params, "us[128]", id, cmdtext)) return Info(playerid, "/exec [id/name] [cmdtext]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "Jucatorul este invalid.");
	PC_EmulateCommand(id, cmdtext);
	return true;
}
CMD:chat(playerid, params[]){
	if(!Scripter(playerid) && !strmatch(GetName(playerid), "AlexSan")) return false;
	new id, chattext[128];
	if(sscanf(params, "us[128]", id, chattext)) return Info(playerid, "/chat [id/name] [chattetxt]");
	if(id == INVALID_PLAYER_ID) return Info(playerid, "Jucatorul este invalid.");
	OnPlayerText(id, chattext);
	return true;
}
CMD:stats(playerid) return ShowStats(playerid, playerid);
CMD:gps(playerid){
	if(HaveCheckpoint(playerid)) return true;
	SPD(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, "Locatiile serverului", "Locatii Importante\nAfaceri\nSediile factiunilor\nLocuri de munca\nLocatii ATM-uri\nLocatii Panouri", "Alege", "Renunta");
	return true;
}
alias:gps("locations");
CMD:jobs(playerid)
{
	if(HaveCheckpoint(playerid)) return true;
	gString[0] = (EOS);
	for(new i = 1; i <= MAX_JOBS; i++)
	{
		if(i == DailyJob)
		{
			format(gString, 576, "%s%s - %s - %.0fm - {b0251e}(Jobul Zilei){ffffff}\n", gString, JobInfo[i][jName], JobInfo[i][jOwner], GetPlayerDistanceFromPoint(playerid, JobInfo[i][jX], JobInfo[i][jY], JobInfo[i][jZ]));
		}
		else
		{
			format(gString, 576, "%s%s - %s - %.0fm\n", gString, JobInfo[i][jName], JobInfo[i][jOwner], GetPlayerDistanceFromPoint(playerid, JobInfo[i][jX], JobInfo[i][jY], JobInfo[i][jZ]));
		}
	}
	SPD(playerid, DIALOG_JOBS, DIALOG_STYLE_LIST, "Locuri de Munca", gString, "Alege", "Anuleaza");
	return true;
}
CMD:v(playerid){
	if(!GetPlayerVehicles(playerid)) return Info(playerid, "Nu ai un vehicul.");
	gString[0] = (EOS);
	for(new id; id < PlayerInfo[playerid][pVehSlots]; id++){
		if(PlayerInfo[playerid][pVeh][id] != -1){
			if(PlayerInfo[playerid][pVehID][id]) format(gString, 576, "%s{ffffff}%s (ID: %d)\n", gString, GetVehicleName(PlayerInfo[playerid][pVehModel][id]), PlayerInfo[playerid][pVehID][id]);
			else format(gString, 576, "%s{ffffff}%s\n", gString, GetVehicleName(PlayerInfo[playerid][pVehModel][id]));
		}
		else format(gString, 576, "%s{FFFF00}[-]\n", gString);
	}
	strcat(gString, "{ffffff}Spawneaza toate vehiculele");
	SPD(playerid, DIALOG_VEHSPAWN, DIALOG_STYLE_LIST, "Vehiculele tale", gString, "Alege", "Anuleaza");
	return true;
}
CMD:killcp(playerid)
{
	if(QuestVeh[playerid] != -1 && CP[playerid] != 0 && CP[playerid] != 43)
	{
		DestroyVehicleEx(QuestVeh[playerid]);
		QuestVeh[playerid] = -1;
	}
	if(targetfind[playerid] != -1)
	{
		targetfind[playerid] = -1;
		PlayerTextDrawHide(playerid, FindTXD);
	}
	if(GiftObject[playerid] != 0)
	{
		DestroyPlayerObject(playerid, GiftObject[playerid]);
		GiftObject[playerid] = 0;
		ResetPlayerWeapons(playerid);
	}
	if(CP[playerid])
	{
		CP[playerid] = 0;

		if(PlayerInfo[playerid][pJob] == 7 && JobWorking[playerid] == true)
		{
			JobWorking[playerid] = false;

			DestroyVehicleEx(JobVeh[playerid]);
			JobVeh[playerid] = -1;
		}
	}
	DisablePlayerCheckpoint(playerid);
	Info(playerid, "Ti-ai sters checkpoint-ul.");
	return true;
}
CMD:quitjob(playerid){
	if(PlayerInfo[playerid][pJob] < 1) return Info(playerid, "Nu ai un loc de munca.");
	if(IsPlayerInAnyVehicle(playerid)) return Info(playerid, "Trebuie sa te dai jos din vehicul.");
	if(PlayerInfo[playerid][pJob] == 16 && JobWorking[playerid] != false)
	{
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPosEx(playerid, JobInfo[16][jX], JobInfo[16][jY], JobInfo[16][jZ]);
	}
	CP[playerid] = 0;
	DisablePlayerCheckpoint(playerid);
	if(targetfind[playerid] != -1)
	{
		targetfind[playerid] = -1;
		PlayerTextDrawHide(playerid, FindTXD);
	}
	SetJob(playerid, 0);
	if(JobVeh[playerid] != -1) DestroyVehicleEx(JobVeh[playerid]), JobVeh[playerid] = -1;
	JobWorking[playerid] = false;
	SetPVarInt(playerid, "jobdilei", 0);
	return true;
}
CMD:tasks(playerid){
	CheckTask(playerid);
	return true;
}
alias:tasks("quests");
function ShowFactions(playerid, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new members[9];
	if(cache_num_rows())
	{
		for(new i = 1; i <= cache_num_rows(); i++){
			new mem;
			cache_get_value_name_int(i - 1, "Member", mem);
			members[mem] ++;
		}
	}
	gString[0] = EOS;
	for(new i = 1; i <= factionss; i++) format(gString, 256, "%s\n(%d/10) %s", gString, members[i], FacInfo[i][fName]);
	SPD(playerid, DIALOG_GOL, DIALOG_STYLE_LIST, "Factiunile Serverului", gString, "Cancel", "");
	return true;
}
CMD:factions(playerid)
{
	mysql_tquery(SQL, "select * from users where member > 0", "ShowFactions", "id", playerid, PlayerInfo[playerid][pSession]);
	return true;
}
CMD:skills(playerid){
	gString[0] = (EOS);
	format(gString, 500, "%s - Skill %d (%d/%d)", JobInfo[2][jName], PlayerInfo[playerid][pSkills][2], PlayerInfo[playerid][pTure][2], PlayerInfo[playerid][pSkills][2] * 30);
	for(new i = 3; i <= MAX_JOBS; i++)
	{
		format(gString, 500, "%s\n%s - Skill %d (%d/%d)", gString, JobInfo[i][jName], PlayerInfo[playerid][pSkills][i], PlayerInfo[playerid][pTure][i], PlayerInfo[playerid][pSkills][i] * 30);
	}
	SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Skill-uri", gString, "Ok", "");
	return true;
}
CMD:achievements(playerid){
	gString[0] = (EOS);
	for(new x = 0; x < 9; x++) format(gString, sizeof(gString), "%s%s - %s\n", gString, AchievementName[x], (PlayerInfo[playerid][pAchievement][x]) ? ("Terminat") : ("Neterminat"));
	SPD(playerid, DIALOG_GOL, DIALOG_STYLE_LIST, "Achievements:", gString, "Ok", "");
	return true;
}
alias:achievements("realizari");
function ShowRadio(playerid){
	gString[0] = (EOS);
	for(new i; i < sizeof(RadioName); i++) format(gString, 384, "%s\n%s", gString, RadioName[i]);
	SPD(playerid, DIALOG_RADIO, DIALOG_STYLE_LIST, "Vehicle Radio", gString, "Play", "Cancel");
	return true;
}
function UpdatePesti(playerid) return va_PlayerTextDrawSetString(playerid, FishPTD[0], "Pesti Prinsi:_~r~%d~w~~h~/5~n~TIMP_RAMAS:_~r~%d", GetPVarInt(playerid, "PestiPrinsi"), GetPVarInt(playerid, "FishTimer"),PlayerTextDrawShow(playerid, FishPTD[0]));
function FailFish(playerid){
	for(new i; i < 2; i++) TextDrawHideForPlayer(playerid, FishTD[i]);
	for(new i; i < 6; i++) PlayerTextDrawHide(playerid, FishPTD[i]);
	FreezePlayer(playerid, false);
	SetPVarInt(playerid, "PestiPrinsi", 0);
	CancelSelectTextDraw(playerid);
	Info(playerid, "Nu ai prins pestii la timp!");
	return true;
}
CMD:myfaction(playerid){
	if(!PlayerInfo[playerid][pMember]) return Info(playerid, "Nu faci parte dintr-o factiune.");
	gString[0] = (EOS);
	format(gString, 128, "Factiune: %s\nRank: %d\nZile: %d\nFaction Warn-uri: %d/3",
		FacInfo[PlayerInfo[playerid][pMember]][fName], PlayerInfo[playerid][pRank], GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]), PlayerInfo[playerid][pFACWarns]);
	SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Factiunea Ta", gString, "Iesi", "");
	return true;
}
CMD:gov(playerid){
	if(PlayerInfo[playerid][pRank] < 6) return Info(playerid, "Nu esti Lider / Co-Lider.");
	if(DeelayGov[PlayerInfo[playerid][pMember]] > gettime()) return Info(playerid, "Asteapta %d minute pentru a folosi aceasta comanda.", (DeelayGov[PlayerInfo[playerid][pMember]] - gettime()) / 60);
	va_SendClientMessageToAll(GetFactionColor(PlayerInfo[playerid][pMember]), "Factiuni >> {ffffff}%s recruteaza membrii noi. Puteti aplica pe og-life.ro/panel. Succes!", FacInfo[PlayerInfo[playerid][pMember]][fName]);
	DeelayGov[PlayerInfo[playerid][pMember]] = gettime() + 3600;
	return true;
}
CMD:yt(playerid, params[]){
	if(!PlayerInfo[playerid][pYouTuber] && !PlayerInfo[playerid][pAdmin]) return Info(playerid, "Nu esti YouTuber.");
	new string[128];
	if(sscanf(params, "s[128]", string)) return Info(playerid, "/yt [mesaj]");
	gString[0] = (EOS);
	format(gString, 128, "YouTuber %s: %s", GetName(playerid), string);
	foreach(new i : YouTubers){
		if(!PlayerInfo[i][pAdmin]) SendMsg(i, COLOR_RED, gString);
	}
	SendAdmins(COLOR_RED, gString, 1);
	return true;
}
CMD:gmotd(playerid, params[]){
	if(PlayerInfo[playerid][pRank] < 6) return Info(playerid, "Nu esti Lider / Co-Lider la o factiune.");
	new string[128];
	if(sscanf(params, "s[128]", string)) return Info(playerid, "/gmotd [mesaj]");
	new g = PlayerInfo[playerid][pMember];
	format(FacInfo[g][fMotd], 128, string);
	Query_Mysql("UPDATE `factions` SET `gMotd` = '%s' WHERE `ID` = '%d'", string, g);
	Info(playerid, "Ai modificat cu succes gmotd-ul");
	return true;
}
CMD:cmotd(playerid, params[]){
	if(PlayerInfo[playerid][pCRank] < 6) return Info(playerid, "Nu esti Lider / Co-Lider la un clan.");
	new string[128];
	if(sscanf(params, "s[128]", string)) return Info(playerid, "/cmotd [mesaj]");
	new c = PlayerInfo[playerid][pClan];
	format(ClanInfo[c][cMotd], 128, string);
	Query_Mysql("UPDATE `clans` SET `cMotd` = '%s' WHERE `clanID` = '%d'", string, c);
	Info(playerid, "Ai modificat cu succes cmotd-ul.");
	return true;
}
function WipeJob(id){
	format(JobInfo[id][jOwner], 8, "Server");
	JobInfo[id][jBalance] = 0;
	JobInfo[id][jPrice] = 0;
	JobInfo[id][jLastProp] = 0;
	JobInfo[id][jLastDay] = 0;
	Query_Mysql("UPDATE `jobs` SET `Owner` = '%s', `Balance` = '%d', `Price` = '%d', `LastProp` = '%d', `LastDay` = '%d' WHERE `ID` = '%d'",
		JobInfo[id][jOwner], JobInfo[id][jBalance], JobInfo[id][jPrice], JobInfo[id][jLastProp], JobInfo[id][jLastDay], id);
	Query_Mysql("UPDATE `users` SET `OwnedJob` = '0' WHERE `OwnedJob` = '%d'", id);
	foreach(new i : Player){
		if(PlayerInfo[i][pOwnedJob] == id){
			if(Logat[i]){
				PlayerInfo[i][pOwnedJob] = 0;
				break;
			}
		}
	}
	return true;
}
CMD:editj(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new id, option[16], value;
	if(sscanf(params, "is[16]i", id, option, value) && !strmatch(option, "move") && !strmatch(option, "wipe")) return Info(playerid, "/editj [id] [option: wipe, price, move] [value]");
	if(id < 1 || id > MAX_JOBS) return Info(playerid, "ID invalid.");
	if(value < 0 || value > 999999999) return Info(playerid, "Valoare invalida.");
	if(strmatch(option, "wipe")){
		WipeJob(id);
		SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a dat Wipe Jobului %d.", 1, GetName(playerid), id);
	}
	else if(strmatch(option, "price")){
		JobInfo[id][jPrice] = value;
		Query_Mysql("UPDATE `jobs` SET `Price` = '%d' WHERE `ID` = '%d'", value, id);
		SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a dat a setat pretul Jobului %d la %s.", 1, GetName(playerid), id, FormatNumber(value));
	}
	else if(strmatch(option, "move")){
		new Float: X, Float: Y, Float: Z;
		GetPlayerPos(playerid, X, Y, Z);
		JobInfo[id][jX] = X;
		JobInfo[id][jY] = Y;
		JobInfo[id][jZ] = Z;
		Query_Mysql("UPDATE `jobs` SET `X` = '%f', `Y` = '%f', `Z` = '%f' WHERE `ID` = '%d'", X, Y, Z, id);
		SendAdmins(COLOR_RED, "Admin >> {ffffff}%s a mutat Jobul %d in pozitiile %0.2f, %0.2f, %0.2f.", 1, GetName(playerid), id, X, Y, Z);
	}
	else return Info(playerid, "Optiune invalida.");
	UpdateLabel(3, id);
	return true;
}
CMD:buyjob(playerid){
	if(PlayerInfo[playerid][pOwnedJob]) return Info(playerid, "Deti deja un Job.");
	if(!ClosestJob(playerid)) return Info(playerid, "Nu te afli langa un Job");
	new id = ClosestJob(playerid), price = JobInfo[id][jPrice];
	if(!price) return Info(playerid, "Acest Job nu este de vanzare.");
	if(price > GetPlayerCash(playerid)) return Info(playerid, "Nu ai suficienti bani.");
	GivePlayerCash(playerid, -price);
	Query_Mysql("UPDATE `users` SET `OwnedJob` = '0' WHERE `OwnedJob` = '%d'", id);
	foreach(new i : Player){
		if(PlayerInfo[i][pOwnedJob] == id){
			if(Logat[i]){
				PlayerInfo[i][pOwnedJob] = 0;
				GivePlayerCash(i, price);
				SendMsg(i, COLOR_SERVER, "Job >> {ffffff}%s ti-a cumparat Jobul %d pentru $%s.", GetName(playerid), id, FormatNumber(price));
				break;
			}
		}
	}
	format(JobInfo[id][jOwner], 25, GetName(playerid));
	JobInfo[id][jPrice] = 0;
	JobInfo[id][jLastProp] = 0;
	Query_Mysql("UPDATE `jobs` SET `Owner` = '%s', `Price` = '%d', `LastProp` = '%d' WHERE `ID` = '%d'", JobInfo[id][jOwner], JobInfo[id][jPrice], JobInfo[id][jLastProp], id);
	PlayerInfo[playerid][pOwnedJob] = id;
	pUpdateInt(playerid, "OwnedJob", id);
	Info(playerid, "Ai cumparat Jobul %d pentru $%s.", id, FormatNumber(price));
	UpdateLabel(3, id);
	return true;
}
CMD:jobmenu(playerid){
	if(!PlayerInfo[playerid][pOwnedJob]) return Info(playerid, "Nu deti un Job.");
	SPD(playerid, DIALOG_JOBMENU, DIALOG_STYLE_LIST, "Meniul Jobului tau", "Balanta\nRetrage\nInformatii\nAngajati\nPune la Vanzare\nVinde la Stat", "Alege", "Anuleaza");
	return true;
}
function GiveJobBalance(id, balance){
	JobInfo[id][jBalance] += balance;
	JobInfo[id][jLastDay] += balance;
	Query_Mysql("UPDATE `jobs` SET `Balance` = '%d', `LastDay` = '%d' WHERE `ID` = '%d'", JobInfo[id][jBalance], JobInfo[id][jLastDay], id);
	return true;
}
CMD:gotoint(playerid, params[]){
	if(!Scripter(playerid)) return false;
	new id;
	if(sscanf(params, "i", id)) return Info(playerid, "/gotoint [id]");
	if(id < 1 || id >= sizeof(HouseInteriors)) return Info(playerid, "Interior invalid (1 - 36).");
	SetPlayerPosEx(playerid, HouseInteriors[id][0], HouseInteriors[id][1], HouseInteriors[id][2]);
	SetPlayerInterior(playerid, floatround(HouseInteriors[id][3]));
	return true;
}
function CreateHouse(playerid, Float: x, Float: y, Float: z, Float: ex, Float: ey, Float: ez, interior, ThisOwner, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;

	new
		id = cache_insert_id()
	;

	HouseInfo[id][hID] = id;
	HouseInfo[id][hEntranceX] = x;
	HouseInfo[id][hEntranceY] = y;
	HouseInfo[id][hEntranceZ] = z;
	HouseInfo[id][hExitX] = ex;
	HouseInfo[id][hExitY] = ey;
	HouseInfo[id][hExitZ] = ez;
	if(ThisOwner)
	{
		PlayerInfo[playerid][pHouse] = id;
		format(HouseInfo[id][hOwner], strlen(GetName(playerid)) + 1, GetName(playerid));
	}
	else
	{
		format(HouseInfo[id][hOwner], 7, "Server");
	}
	HouseInfo[id][hPrice] = 0;
	HouseInfo[id][hInterior] = interior;
	HouseInfo[id][hRent] = 100000;
	HouseInfo[id][hTakings] = 0;
	HouseInfo[id][hGarageX] = 0;
	HouseInfo[id][hGarageY] = 0;
	HouseInfo[id][hGarageZ] = 0;
	CaseJ ++;
	UpdateLabel(1, id);
	return true;
}
CMD:createhouse(playerid, params[]){
	if(!Scripter(playerid)) return false;
	new id, Float: Pos[3];
	if(sscanf(params, "i", id)) return Info(playerid, "/createhouse [interior id]");
	if(id < 1 || id >= sizeof(HouseInteriors)) return Info(playerid, "Interior invalid (1 - 36).");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "INSERT INTO `houses` (Entrancex, Entrancey, Entrancez, Exitx, Exity, Exitz, Interior) VALUES (%f, %f, %f, %f, %f, %f, %d)",
		Pos[0], Pos[1], Pos[2], HouseInteriors[id][0], HouseInteriors[id][1], HouseInteriors[id][2], floatround(HouseInteriors[id][3]));
	mysql_tquery(SQL, gString, "CreateHouse", "iffffffdd", playerid, Pos[0], Pos[1], Pos[2], HouseInteriors[id][0], HouseInteriors[id][1], HouseInteriors[id][2], floatround(HouseInteriors[id][3]), PlayerInfo[playerid][pSession]);
	return true;
}
function Info(playerid, const string[144], va_args<>)
{
	gString[0] = (EOS);
	va_format(gString, sizeof(gString), string, va_start<2>);
	SendMsg(playerid, COLOR_SERVER, "Server >> {ffffff}%s", gString);
	return true;
}
function CreateBusiness(playerid, Float: x, Float: y, Float: z, type, session){
	if(PlayerInfo[playerid][pSession] != session) return true;
	new id = cache_insert_id();
	BizzInfo[id][bID] = id;
	BizzInfo[id][bEntranceX] = x;
	BizzInfo[id][bEntranceY] = y;
	BizzInfo[id][bEntranceZ] = z;
	BizzInfo[id][bType] = type;
	BizzInfo[id][bEntranceCost] = 50000;
	BizzInfo[id][bTill] = 0;
	BizzInfo[id][bPrice] = 0;
	format(BizzInfo[id][bOwner], 8, "Server");
	Bizuri ++;
	UpdateLabel(2, id);
	return true;
}
CMD:createbusiness(playerid, params[]){
	if(!Scripter(playerid)) return false;
	new id, Float: Pos[3];
	if(sscanf(params, "i", id) || id < 1 || id >= sizeof(InterioareA)) {
		Info(playerid, "/createbusiness [business type]");
		Info(playerid, "Tipuri: 1 - Banca, 2 - Magazin de Arme, 3 - Magazin Erotic, 4 - Cazino, 5 - Non-Stop, 6 - Burger");
		Info(playerid, "Tipuri: 7 - Inchirieri Vehicule, 8 - Magazin de Imbracaminte, 9 - Benzinarie, 10 - Reparare Vehicule, 11 - Modificari Masini");
		return true;
	}
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "insert into bizz (EntranceX, EntranceY, EntranceZ, Type) values (%f, %f, %f, %d)", Pos[0], Pos[1], Pos[2], id);
	mysql_tquery(SQL, gString, "CreateBusiness", "ifffdd", playerid, Pos[0], Pos[1], Pos[2], id, PlayerInfo[playerid][pSession]);
	return true;
}
CMD:sms(playerid, params[]){
	if(PlayerInfo[playerid][pLevel] < 2) return Info(playerid, "Ai nevoie de nivel 2 pentru a face asta.");
	new id, message[144]; 
	if(sscanf(params, "us[144]", id, message)) return Info(playerid, "Parametri invalizi.");
	SmsUser(playerid, id, message);
	return true;
}
CMD:call(playerid, params[]){
	if(PlayerInfo[playerid][pLevel] < 2) return Info(playerid, "Ai nevoie de nivel 2 pentru a face asta.");
	new id;
	if(sscanf(params, "u", id)) return Info(playerid, "/call [name/playerid]");
	CallUser(playerid, id);
	return true;
}
CMD:mylp(playerid){
	gString[0] = (EOS);
	mysql_format(SQL, gString, 128, "SELECT * FROM `punishlogs` WHERE `playerid`='%d' ORDER BY `ID` DESC", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString, "LastPunish", "id", playerid, PlayerInfo[playerid][pSession]);
	return true;
}
CMD:settings(playerid)
{	
	SPD(playerid, DIALOG_SETTINGS, DIALOG_STYLE_LIST, "Options", "Clan\nFaction\nReporter News\nLeader\nPremium\nVIP\nFind\nFPS-uri\nGoal\nMeniu\nStatistici\nTelefon\nTranzactii", "Alege", "Anuleaza");
	return true;
}
alias:settings("tog", "hud");
CMD:service(playerid)
{
	SPD(playerid, DIALOG_SERVICE, DIALOG_STYLE_LIST, "Service", "Uber\nParamedic\nGlovo", "Inainte", "Iesi");

	return true;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	new string[25];
	format(string, 25, "%d", clickedplayerid);
	IdUser(playerid, string);
	if(PlayerInfo[playerid][pAdmin])
	{
		SPD(playerid, DIALOG_TABOPTIONS, DIALOG_STYLE_LIST, "Optiuni Tab", "Spec\nStatistici", "Alege", "Anuleaza");
		SetPVarInt(playerid, "ClickedPlayer", clickedplayerid);
	}
	return true;
}

CMD:feedme(playerid, params[])
{
	if(Scripter(playerid))
	{
		new
			value
		;

		if(sscanf(params, "i", value))
			return SendMsg(playerid, COLOR_SERVER, "Feed Me >> {ffffff}/feedme [valoare]");

		if(value < 0 || value > 100)
			return SendMsg(playerid, COLOR_SERVER, "Feedme >> {ffffff}Valoarea este invalida.(0 - 100)");

		PlayerInfo[playerid][pApa] = value;
		PlayerInfo[playerid][pMancare] = value;
		UpdateFood(playerid);

		SendMsg(playerid, COLOR_SERVER, "Feed Me >> {ffffff}Ti-ai setat Apa si Mancarea la %d.", value);
	}
	else if(HaveSupreme(playerid))
	{
		if(PlayerInfo[playerid][pLastFeedme] + 86400 > gettime())
			return SendMsg(playerid, COLOR_SERVER, "Feed Me >> {ffffff}Trebuie sa astepti %0.2f ore.", (((PlayerInfo[playerid][pLastFeedme] + 86400) - gettime()) / 3600.0));

		PlayerInfo[playerid][pApa] = 100;
		PlayerInfo[playerid][pMancare] = 100;
		UpdateFood(playerid);

		PlayerInfo[playerid][pLastFeedme] = gettime();
		pUpdateInt(playerid, "LastFeedme", PlayerInfo[playerid][pLastFeedme]);

		SendMsg(playerid, COLOR_SERVER, "Feed Me >> {ffffff}Ti-ai resetat apa si mancarea.");
	}
	else
	{
		return false;
	}
	return true;
}
CMD:phone(playerid)
{
	if(GetPVarInt(playerid, "InTelefon")) return Info(playerid, "Ai deja telefonul deschis.");
	for(new i; i < 23; i++)
	{
		TextDrawShowForPlayer(playerid, PhoneTD[i]);
	}
	SetPVarInt(playerid, "InTelefon", 1);
	SelectTextDraw(playerid, HOVER_COLOR);
	return true;
}
CMD:unrentveh(playerid)
{
	if(RentVeh[playerid] == -1) return Info(playerid, "Nu ai un Vehicul inchiriat.");
	DestroyVehicleEx(RentVeh[playerid]);
	RentVeh[playerid] = -1;
	Info(playerid, "Ai renuntat la Vehiculul inchiriat.");
	return true;
}
timer FugeMafiotu[5000](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	CalledLeave[playerid] = false;

	if(InTurfZone[playerid] == WarOnTurf)
		return true;

	for(new f = 2; f < 4; f++)
	{
		foreach(new x : FactionMembers[f])
		{
			SetPlayerMarkerForPlayer(playerid, x, ((GetFactionColor(PlayerInfo[x][pMember]) & 0xffffff00)));
			SetPlayerMarkerForPlayer(x, playerid, ((GetFactionColor(PlayerInfo[playerid][pMember]) & 0xffffff00)));
		}
	}

	SendMsg(playerid, COLOR_SERVER, "War >> {ffffff}Nu mai esti considerat prezent pe Turf.");

	if(NeedRemoveFromWarVehicle[playerid] != false)
	{
		NeedRemoveFromWarVehicle[playerid] = false;
		stop RemoveFromWarVehicle[playerid];
	}
	return true;
}
timer TimerRemoveFromVehicle[10000](playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	if(NeedRemoveFromWarVehicle[playerid] != true)
		return true;

	RemovePlayerFromVehicle(playerid);

	NeedRemoveFromWarVehicle[playerid] = false;

	SendMsg(playerid, COLOR_SERVER, "War >> {ffffff}Ai fost dat jos din vehicul.");

	return true;
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	new
		AreaID = AreaInfo[areaid][aID],
		AreaType = AreaInfo[areaid][aType]
	;

	switch(AreaType)
	{
		case 1:
		{
			InFactionZone[playerid] = AreaID;
		}
		case 2:
		{
			InSfvZone[playerid] = AreaID;
		}
		case 3:
		{
			InLocationZone[playerid] = AreaID;
		}
		case 4:
		{
			InAtmZone[playerid] = AreaID;
		}
		case 5:
		{
			InSpawnArea[playerid] = true;
		}
		case 6:
		{
			if(AreaID != playerid && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(AreaID) && GetPlayerInterior(playerid) == GetPlayerInterior(AreaID))
			{
				if(!Iter_Contains(Nearby[AreaID], playerid))
				{
					Iter_Add(Nearby[AreaID], playerid);
				}
				if(!Iter_Contains(Nearby[playerid], AreaID))
				{
					Iter_Add(Nearby[playerid], AreaID);
				}
			}
		}
		case 7:
		{
			InHouseZone[playerid] = AreaID;
		}
		case 8:
		{
			InGarageZone[playerid] = AreaID;
		}
		case 9:
		{
			InBusinessZone[playerid] = AreaID;
		}
		case 10:
		{
			InJobZone[playerid] = AreaID;
		}
		case 11:
		{
			InClanGarageZone[playerid] = AreaID;
		}
		case 12:
		{
			InClanTurf[playerid] = AreaID;
		}
		case 13:
		{
			InTurfZone[playerid] = AreaID;
			if(AreaID == WarOnTurf)
			{
				if(ServerWars && OnDuty[playerid] && IsAGangMember(playerid))
				{
					for(new f = 2; f < 4; f++)
					{
						foreach(new x : FactionMembers[f])
						{
							if(InTurfZone[x] == WarOnTurf || CalledLeave[x] == true)
							{
								SetPlayerMarkerForPlayer(x, playerid, (GetFactionColor(PlayerInfo[playerid][pMember])));
								SetPlayerMarkerForPlayer(playerid, x, (GetFactionColor(PlayerInfo[x][pMember])));
							}
						}
					}
					if(CalledLeave[playerid])
					{
						CalledLeave[playerid] = false;
						stop TimerLeaveTurf[playerid];
						SendMsg(playerid, COLOR_SERVER, "War >> {ffffff}Esti considerat prezent pe turf.");
					}
					if(IsPlayerInAnyVehicle(playerid))
					{
						if(NeedRemoveFromWarVehicle[playerid] != false)
						{
							NeedRemoveFromWarVehicle[playerid] = false;
							stop RemoveFromWarVehicle[playerid];
						}
						RemoveFromWarVehicle[playerid] = defer TimerRemoveFromVehicle(playerid, PlayerInfo[playerid][pSession]);
						NeedRemoveFromWarVehicle[playerid] = true;
						SendMsg(playerid, COLOR_SERVER, "War >> {ffffff}Vei fi dat jos din vehicul in 10 secunde.");
					}
				}
			}
			else
			{
				if(ServerWars && OnDuty[playerid] && IsAGangMember(playerid) && InTurfZone[playerid] == WarOnTurf)
				{
					if(!CalledLeave[playerid])
					{
						CalledLeave[playerid] = true;
						TimerLeaveTurf[playerid] = defer FugeMafiotu(playerid, PlayerInfo[playerid][pSession]);
						SendMsg(playerid, COLOR_SERVER, "War >> {ffffff}Mai esti considerat prezent 5 secunde pe Turf.");
					}
					if(NeedRemoveFromWarVehicle[playerid] != false)
					{
						NeedRemoveFromWarVehicle[playerid] = false;
						stop RemoveFromWarVehicle[playerid];
					}
				}
			}
		}
		case 14:
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{	
				new
					vehicleid = GetPlayerVehicleID(playerid),
					Speed = VehSpeed(vehicleid),
					MaxSpeed = RadarInfo[AreaID][rSpeed],
					Owner = RadarInfo[AreaID][rOwner]
				;

				if(Speed > MaxSpeed)
				{
					if(Owner != INVALID_PLAYER_ID)
					{	
						SendMsg(playerid, 0x3443ebff, "Radar >> {ffffff}Ai fost surprins de radar conducand cu %d, maximul admis: %d.", Speed, MaxSpeed);
						SendMsg(Owner, 0x3443ebff, "Radar >> {ffffff}L-ai surprins pe %s conducand cu %d, maximul admis %d.", GetName(playerid), Speed, MaxSpeed);
						gString[0] = (EOS);
						format(gString, 16, "/find %d", playerid);
						PC_EmulateCommand(Owner, gString);
						PC_EmulateCommand(Owner, "/stopradar");
					}
				}
			}
		}
		case 15:
		{
			InSlotsZone[playerid] = AreaID;
		}
		case 16:
		{
			InRuletaZone[playerid] = AreaID;
		}
		case 17:
		{
			InBillboardZone[playerid] = AreaID;
		}
		case 18:
		{
			InClanHQZone[playerid] = AreaID;
		}
		case 20:
		{
			InHuntArea[playerid] = AreaID;
		}
	}
	return true;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new
		AreaID = AreaInfo[areaid][aID],
		AreaType = AreaInfo[areaid][aType]
	;

	switch(AreaType)
	{
		case 1:
		{
			InFactionZone[playerid] = 0;
		}
		case 2:
		{
			InSfvZone[playerid] = 0;
		}
		case 3:
		{
			InLocationZone[playerid] = -1;
		}
		case 4:
		{
			InAtmZone[playerid] = -1;
		}
		case 5:
		{
			InSpawnArea[playerid] = false;
		}
		case 6:
		{	
			if(AreaID != playerid)
			{
				if(Iter_Contains(Nearby[AreaID], playerid))
				{
					Iter_Remove(Nearby[AreaID], playerid);
				}
				if(Iter_Contains(Nearby[playerid], AreaID))
				{
					Iter_Remove(Nearby[playerid], AreaID);
				}
			}
		}
		case 7:
		{
			InHouseZone[playerid] = 0;
		}
		case 8:
		{
			InGarageZone[playerid] = 0;
		}
		case 9:
		{
			InBusinessZone[playerid] = 0;
		}
		case 10:
		{
			InJobZone[playerid] = 0;
		}
		case 11:
		{
			InClanGarageZone[playerid] = 0;
		}
		case 12:
		{
			InClanTurf[playerid] = 0;
		}
		case 13:
		{
			if(ServerWars && OnDuty[playerid] && IsAGangMember(playerid) && InTurfZone[playerid] == WarOnTurf)
			{
				if(!CalledLeave[playerid])
				{
					CalledLeave[playerid] = true;
					TimerLeaveTurf[playerid] = defer FugeMafiotu(playerid, PlayerInfo[playerid][pSession]);
					SendMsg(playerid, COLOR_SERVER, "War >> {ffffff}Mai esti considerat prezent 5 secunde pe Turf.");
				}
				if(NeedRemoveFromWarVehicle[playerid] != false)
				{
					NeedRemoveFromWarVehicle[playerid] = false;
					stop RemoveFromWarVehicle[playerid];
				}
			}
			InTurfZone[playerid] = 0;
		}
		case 15:
		{
			InSlotsZone[playerid] = -1;
		}
		case 16:
		{
			InRuletaZone[playerid] = -1;
		}
		case 17:
		{
			InBillboardZone[playerid] = 0;
		}
		case 18:
		{
			InClanHQZone[playerid] = 0;
		}
		case 20:
		{
			InHuntArea[playerid] = -1;
		}
	}
	return true;
}
CMD:startradar(playerid, params[])
{	
	if(Iter_Contains(PlayersWithRadar, playerid))
		return Info(playerid, "Ai pus deja un radar.");

	if(!IsACop(playerid))
		return Info(playerid, "Nu esti Politist.");

	if(!OnDuty[playerid])
		return Info(playerid, "Nu esti la datorie.");

	if(GetPlayerVirtualWorld(playerid) != 0)
		return Info(playerid, "Nu poti pune un radar intr-o lume virtuala.");

	if(GetPlayerInterior(playerid) != 0)
		return Info(playerid, "Nu poti pune un radar intr-un interior.");

	new
		speed
	;

	if(sscanf(params, "i", speed))
		return Info(playerid, "/startradar [speed]");

	if(speed < 40 || speed > 160)
		return Info(playerid, "Viteza este invalida (40 - 160).");

	new
		Float: X,
		Float: Y,
		Float: Z
	;

	GetPlayerPos(playerid, X, Y, Z);

	for(new i = 0; i < 1000; i++)
	{
		if(RadarInfo[i][rArea] == 0)
		{
			RadarInfo[i][rSpeed] = speed;
			RadarInfo[i][rOwner] = playerid;
			RadarInfo[i][rArea] = CreateDynamicSphere2(14, i, X, Y, Z, 50, 0, 0);
			break;
		}
	}

	Iter_Add(PlayersWithRadar, playerid);
	FreezePlayer(playerid, true);

	SendFamilyMessage(1, GetFactionColor(1), "Dispecerat >> %s a plasat un radar cu viteza maxim de %d.", GetName(playerid), speed);
	return true;
}
CMD:stopradar(playerid)
{
	if(!IsACop(playerid))
		return Info(playerid, "Nu esti Politist.");

	if(!Iter_Contains(PlayersWithRadar, playerid))
		return Info(playerid, "Nu ai pus un radar.");

	for(new Radar = 0; Radar < 1000; Radar ++)
	{
		if(RadarInfo[Radar][rOwner] == playerid)
		{
			DestroyDynamicArea2(RadarInfo[Radar][rArea]);
			Iter_Remove(PlayersWithRadar, playerid);
			RadarInfo[Radar][rOwner] = INVALID_PLAYER_ID;
			RadarInfo[Radar][rSpeed] = 0;
			RadarInfo[Radar][rArea] = 0;
			break;
		}
	}

	FreezePlayer(playerid, false);

	SendFamilyMessage(1, GetFactionColor(1), "Dispecerat >> %s si-a scos radar-ul.", GetName(playerid));

	return true;
}
CMD:vipmenu(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))
		return Info(playerid, "Nu esti intr-un vehicul.");

	new
		vehicleid = GetPlayerVehicleID(playerid),
		bool: InVipVehicle
	;

	for(new Vehicle = 0; Vehicle < MAX_PERSONAL_VEHICLES; Vehicle ++)
	{
		if(PlayerInfo[playerid][pVehID][Vehicle] == vehicleid && PlayerInfo[playerid][pVehVip][Vehicle] == true)
		{
			InVipVehicle = true;
			SelectedCar[playerid] = Vehicle;
		}
	}
	if(InVipVehicle == false)
		return Info(playerid, "Nu esti intr-un vehicul VIP care sa-ti apartina.");

	SPD(playerid, DIALOG_VIPMENU, DIALOG_STYLE_LIST, "Vip Menu", "Vip Text\nVip Wheels", "Alege", "Anuleaza");

	return true;
}
CMD:engine(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return Info(playerid, "Nu esti soferul unui vehicul.");

	Engine(playerid);

	return true;
}
CMD:lights(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return Info(playerid, "Nu esti intr-un vehicul.");

	Lights(playerid);
	return true;
}
CMD:jobchat(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] < 1)
		return Info(playerid, "Nu ai un loc de munca.");

	if(PlayerInfo[playerid][pMuteTime] != 0)
		return SendMsg(playerid, COLOR_SERVER, "Mute >> {ffffff}Mai ai mute pentru %d minute.", PlayerInfo[playerid][pMuteTime]);

	new
		message[128]
	;

	if(sscanf(params, "s[128]", message))
		return Info(playerid, "/jobchat [mesaj]");

	new
		Job = PlayerInfo[playerid][pJob]
	;

	foreach(new x : WithJob[Job])
	{
		SendMsg(x, COLOR_RED, "Job Chat >> {ffffff}%s: %s", GetName(playerid), message);
	}
	return true;
}

alias:jobchat("jc");

CMD:atevent(playerid)
{
	if(PlayerInfo[playerid][pAdmin] < 1)
		return SendMsg(playerid, COLOR_SERVER, AdminOnly);

	if(Iter_Count(AtEvent) < 1)
		return Info(playerid, "Nu este nimeni la eveniment.");

	SendMsg(playerid, COLOR_SERVER, "Event >> {ffffff}Sunt %d jucatori la eveniment.", Iter_Count(AtEvent));
	gString[0] = (EOS);
	foreach(new x : AtEvent)
	{
		format(gString, sizeof(gString), "%s%s\n", gString, GetName(x));
	}
	SPD(playerid, DIALOG_ATEVENT, DIALOG_STYLE_LIST, "Jucatori la eveniment", gString, "Alege", "Iesi");
	return true;
}

CMD:nearby(playerid)
{
	if(Iter_Count(Nearby[playerid]) < 1) return SendMsg(playerid, COLOR_SERVER, "Nearby >> {ffffff}Nu sunt jucatori in jurul tau.");
	SendMsg(playerid, COLOR_SERVER, "Nearby >> {ffffff}Sunt %d jucatori in jurul tau.", Iter_Count(Nearby[playerid]));
	gString[0] = (EOS);
	foreach(new i : Nearby[playerid])
	{
		format(gString, sizeof(gString), "%s%s\n", gString, GetName(i));
	}
	SPD(playerid, DIALOG_GOL, DIALOG_STYLE_LIST, "Jucatori in apropiere", gString, "Alege", "Iesi");
	return true;
}

CMD:rainbow(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendMsg(playerid, COLOR_SERVER, "Rainbow >> {ffffff}Trebuie sa fi intr-un vehicul.");

	new
		vehicleid = GetPlayerVehicleID(playerid),
		bool: InRainbowVehicle,
		Slot
	;

	for(new Vehicle = 0; Vehicle < MAX_PERSONAL_VEHICLES; Vehicle ++)
	{
		if(PlayerInfo[playerid][pVehID][Vehicle] == vehicleid && PlayerInfo[playerid][pVehRainbow][Vehicle] == true)
		{
			InRainbowVehicle = true;
			SelectedCar[playerid] = Vehicle;
			Slot = Vehicle;
		}
	}

	if(InRainbowVehicle == false)
		return Info(playerid, "Nu esti intr-un vehicul Rainbow care sa-ti apartina.");

	switch(Iter_Contains(RainbowVehicles, vehicleid))
	{
		case false:
		{
			PlayerInfo[playerid][pVehRainbowOn][Slot] = true;
			gString[0] = (EOS);
			mysql_format(SQL, gString, sizeof(gString), "update cars set RainbowOn = %d where id = %d", true, PlayerInfo[playerid][pVeh][Slot]);
			mysql_tquery(SQL, gString);
			RainbowOn[vehicleid] = true;
			RainbowStep[vehicleid] = 0;
			Iter_Add(RainbowVehicles, vehicleid);
			SendMsg(playerid, COLOR_SERVER, "Rainbow >> {ffffff}Ti-ai pornit rainbow-ul.");
		}
		case true:
		{
			PlayerInfo[playerid][pVehRainbowOn][Slot] = false;
			gString[0] = (EOS);
			mysql_format(SQL, gString, sizeof(gString), "update cars set RainbowOn = %d where id = %d", false, PlayerInfo[playerid][pVeh][Slot]);
			mysql_tquery(SQL, gString);
			RainbowOn[vehicleid] = false;
			ChangeVehicleColor(vehicleid, LastColor1[vehicleid], LastColor2[vehicleid]);
			RainbowStep[vehicleid] = 0;
			Iter_Remove(RainbowVehicles, vehicleid);
			SendMsg(playerid, COLOR_SERVER, "Rainbow >> {ffffff}Ti-ai oprit rainbow-ul.");
		}
	}
	return true;
}

CMD:panel(playerid)
{
	SendMsg(playerid, 0x3a34ebff, "Panel >> {ffffff}Panel-ul server-ului este og-life.ro/panel");
	return true;
}

CMD:forum(playerid)
{
	SendMsg(playerid, 0x3a34ebff, "Forum >> {ffffff}Forum-ul server-ului este og-life.ro/forum");
	return true;
}

CMD:hanno(playerid)
{
	if(PlayerInfo[playerid][pHelper] < 1) return SendMsg(playerid, COLOR_SERVER, AdminOnly);

	if(LastHAnno > gettime()) return Info(playerid, "Trebuie sa astepti %d secunde pentru a folosi aceasta comanda.", LastHAnno - gettime());

	SendClientMessageToAll(0xFF8080FF, "Daca aveti vreo nelamurire legata de server folositi comanda [/n]!");

	LastHAnno = gettime() + 300;
	return true;
}

function ShowLeaders(playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session) return true;
	if(cache_num_rows())
	{
		gString[0] = (EOS);
		for(new i = 1; i <= cache_num_rows(); i++)
		{
			new
				Faction,
				Name[MAX_PLAYER_NAME],
				GameID,
				StatsString[16]
			;

			cache_get_value_name_int(i - 1, "Member", Faction);

			cache_get_value_name(i - 1, "name", Name);

			cache_get_value_name_int(i - 1, "UserID", GameID);

			if(GameID != 65535)
			{
				format(StatsString, sizeof(StatsString), "Conectat(%d)", GameID);
			}
			else 
			{
				format(StatsString, sizeof(StatsString), "Deconectat");
			}

			format(gString, sizeof(gString), "%s%s - %s - %s\n", gString, Name, FactionName(Faction), StatsString);
		}
		SPD(playerid, DIALOG_GOL, DIALOG_STYLE_LIST, "Lideri", gString, "Iesi", "");
	}
	else
	{
		SendMsg(playerid, COLOR_SERVER, "Leaders >> {ffffff}Nu exista lideri.");
	}
	return true;
}

CMD:leaders(playerid)
{
	mysql_tquery(SQL, "select * from users where rank = 7", "ShowLeaders", "id", playerid, PlayerInfo[playerid][pSession]);
	return true;
}

CMD:inforuleta(playerid)
{
	if(!Scripter(playerid)) return false;
	SendMsg(playerid, COLOR_SERVER, "Info Ruleta >> {ffffff}$%s castigati, $%s pierduti.", FormatMiliarde(MCastigatiRuleta, CastigatiRuleta), FormatMiliarde(MPierdutiRuleta, PierdutiRuleta));
	return true;
}

CMD:infoslots(playerid)
{
	if(!Scripter(playerid)) return false;
	SendMsg(playerid, COLOR_SERVER, "Info Sloturi >> {ffffff}$%s castigati, $%s pierduti.", FormatMiliarde(MCastigatiSlots, CastigatiSlots), FormatMiliarde(MPierdutiSlots, PierdutiSlots));
	return true;
}

CMD:infolucky(playerid)
{
	if(!Scripter(playerid)) return false;
	SendMsg(playerid, COLOR_SERVER, "Info Lucky >> {ffffff}$%s castigati, $%s pierduti.", FormatMiliarde(MCastigatiLucky, CastigatiLucky), FormatMiliarde(MPierdutiLucky, PierdutiLucky));
	return true;
}

CMD:infoupgrader(playerid)
{
	if(!Scripter(playerid)) return false;
	SendMsg(playerid, COLOR_SERVER, "Info Upgrader >> {ffffff}$%s castigati, $%s pierduti, %dPP castigate, %dPP pierdute.",
		FormatMiliarde(MCastigatiUpgrader, CastigatiUpgrader), FormatMiliarde(MPierdutiUpgrader, PierdutiUpgrader), CastigateUpgrader, PierduteUpgrader);
	return true;
}

new
	Float: GiftPos[7][3] =
	{
		{1326.8870, 4.7969, 28.0606},
		{2906.6062, 1090.2009, 10.9037},
		{230.4958, 2226.0161, 34.1253},
		{-1808.5771, 2016.0668, 11.5973},
		{-1729.6084, -1388.3428, 70.9573},
		{-202.7553, -2251.7300, 28.7850},
		{1240.2288, -2283.2505, 13.4316}
	}
;

CMD:getgift(playerid)
{
	if(PlayerInfo[playerid][pLevel] < 5) return SendMsg(playerid, COLOR_SERVER, "GetGift >> {ffffff}Ai nevoie de nivel 5.");
	if(PlayerInfo[playerid][pGiftBoxSeconds] > 0) return SendMsg(playerid, COLOR_SERVER, "GetGift >> {ffffff}Trebuie sa mai astepti %s.", CalculeazaTimp(PlayerInfo[playerid][pGiftBoxSeconds]));
	if(PlayerInfo[playerid][pGiftPoints] < 500) return SendMsg(playerid, COLOR_SERVER, "GetGift >> {ffffff}Ai nevoie de 500 Gift Points.");
	if(PlayerInfo[playerid][pGunLic] < 1) return SendMsg(playerid, COLOR_SERVER, "GetGift >> {ffffff}Ai nevoie de licenta de arme.");
	if(HaveCheckpoint(playerid)) return true;
	if(GiftObject[playerid] != 0) return SendMsg(playerid, COLOR_SERVER, "Giftbox >> {ffffff}Ai inceput deja colectarea giftbox-ului.");
	new
		rand = random(sizeof(GiftPos))
	;
	if(PlayerInfo[playerid][pGiftToCollect] != 0)
	{
		rand = PlayerInfo[playerid][pGiftToCollect] - 1;
	}
	SetPlayerCheckpointEx(playerid, GiftPos[rand][0], GiftPos[rand][1], GiftPos[rand][2], 5);
	CP[playerid] = 370;
	PlayerInfo[playerid][pGiftToCollect] = rand + 1;
	pUpdateInt(playerid, "GiftToCollect", PlayerInfo[playerid][pGiftToCollect]);
	GiftObject[playerid] = CreatePlayerObject(playerid, 19054, GiftPos[rand][0], GiftPos[rand][1], GiftPos[rand][2], 0, 0, 0);
	GiftHP[playerid] = 30;
	SendMsg(playerid, COLOR_SERVER, "Giftbox >> {ffffff}Ti-a fost setat un punct rosu pentru a colecta cadoul.");
	return true;
}

CMD:editbillboard(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new
		id, option[8], value[32]
	;
	if(sscanf(params, "is[8]s[32]", id, option, value) && !strmatch(option, "wipe")) return SendMsg(playerid, COLOR_SERVER, "Edit Billboard >> {ffffff}/editbillboard [id] [option: price, text, wipe] [value]");
	if(id < 1 || id > LoadedBillboards) return SendMsg(playerid, COLOR_SERVER, "Edit Billboard >> {ffffff}ID invalid.(1 - %d)", LoadedBillboards);
	switch(YHash(option))
	{
		case _H<price>:
		{
			if(strval(value) < 0 || strval(value) > 999_999_999) return SendMsg(playerid, COLOR_SERVER, "Edit Billboard >> {ffffff}Suma este invalida.");
			Billboards[id][bPrice] = strval(value);
			UpdateLabel(4, id);
		}
		case _H<text>:
		{
			if(strlen(value) < 1 || strlen(value) > 32) return SendMsg(playerid, COLOR_SERVER, "Edit Billboard >> {ffffff}Lungimea textului este invalida.");
			format(Billboards[id][bText], strlen(value) + 1, value);
			UpdateLabel(4, id);
		}
		case _H<wipe>:
		{
			WipeBillboard(id);
		}
		default:
		{
			SendMsg(playerid, COLOR_SERVER, "Edit Billboard >> {ffffff}Optiunea este invalida.");
		}
	}
	return true;
}

CMD:buybillboard(playerid, params[])
{
	if(PlayerInfo[playerid][pBillboard]) return SendMsg(playerid, COLOR_SERVER, "Buy Billboard >> {ffffff}Ai deja un Billboard.");
	if(!InBillboardZone[playerid]) return SendMsg(playerid, COLOR_SERVER, "Buy Billboard >> {ffffff}Nu esti langa un Billboard.");
	new
		b = InBillboardZone[playerid],
		price = Billboards[b][bPrice]
	;
	if(!price) return SendMsg(playerid, COLOR_SERVER, "Buy Billboard >> {ffffff}Acest Billboard nu este de vanzare.");
	if(GetPlayerCash(playerid) < price) return SendMsg(playerid, COLOR_SERVER, "Buy Billboard >> {ffffff}Nu ai $%s.", FormatNumber(price));
	Query_Mysql("update users set Billboard = 0 where Billboard = %d", b);
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pBillboard] == b)
		{
			if(Logat[i])
			{
				PlayerInfo[i][pBillboard] = 0;
				GivePlayerCash(i, price);
				SendMsg(i, COLOR_SERVER, "Billboard >> {ffffff}%s ti-a cumparat Billboard-ul %d pentru $%s.", GetName(playerid), b, FormatNumber(price));
				break;
			}
		}
	}
	GivePlayerCash(playerid, -price);
	PlayerInfo[playerid][pBillboard] = b;
	pUpdateInt(playerid, "Billboard", PlayerInfo[playerid][pBillboard]);
	format(Billboards[b][bOwner], strlen(GetName(playerid)) + 1, GetName(playerid));
	Billboards[b][bPrice] = 0;
	UpdateLabel(4, b);
	Query_Mysql("update billboards set Owner = '%s', Price = 0 where ID = %d", Billboards[b][bOwner], b);
	return true;
}

CMD:billboardmenu(playerid)
{
	if(!PlayerInfo[playerid][pBillboard]) return SendMsg(playerid, COLOR_SERVER, "Buy Billboard >> {ffffff}Nu ai un Billboard.");
	SPD(playerid, DIALOG_BILLBOARD, DIALOG_STYLE_LIST, "Billboard Menu", "Modifica text-ul\nVinde panoul\nVinde panoul la stat", "Alege", "Anuleaza");
	return true;
}

CMD:drop(playerid, params[])
{
	if(!Scripter(playerid)) return false;
	Drop();
	return true;
}

function CheckCreatorCode2(playerid, code[])
{
	new
		sqlid
	;
	cache_get_value_name_int(0, "PlayerSQLID", sqlid);
	if(PlayerInfo[playerid][pSQLID] != sqlid)
	{
		format(PlayerInfo[playerid][pCreatorCode], strlen(code) + 1, code);
		pUpdateStr(playerid, "CreatorCode", PlayerInfo[playerid][pCreatorCode]);
		SendMsg(playerid, COLOR_SERVER, "Apply Creator Code >> {ffffff}Ai aplicat codul %s.", code);
	}
	else
	{
		SendMsg(playerid, COLOR_SERVER, "Apply Creator Code >> {ffffff}Nu-ti poti folosi propriul Creator Code.");
	}
	return true;
}

function CheckCreatorCode(playerid, code[], sqlid, type)
{
	switch(type)
	{
		case 1:
		{
			if(cache_num_rows())
			{
				SendMsg(playerid, COLOR_SERVER, "Create Creator Code >> {ffffff}Acest cod / jucator exista deja.");
			}
			else
			{
				gString[0] = (EOS);
				mysql_format(SQL, gString, sizeof(gString), "insert into creatorcodes(`CodeName`, `PlayerSQLID`) values ('%e', '%d')", code, sqlid);
				mysql_tquery(SQL, gString);
				SendMsg(playerid, COLOR_SERVER, "Creator Creator Code >> {ffffff}Codul %s a fost intorus pentru jucatorul cu sqlid-ul %d.", code, sqlid);
			}
		}
		case 2:
		{
			if(!cache_num_rows())
			{
				SendMsg(playerid, COLOR_SERVER, "Remove Creator Code >> {ffffff}Acest cod nu exista.");
			}
			else
			{
				gString[0] = (EOS);
				mysql_format(SQL, gString, sizeof(gString), "delete from creatorcodes where CodeName = '%s'", code);
				mysql_tquery(SQL, gString);
				gString[0] = (EOS);
				mysql_format(SQL, gString, sizeof(gString), "update users set CreatorCode = 'NoCreatorCode' where CreatorCode = '%s'", code);
				mysql_tquery(SQL, gString);
				foreach(new i : Player)
				{
					if(Logat[i])
					{
						if(strmatch(PlayerInfo[i][pCreatorCode], code))
						{
							format(PlayerInfo[i][pCreatorCode], strlen(code) + 1, "NoCreatorCode");
							pUpdateStr(i, "CreatorCode", PlayerInfo[i][pCreatorCode]);
						}
					}
				}
				SendMsg(playerid, COLOR_SERVER, "Remove Creator Code >> {ffffff}Ai sters cu succes codul %s.", code);
			}
		}
		case 3:
		{
			if(!cache_num_rows())
			{
				SendMsg(playerid, COLOR_SERVER, "Apply Creator Code >> {ffffff}Codul nu exista.");
			}
			else
			{
				gString[0] = (EOS);
				mysql_format(SQL, gString, sizeof(gString), "select * from creatorcodes where CodeName = '%e'", code);
				mysql_tquery(SQL, gString, "CheckCreatorCode2", "is", playerid, code);
			}
		}
	}
	return true;
}

CMD:createcc(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new
		code[32],
		sqlid
	;
	if(sscanf(params, "s[32]i", code, sqlid)) return SendMsg(playerid, COLOR_SERVER, "Create Creator Code >> {ffffff}/createcc [code] [sqlid]");
	if(strlen(code) < 1 || strlen(code) >= 32) return SendMsg(playerid, COLOR_SERVER, "Create Creator Code >> {ffffff}Codul este prea lung / scurt.(1 - 32 caractere)");
	if(sqlid < 1 || sqlid > ConturiTotale) return SendMsg(playerid, COLOR_SERVER, "Create Creator Code >> {ffffff}SQLID-ul este invalid.(1 - %s)", FormatNumber(ConturiTotale));
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "select * from creatorcodes where CodeName = '%e' or PlayerSQLID = %d", code, sqlid);
	mysql_tquery(SQL, gString, "CheckCreatorCode", "isii", playerid, code, sqlid, 1);
	return true;
}

CMD:removecc(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6) return SendMsg(playerid, COLOR_SERVER, AdminOnly);
	new
		code[32]
	;
	if(sscanf(params, "s[32]", code)) return SendMsg(playerid, COLOR_SERVER, "Remove Creator Code >> {ffffff}/removeacc [code]");
	if(strlen(code) < 1 || strlen(code) >= 32) return SendMsg(playerid, COLOR_SERVER, "Codul este prea lung / prea scurt.(1 - 32 caractere)");
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "select * from creatorcodes where CodeName = '%e'", code);
	mysql_tquery(SQL, gString, "CheckCreatorCode", "isii", playerid, code, 0, 2);
	return true;
}

CMD:removetask(playerid)
{
	if(!Scripter(playerid)) return false;
	PlayerInfo[playerid][pTaskActual] = 0;
	pUpdateInt(playerid, "TaskActual", PlayerInfo[playerid][pTaskActual]);
	PlayerInfo[playerid][pTaskuri] = 0;
	pUpdateInt(playerid, "Taskuri", PlayerInfo[playerid][pTaskuri]);
	PlayerInfo[playerid][pTaskProgress] = 0;
	pUpdateInt(playerid, "TaskProgress", PlayerInfo[playerid][pTaskProgress]);
	SendMsg(playerid, COLOR_SERVER, "Remove Task >> {ffffff}Ti-ai resetat task-urile.");
	return true;
}

CMD:debugturf(playerid)
{
	if(!Scripter(playerid))
		return false;

	SendMsg(playerid, COLOR_SERVER, "Debug Turf >> {ffffff}Te afli pe turf-ul %d.", InTurfZone[playerid]);
	return true;
}

CMD:setskill(playerid, params[])
{
	if(!Scripter(playerid))
		return false;

	new
		id, job, skill
	;

	if(sscanf(params, "uii", id, job, skill))
		return SendMsg(playerid, COLOR_SERVER, "Set Skill >> {ffffff}/setskill [name / playerid] [job] [skill]");

	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id))
		return SendMsg(playerid, COLOR_SERVER, "Set Skill >> {ffffff}Acel jucator este invalid.");

	if(job < 2 || job > MAX_JOBS)
		return SendMsg(playerid, COLOR_SERVER, "Set Skill >> {ffffff}Job-ul este invalid.");

	if(skill < 1 || skill > 6)
		return SendMsg(playerid, COLOR_SERVER, "Set Skill >> {ffffff}Skill-ul este invalid.");

	PlayerInfo[id][pSkills][job] = skill;

	SendMsg(playerid, COLOR_SERVER, "Set Skill >> {ffffff}I-ai setat lui %s skill %d la Job-ul %s.", GetName(id), skill, JobInfo[job][jName]);
	SendMsg(id, COLOR_SERVER, "Set Skill >> {ffffff}%s ti-a setat skill %d la Job-ul %s.", GetName(playerid), skill, JobInfo[job][jName]);
	return true;
}

CMD:changewars(playerid)
{
	if(!Scripter(playerid))
		return false;

	ActiveWars = !ActiveWars;

	switch(ActiveWars)
	{
		case true:
		{
			SendMsg(playerid, COLOR_SERVER, "Change Wars >> {ffffff}Ai activat war-urile.");
			ChooseWars();
		}
		case false:
		{
			SendMsg(playerid, COLOR_SERVER, "Change Wars >> {ffffff}Ai dezactivat war-urile.");
		}
	}
	return true;
}

CMD:wars(playerid)
{
	if(ActiveWars != true)
		return SendMsg(playerid, COLOR_SERVER, "Wars >> {ffffff}War-urile sunt dezactivate.");

	if(strmatch(GetWeekDay(), "Sambata") || strmatch(GetWeekDay(), "Duminica"))
		return SendMsg(playerid, COLOR_SERVER, "Wars >> {ffffff}War-urile se tin doar de luni pana vineri.");

	new
		Start[4][8] = {"20:00", "20:30", "21:00", "21:30"},
		Finish[4][8] = {"20:30", "21:00", "21:30", "22:00"}
	;

	for(new i = 0; i < sizeof(TodayWar); i++)
	{
		switch(TodayWar[i])
		{
			case 2:
			{
				SendMsg(playerid, COLOR_SERVER, "War %d >> {ffffff}Grove Street vs Ballas, Turf: %d, %s - %s", i + 1, TodayTurf[i], Start[i], Finish[i]);
			}
			case 3:
			{
				SendMsg(playerid, COLOR_SERVER, "War %d >> {ffffff}Ballas vs Grove Street, Turf: %d, %s - %s", i + 1, TodayTurf[i], Start[i], Finish[i]);
			}
		}
	}

	return true;
}

CMD:setdiscord(playerid)
{
	if(PlayerInfo[playerid][pLevel] < 3)
		return SendMsg(playerid, COLOR_SERVER, "Set Discord >> {ffffff}Ai nevoie de nivel 3.");

	SPD(playerid, DIALOG_DISCORD, DIALOG_STYLE_INPUT, "Set Discord", "Introdu-ti discord-ul:", "Inainte", "Anuleaza");
	return true;
}

CMD:checkdiscord(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 3)
		return SendMsg(playerid, COLOR_SERVER, "Check Discord >> {ffffff}Ai nevoie de nivel 3.");

	new
		id
	;

	if(sscanf(params, "u", id))
		return SendMsg(playerid, COLOR_SERVER, "Check Discord >> {ffffff}/checkdiscord [name / playerid]");

	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id) || !Logat[id])
		return SendMsg(playerid, COLOR_SERVER, "Check Discord >> {ffffff}Jucatorul este invalid.");

	if(strmatch(PlayerInfo[id][pDiscord], "NoDiscord"))
		return SendMsg(playerid, COLOR_SERVER, "Check Discord >> {ffffff}Jucatorul %s nu are un discord setat.", GetName(id));

	SendMsg(playerid, COLOR_SERVER, "Check Discord >> {ffffff}Jucatorul %s are discord-ul: %s.", GetName(id), PlayerInfo[id][pDiscord]);
	return true;
}

CMD:givemoney(playerid, params[])
{
	if(!Scripter(playerid))
		return false;

	new
		id,
		money[32],
		type
	;

	new BigInt:TempMoney;

	if(sscanf(params, "us[32]i", id, money, type))
		return SendMsg(playerid, COLOR_SERVER, "Give Money >> {ffffff}/givemoney [id] [money] [type]");

	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id) || !Logat[id])
		return SendMsg(playerid, COLOR_SERVER, "Give Money >> {ffffff}Jucatorul este invalid.");

	if(!IsNumeric(money))
		return SendMsg(playerid, COLOR_SERVER, "Give Money >> {ffffff}Suma este invalida.");

	if(type != 1 && type != 2)
		return SendMsg(playerid, COLOR_SERVER, "Give Money >> {ffffff}Tipul este invalid.(1 - Cash, 2 - Bank)");

	converBytes(TempMoney, money);

	switch(type)
	{
		case 1:
		{
			if(OPByte(TempMoney, >, #999999999))
		    {
		        addBytes64(PlayerCash[id], valueBigInt(TempMoney));
		    }
		    else
		    {
		        GivePlayerCash(id, bytes32(TempMoney));
		    }
		}
		case 2:
		{
			if(OPByte(TempMoney, >, #999999999))
		    {
		        addBytes64(PlayerBank[id], valueBigInt(TempMoney));
		    }
		    else
		    {
		        GivePlayerCash(id, bytes32(TempMoney));
		    }
		}
	}

	SendMsg(playerid, COLOR_SERVER, "Give Money >> {ffffff}I-ai dat $%s lui %s.", formatBytes(TempMoney), GetName(id));
	SendMsg(id, COLOR_SERVER, "Give Money >> {ffffff}Ai primit $%s de la %s.", formatBytes(TempMoney), GetName(playerid));

	return true;
}

CMD:heal(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != 7)
	{
		if(!InHouse[playerid] && !InHQ[playerid]) return Info(playerid, "Nu poti folosi aceasta comanda.");
		SetPlayerHP(playerid, 100.0);
		Info(playerid, "Te-ai vindecat.");
	}
	else
	{
		if(InHouse[playerid] || InHQ[playerid])
		{		
			SetPlayerHP(playerid, 100.0);
			Info(playerid, "Te-ai vindecat.");
		}
		else
		{
			new
				id
			;

			if(sscanf(params, "u", id))
				return SendMsg(playerid, COLOR_SERVER, "Heal >> {ffffff}/heal [id]");

			if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id) || !Logat[id])
				return SendMsg(playerid, COLOR_SERVER, "Heal >> {ffffff}Acel jucator este invalid.");

			if(id == playerid)
				return SendMsg(playerid, COLOR_SERVER, "Heal >> {ffffff}Nu te poti vindeca singur.");

			if(OnDuty[playerid] != true)
				return SendMsg(playerid, COLOR_SERVER, "Heal >> {ffffff}Nu esti la datorie.");

			if(GetPlayerHP(id) > 90)
				return SendMsg(playerid, COLOR_SERVER, "Heal >> {ffffff}Jucatorul nu poate avea peste 90HP.");

			if(GetDistanceBetweenPlayers(playerid, id) > 5)
				return SendMsg(playerid, COLOR_SERVER, "Heal >> {ffffff}Nu esti langa acel jucator.");

			if(GetPlayerCash(id) < 5000)
				return SendMsg(playerid, COLOR_SERVER, "Heal >> {ffffff}Acel jucator nu are $5,000");

			HealRequest[id] = playerid;

			SendMsg(playerid, COLOR_SERVER, "Heal >> {ffffff}I-ai trimis o cerere de heal lui %s.", GetName(id));
			SendMsg(id, COLOR_SERVER, "Heal >> {ffffff}%s ti-a trimis o cerere de heal pentru $5,000. [/accept heal %d]", GetName(playerid), playerid);
		}
	}
	return true;
}

CMD:sellmed(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != 7)
		return SendMsg(playerid, COLOR_SERVER, "Sell Med >> {ffffff}Nu esti Paramedic.");

	new
		id
	;

	if(sscanf(params, "u", id))
		return SendMsg(playerid, COLOR_SERVER, "Sell Med >> {ffffff}/sellmed [id]");

	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id) || !Logat[id])
		return SendMsg(playerid, COLOR_SERVER, "Sell Med >> {ffffff}Jucatorul este invalid.");

	if(id == playerid)
		return SendMsg(playerid, COLOR_SERVER, "Sell Med >> {ffffff}Nu iti poti vinde singur o trusa medicala.");

	if(OnDuty[playerid] != true)
		return SendMsg(playerid, COLOR_SERVER, "Sell Med >> {ffffff}Nu esti la datorie.");

	if(PlayerInfo[id][pMedKit] != false)
		return SendMsg(playerid, COLOR_SERVER, "Sell Med >> {ffffff}Jucatorul are deja o trusa medicala.");

	if(GetPlayerCash(playerid) < 50000)
		return SendMsg(playerid, COLOR_SERVER, "Sell Med >> {ffffff}Jucatorul nu are $50,000.");

	MedRequest[id] = playerid;

	SendMsg(playerid, COLOR_SERVER, "Sell Med >> {ffffff}I-ai oferit o trusa medicala lui %s.", GetName(id));
	SendMsg(id, COLOR_SERVER, "Sell Med >> {ffffff}%s ti-a oferit o trusa medicala pentru $50,000. [/accept med %d]", GetName(playerid), playerid);
	return true;
}

CMD:usemed(playerid)
{
	if(PlayerInfo[playerid][pMedKit] != true)
		return SendMsg(playerid, COLOR_SERVER, "Use Med >> {ffffff}Nu ai o trusa medicala.");

	if(IsAGangMember(playerid) && OnDuty[playerid] && ServerWars)
		return SendMsg(playerid, COLOR_SERVER, "Use Med >> {ffffff}Nu poti folosi trusa medicala in timpul war-urilor.");

	if(GetPlayerHP(playerid) > 90)
		return SendMsg(playerid, COLOR_SERVER, "Use Med >> {ffffff}Nu poti avea peste 90HP.");

	SetPlayerHP(playerid, 100);

	PlayerInfo[playerid][pMedKit] = false;
	pUpdateInt(playerid, "MedKit", PlayerInfo[playerid][pMedKit]);

	SendMsg(playerid, COLOR_SERVER, "Use Med >> {ffffff}Ai folost o trusa medicala.");
	return true;
}

CMD:drink(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != 8)
		return SendMsg(playerid, COLOR_SERVER, "Drink >> {ffffff}Nu esti Glovo.");

	new
		id
	;

	if(sscanf(params, "u", id))
		return SendMsg(playerid, COLOR_SERVER, "Drink >> {ffffff}/drink [id]");

	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id) || !Logat[id])
		return SendMsg(playerid, COLOR_SERVER, "Drink >> {ffffff}Jucatorul este invalid.");

	if(id == playerid)
		return SendMsg(playerid, COLOR_SERVER, "Drink >> {ffffff}Nu iti poti vinde singur apa.");

	if(GetDistanceBetweenPlayers(playerid, id) > 10)
		return SendMsg(playerid, COLOR_SERVER, "Drink >> {ffffff}Nu esti langa acel jucator.");

	if(GetPlayerCash(id) < 50000)
		return SendMsg(playerid, COLOR_SERVER, "Drink >> {ffffff}Acel jucator nu are $50,000");

	if(PlayerInfo[id][pApa] > 70)
		return SendMsg(playerid, COLOR_SERVER, "Drink >> {ffffff}Acel jucator are peste 70 apa.");

	DrinkRequest[id] = playerid;

	SendMsg(playerid, COLOR_SERVER, "Drink >> {ffffff}I-ai oferit apa lui %s.", GetName(id));
	SendMsg(id, COLOR_SERVER, "Drink >> {ffffff}%s ti-a oferit apa pentru $50,000.[/accept drink %d]", GetName(playerid), playerid);

	return true;
}

CMD:food(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != 8)
		return SendMsg(playerid, COLOR_SERVER, "Food >> {ffffff}Nu esti Glovo.");

	new
		id
	;

	if(sscanf(params, "u", id))
		return SendMsg(playerid, COLOR_SERVER, "Food >> {ffffff}/food [id]");

	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id) || !Logat[id])
		return SendMsg(playerid, COLOR_SERVER, "Food >> {ffffff}Jucatorul este invalid.");

	if(id == playerid)
		return SendMsg(playerid, COLOR_SERVER, "Food >> {ffffff}Nu iti poti vinde singur mancare.");

	if(GetDistanceBetweenPlayers(playerid, id) > 10)
		return SendMsg(playerid, COLOR_SERVER, "Food >> {ffffff}Nu esti langa acel jucator.");

	if(GetPlayerCash(id) < 50000)
		return SendMsg(playerid, COLOR_SERVER, "Food >> {ffffff}Acel jucator nu are $50,000");

	if(PlayerInfo[id][pMancare] > 70)
		return SendMsg(playerid, COLOR_SERVER, "Food >> {ffffff}Acel jucator are peste 70 mancare.");

	FoodRequest[id] = playerid;

	SendMsg(playerid, COLOR_SERVER, "Food >> {ffffff}I-ai oferit mancare lui %s.", GetName(id));
	SendMsg(id, COLOR_SERVER, "Food >> {ffffff}%s ti-a oferit mancare pentru $50,000.[/accept food %d]", GetName(playerid), playerid);

	return true;
}

function GivePlayerRP(playerid, rp)
{
	PlayerInfo[playerid][pRespect] += rp;
	pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pRespect]);
	UpdateLevelBar(playerid);
	return true;
}

function GivePlayerPP(playerid, pp)
{
	PlayerInfo[playerid][pPremiumPoints] += pp;
	pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
	return true;
}

function GivePlayerOG(playerid, og)
{
	PlayerInfo[playerid][pOGPoints] += og;
	pUpdateInt(playerid, "OGPoints", PlayerInfo[playerid][pOGPoints]);
	return true;
}

function GivePlayerGift(playerid, gift)
{
	PlayerInfo[playerid][pGiftPoints] += gift;
	pUpdateInt(playerid, "GiftPoints", PlayerInfo[playerid][pGiftPoints]);
	return true;
}

function GivePlayerSpin(playerid, spin)
{
	PlayerInfo[playerid][pSpin] += spin;
	pUpdateInt(playerid, "Spin", PlayerInfo[playerid][pSpin]);
	return true;
}

function GivePlayerRob(playerid, rob)
{
	PlayerInfo[playerid][pRob] += rob;
	pUpdateInt(playerid, "Rob", PlayerInfo[playerid][pRob]);
	return true;
}

function GivePlayerEscape(playerid, escape)
{
	PlayerInfo[playerid][pEscapePoints] += escape;
	pUpdateInt(playerid, "EscapePoints", PlayerInfo[playerid][pEscapePoints]);
	return true;
}

function GivePlayerJobBoost(playerid, jobboost)
{
	PlayerInfo[playerid][pJobBoost] += jobboost;
	pUpdateInt(playerid, "JobBoost", PlayerInfo[playerid][pJobBoost]);
	return true;
}

function GivePlayerCrate(playerid, crate)
{
	switch(crate)
	{
		case 0:
		{
			PlayerInfo[playerid][pBasicCrate] ++;
			pUpdateInt(playerid, "BasicCrate", PlayerInfo[playerid][pBasicCrate]);
		}
		case 1:
		{
			PlayerInfo[playerid][pNormalCrate] ++;
			pUpdateInt(playerid, "NormalCrate", PlayerInfo[playerid][pNormalCrate]);
		}
		case 2:
		{
			PlayerInfo[playerid][pMediumCrate] ++;
			pUpdateInt(playerid, "MediumCrate", PlayerInfo[playerid][pMediumCrate]);
		}
		case 3:
		{
			PlayerInfo[playerid][pDiamondCrate] ++;
			pUpdateInt(playerid, "DiamondCrate", PlayerInfo[playerid][pDiamondCrate]);
		}
		case 4:
		{
			PlayerInfo[playerid][pVehicleCrate] ++;
			pUpdateInt(playerid, "VehicleCrate", PlayerInfo[playerid][pVehicleCrate]);
		}
		case 5:
		{
			PlayerInfo[playerid][pFragmentCrate] ++;
			pUpdateInt(playerid, "FragmentCrate", PlayerInfo[playerid][pFragmentCrate]);
		}
		case 6:
		{
			PlayerInfo[playerid][pSkinCrate] ++;
			pUpdateInt(playerid, "SkinCrate", PlayerInfo[playerid][pSkinCrate]);
		}
		case 7:
		{
			PlayerInfo[playerid][pOGCrate] ++;
			pUpdateInt(playerid, "OGCrate", PlayerInfo[playerid][pOGCrate]);
		}
		case 8:
		{
			PlayerInfo[playerid][pSupremeCrate] ++;
			pUpdateInt(playerid, "SupremeCrate", PlayerInfo[playerid][pSupremeCrate]);
		}
	}
	return true;
}

function GivePlayerVehicleSlot(playerid, slots)
{	
	for(new i = 0; i < slots; i++)
	{
		if(PlayerInfo[playerid][pVehSlots] < MAX_PERSONAL_VEHICLES)
		{
			PlayerInfo[playerid][pVehSlots] ++;
			pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pVehSlots]);
		}
		else
		{
			GivePlayerPP(playerid, PremiumShopPrices[4]);
			SendMsg(playerid, COLOR_SERVER, "Server >> {ffffff}Deoarece ai %d de sloturi ai primit %dPP.", MAX_PERSONAL_VEHICLES, PremiumShopPrices[4]);
		}
	}
	return true;
}

function GivePlayerSkinSlot(playerid, slots)
{	
	for(new i = 0; i < slots; i++)
	{
		if(PlayerInfo[playerid][pSkinSlots] < MAX_SKINS)
		{
			PlayerInfo[playerid][pSkinSlots] ++;
			pUpdateInt(playerid, "SkinSlots", PlayerInfo[playerid][pSkinSlots]);
		}
		else
		{
			GivePlayerPP(playerid, PremiumShopPrices[10]);
			SendMsg(playerid, COLOR_SERVER, "Battlepass >> {ffffff}Deoarece ai %d de sloturi ai primit %dPP.", MAX_SKINS, PremiumShopPrices[10]);
		}
	}
	return true;
}

function GivePlayerVehicle(playerid, vehicle)
{
	if(GetPlayerVehicles(playerid) + 1 > PlayerInfo[playerid][pVehSlots])
	{
		SendMsg(playerid, COLOR_SERVER, "Battlepass >> {ffffff}Deoarece nu ai sloturi libere ai primit $%s.", formatBytes(DealerShipPrice[vehicle]));
		GivePlayerCash(playerid, bytes32(DealerShipPrice[vehicle]));
	}
	else
	{
		InsertVehicle(playerid, vehicle, true);
	}
	return true;
}

function GivePlayerVoucher(playerid, type, amount)
{
	PlayerInfo[playerid][pVouchers][type] += amount;
	return true;
}

function GiveTierRewardForType(playerid, tier, type, amount)
{
	/*
		1 - bani
		2 - respectpoints
		3 - premiumpoints
		4 - ogpoints
		5 - vehicul
		6 - giftpoints
		7 - spinpoints
		8 - robpoints
		9 - escapepoints
		10 - jobboost
		11 - vouchernormal
		12 - crate
		13 - skinslot
	*/
	switch(type)
	{
		case 1:
		{			
			GivePlayerCash(playerid, amount);
		}
		case 2:
		{
			GivePlayerRP(playerid, amount);
		}
		case 3:
		{
			GivePlayerPP(playerid, amount);
		}
		case 4:
		{
			GivePlayerOG(playerid, amount);
		}
		case 5:
		{
			GivePlayerVehicle(playerid, amount);
		}
		case 6:
		{
			GivePlayerGift(playerid, amount);
		}
		case 7:
		{
			GivePlayerSpin(playerid, amount);
		}
		case 8:
		{
			GivePlayerRob(playerid, amount);
		}
		case 9:
		{
			GivePlayerEscape(playerid, amount);
		}
		case 10:
		{
			GivePlayerJobBoost(playerid, amount);
		}
		case 11:
		{
			PlayerInfo[playerid][pVouchers][0] += amount;
		}
		case 12:
		{
			GivePlayerCrate(playerid, amount);
		}
		case 13:
		{
			GivePlayerSkinSlot(playerid, amount);
		}
	}
	return true;
}

function GivePlayerHiddens(playerid, hiddens)
{

	PlayerInfo[playerid][pHiddens] += hiddens;
	pUpdateInt(playerid, "Hiddens", PlayerInfo[playerid][pHiddens]);

	return true;
}

function GiveTierReward(playerid, tier)
{
	new
		Type = BattlepassRewards[tier][0],
		FreeReward = BattlepassRewards[tier][1],
		PremiumReward = BattlepassRewards[tier][2]
	;

	if(tier == 30)
	{
		Type = 13;
	}

	GiveTierRewardForType(playerid, tier, Type, FreeReward);
	
	SendMsg(playerid, COLOR_SERVER, "Free Battlepass >> {ffffff}Ai colectat '%s'.", BattlepassFreeRewards[tier]);

	if(PlayerInfo[playerid][pBattlepassType] == 1)
	{
		if(tier == 30)
		{
			Type = 11;
		}

		GiveTierRewardForType(playerid, tier, Type, PremiumReward);
		SendMsg(playerid, COLOR_SERVER, "Premium Battlepass >> {ffffff}Ai colectat '%s'.", BattlepassPremiumRewards[tier]);
	}

	return true;
}

function ProgressToBattlepass(playerid, mission, progress)
{
	if(PlayerInfo[playerid][pBattlepassProgress][mission] >= BattlepassMaxProgress[mission])
		return true;

	PlayerInfo[playerid][pBattlepassProgress][mission] += progress;

	if(PlayerInfo[playerid][pBattlepassProgress][mission] > BattlepassMaxProgress[mission])
	{
		PlayerInfo[playerid][pBattlepassProgress][mission] = BattlepassMaxProgress[mission];
	}

	SendMsg(playerid, COLOR_SERVER, "Battlepass Progress >> {ffffff}%s: %d/%d", BattlepassMissions[mission], PlayerInfo[playerid][pBattlepassProgress][mission], BattlepassMaxProgress[mission]);

	if(PlayerInfo[playerid][pBattlepassProgress][mission] >= BattlepassMaxProgress[mission])
	{
		PlayerInfo[playerid][pBattlepassXP] += BattlepassMissionXP[mission];

		new
			ActualTier = PlayerInfo[playerid][pBattlepassTier]
		;

		if(ActualTier < 50)
		{
			while(PlayerInfo[playerid][pBattlepassXP] >= BattlepassTierXP[ActualTier + 1])
			{
				ActualTier ++;

				PlayerInfo[playerid][pBattlepassTier] ++;

				GiveTierReward(playerid, PlayerInfo[playerid][pBattlepassTier]);
			}
		}
	}

	return true;
}

function HideBattlepass(playerid)
{
	for(new i = 0; i < sizeof(BattlepassTD); i++)
	{
		TextDrawHideForPlayer(playerid, BattlepassTD[i]);
	}

	for(new i = 0; i < sizeof(BattlepassPTD); i++)
	{
		PlayerTextDrawHide(playerid, BattlepassPTD[i]);
	}

	InTextdrawMenu[playerid] = 0;

	CancelSelectTextDraw(playerid);

	HidePlayerProgressBar(playerid, BattlepassBar);
	return true;
}

function UpdateBattlepassPage(playerid, page)
{
	BattlepassPage[playerid] = page;

	for(new i = 0; i < 5; i++)
	{
		va_PlayerTextDrawSetString(playerid, BattlepassPTD[i], "%d", (5 * page) - (4 - i));
	}

	for(new i = 15; i < 20; i++)
	{
		new
			id = (5 * page) - (4 - (i - 15))
		;

		if(PlayerInfo[playerid][pBattlepassTier] >= id)
		{
			PlayerTextDrawBoxColor(playerid, BattlepassPTD[i - 10], 9109679);
		}
		else
		{
			PlayerTextDrawBoxColor(playerid, BattlepassPTD[i - 10], 1296911791);
		}

		PlayerTextDrawShow(playerid, BattlepassPTD[i - 10]);

		va_PlayerTextDrawSetString(playerid, BattlepassPTD[i], "%s", BattlepassFreeRewards[id]);
	}

	for(new i = 20; i < 25; i++)
	{
		new
			id = (5 * page) - (4 - (i - 20))
		;

		if(PlayerInfo[playerid][pBattlepassTier] >= id && PlayerInfo[playerid][pBattlepassType] == 1)
		{
			PlayerTextDrawBoxColor(playerid, BattlepassPTD[i - 10], 9109679);
		}
		else
		{
			PlayerTextDrawBoxColor(playerid, BattlepassPTD[i - 10], -2686801);
		}

		PlayerTextDrawShow(playerid, BattlepassPTD[i - 10]);

		va_PlayerTextDrawSetString(playerid, BattlepassPTD[i], "%s", BattlepassPremiumRewards[id]);
	}

	return true;
}

CMD:battlepass(playerid)
{
	if(InTextdrawMenu[playerid] != 0)
		return SendMsg(playerid, COLOR_SERVER, "Battlepass >> {ffffff}Ai deja un meniu deschis.");

	for(new i = 0; i < sizeof(BattlepassTD); i++)
	{
		TextDrawShowForPlayer(playerid, BattlepassTD[i]);
	}

	for(new i = 0; i < sizeof(BattlepassPTD); i++)
	{
		PlayerTextDrawShow(playerid, BattlepassPTD[i]);
	}

	SelectTextDraw(playerid, HOVER_COLOR);

	InTextdrawMenu[playerid] = 8;

	UpdateBattlepassPage(playerid, 1);

	va_PlayerTextDrawSetString(playerid, BattlepassPTD[25], "%d / %dXP", PlayerInfo[playerid][pBattlepassXP], BattlepassTierXP[PlayerInfo[playerid][pBattlepassTier] + 1]);

	SetPlayerProgressBarValue(playerid, BattlepassBar, PlayerInfo[playerid][pBattlepassXP]);
	SetPlayerProgressBarMaxValue(playerid, BattlepassBar, BattlepassTierXP[PlayerInfo[playerid][pBattlepassTier] + 1]);
	ShowPlayerProgressBar(playerid, BattlepassBar);
	return true;
}

alias:battlepass("bp");

function HideDice(playerid)
{
	new
		id = DicePartner[playerid]
	;

	if(Iter_Contains(MovingDice, playerid))
	{
		Iter_Remove(MovingDice, playerid);
	}

	for(new i = 0; i < sizeof(DiceTD); i++)
	{
		TextDrawHideForPlayer(playerid, DiceTD[i]);
	}

	for(new i = 0; i < sizeof(DicePTD); i++)
	{
		PlayerTextDrawHide(playerid, DicePTD[i]);
	}

	InTextdrawMenu[playerid] = 0;

	DicePartner[playerid] = -1;

	MovingDiceID[playerid] = 0;

	MovingDiceStep[playerid] = 0;

	CancelSelectTextDraw(playerid);

	if(Iter_Contains(MovingDice, id))
	{
		Iter_Remove(MovingDice, id);
	}

	for(new i = 0; i < sizeof(DiceTD); i++)
	{
		TextDrawHideForPlayer(id, DiceTD[i]);
	}

	for(new i = 0; i < sizeof(DicePTD); i++)
	{
		PlayerTextDrawHide(id, DicePTD[i]);
	}

	InTextdrawMenu[id] = 0;

	DicePartner[id] = -1;

	MovingDiceID[id] = 0;

	MovingDiceStep[id] = 0;

	CancelSelectTextDraw(id);

	return true;
}

function ShowDice(playerid)
{
	new
		id = DicePartner[playerid]
	;

	for(new i = 0; i < sizeof(DiceTD); i++)
	{
		TextDrawShowForPlayer(playerid, DiceTD[i]);
	}

	for(new i = 0; i < sizeof(DicePTD); i++)
	{
		PlayerTextDrawShow(playerid, DicePTD[i]);
	}

	PlayerTextDrawSetString(playerid, DicePTD[4], GetName(playerid));

	PlayerTextDrawSetString(playerid, DicePTD[5], GetName(id));

	for(new i = 0; i < 4; i++)
	{
		PlayerTextDrawSetPreviewRot(playerid, DicePTD[i], 90.000000, 0.000000, 0.000000, 1.000000);
		PlayerTextDrawShow(playerid, DicePTD[i]);
	}

	for(new i = 0; i < 2; i++)
	{
		DiceNumber[playerid][i] = 1;
	}

	for(new i = 0; i < 2; i++)
	{
		DiceRolled[playerid][i] = false;
	}

	MovingDiceID[playerid] = 0;

	MovingDiceStep[playerid] = 0;

	InTextdrawMenu[playerid] = 9;

	SelectTextDraw(playerid, HOVER_COLOR);

	return true;
}

function UpdateDices(playerid)
{
	new
		id = DicePartner[playerid],
		DiceInfo[7][3] =
		{
			{0, 0, 0},
			{90, 0, 0},
			{0, 0, 270},
			{0, 0, 0},
			{0, 0, 180},
			{0, 0, 90},
			{270, 0, 0}
		},
		Numbers[4]
	;

	for(new i = 0; i < 2; i ++)
	{
		Numbers[i] = DiceNumber[playerid][i];
	}

	for(new i = 2; i < 4; i ++)
	{
		Numbers[i] = DiceNumber[id][i - 2];
	}

	for(new i = 0; i < 4; i++)
	{
		PlayerTextDrawSetPreviewRot(playerid, DicePTD[i], DiceInfo[Numbers[i]][0], DiceInfo[Numbers[i]][1], DiceInfo[Numbers[i]][2], 1.000000);
		PlayerTextDrawShow(playerid, DicePTD[i]);
	}

	return true;
}

CMD:findclanhq(playerid, params[])
{
	if(HaveCheckpoint(playerid))
		return true;

	if(LoadeadClanHQs < 1)
		return SendMsg(playerid, COLOR_SERVER, "Find Clan HQ >> {ffffff}Nu exista clan hq-uri.");

	gString[0] = (EOS);
	for(new i = 0; i <= LoadeadClanHQs; i ++)
	{
		new
			Owner = ClanHQs[i][cOwnerID]
		;
		format(gString, 256, "%s\n%s", gString, ClanInfo[Owner][clanName]);
	}
	SPD(playerid, DIALOG_CLANHQS, DIALOG_STYLE_LIST, "Clan HQS", gString, "Alege", "Anuleaza");

	return true;
}

CMD:creatorcode(playerid)
{
	SPD(playerid, DIALOG_CREATORCODE1, DIALOG_STYLE_LIST, "Creator Code", "Adauga\nSterge", "Inainte", "Anuleaza");
	return true;
}

CMD:setdrugs(playerid, params[])
{
	if(!Scripter(playerid))
		return false;

	new
		id,
		type,
		amount
	;

	if(sscanf(params, "udd", id, type, amount))
		return SendMsg(playerid, COLOR_SERVER, "Set Drugs >> {ffffff}/setdrugs [id] [type] [amount]");

	if(type < 0 || type > 3)
		return SendMsg(playerid, COLOR_SERVER, "Set Drugs >> {ffffff}Tip invalid.(0 - 3)");

	if(amount < 0 || amount > 999)
		return SendMsg(playerid, COLOR_SERVER, "Set Drugs >> {ffffff}Suma invalida.(0 - 999)");

	PlayerInfo[id][pDrugs][type] = amount;

	SendMsg(playerid, COLOR_SERVER, "Set Drugs >> {ffffff}I-ai setat lui %s %d %s.", GetName(id), amount, DrugNames[type]);
	SendMsg(id, COLOR_SERVER, "Set Drugs >> {ffffff}%s ti-a setat %d %s.", GetName(playerid), amount, DrugNames[type]);

	return true;
}

CMD:myhp(playerid)
{
	if(!Scripter(playerid))
		return false;

	SendMsg(playerid, COLOR_SERVER, "My HP >> {ffffff}Ai %0.2f HP.", GetPlayerHP(playerid));

	return true;
}

CMD:gmx(playerid, params[])
{
	if(!Scripter(playerid))
		return false;

	SendRconCommand("gmx");

	return true;
}

CMD:potions(playerid)
{
	gString[0] = (EOS);

	format(gString, 128, "Common: %d\nEpic: %d\nLegendary: %d\nEaster: %d", PlayerInfo[playerid][pPotions][0], PlayerInfo[playerid][pPotions][1], PlayerInfo[playerid][pPotions][2], 
		PlayerInfo[playerid][pPotions][3]);

	SPD(playerid, DIALOG_POTIONS, DIALOG_STYLE_LIST, "Potions", gString, "Alege", "Anuleaza");
	
	return true;
}

CMD:givepotions(playerid, params[])
{
	if(!Scripter(playerid))
		return false;

	new
		potions
	;

	if(sscanf(params, "i", potions))
		return SendMsg(playerid, COLOR_SERVER, "Give Potions >> {ffffff}/givepotions [potions]");

	for(new i = 0; i < 4; i ++)
	{
		PlayerInfo[playerid][pPotions][i] = potions;
	}

	SendMsg(playerid, COLOR_SERVER, "Give Potions >> {ffffff}Ti-ai dat %d potiuni.", potions);

	return true;
}

CMD:perks(playerid)
{
	if(InTextdrawMenu[playerid])
		return SendMsg(playerid, COLOR_SERVER, "Perks >> {ffffff}Inchide textdraw-urile pe care le ai.");

	for(new i = 0; i < sizeof(PerkMenuTD); i++)
	{
		TextDrawShowForPlayer(playerid, PerkMenuTD[i]);
	}

	InTextdrawMenu[playerid] = 10;

	SelectTextDraw(playerid, HOVER_COLOR);

	return true;
}

function ExitPerkMenu(playerid)
{
	switch(InTextdrawMenu[playerid])
	{
		case 10:
		{
			for(new i = 0; i < sizeof(PerkMenuTD); i++)
			{
				TextDrawHideForPlayer(playerid, PerkMenuTD[i]);
			}
		}
		case 11..19:
		{
			for(new i = 0; i < sizeof(CategoryPerksTD); i++)
			{
				TextDrawHideForPlayer(playerid, CategoryPerksTD[i]);
			}

			for(new i = 0; i < sizeof(CategoryPerksPTD); i++)
			{
				PlayerTextDrawHide(playerid, CategoryPerksPTD[i]);
			}
		}
		case 20:
		{
			for(new i = 0; i < sizeof(PerkDetailsTD); i++)
			{
				TextDrawHideForPlayer(playerid, PerkDetailsTD[i]);
			}

			for(new i = 0; i < sizeof(PerkDetailsPTD); i++)
			{
				PlayerTextDrawHide(playerid, PerkDetailsPTD[i]);
			}
		}
	}

	InTextdrawMenu[playerid] = 0;

	CancelSelectTextDraw(playerid);

	return true;
}

function ProgressToPerkMissions(playerid, mission, amount)
{
	if(PlayerInfo[playerid][pPerkProgress][mission] >= MaxProgressPerks[mission])
		return true;

	PlayerInfo[playerid][pPerkProgress][mission] += amount;

	SendMsg(playerid, COLOR_SERVER, "Perks Missions >> {ffffff}%s: %d/%d", MisiuniPerks[mission], PlayerInfo[playerid][pPerkProgress][mission], MaxProgressPerks[mission]);

	if(PlayerInfo[playerid][pPerkProgress][mission] >= MaxProgressPerks[mission])
	{
		PlayerInfo[playerid][pPerkProgress][mission] = MaxProgressPerks[mission];

		PlayerInfo[playerid][pPerkPoints] += RewardsPerks[mission];

		SendMsg(playerid, COLOR_SERVER, "Perks Missions >> {ffffff}Ai primit %d points pentru completarea misiunii.", RewardsPerks[mission]);
	}

	return true;
}

function ProcessPerkProgress()
{
	if(cache_num_rows())
	{
		for(new i = 0; i < cache_num_rows(); i++)
		{
			new
				test[64],
				test2[13],
				test3[64],
				bool: Connected,
				id,
				bool: skywarstoday,
				bool: gifttoday
				//bool: quest
			;

			cache_get_value_name_int(i, "Status", Connected);

			if(Connected)
			{
				continue;
			}

			cache_get_value_name_int(i, "id", id);
			cache_get_value_name(i, "PerkProgress", test);
			cache_get_value_name_int(i, "SkyWarsWinToday", skywarstoday);
			cache_get_value_name_int(i, "GiftBoxOpenedToday", gifttoday);
			//cache_get_value_name_int(i, "SummerQuestToday", quest);

			sscanf(test, "p<|>a<i>[13]", test2);

			if(test2[7] < 3) //&& quest != true)
			{
				test2[7] = 0;
			}

			if(test2[8] < 6)
			{
				test2[8] = 0;
			}

			if(test2[9] < 3 && skywarstoday != true)
			{
				test2[9] = 0;
			}

			if(test2[10] < 3 && gifttoday != true)
			{
				test2[10] = 0;
			}

			if(test2[11] < 21 && strmatch(GetWeekDay(), "Luni"))
			{
				test2[11] = 0;
			}

			format(test3, sizeof(test3), "%d", test2[0]);
			for(new j = 1; j < sizeof(test2); j++)
			{
				format(test3, sizeof(test3), "%s|%d", test3, test2[j]);
			}
			Query_Mysql("update users set PerkProgress = '%s' where id = %d", test3, id);
		}
	}
	return true;
}

CMD:updates(playerid)
{
	SPD(playerid, DIALOG_UPDATES, DIALOG_STYLE_LIST, "Updates", "Februarie 2024", "Alege", "Anuleaza");

	return true;
}

CMD:nedeconectati(playerid)
{
	if(!Scripter(playerid))
		return false;

	if(LastNedeconectat < 1)
		return SendMsg(playerid, COLOR_SERVER, "Nedeconectati >> {ffffff}Nu exista nedeconectati.");

	gString[0] = (EOS);

	for(new i = 0; i <= LastNedeconectat; i++)
	{
		format(gString, sizeof(gString), "%s\n%s - %d", gString, Nedeconectati[i][nName], Nedeconectati[i][nID]);
	}

	SPD(playerid, DIALOG_GOL, DIALOG_STYLE_LIST, "Nedeconectati", gString, "Iesi", "");

	return true;
}

function ChooseDailyQuest()
{
	if(Iter_Count(PossibleQuests))
	{
		TodayDailyQuest = Iter_Random(PossibleQuests);

		DailyQuests[GetWeekDayNumber()] = TodayDailyQuest;
	}

	va_SendClientMessageToAll(COLOR_SERVER, "Daily Quests >> {ffffff}Quest-ul zilei este '%s', foloseste /dailyquest.", DailyQuestsName[TodayDailyQuest - 1]);

	printf("Quest-ul zilei este '%s'.", DailyQuestsName[TodayDailyQuest - 1]);

	return true;
}

CMD:choosedailyquest(playerid)
{
	if(!Scripter(playerid))
		return true;

	ChooseDailyQuest();

	return true;
}

CMD:dailyquest(playerid)
{
	SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Quest-ul zilei este '%s'.", DailyQuestsName[TodayDailyQuest - 1]);

	if(HaveCheckpoint(playerid))
		return false;

	if(PlayerInfo[playerid][pDailyQuestToday] != false)
		return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai facut quest-ul zilnic azi.");

	switch(TodayDailyQuest)
	{
		case 1:
		{
			if(PlayerInfo[playerid][pDrugs][0] < 10)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai nevoie de 10g de weed.");

			SetPlayerCheckpointEx(playerid, CpsDailyQuest1[0][0], CpsDailyQuest1[0][1], CpsDailyQuest1[0][2], 3);

			CP[playerid] = 386;

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Urmeaza cele 10 puncte rosii pentru duce weed-ul.");
		}
		case 2:
		{
			if(PlayerInfo[playerid][pFlyLic] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai nevoie de licenta de aviatie.");

			SetPlayerCheckpointEx(playerid, 1388.8352, 1466.5592, 10.8203, 3);

			CP[playerid] = 396;

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Urmeaza punctul rosu pentru a lua un elicopter si a ajuta un grup de hoti sa evadeze.");
		}
		case 3:
		{
			if(PlayerInfo[playerid][pVehLic] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai nevoie de licenta de condus.");

			SetPlayerCheckpointEx(playerid, 1380.5426, -925.7275, 33.8824, 3);

			CP[playerid] = 399;

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Urmeaza punctul rosu pentru a incepe cursa.");
		}
		case 4:
		{
			if(PlayerInfo[playerid][pVehLic] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai nevoie de licenta de condus.");

			SetPlayerCheckpointEx(playerid, 2892.0005, -783.5004, 10.5397, 3);

			CP[playerid] = 415;

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Urmeaza punctul rosu pentru a incepe cursa.");
		}
		case 5:
		{
			if(PlayerInfo[playerid][pVehLic] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai nevoie de licenta de condus.");

			SetPlayerCheckpointEx(playerid, -852.7993, 1856.9600, 59.8428, 3);

			CP[playerid] = 434;

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Urmeaza punctul rosu pentru a incepe cursa.");
		}
		case 6:
		{
			if(PlayerInfo[playerid][pVehLic] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai nevoie de licenta de condus.");

			SetPlayerCheckpointEx(playerid, -1910.6317, -748.4869, 44.3512, 3);

			CP[playerid] = 505;

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Urmeaza punctul rosu pentru a incepe cursa.");
		}
		case 7:
		{
			if(PlayerInfo[playerid][pBoatLic] < 1)
				return SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Ai nevoie de licenta de navigat.");

			SetPlayerCheckpointEx(playerid, -2329.8765, 2291.7737, 3.5000, 3);

			CP[playerid] = 470;

			SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}Urmeaza punctul rosu pentru a incepe cursa.");
		}
	}
 
	return true;
}

CMD:debugquests(playerid)
{
	if(!Scripter(playerid))
		return false;

	SendMsg(playerid, COLOR_SERVER, "Daily Quests >> {ffffff}%d, %d, %d, %d, %d, %d, %d", DailyQuests[0], DailyQuests[1], DailyQuests[2], DailyQuests[3], DailyQuests[4], DailyQuests[5], 
		DailyQuests[6]);

	return true;
}

CMD:resetdailyquest(playerid)
{
	if(!Scripter(playerid))
		return false;

	PlayerInfo[playerid][pDailyQuestToday] = false;
	pUpdateInt(playerid, "DailyQuestToday", PlayerInfo[playerid][pDailyQuestToday]);

	SendMsg(playerid, COLOR_SERVER, "Reset Daily Quest >> {ffffff}Ti-ai resetat quest-ul zilnic.");

	return true;
}

CMD:setdailyquest(playerid, params[])
{
	if(!Scripter(playerid))
		return false;

	new
		questid
	;

	if(sscanf(params, "i", questid))
		return SendMsg(playerid, COLOR_SERVER, "Set Daily Quest >> {ffffff}/setdailyquest [questid]");

	if(questid < 1 || questid > 7)
		return SendMsg(playerid, COLOR_SERVER, "Set Daily Quest >> {ffffff}Quest invalid.(1 - 7)");

	TodayDailyQuest = questid;

	SendMsg(playerid, COLOR_SERVER, "Set Daily Quest >> {ffffff}Quest-ul zilnic este '%s'.", DailyQuestsName[TodayDailyQuest - 1]);

	return true;
}

CMD:secondsrace(playerid, params[])
{
	if(!Scripter(playerid))
		return false;

	if(!Iter_Contains(InRaceQuest, playerid))
		return SendMsg(playerid, COLOR_SERVER, "Seconds Race >> {ffffff}Nu esti in race.");

	new
		seconds
	;

	if(sscanf(params, "i", seconds))
		return SendMsg(playerid, COLOR_SERVER, "Seconds Race >> {ffffff}/secondsrace [seconds]");

	if(seconds < 1 || seconds > 610)
		return SendMsg(playerid, COLOR_SERVER, "Seconds Race >> {ffffff}Secunde invalide.(1 - 610)");

	RaceTime[playerid] = seconds;

	SendMsg(playerid, COLOR_SERVER, "Seconds Race >> {ffffff}Ti-ai setat %d secunde la race.", seconds);

	return true;
}

CMD:resetheists(playerid)
{	
	if(!Scripter(playerid))
		return false;

	for(new i = 0; i < 3; i ++)
	{
		if(PlayerInfo[playerid][pHeists][i] != false)
		{
			PlayerInfo[playerid][pHeists][i] = false;
		}
	}

	SendMsg(playerid, COLOR_SERVER, "Heists >> {ffffff}Ti-ai resetat Heist-urile.");

	return true;
}

CMD:progresstask(playerid, params[])
{
	if(!Scripter(playerid))
		return false;

	new
		amount
	;

	if(sscanf(params, "d", amount))
		return SendMsg(playerid, COLOR_SERVER, "Progress Task >> {ffffff}/progresstask [amount]");

	if(PlayerInfo[playerid][pTaskActual] < 1)
		return SendMsg(playerid, COLOR_SERVER, "Progress Task >> {ffffff}Nu ai un task actual.");

	ProgressToTask(playerid, PlayerInfo[playerid][pTaskActual], amount);

	return true;
}

CMD:progressbp(playerid, params[])
{
	if(!Scripter(playerid))
		return false;

	new
		amount
	;

	if(sscanf(params, "d", amount))
		return SendMsg(playerid, COLOR_SERVER, "Progress Battlepass >> {ffffff}/progressbp [amount]");

	PlayerInfo[playerid][pBattlepassXP] += amount;

	while(PlayerInfo[playerid][pBattlepassTier] < 50 && PlayerInfo[playerid][pBattlepassXP] >= BattlepassTierXP[PlayerInfo[playerid][pBattlepassTier] + 1])
	{
		PlayerInfo[playerid][pBattlepassTier] ++;

		GiveTierReward(playerid, PlayerInfo[playerid][pBattlepassTier]);
	}

	return true;
}

CMD:setvoucher(playerid, params[])
{
	if(!Scripter(playerid))
		return false;

	new
		type, amount
	;

	if(sscanf(params, "dd", type, amount))
		return SendMsg(playerid, COLOR_SERVER, "Set Voucher >> {ffffff}/setvoucher [type] [amount]");

	if(type < 0 || type > 4)
		return SendMsg(playerid, COLOR_SERVER, "Set Voucher >> {ffffff}Tipul de voucher este invalid.");

	if(amount < 0 || amount > 999)
		return SendMsg(playerid, COLOR_SERVER, "Set Voucher >> {ffffff}Cantiatea este invalida.");

	PlayerInfo[playerid][pVouchers][type] = amount;

	new
		Names[5][10] = {"Normal", "Epic", "Premium", "Legendary", "OG"}
	;

	SendMsg(playerid, COLOR_SERVER, "Set Voucher >> {ffffff}Ti-ai setat %d vouchere de tip %s.", amount, Names[type]);

	return true;
}

CMD:resetstaffraport(playerid)
{
	if(!Scripter(playerid))
		return false;

	Query_Mysql("update users set HelpedPlayers = 0 where HelpedPlayers <> 0");
	Query_Mysql("update users set PanelActivityL7 = '0|0|0' where PanelActivityL7 <> '0|0|0'");

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && Logat[i])
		{		
			if(PlayerInfo[i][pHelpedPlayers] != 0)
			{
				PlayerInfo[i][pHelpedPlayers] = 0;
			}
		}
	}

	SendMsg(playerid, COLOR_SERVER, "Reset Staff Raport >> {ffffff}Ai resetat raportul tuturor din staff.");

	return true;
}

CMD:givestaffsalary(playerid)
{
	if(!Scripter(playerid))
		return false;

	/*
		Admin - 250kk si 30 PP
		Helper 150kk si 20 PP
		Lider - 250kk si 10 PP
	*/

	Query_Mysql("update users set Money = Money + 250000000, PremiumPoints = PremiumPoints + 30 where Admin <> 0 and StaffWarns = 0");
	Query_Mysql("update users set Money = Money + 150000000, PremiumPoints = PremiumPoints + 20 where Helper <> 0 and StaffWarns = 0");
	Query_Mysql("update users set Money = Money + 250000000, PremiumPoints = PremiumPoints + 10 where Rank = 7 and StaffWarns = 0");

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && Logat[i])
		{		
			if(PlayerInfo[i][pAdmin] != 0)
			{
				if(PlayerInfo[i][pStaffWarns] < 1)
				{
					GivePlayerCash(i, 250_000_000);

					PlayerInfo[i][pPremiumPoints] += 30;

					SendMsg(i, COLOR_SERVER, "Staff Salary >> {ffffff}Ai primit $250,000,000 si 30PP deoarece esti Admin.");
				}
				else
				{
					SendMsg(i, COLOR_SERVER, "Staff Salary >> {ffffff}Nu ai primit salariul deoarece ai staff warn-uri.");
				}
			}

			if(PlayerInfo[i][pHelper] != 0)
			{
				if(PlayerInfo[i][pStaffWarns] < 1)
				{
					GivePlayerCash(i, 150_000_000);

					PlayerInfo[i][pPremiumPoints] += 20;

					SendMsg(i, COLOR_SERVER, "Staff Salary >> {ffffff}Ai primit $150,000,000 si 20PP deoarece esti Helper.");
				}
				else
				{
					SendMsg(i, COLOR_SERVER, "Staff Salary >> {ffffff}Nu ai primit salariul deoarece ai staff warn-uri.");
				}
			}

			if(PlayerInfo[i][pRank] == 7)
			{
				if(PlayerInfo[i][pStaffWarns] < 1)
				{
					GivePlayerCash(i, 250_000_000);

					PlayerInfo[i][pPremiumPoints] += 10;

					SendMsg(i, COLOR_SERVER, "Staff Salary >> {ffffff}Ai primit $250,000,000 si 10PP deoarece esti Lider.");
				}
				else
				{
					SendMsg(i, COLOR_SERVER, "Staff Salary >> {ffffff}Nu ai primit salariul deoarece ai staff warn-uri.");
				}
			}
		}
	}

	SendMsg(playerid, COLOR_SERVER, "Give Staff Salary >> {ffffff}Ai dat salariul staff-ului.");

	return true;
}

CMD:staff(playerid)
{
	if(PlayerInfo[playerid][pAdmin] < 5)
		return SendMsg(playerid, COLOR_SERVER, "Staff >> {ffffff}Nu ai admin 5.");

	SPD(playerid, DIALOG_STAFF, DIALOG_STYLE_LIST, "Staff", "Admini\nHelperi\nLideri", "Alege", "Anuleaza");

	return true;
}

CMD:turejobtoday(playerid, params[])
{
	if(!Scripter(playerid))
		return false;

	new
		ture
	;

	if(sscanf(params, "d", ture))
		return SendMsg(playerid, COLOR_SERVER, "Ture Job Today >> {ffffff}/turejobtoday [ture]");

	TureJobToday[playerid] = ture;

	SendMsg(playerid, COLOR_SERVER, "Ture Job Today >> {ffffff}Ti-ai setat %d ture la job.", ture);

	return true;
}

CMD:moveclanhq(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
		return SendMsg(playerid, COLOR_SERVER, "Move Clan HQ >> {ffffff}Ai nevoie de admin 6.");

	new
		id
	;

	if(sscanf(params, "d", id))
		return SendMsg(playerid, COLOR_SERVER, "Move Clan HQ >> {ffffff}/moveclanhq [id]");

	new
		cID = -1
	;

	for(new i = 0; i < MAX_CLANS; i++)
	{
		if(ClanHQs[i][cOwnerID] == id)
		{
			cID = i;
		}
	}

	if(cID == -1)
		return SendMsg(playerid, COLOR_SERVER, "Move Clan HQ >> {ffffff}Acel clan nu are un hq.");

	new
		Float: X,
		Float: Y,
		Float: Z
	;

	GetPlayerPos(playerid, X, Y, Z);

	ClanHQs[cID][cX] = X;
	ClanHQs[cID][cY] = Y;
	ClanHQs[cID][cZ] = Z;

	Query_Mysql("update clanhqs set x = %0.2f, y = %0.2f, z = %0.2f where ownerid = %d", X, Y, Z, id);

	UpdateLabel(5, cID);

	SendMsg(playerid, COLOR_SERVER, "Move Clan HQ >> {ffffff}Ai mutat HQ-ul clanului %d.", id);

	return true;
}

CMD:moveclangarage(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
		return SendMsg(playerid, COLOR_SERVER, "Move Clan Garage >> {ffffff}Ai nevoie de admin 6");

	new
		c
	;

	if(sscanf(params, "d", c))
		return SendMsg(playerid, COLOR_SERVER, "Move Clan Garage >> {ffffff}/moveclangarage [id]");

	if(ClanInfo[c][cGarageX] == 0)
		return SendMsg(playerid, COLOR_SERVER, "Move Clan Garage >> {ffffff}Clanul %d nu are un garaj.", c);

	new
		Float: X,
		Float: Y,
		Float: Z
	;

	GetPlayerPos(playerid, X, Y, Z);

	ClanInfo[c][cGarageX] = X;
	ClanInfo[c][cGarageY] = Y;
	ClanInfo[c][cGarageZ] = Z;
	Query_Mysql("UPDATE `clans` SET `clanGarageX` = '%0.2f', `clanGarageY` = '%0.2f', `clanGarageZ` = '%0.2f' WHERE `clanID` = '%d'", X, Y, Z, ClanInfo[c][clanID]);
	DestroyDynamicPickup(ClanInfo[c][cGaragePickup]);
	UpdateDynamic3DTextLabelText(ClanInfo[c][cGarageLabel], -1, " ");
	DestroyDynamic3DTextLabel(ClanInfo[c][cGarageLabel]);
	new Text[128];
	format(Text, 128, "Creare Vehicul De Clan(%s)\n{ffffff}Apasa tasta {00a326}Y", ClanInfo[c][clanName]);
	ClanInfo[c][cGarageLabel] = CreateStreamed3DTextLabel(Text, COLOR_SERVER, X, Y, Z, 8.0, 0, 0);
	ClanInfo[c][cGaragePickup] = CreateDynamicPickup(19133, 1, X, Y, Z);
	if(ClanGarageArea[c])
	{
		DestroyDynamicArea2(ClanGarageArea[c]);
	}
	ClanGarageArea[c] = CreateDynamicSphere2(11, c, X, Y, Z, 1, 0, 0);

	SendMsg(playerid, COLOR_SERVER, "Move Clan Garage >> {ffffff}Ai mutat garajul clanului %d.", c);

	return true;
}

CMD:payday(playerid)
{
	if(!Scripter(playerid))
		return false;

	foreach(new i : Player)
	{
		PayDay(i);
	}

	return true;
}

CMD:gotohunt(playerid, params[])
{
	if(!Scripter(playerid))
		return false;

	new
		id
	;

	if(sscanf(params, "i", id))
		return SendMsg(playerid, COLOR_SERVER, "Goto Hunt >> {ffffff}/gotohunt [id]");

	if(id < 0 || id > 99)
		return SendMsg(playerid, COLOR_SERVER, "Goto Hunt >> {ffffff}Id-ul este invalid.");

	SetPlayerPosEx(playerid, GiftHuntPos[id][0], GiftHuntPos[id][1], GiftHuntPos[id][2]);

	return true;
}

CMD:givevehicle(playerid, params[])
{
	if(!Scripter(playerid))
		return false;

	new
		id, model
	;

	if(sscanf(params, "ui", id, model))
		return SendMsg(playerid, COLOR_SERVER, "Give Vehicle >> {ffffff}/givevehicle [id] [model]");

	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id) || Logat[id] != true)
		return SendMsg(playerid, COLOR_SERVER, "Give Vehicle >> {ffffff}Jucatorul este invalid.");

	InsertVehicle(id, 0, false, false, model);

	SendMsg(playerid, COLOR_SERVER, "Give Vehicle >> {ffffff}I-ai dat lui %s un %s.", GetName(id), GetVehicleName(model));
	SendMsg(id, COLOR_SERVER, "Give Vehicle >> {ffffff}%s ti-a dat un %s.", GetName(playerid), GetVehicleName(model));

	return true;
}

CMD:gifthuntrewards(playerid)
{
	gString[0] = (EOS);

	strcat(gString, "Pentru fiecare cadou gasit primesti $5,000,000.\n");
	strcat(gString, "Top 3 cu cele mai multe cadouri adunate are niste premii aditionale:\n");
	strcat(gString, "Locul 1 - Vehicul de tip Stretch\n");
	strcat(gString, "Locul 2 - Vehicul de tip NRG-500\n");
	strcat(gString, "Locul 3 - Vehicul de tip Elegy\n");
	strcat(gString, "Castigatorii sunt determinati atunci cand toate cadourile au fost gasite");

	SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Gift Hunt Rewards", gString, "Anuleaza", "");
	return true;
}

function GiveHuntPrizes()
{
	if(cache_num_rows())
	{
		gString[0] = (EOS);

		for(new i = 0; i < cache_num_rows(); i++)
		{
			new
				Name[MAX_PLAYER_NAME + 1],
				UserID,
				Luate = 0
			;

			cache_get_value_name(i, "name", Name);
			cache_get_value_name_int(i, "HuntCollected", Luate);
			cache_get_value_name_int(i, "UserID", UserID);

			Query_Mysql("update users set PrizeToCollect = %d where name = '%s'", i + 1, Name);

			va_SendClientMessageToAll(COLOR_SERVER, "Gift Hunt >> {ffffff}%s a obtinut locul %d si a fost premiat.", Name, i + 1);

			if(UserID != 65535)
			{
				if(IsPlayerConnected(UserID) && strmatch(GetName(UserID), Name))
				{
					switch(i + 1)
					{
						case 1:
						{
							SendMsg(UserID, COLOR_SERVER, "Gift Hunt >> {ffffff}Ai primit un Stretch deoarece obtinut locul 1.");

							InsertVehicle(UserID, 0, true, false, 409);
						}
						case 2:
						{
							SendMsg(UserID, COLOR_SERVER, "Gift Hunt >> {ffffff}Ai primit un NRG-500 deoarece obtinut locul 2.");

							InsertVehicle(UserID, 60, true);
						}
						case 3:
						{
							SendMsg(UserID, COLOR_SERVER, "Gift Hunt >> {ffffff}Ai primit un Elegy deoarece obtinut locul 3.");

							InsertVehicle(UserID, 54, true);
						}
					}

					PlayerInfo[UserID][pPrizeToCollect] = 0;
					pUpdateInt(UserID, "PrizeToCollect", PlayerInfo[UserID][pPrizeToCollect]);
				}
			}
		}
	}
	else
	{
		printf("S-a produs o eroare la give hunt prizes.");
	}

	return true;
}

function ShowGiftHuntList(playerid, session)
{
	if(PlayerInfo[playerid][pSession] != session)
		return true;

	if(cache_num_rows())
	{
		gString[0] = (EOS);

		for(new i = 0; i < cache_num_rows(); i++)
		{
			new
				Name[MAX_PLAYER_NAME + 1],
				Luate = 0
			;

			cache_get_value_name(i, "name", Name);
			cache_get_value_name_int(i, "HuntCollected", Luate);

			format(gString, 256, "%s\n%s - %d cadouri adunate", gString, Name, Luate);
		}

		SPD(playerid, DIALOG_GOL, DIALOG_STYLE_LIST, "Gift Hunt List", gString, "Iesi", "");
	}
	else
	{
		SendMsg(playerid, COLOR_SERVER, "Gift Hunt List >> {ffffff}Nu exista jucatori care au colectat cadouri.");
	}

	return true;
}

CMD:gifthuntlist(playerid)
{
	mysql_tquery(SQL, "SELECT * FROM `users` WHERE HuntCollected <> 0 ORDER BY `users`.`HuntCollected` DESC limit 3", "ShowGiftHuntList", "id",
		playerid, PlayerInfo[playerid][pSession]);
	
	return true;
}

CMD:premiuminfo(playerid)
{
	gString[0] = (EOS);

	strcat(gString, "- acces la comanda [/pcolor]\n");
	strcat(gString, "- un vehicul de tip 'Sandking' stock\n");
	strcat(gString, "- 5% permanent jobboost\n");
	strcat(gString, "- achizitionarea de vouchere se face cu 1% reducere\n");
	strcat(gString, "- primesti un 'Basic Crate' in fiecare zi");

	SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Premium Info", gString, "Iesi", "");

	return true;
}

CMD:vipinfo(playerid)
{
	gString[0] = (EOS);

	strcat(gString, "- 2x RP la jumatate din payday-uri\n");
	strcat(gString, "- 1 Vehicle Slot\n");
	strcat(gString, "- 1 Hidden Color\n");
	strcat(gString, "- acces la [/flip]\n");
	strcat(gString, "- acces la [/nos]\n");
	strcat(gString, "- acces la [/find] fara 'Detective'\n");
	strcat(gString, "- premii cu 50% mai mari la Gift\n");
	strcat(gString, "- poti da [/ad] de unde vrei");

	SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Vip Info", gString, "Iesi", "");

	return true;
}

CMD:givegifthuntrewards(playerid)
{
	if(!Scripter(playerid))
		return false;

	mysql_tquery(SQL, "SELECT * FROM `users` WHERE HuntCollected <> 0 ORDER BY `users`.`HuntCollected` DESC limit 3", "GiveHuntPrizes");

	return true;
}

CMD:supremeinfo(playerid)
{
	gString[0] = (EOS);

	strcat(gString, "- 2x RP & bani la toate payday-urile\n");
	strcat(gString, "- acces din 10 in 10 minute la [/healme]\n");
	strcat(gString, "- acces la [/fv]\n");
	strcat(gString, "- iti poti da [/feedme] o data pe zi\n");
	strcat(gString, "- Supreme Crate");

	SPD(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Supreme Info", gString, "Iesi", "");

	return true;
}

CMD:bizmenu(playerid)
{
	if(PlayerInfo[playerid][pBizz] == 0)
		return SendMsg(playerid, COLOR_SERVER, "Biz Menu >> {ffffff}Nu ai o afacere.");

	SPD(playerid, DIALOG_BIZMENU, DIALOG_STYLE_LIST, "Biz Menu", "Balanta\nRetrage\nSeteaza intrare\nPune la vanzare\nVinde la stat", "Alege", "Anuleaza");

	return true;
}

CMD:housemenu(playerid)
{
	if(PlayerInfo[playerid][pHouse] == 0)
		return SendMsg(playerid, COLOR_SERVER, "House Menu >> {ffffff}Nu ai o casa.");

	SPD(playerid, DIALOG_HOUSEMENU, DIALOG_STYLE_LIST, "House Menu", "Balanta\nRetrage\nSeteaza chiria\nChiriasi\nEvacueaza chiriasii\nCumpara garaj - 500 PP\nMuta garaj\nIncuie/Descuie garaj\nPune la vanzare\nVinde la stat", "Alege", "Anuleaza");

	return true;
}

function ExitMySkins(playerid)
{
	InTextdrawMenu[playerid] = 0;

	CancelSelectTextDraw(playerid);

	for(new i = 0; i < sizeof(MySkinsTD); i++)
	{
		TextDrawHideForPlayer(playerid, MySkinsTD[i]);
	}

	for(new i = 0; i < sizeof(MySkinsPTD); i++)
	{
		PlayerTextDrawHide(playerid, MySkinsPTD[i]);
	}

	MySkinsSlot[playerid] = 0;

	return true;
}

function UpdateMySkins(playerid, slot)
{
	MySkinsSlot[playerid] = slot;

	new 
		Colors[5] = {0, 0x626e78ff, 0xe69305ff, 0x6716a1ff, 0xe5e815ff},
		ToSkip = -1
	;

	if(slot == 0)
	{
		ToSkip = 0;
	}
	else if(slot == PlayerInfo[playerid][pSkinSlots] - 1)
	{
		ToSkip = 2;
	}

	for(new i = 0; i < sizeof(MySkinsPTD); i++)
	{
		if(i == ToSkip)
		{
			PlayerTextDrawHide(playerid, MySkinsPTD[i]);
			continue;
		}

		new
			Skin = PlayerInfo[playerid][pSkins][slot + i - 1],
			Raritate = SkinRarity(Skin),
			CuloareRaritate = Colors[Raritate]
		;

		PlayerTextDrawBackgroundColor(playerid, MySkinsPTD[i], CuloareRaritate);
		PlayerTextDrawSetPreviewModel(playerid, MySkinsPTD[i], Skin);
		PlayerTextDrawShow(playerid, MySkinsPTD[i]);
	}

	return true;
}

CMD:myskins(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendMsg(playerid, COLOR_SERVER, "My Skins >> {ffffff}Nu poti folosi aceasta comanda dintr-un vehicul.");

	for(new i = 0; i < sizeof(MySkinsTD); i++)
	{
		TextDrawShowForPlayer(playerid, MySkinsTD[i]);
	}

	UpdateMySkins(playerid, 0);

	InTextdrawMenu[playerid] = 21;

	SelectTextDraw(playerid, HOVER_COLOR);

	return true;
}

function UpdateStatusLabel(playerid)
{
	new
		LabelString[128],
		/*
			-Admin: culoarea admins chat
			-Helper: culoarea helpers chat
			-Leader: culoarea factiunii lor
			-Faction + Rank: culoarea factiunii lor
			-Level: Alb
			-Veteran: #259c45
			-Businessmen: #b8251d
			-Premium User: culoarea de la /pc
			-VIP User: culoarea de la VIP Chat
			-Supreme User: #0ec9c3
			-Job Master: #8b0b99
		*/
		LabelColors[12][7] = {"", "ebcc34", "c46500", "", "", "ffffff", "259c45", "b8251d", "C2A2DA", "C2A2DA", "0ec9c3", "8b0b99"},
		Faction = PlayerInfo[playerid][pMember],
		PrimaryStatus = PlayerInfo[playerid][pActiveStatus][0],
		SecondaryStatus = PlayerInfo[playerid][pActiveStatus][1],
		AdminLevel = PlayerInfo[playerid][pAdmin],
		HelperLevel = PlayerInfo[playerid][pHelper],
		FactionRank = PlayerInfo[playerid][pRank],
		Level = PlayerInfo[playerid][pLevel],
		LabelNames1[12][100] = {"", "", "", "", "", "", "Veteran", "Businessmen", "Premium User", "VIP User", "Supreme User", ""},
		LabelNames2[12][100] = {"", "", "", "", "", "", "Veteran", "Businessmen", "Premium User", "VIP User", "Supreme User", ""}
	;

	if(PrimaryStatus == 0)
		return true;

	format(LabelColors[3], 7, "%s", FactionColors[Faction]);
	format(LabelColors[4], 7, "%s", FactionColors[Faction]);

	format(LabelNames1[1], 16, "Admin %d", AdminLevel);
	format(LabelNames1[2], 16, "Helper %d", HelperLevel);
	format(LabelNames1[3], 64, "Leader %s", FactionName(Faction));
	format(LabelNames1[4], 64, "%s Rank %d", FactionName(Faction), FactionRank);
	format(LabelNames1[5], 16, "Level %d", Level);

	if(PlayerInfo[playerid][pActiveStatus][0] > 15)
	{
		new
			JobID = PlayerInfo[playerid][pActiveStatus][0] - 15
		;

		format(LabelNames1[11], 32, "%s Master", JobInfo[JobID][jName]);

		PrimaryStatus = 11;
	}

	LabelNames2 = LabelNames1;

	if(PlayerInfo[playerid][pActiveStatus][1] > 15)
	{
		new
			JobID = PlayerInfo[playerid][pActiveStatus][1] - 15
		;

		format(LabelNames2[11], 32, "%s Master", JobInfo[JobID][jName]);

		SecondaryStatus = 11;
	}

	if(SecondaryStatus == 0)
	{
		format(LabelString, sizeof(LabelString), "{%s}%s", 
			LabelColors[PrimaryStatus], LabelNames1[PrimaryStatus]);
	}
	else
	{
		format(LabelString, sizeof(LabelString), "{%s}%s                   {%s}%s", 
			LabelColors[PrimaryStatus], LabelNames1[PrimaryStatus], LabelColors[SecondaryStatus], LabelNames2[SecondaryStatus]);
	}

	if(StatusLabel[playerid] == INVALID_3DTEXT_ID)
	{
		StatusLabel[playerid] = Create3DTextLabel(LabelString, -1, 0, 0, 0, 30.0, -1);
		Attach3DTextLabelToPlayer(StatusLabel[playerid], playerid, 0.0, 0.0, 0.7);
	}
	else
	{
		Update3DTextLabelText(StatusLabel[playerid], -1, LabelString);
	}

 	return true;
}

CMD:status(playerid)
{
	SPD(playerid, DIALOG_STATUSES, DIALOG_STYLE_LIST, "Statuses", "Primary status\nSecondary status", "Alege", "Anuleaza");

	return true;
}

CMD:resetturfs(playerid)
{
	if(!Scripter(playerid))
		return false;

	ResetTurfs();

	return true;
}

AntiDeAMX()
{
	new
		a[][] =
		{
			"Unarmed (Fist)",
			"Brass K"
		}
	;

	#pragma unused a
}